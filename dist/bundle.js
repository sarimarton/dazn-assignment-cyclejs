!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=49)}([function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var o=r(50),i={};function a(){}function s(t){for(var e=t.length,r=Array(e),n=0;n<e;++n)r[n]=t[n];return r}function u(t,e,r){try{return t.f(e)}catch(t){return r._e(t),i}}e.NO=i;var c={_n:a,_e:a,_c:a};function f(t){t._start=function(t){t.next=t._n,t.error=t._e,t.complete=t._c,this.start(t)},t._stop=t.stop}e.NO_IL=c;var l=function(){function t(t,e){this._stream=t,this._listener=e}return t.prototype.unsubscribe=function(){this._stream._remove(this._listener)},t}(),p=function(){function t(t){this._listener=t}return t.prototype.next=function(t){this._listener._n(t)},t.prototype.error=function(t){this._listener._e(t)},t.prototype.complete=function(){this._listener._c()},t}(),h=function(){function t(t){this.type="fromObservable",this.ins=t,this.active=!1}return t.prototype._start=function(t){this.out=t,this.active=!0,this._sub=this.ins.subscribe(new p(t)),this.active||this._sub.unsubscribe()},t.prototype._stop=function(){this._sub&&this._sub.unsubscribe(),this.active=!1},t}(),d=function(){function t(t){this.type="merge",this.insArr=t,this.out=i,this.ac=0}return t.prototype._start=function(t){this.out=t;var e=this.insArr,r=e.length;this.ac=r;for(var n=0;n<r;n++)e[n]._add(this)},t.prototype._stop=function(){for(var t=this.insArr,e=t.length,r=0;r<e;r++)t[r]._remove(this);this.out=i},t.prototype._n=function(t){var e=this.out;e!==i&&e._n(t)},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){if(--this.ac<=0){var t=this.out;if(t===i)return;t._c()}},t}(),y=function(){function t(t,e,r){this.i=t,this.out=e,this.p=r,r.ils.push(this)}return t.prototype._n=function(t){var e=this.p,r=this.out;if(r!==i&&e.up(t,this.i)){for(var n=e.vals,o=n.length,a=Array(o),s=0;s<o;++s)a[s]=n[s];r._n(a)}},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.p;t.out!==i&&0==--t.Nc&&t.out._c()},t}(),v=function(){function t(t){this.type="combine",this.insArr=t,this.out=i,this.ils=[],this.Nc=this.Nn=0,this.vals=[]}return t.prototype.up=function(t,e){var r=this.vals[e],n=this.Nn?r===i?--this.Nn:this.Nn:0;return this.vals[e]=t,0===n},t.prototype._start=function(t){this.out=t;var e=this.insArr,r=this.Nc=this.Nn=e.length,n=this.vals=new Array(r);if(0===r)t._n([]),t._c();else for(var o=0;o<r;o++)n[o]=i,e[o]._add(new y(o,t,this))},t.prototype._stop=function(){for(var t=this.insArr,e=t.length,r=this.ils,n=0;n<e;n++)t[n]._remove(r[n]);this.out=i,this.ils=[],this.vals=[]},t}(),m=function(){function t(t){this.type="fromArray",this.a=t}return t.prototype._start=function(t){for(var e=this.a,r=0,n=e.length;r<n;r++)t._n(e[r]);t._c()},t.prototype._stop=function(){},t}(),b=function(){function t(t){this.type="fromPromise",this.on=!1,this.p=t}return t.prototype._start=function(t){var e=this;this.on=!0,this.p.then(function(r){e.on&&(t._n(r),t._c())},function(e){t._e(e)}).then(a,function(t){setTimeout(function(){throw t})})},t.prototype._stop=function(){this.on=!1},t}(),g=function(){function t(t){this.type="periodic",this.period=t,this.intervalID=-1,this.i=0}return t.prototype._start=function(t){var e=this;this.intervalID=setInterval(function(){t._n(e.i++)},this.period)},t.prototype._stop=function(){-1!==this.intervalID&&clearInterval(this.intervalID),this.intervalID=-1,this.i=0},t}(),_=function(){function t(t,e){this.type="debug",this.ins=t,this.out=i,this.s=a,this.l="","string"==typeof e?this.l=e:"function"==typeof e&&(this.s=e)}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=i},t.prototype._n=function(t){var e=this.out;if(e!==i){var r=this.s,n=this.l;if(r!==a)try{r(t)}catch(t){e._e(t)}else n?console.log(n+":",t):console.log(t);e._n(t)}},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==i&&t._c()},t}(),w=function(){function t(t,e){this.type="drop",this.ins=e,this.out=i,this.max=t,this.dropped=0}return t.prototype._start=function(t){this.out=t,this.dropped=0,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=i},t.prototype._n=function(t){var e=this.out;e!==i&&this.dropped++>=this.max&&e._n(t)},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==i&&t._c()},t}(),O=function(){function t(t,e){this.out=t,this.op=e}return t.prototype._n=function(){this.op.end()},t.prototype._e=function(t){this.out._e(t)},t.prototype._c=function(){this.op.end()},t}(),j=function(){function t(t,e){this.type="endWhen",this.ins=e,this.out=i,this.o=t,this.oil=c}return t.prototype._start=function(t){this.out=t,this.o._add(this.oil=new O(t,this)),this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.o._remove(this.oil),this.out=i,this.oil=c},t.prototype.end=function(){var t=this.out;t!==i&&t._c()},t.prototype._n=function(t){var e=this.out;e!==i&&e._n(t)},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){this.end()},t}(),E=function(){function t(t,e){this.type="filter",this.ins=e,this.out=i,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=i},t.prototype._n=function(t){var e=this.out;if(e!==i){var r=u(this,t,e);r!==i&&r&&e._n(t)}},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==i&&t._c()},t}(),x=function(){function t(t,e){this.out=t,this.op=e}return t.prototype._n=function(t){this.out._n(t)},t.prototype._e=function(t){this.out._e(t)},t.prototype._c=function(){this.op.inner=i,this.op.less()},t}(),T=function(){function t(t){this.type="flatten",this.ins=t,this.out=i,this.open=!0,this.inner=i,this.il=c}return t.prototype._start=function(t){this.out=t,this.open=!0,this.inner=i,this.il=c,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.inner!==i&&this.inner._remove(this.il),this.out=i,this.open=!0,this.inner=i,this.il=c},t.prototype.less=function(){var t=this.out;t!==i&&(this.open||this.inner!==i||t._c())},t.prototype._n=function(t){var e=this.out;if(e!==i){var r=this.inner,n=this.il;r!==i&&n!==c&&r._remove(n),(this.inner=t)._add(this.il=new x(e,this))}},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){this.open=!1,this.less()},t}(),S=function(){function t(t,e,r){var n=this;this.type="fold",this.ins=r,this.out=i,this.f=function(e){return t(n.acc,e)},this.acc=this.seed=e}return t.prototype._start=function(t){this.out=t,this.acc=this.seed,t._n(this.acc),this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=i,this.acc=this.seed},t.prototype._n=function(t){var e=this.out;if(e!==i){var r=u(this,t,e);r!==i&&e._n(this.acc=r)}},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==i&&t._c()},t}(),A=function(){function t(t){this.type="last",this.ins=t,this.out=i,this.has=!1,this.val=i}return t.prototype._start=function(t){this.out=t,this.has=!1,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=i,this.val=i},t.prototype._n=function(t){this.has=!0,this.val=t},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==i&&(this.has?(t._n(this.val),t._c()):t._e(new Error("last() failed because input stream completed")))},t}(),k=function(){function t(t,e){this.type="map",this.ins=e,this.out=i,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=i},t.prototype._n=function(t){var e=this.out;if(e!==i){var r=u(this,t,e);r!==i&&e._n(r)}},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==i&&t._c()},t}(),P=function(){function t(t){this.type="remember",this.ins=t,this.out=i}return t.prototype._start=function(t){this.out=t,this.ins._add(t)},t.prototype._stop=function(){this.ins._remove(this.out),this.out=i},t}(),C=function(){function t(t,e){this.type="replaceError",this.ins=e,this.out=i,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=i},t.prototype._n=function(t){var e=this.out;e!==i&&e._n(t)},t.prototype._e=function(t){var e=this.out;if(e!==i)try{this.ins._remove(this),(this.ins=this.f(t))._add(this)}catch(t){e._e(t)}},t.prototype._c=function(){var t=this.out;t!==i&&t._c()},t}(),N=function(){function t(t,e){this.type="startWith",this.ins=t,this.out=i,this.val=e}return t.prototype._start=function(t){this.out=t,this.out._n(this.val),this.ins._add(t)},t.prototype._stop=function(){this.ins._remove(this.out),this.out=i},t}(),I=function(){function t(t,e){this.type="take",this.ins=e,this.out=i,this.max=t,this.taken=0}return t.prototype._start=function(t){this.out=t,this.taken=0,this.max<=0?t._c():this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=i},t.prototype._n=function(t){var e=this.out;if(e!==i){var r=++this.taken;r<this.max?e._n(t):r===this.max&&(e._n(t),e._c())}},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==i&&t._c()},t}(),$=function(){function t(t){this._prod=t||i,this._ils=[],this._stopID=i,this._dl=i,this._d=!1,this._target=i,this._err=i}return t.prototype._n=function(t){var e=this._ils,r=e.length;if(this._d&&this._dl._n(t),1==r)e[0]._n(t);else{if(0==r)return;for(var n=s(e),o=0;o<r;o++)n[o]._n(t)}},t.prototype._e=function(t){if(this._err===i){this._err=t;var e=this._ils,r=e.length;if(this._x(),this._d&&this._dl._e(t),1==r)e[0]._e(t);else{if(0==r)return;for(var n=s(e),o=0;o<r;o++)n[o]._e(t)}if(!this._d&&0==r)throw this._err}},t.prototype._c=function(){var t=this._ils,e=t.length;if(this._x(),this._d&&this._dl._c(),1==e)t[0]._c();else{if(0==e)return;for(var r=s(t),n=0;n<e;n++)r[n]._c()}},t.prototype._x=function(){0!==this._ils.length&&(this._prod!==i&&this._prod._stop(),this._err=i,this._ils=[])},t.prototype._stopNow=function(){this._prod._stop(),this._err=i,this._stopID=i},t.prototype._add=function(t){var e=this._target;if(e!==i)return e._add(t);var r=this._ils;if(r.push(t),!(r.length>1))if(this._stopID!==i)clearTimeout(this._stopID),this._stopID=i;else{var n=this._prod;n!==i&&n._start(this)}},t.prototype._remove=function(t){var e=this,r=this._target;if(r!==i)return r._remove(t);var n=this._ils,o=n.indexOf(t);o>-1&&(n.splice(o,1),this._prod!==i&&n.length<=0?(this._err=i,this._stopID=setTimeout(function(){return e._stopNow()})):1===n.length&&this._pruneCycles())},t.prototype._pruneCycles=function(){this._hasNoSinks(this,[])&&this._remove(this._ils[0])},t.prototype._hasNoSinks=function(t,e){if(-1!==e.indexOf(t))return!0;if(t.out===this)return!0;if(t.out&&t.out!==i)return this._hasNoSinks(t.out,e.concat(t));if(t._ils){for(var r=0,n=t._ils.length;r<n;r++)if(!this._hasNoSinks(t._ils[r],e.concat(t)))return!1;return!0}return!1},t.prototype.ctor=function(){return this instanceof D?D:t},t.prototype.addListener=function(t){t._n=t.next||a,t._e=t.error||a,t._c=t.complete||a,this._add(t)},t.prototype.removeListener=function(t){this._remove(t)},t.prototype.subscribe=function(t){return this.addListener(t),new l(this,t)},t.prototype[o.default]=function(){return this},t.create=function(e){if(e){if("function"!=typeof e.start||"function"!=typeof e.stop)throw new Error("producer requires both start and stop functions");f(e)}return new t(e)},t.createWithMemory=function(t){return t&&f(t),new D(t)},t.never=function(){return new t({_start:a,_stop:a})},t.empty=function(){return new t({_start:function(t){t._c()},_stop:a})},t.throw=function(e){return new t({_start:function(t){t._e(e)},_stop:a})},t.from=function(e){if("function"==typeof e[o.default])return t.fromObservable(e);if("function"==typeof e.then)return t.fromPromise(e);if(Array.isArray(e))return t.fromArray(e);throw new TypeError("Type of input to from() must be an Array, Promise, or Observable")},t.of=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return t.fromArray(e)},t.fromArray=function(e){return new t(new m(e))},t.fromPromise=function(e){return new t(new b(e))},t.fromObservable=function(e){if(e.endWhen)return e;var r="function"==typeof e[o.default]?e[o.default]():e;return new t(new h(r))},t.periodic=function(e){return new t(new g(e))},t.prototype._map=function(t){return new(this.ctor())(new k(t,this))},t.prototype.map=function(t){return this._map(t)},t.prototype.mapTo=function(t){var e=this.map(function(){return t});return e._prod.type="mapTo",e},t.prototype.filter=function(e){var r=this._prod;return new t(r instanceof E?new E(function(t,e){return function(r){return t(r)&&e(r)}}(r.f,e),r.ins):new E(e,this))},t.prototype.take=function(t){return new(this.ctor())(new I(t,this))},t.prototype.drop=function(e){return new t(new w(e,this))},t.prototype.last=function(){return new t(new A(this))},t.prototype.startWith=function(t){return new D(new N(this,t))},t.prototype.endWhen=function(t){return new(this.ctor())(new j(t,this))},t.prototype.fold=function(t,e){return new D(new S(t,e,this))},t.prototype.replaceError=function(t){return new(this.ctor())(new C(t,this))},t.prototype.flatten=function(){this._prod;return new t(new T(this))},t.prototype.compose=function(t){return t(this)},t.prototype.remember=function(){return new D(new P(this))},t.prototype.debug=function(t){return new(this.ctor())(new _(this,t))},t.prototype.imitate=function(t){if(t instanceof D)throw new Error("A MemoryStream was given to imitate(), but it only supports a Stream. Read more about this restriction here: https://github.com/staltz/xstream#faq");this._target=t;for(var e=this._ils,r=e.length,n=0;n<r;n++)t._add(e[n]);this._ils=[]},t.prototype.shamefullySendNext=function(t){this._n(t)},t.prototype.shamefullySendError=function(t){this._e(t)},t.prototype.shamefullySendComplete=function(){this._c()},t.prototype.setDebugListener=function(t){t?(this._d=!0,t._n=t.next||a,t._e=t.error||a,t._c=t.complete||a,this._dl=t):(this._d=!1,this._dl=i)},t.merge=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return new t(new d(e))},t.combine=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return new t(new v(e))},t}();e.Stream=$;var D=function(t){function e(e){var r=t.call(this,e)||this;return r._has=!1,r}return n(e,t),e.prototype._n=function(e){this._v=e,this._has=!0,t.prototype._n.call(this,e)},e.prototype._add=function(t){var e=this._target;if(e!==i)return e._add(t);var r=this._ils;if(r.push(t),r.length>1)this._has&&t._n(this._v);else if(this._stopID!==i)this._has&&t._n(this._v),clearTimeout(this._stopID),this._stopID=i;else if(this._has)t._n(this._v);else{var n=this._prod;n!==i&&n._start(this)}},e.prototype._stopNow=function(){this._has=!1,t.prototype._stopNow.call(this)},e.prototype._x=function(){this._has=!1,t.prototype._x.call(this)},e.prototype.map=function(t){return this._map(t)},e.prototype.mapTo=function(e){return t.prototype.mapTo.call(this,e)},e.prototype.take=function(e){return t.prototype.take.call(this,e)},e.prototype.endWhen=function(e){return t.prototype.endWhen.call(this,e)},e.prototype.replaceError=function(e){return t.prototype.replaceError.call(this,e)},e.prototype.remember=function(){return this},e.prototype.debug=function(e){return t.prototype.debug.call(this,e)},e}($);e.MemoryStream=D;var M=$;e.default=M},function(t,e,r){"use strict";(function(t){function r(){var e;return(e="undefined"!=typeof window?window:void 0!==t?t:this).Cyclejs=e.Cyclejs||{},(e=e.Cyclejs).adaptStream=e.adaptStream||function(t){return t},e}Object.defineProperty(e,"__esModule",{value:!0}),e.setAdapt=function(t){r().adaptStream=t},e.adapt=function(t){return r().adaptStream(t)}}).call(this,r(3))},function(t,e,r){"use strict";t.exports=function(){}},function(t,e){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(10),o=r(52);function i(t,e,r){var i,a,s,u={};if(void 0!==r?(u=e,o.array(r)?i=r:o.primitive(r)?a=r:r&&r.sel&&(i=[r])):void 0!==e&&(o.array(e)?i=e:o.primitive(e)?a=e:e&&e.sel?i=[e]:u=e),void 0!==i)for(s=0;s<i.length;++s)o.primitive(i[s])&&(i[s]=n.vnode(void 0,void 0,void 0,i[s],void 0));return"s"!==t[0]||"v"!==t[1]||"g"!==t[2]||3!==t.length&&"."!==t[3]&&"#"!==t[3]||function t(e,r,n){if(e.ns="http://www.w3.org/2000/svg","foreignObject"!==n&&void 0!==r)for(var o=0;o<r.length;++o){var i=r[o].data;void 0!==i&&t(i,r[o].children,r[o].sel)}}(u,i,t),n.vnode(t,u,i,a,void 0)}e.h=i,e.default=i},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(t){n=a}}();var u,c=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?c=u.concat(c):l=-1,c.length&&h())}function h(){if(!f){var t=s(p);f=!0;for(var e=c.length;e;){for(u=c,c=[];++l<e;)u&&u[l].run();l=-1,e=c.length}u=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||f||s(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){"use strict";(function(t){var r,n=("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:Function("return this")()).Symbol;r="function"==typeof n?n("parent"):"@@snabbdom-selector-parent",e.a=r}).call(this,r(3))},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var r=function(t,e){var r=t[1]||"",n=t[3];if(!n)return r;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(n),i=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+r+"}":r}).join("")},e.i=function(t,r){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(n[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&n[a[0]]||(r&&!a[2]?a[2]=r:r&&(a[2]="("+a[2]+") and ("+r+")"),e.push(a))}},e}},function(t,e,r){var n={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var e={};return function(t,r){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),a=null,s=0,u=[],c=r(100);function f(t,e){for(var r=0;r<t.length;r++){var o=t[r],i=n[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(v(o.parts[a],e))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(v(o.parts[a],e));n[o.id]={id:o.id,refs:1,parts:s}}}}function l(t,e){for(var r=[],n={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};n[a]?n[a].parts.push(s):r.push(n[a]={id:a,parts:[s]})}return r}function p(t,e){var r=i(t.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=u[u.length-1];if("top"===t.insertAt)n?n.nextSibling?r.insertBefore(e,n.nextSibling):r.appendChild(e):r.insertBefore(e,r.firstChild),u.push(e);else if("bottom"===t.insertAt)r.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertAt.before,r);r.insertBefore(e,o)}}function h(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function d(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return r.nc}();n&&(t.attrs.nonce=n)}return y(e,t.attrs),p(t,e),e}function y(t,e){Object.keys(e).forEach(function(r){t.setAttribute(r,e[r])})}function v(t,e){var r,n,o,i;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var u=s++;r=a||(a=d(e)),n=b.bind(null,r,u,!1),o=b.bind(null,r,u,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",y(e,t.attrs),p(t,e),e}(e),n=function(t,e,r){var n=r.css,o=r.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(n=c(n));o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([n],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,r,e),o=function(){h(r),r.href&&URL.revokeObjectURL(r.href)}):(r=d(e),n=function(t,e){var r=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}.bind(null,r),o=function(){h(r)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var r=l(t,e);return f(r,e),function(t){for(var o=[],i=0;i<r.length;i++){var a=r[i];(s=n[a.id]).refs--,o.push(s)}t&&f(l(t,e),e);for(i=0;i<o.length;i++){var s;if(0===(s=o[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete n[s.id]}}}};var m=function(){var t=[];return function(e,r){return t[e]=r,t.filter(Boolean).join("\n")}}();function b(t,e,r,n){var o=r?"":n.css;if(t.styleSheet)t.styleSheet.cssText=m(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e,r){"use strict";function n(t,e,r,n,o){return{sel:t,data:e,children:r,text:n,elm:o,key:void 0===e?void 0:e.key}}Object.defineProperty(e,"__esModule",{value:!0}),e.vnode=n,e.default=n},function(t,e,r){"use strict";(function(t){r.d(e,"a",function(){return o});r(28);function n(e){var r=e.scheduler,o=e.done,i=e.currentTime,a=e.setTime,s=e.timeToRunTo,u=r.peek(),c=u&&s&&u.time>=s;if(u&&!c){var f=r.shiftNextEntry();if(f.cancelled)t(n,e);else{var l=f.time;a(l),f.f&&f.f(f,l,r.add,i),"next"===f.type&&f.stream.shamefullySendNext(f.value),"error"===f.type&&f.stream.shamefullySendError(f.error),"complete"===f.type&&f.stream.shamefullySendComplete(),t(n,e)}}else o()}function o(e,r,o,i,a){void 0===a&&(a=0),t(n,{scheduler:e,done:r,currentTime:o,setTime:i,timeToRunTo:a})}}).call(this,r(27).setImmediate)},function(t,e,r){"use strict";t.exports=function(t,e,r,n,o,i,a,s){if(!t){var u;if(void 0===e)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[r,n,o,i,a,s],f=0;(u=new Error(e.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(t,e,r){(function(e){for(var n=r(23),o="undefined"==typeof window?e:window,i=["moz","webkit"],a="AnimationFrame",s=o["request"+a],u=o["cancel"+a]||o["cancelRequest"+a],c=0;!s&&c<i.length;c++)s=o[i[c]+"Request"+a],u=o[i[c]+"Cancel"+a]||o[i[c]+"CancelRequest"+a];if(!s||!u){var f=0,l=0,p=[];s=function(t){if(0===p.length){var e=n(),r=Math.max(0,1e3/60-(e-f));f=r+e,setTimeout(function(){var t=p.slice(0);p.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(f)}catch(t){setTimeout(function(){throw t},0)}},Math.round(r))}return p.push({handle:++l,callback:t,cancelled:!1}),l},u=function(t){for(var e=0;e<p.length;e++)p[e].handle===t&&(p[e].cancelled=!0)}}t.exports=function(t){return s.call(o,t)},t.exports.cancel=function(){u.apply(o,arguments)},t.exports.polyfill=function(t){t||(t=o),t.requestAnimationFrame=s,t.cancelAnimationFrame=u}}).call(this,r(3))},function(t,e,r){"use strict";var n=r(15);t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},function(t,e,r){"use strict";var n=r(86);t.exports=Function.prototype.bind||n},function(t,e,r){"use strict";var n=Function.prototype.toString,o=/^\s*class\b/,i=function(t){try{var e=n.call(t);return o.test(e)}catch(t){return!1}},a=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if("function"==typeof t&&!t.prototype)return!0;if(s)return function(t){try{return!i(t)&&(n.call(t),!0)}catch(t){return!1}}(t);if(i(t))return!1;var e=a.call(t);return"[object Function]"===e||"[object GeneratorFunction]"===e}},function(t,e,r){var n=r(15).call(Function.call,Object.prototype.hasOwnProperty),o=Object.assign;t.exports=function(t,e){if(o)return o(t,e);for(var r in e)n(e,r)&&(t[r]=e[r]);return t}},function(t,e,r){"use strict";function n(t,e){var r,n,o=e.elm,i=t.data.class,a=e.data.class;if((i||a)&&i!==a){for(n in i=i||{},a=a||{},i)a[n]||o.classList.remove(n);for(n in a)(r=a[n])!==i[n]&&o.classList[r?"add":"remove"](n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.classModule={create:n,update:n},e.default=e.classModule},function(t,e,r){"use strict";function n(t,e){var r,n,o=e.elm,i=t.data.props,a=e.data.props;if((i||a)&&i!==a){for(r in i=i||{},a=a||{},i)a[r]||delete o[r];for(r in a)n=a[r],i[r]===n||"value"===r&&o[r]===n||(o[r]=n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.propsModule={create:n,update:n},e.default=e.propsModule},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n="http://www.w3.org/1999/xlink",o="http://www.w3.org/XML/1998/namespace",i=58,a=120;function s(t,e){var r,s=e.elm,u=t.data.attrs,c=e.data.attrs;if((u||c)&&u!==c){for(r in u=u||{},c=c||{}){var f=c[r];u[r]!==f&&(!0===f?s.setAttribute(r,""):!1===f?s.removeAttribute(r):r.charCodeAt(0)!==a?s.setAttribute(r,f):r.charCodeAt(3)===i?s.setAttributeNS(o,r,f):r.charCodeAt(5)===i?s.setAttributeNS(n,r,f):s.setAttribute(r,f))}for(r in u)r in c||s.removeAttribute(r)}}e.attributesModule={create:s,update:s},e.default=e.attributesModule},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n="undefined"!=typeof window&&window.requestAnimationFrame||setTimeout,o=function(t){n(function(){n(t)})},i=!1;function a(t,e,r){o(function(){t[e]=r})}function s(t,e){var r,n,o=e.elm,i=t.data.style,s=e.data.style;if((i||s)&&i!==s){i=i||{},s=s||{};var u="delayed"in i;for(n in i)s[n]||("-"===n[0]&&"-"===n[1]?o.style.removeProperty(n):o.style[n]="");for(n in s)if(r=s[n],"delayed"===n&&s.delayed)for(var c in s.delayed)r=s.delayed[c],u&&r===i.delayed[c]||a(o.style,c,r);else"remove"!==n&&r!==i[n]&&("-"===n[0]&&"-"===n[1]?o.style.setProperty(n,r):o.style[n]=r)}}e.styleModule={pre:function(){i=!1},create:s,update:s,destroy:function(t){var e,r,n=t.elm,o=t.data.style;if(o&&(e=o.destroy))for(r in e)n.style[r]=e[r]},remove:function(t,e){var r=t.data.style;if(r&&r.remove){i||(getComputedStyle(document.body).transform,i=!0);var n,o=t.elm,a=0,s=r.remove,u=0,c=[];for(n in s)c.push(n),o.style[n]=s[n];for(var f=getComputedStyle(o)["transition-property"].split(", ");a<f.length;++a)-1!==c.indexOf(f[a])&&u++;o.addEventListener("transitionend",function(t){t.target===o&&--u,0===u&&e()})}else e()}},e.default=e.styleModule},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=/[A-Z]/g;function o(t,e){var r,o=e.elm,i=t.data.dataset,a=e.data.dataset;if((i||a)&&i!==a){i=i||{},a=a||{};var s=o.dataset;for(r in i)a[r]||(s?r in s&&delete s[r]:o.removeAttribute("data-"+r.replace(n,"-$&").toLowerCase()));for(r in a)i[r]!==a[r]&&(s?s[r]=a[r]:o.setAttribute("data-"+r.replace(n,"-$&").toLowerCase(),a[r]))}}e.datasetModule={create:o,update:o},e.default=e.datasetModule},function(t,e,r){(function(e){(function(){var r,n,o,i,a,s;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:void 0!==e&&null!==e&&e.hrtime?(t.exports=function(){return(r()-a)/1e6},n=e.hrtime,i=(r=function(){var t;return 1e9*(t=n())[0]+t[1]})(),s=1e9*e.uptime(),a=i-s):Date.now?(t.exports=function(){return Date.now()-o},o=Date.now()):(t.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r(5))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(10),o=r(53);function i(t,e){var r,a=void 0!==e?e:o.default;if(a.isElement(t)){var s,u=t.id?"#"+t.id:"",c=t.getAttribute("class"),f=c?"."+c.split(" ").join("."):"",l=a.tagName(t).toLowerCase()+u+f,p={},h=[],d=void 0,y=void 0,v=t.attributes,m=t.childNodes;for(d=0,y=v.length;d<y;d++)"id"!==(s=v[d].nodeName)&&"class"!==s&&(p[s]=v[d].nodeValue);for(d=0,y=m.length;d<y;d++)h.push(i(m[d],e));return n.default(l,{attrs:p},h,void 0,t)}return a.isText(t)?(r=a.getTextContent(t),n.default(void 0,void 0,void 0,r,t)):a.isComment(t)?(r=a.getTextContent(t),n.default("!",{},[],r,t)):n.default("",{},[],void 0,t)}e.toVNode=i,e.default=i},function(t,e,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function n(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0}function o(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var i=r(59),a=Object.prototype.hasOwnProperty,s=Array.prototype.slice,u="foo"===function(){}.name;function c(t){return Object.prototype.toString.call(t)}function f(t){return!o(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var l=t.exports=m,p=/\s*function\s+([^\(\s]*)\s*/;function h(t){if(i.isFunction(t)){if(u)return t.name;var e=t.toString().match(p);return e&&e[1]}}function d(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function y(t){if(u||!i.isFunction(t))return i.inspect(t);var e=h(t);return"[Function"+(e?": "+e:"")+"]"}function v(t,e,r,n,o){throw new l.AssertionError({message:r,actual:t,expected:e,operator:n,stackStartFunction:o})}function m(t,e){t||v(t,!0,e,"==",l.ok)}function b(t,e,r,a){if(t===e)return!0;if(o(t)&&o(e))return 0===n(t,e);if(i.isDate(t)&&i.isDate(e))return t.getTime()===e.getTime();if(i.isRegExp(t)&&i.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(f(t)&&f(e)&&c(t)===c(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===n(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(o(t)!==o(e))return!1;var u=(a=a||{actual:[],expected:[]}).actual.indexOf(t);return-1!==u&&u===a.expected.indexOf(e)||(a.actual.push(t),a.expected.push(e),function(t,e,r,n){if(null===t||void 0===t||null===e||void 0===e)return!1;if(i.isPrimitive(t)||i.isPrimitive(e))return t===e;if(r&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var o=g(t),a=g(e);if(o&&!a||!o&&a)return!1;if(o)return t=s.call(t),e=s.call(e),b(t,e,r);var u,c,f=O(t),l=O(e);if(f.length!==l.length)return!1;for(f.sort(),l.sort(),c=f.length-1;c>=0;c--)if(f[c]!==l[c])return!1;for(c=f.length-1;c>=0;c--)if(u=f[c],!b(t[u],e[u],r,n))return!1;return!0}(t,e,r,a))}return r?t===e:t==e}function g(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function _(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function w(t,e,r,n){var o;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),o=function(t){var e;try{t()}catch(t){e=t}return e}(e),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),t&&!o&&v(o,r,"Missing expected exception"+n);var a="string"==typeof n,s=!t&&i.isError(o),u=!t&&o&&!r;if((s&&a&&_(o,r)||u)&&v(o,r,"Got unwanted exception"+n),t&&o&&r&&!_(o,r)||!t&&o)throw o}l.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return d(y(t.actual),128)+" "+t.operator+" "+d(y(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||v;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var r=new Error;if(r.stack){var n=r.stack,o=h(e),i=n.indexOf("\n"+o);if(i>=0){var a=n.indexOf("\n",i+1);n=n.substring(a+1)}this.stack=n}}},i.inherits(l.AssertionError,Error),l.fail=v,l.ok=m,l.equal=function(t,e,r){t!=e&&v(t,e,r,"==",l.equal)},l.notEqual=function(t,e,r){t==e&&v(t,e,r,"!=",l.notEqual)},l.deepEqual=function(t,e,r){b(t,e,!1)||v(t,e,r,"deepEqual",l.deepEqual)},l.deepStrictEqual=function(t,e,r){b(t,e,!0)||v(t,e,r,"deepStrictEqual",l.deepStrictEqual)},l.notDeepEqual=function(t,e,r){b(t,e,!1)&&v(t,e,r,"notDeepEqual",l.notDeepEqual)},l.notDeepStrictEqual=function t(e,r,n){b(e,r,!0)&&v(e,r,n,"notDeepStrictEqual",t)},l.strictEqual=function(t,e,r){t!==e&&v(t,e,r,"===",l.strictEqual)},l.notStrictEqual=function(t,e,r){t===e&&v(t,e,r,"!==",l.notStrictEqual)},l.throws=function(t,e,r){w(!0,t,e,r)},l.doesNotThrow=function(t,e,r){w(!1,t,e,r)},l.ifError=function(t){if(t)throw t};var O=Object.keys||function(t){var e=[];for(var r in t)a.call(t,r)&&e.push(r);return e}}).call(this,r(3))},function(t,e,r){"use strict";var n=Object.prototype.hasOwnProperty,o=Object.prototype.toString,i=Object.defineProperty,a=Object.getOwnPropertyDescriptor,s=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===o.call(t)},u=function(t){if(!t||"[object Object]"!==o.call(t))return!1;var e,r=n.call(t,"constructor"),i=t.constructor&&t.constructor.prototype&&n.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!r&&!i)return!1;for(e in t);return void 0===e||n.call(t,e)},c=function(t,e){i&&"__proto__"===e.name?i(t,e.name,{enumerable:!0,configurable:!0,value:e.newValue,writable:!0}):t[e.name]=e.newValue},f=function(t,e){if("__proto__"===e){if(!n.call(t,e))return;if(a)return a(t,e).value}return t[e]};t.exports=function t(){var e,r,n,o,i,a,l=arguments[0],p=1,h=arguments.length,d=!1;for("boolean"==typeof l&&(d=l,l=arguments[1]||{},p=2),(null==l||"object"!=typeof l&&"function"!=typeof l)&&(l={});p<h;++p)if(null!=(e=arguments[p]))for(r in e)n=f(l,r),l!==(o=f(e,r))&&(d&&o&&(u(o)||(i=s(o)))?(i?(i=!1,a=n&&s(n)?n:[]):a=n&&u(n)?n:{},c(l,{name:r,newValue:t(d,a,o)})):void 0!==o&&c(l,{name:r,newValue:o}));return l}},function(t,e,r){(function(t){var n=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},r(28),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,r(3))},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,o=1,i={},a=!1,s=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick(function(){f(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?function(){var e="setImmediate$"+Math.random()+"$",r=function(r){r.source===t&&"string"==typeof r.data&&0===r.data.indexOf(e)&&f(+r.data.slice(e.length))};t.addEventListener?t.addEventListener("message",r,!1):t.attachEvent("onmessage",r),n=function(r){t.postMessage(e+r,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){f(t.data)},n=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;n=function(e){var r=s.createElement("script");r.onreadystatechange=function(){f(e),r.onreadystatechange=null,t.removeChild(r),r=null},t.appendChild(r)}}():n=function(t){setTimeout(f,0,t)},u.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var a={callback:t,args:e};return i[o]=a,n(o),o++},u.clearImmediate=c}function c(t){delete i[t]}function f(t){if(a)setTimeout(f,0,t);else{var e=i[t];if(e){a=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(r,n)}}(e)}finally{c(t),a=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,r(3),r(5))},function(t,e,r){"use strict";t.exports=function(t){return null!==t&&"object"==typeof t}},function(t,e,r){"use strict";var n=r(81),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,s=Object.defineProperty,u=s&&function(){var t={};try{for(var e in s(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),c=function(t,e,r,n){(!(e in t)||function(t){return"function"==typeof t&&"[object Function]"===i.call(t)}(n)&&n())&&(u?s(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r)},f=function(t,e){var r=arguments.length>2?arguments[2]:{},i=n(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var s=0;s<i.length;s+=1)c(t,i[s],e[i[s]],r[i[s]])};f.supportsDescriptors=!!u,t.exports=f},function(t,e,r){"use strict";var n=r(83),o=function(t){throw t},i="function"==typeof Symbol&&"symbol"==typeof Symbol("foo");t.exports=function(t){n.RequireObjectCoercible(t);var e={};if(!i){if(!n.IsArray(t))throw new TypeError("this environment lacks native Symbols, and can not support non-Array iterables");return function(t,e){for(var r=0;r<e.length;++r){var o=e[r];if("Object"!==n.Type(o))throw new TypeError("iterator returned a non-object; entry expected");var i=n.Get(o,"0"),a=n.Get(o,"1"),s=n.ToPropertyKey(i);n.CreateDataPropertyOrThrow(t,s,a)}}(e,t),e}for(var r=n.GetIterator(t);;){var a=n.IteratorStep(r);if(!1===a)return e;var s=n.IteratorValue(a);if("Object"!==n.Type(s)){var u=new TypeError("iterator returned a non-object; entry expected");return n.IteratorClose(r,o(u))}try{var c=n.Get(s,"0"),f=n.Get(s,"1"),l=n.ToPropertyKey(c);n.CreateDataPropertyOrThrow(e,l,f)}catch(t){return n.IteratorClose(r,o(t))}}}},function(t,e){t.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},function(t,e,r){"use strict";var n=Object.getOwnPropertyDescriptor?function(){return Object.getOwnPropertyDescriptor(arguments,"callee").get}():function(){throw new TypeError},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,i=Object.getPrototypeOf||function(t){return t.__proto__},a=void 0,s="undefined"==typeof Uint8Array?void 0:i(Uint8Array),u={"$ %Array%":Array,"$ %ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"$ %ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"$ %ArrayIteratorPrototype%":o?i([][Symbol.iterator]()):void 0,"$ %ArrayPrototype%":Array.prototype,"$ %ArrayProto_entries%":Array.prototype.entries,"$ %ArrayProto_forEach%":Array.prototype.forEach,"$ %ArrayProto_keys%":Array.prototype.keys,"$ %ArrayProto_values%":Array.prototype.values,"$ %AsyncFromSyncIteratorPrototype%":void 0,"$ %AsyncFunction%":void 0,"$ %AsyncFunctionPrototype%":void 0,"$ %AsyncGenerator%":void 0,"$ %AsyncGeneratorFunction%":void 0,"$ %AsyncGeneratorPrototype%":void 0,"$ %AsyncIteratorPrototype%":a&&o&&Symbol.asyncIterator?a[Symbol.asyncIterator]():void 0,"$ %Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"$ %Boolean%":Boolean,"$ %BooleanPrototype%":Boolean.prototype,"$ %DataView%":"undefined"==typeof DataView?void 0:DataView,"$ %DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"$ %Date%":Date,"$ %DatePrototype%":Date.prototype,"$ %decodeURI%":decodeURI,"$ %decodeURIComponent%":decodeURIComponent,"$ %encodeURI%":encodeURI,"$ %encodeURIComponent%":encodeURIComponent,"$ %Error%":Error,"$ %ErrorPrototype%":Error.prototype,"$ %eval%":eval,"$ %EvalError%":EvalError,"$ %EvalErrorPrototype%":EvalError.prototype,"$ %Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"$ %Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"$ %Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"$ %Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"$ %Function%":Function,"$ %FunctionPrototype%":Function.prototype,"$ %Generator%":void 0,"$ %GeneratorFunction%":void 0,"$ %GeneratorPrototype%":void 0,"$ %Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"$ %Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"$ %Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"$ %Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"$ %Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"$ %Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"$ %isFinite%":isFinite,"$ %isNaN%":isNaN,"$ %IteratorPrototype%":o?i(i([][Symbol.iterator]())):void 0,"$ %JSON%":JSON,"$ %JSONParse%":JSON.parse,"$ %Map%":"undefined"==typeof Map?void 0:Map,"$ %MapIteratorPrototype%":"undefined"!=typeof Map&&o?i((new Map)[Symbol.iterator]()):void 0,"$ %MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"$ %Math%":Math,"$ %Number%":Number,"$ %NumberPrototype%":Number.prototype,"$ %Object%":Object,"$ %ObjectPrototype%":Object.prototype,"$ %ObjProto_toString%":Object.prototype.toString,"$ %ObjProto_valueOf%":Object.prototype.valueOf,"$ %parseFloat%":parseFloat,"$ %parseInt%":parseInt,"$ %Promise%":"undefined"==typeof Promise?void 0:Promise,"$ %PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"$ %PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"$ %Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"$ %Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"$ %Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"$ %Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"$ %RangeError%":RangeError,"$ %RangeErrorPrototype%":RangeError.prototype,"$ %ReferenceError%":ReferenceError,"$ %ReferenceErrorPrototype%":ReferenceError.prototype,"$ %Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"$ %RegExp%":RegExp,"$ %RegExpPrototype%":RegExp.prototype,"$ %Set%":"undefined"==typeof Set?void 0:Set,"$ %SetIteratorPrototype%":"undefined"!=typeof Set&&o?i((new Set)[Symbol.iterator]()):void 0,"$ %SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"$ %SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"$ %SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"$ %String%":String,"$ %StringIteratorPrototype%":o?i(""[Symbol.iterator]()):void 0,"$ %StringPrototype%":String.prototype,"$ %Symbol%":o?Symbol:void 0,"$ %SymbolPrototype%":o?Symbol.prototype:void 0,"$ %SyntaxError%":SyntaxError,"$ %SyntaxErrorPrototype%":SyntaxError.prototype,"$ %ThrowTypeError%":n,"$ %TypedArray%":s,"$ %TypedArrayPrototype%":s?s.prototype:void 0,"$ %TypeError%":TypeError,"$ %TypeErrorPrototype%":TypeError.prototype,"$ %Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"$ %Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"$ %Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"$ %Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"$ %Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"$ %Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"$ %Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"$ %Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"$ %URIError%":URIError,"$ %URIErrorPrototype%":URIError.prototype,"$ %WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"$ %WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"$ %WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"$ %WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype};t.exports=function(t,e){if(arguments.length>1&&"boolean"!=typeof e)throw new TypeError('"allowMissing" argument must be a boolean');var r="$ "+t;if(!(r in u))throw new SyntaxError("intrinsic "+t+" does not exist!");if(void 0===u[r]&&!e)throw new TypeError("intrinsic "+t+" exists, but is not available. Please file an issue!");return u[r]}},function(t,e){t.exports=Number.isNaN||function(t){return t!=t}},function(t,e){var r=Number.isNaN||function(t){return t!=t};t.exports=Number.isFinite||function(t){return"number"==typeof t&&!r(t)&&t!==1/0&&t!==-1/0}},function(t,e){t.exports=function(t){return t>=0?1:-1}},function(t,e){t.exports=function(t,e){var r=t%e;return Math.floor(r>=0?r:r+e)}},function(t,e,r){"use strict";var n=r(31);t.exports=function(){return"function"==typeof Object.fromEntries?Object.fromEntries:n}},function(t,e,r){"use strict";function n(t){var e,r=t.Symbol;return"function"==typeof r?r.observable?e=r.observable:(e=r("observable"),r.observable=e):e="@@observable",e}r.d(e,"a",function(){return n})},function(t,e,r){"use strict";(function(t,r){Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){if("undefined"!=typeof MutationObserver){var e=document.createTextNode(""),n=[],o=0;return new MutationObserver(function(){for(;n.length;)n.shift()()}).observe(e,{characterData:!0}),function(t){n.push(t),e.data=o=1-o}}return void 0!==t?t:void 0!==r?r.nextTick:setTimeout}}).call(this,r(27).setImmediate,r(5))},function(t,e,r){"use strict";(function(t){function n(){var e;return(e="undefined"!=typeof window?window:void 0!==t?t:this).Cyclejs=e.Cyclejs||{},(e=e.Cyclejs).adaptStream=e.adaptStream||function(t){return t},e}function o(t){return n().adaptStream(t)}r.d(e,"a",function(){return o})}).call(this,r(3))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),o=function(){function t(t){this.streams=t,this.type="concat",this.out=null,this.i=0}return t.prototype._start=function(t){this.out=t,this.streams[this.i]._add(this)},t.prototype._stop=function(){var t=this.streams;this.i<t.length&&t[this.i]._remove(this),this.i=0,this.out=null},t.prototype._n=function(t){var e=this.out;e&&e._n(t)},t.prototype._e=function(t){var e=this.out;e&&e._e(t)},t.prototype._c=function(){var t=this.out;if(t){var e=this.streams;e[this.i]._remove(this),++this.i<e.length?e[this.i]._add(this):t._c()}},t}();e.default=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new n.Stream(new o(t))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),o={},i=function(){function t(t,e){this.i=t,this.p=e,e.ils[t]=this}return t.prototype._n=function(t){var e=this.p;e.out!==o&&e.up(t,this.i)},t.prototype._e=function(t){this.p._e(t)},t.prototype._c=function(){this.p.down(this.i,this)},t}();e.SampleCombineListener=i;var a,s=function(){function t(t,e){this.type="sampleCombine",this.ins=t,this.others=e,this.out=o,this.ils=[],this.Nn=0,this.vals=[]}return t.prototype._start=function(t){this.out=t;for(var e=this.others,r=this.Nn=e.length,n=this.vals=new Array(r),a=0;a<r;a++)n[a]=o,e[a]._add(new i(a,this));this.ins._add(this)},t.prototype._stop=function(){var t=this.others,e=t.length,r=this.ils;this.ins._remove(this);for(var n=0;n<e;n++)t[n]._remove(r[n]);this.out=o,this.vals=[],this.ils=[]},t.prototype._n=function(t){var e=this.out;e!==o&&(this.Nn>0||e._n([t].concat(this.vals)))},t.prototype._e=function(t){var e=this.out;e!==o&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==o&&t._c()},t.prototype.up=function(t,e){var r=this.vals[e];this.Nn>0&&r===o&&this.Nn--,this.vals[e]=t},t.prototype.down=function(t,e){this.others[t]._remove(e)},t}();e.SampleCombineOperator=s,a=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return new n.Stream(new s(e,t))}},e.default=a},function(t,e,r){var n;"undefined"!=typeof window?n=window:"undefined"!=typeof self?n=self:(console.warn("Using browser-only version of superagent in non-browser environment"),n=this);var o=r(54),i=r(55),a=r(29),s=r(56),u=r(58);function c(){}var f=e=t.exports=function(t,r){return"function"==typeof r?new e.Request("GET",t).end(r):1==arguments.length?new e.Request("GET",t):new e.Request(t,r)};e.Request=m,f.getXHR=function(){if(!(!n.XMLHttpRequest||n.location&&"file:"==n.location.protocol&&n.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(t){}throw Error("Browser-only version of superagent could not find XHR")};var l="".trim?function(t){return t.trim()}:function(t){return t.replace(/(^\s*|\s*$)/g,"")};function p(t){if(!a(t))return t;var e=[];for(var r in t)h(e,r,t[r]);return e.join("&")}function h(t,e,r){if(null!=r)if(Array.isArray(r))r.forEach(function(r){h(t,e,r)});else if(a(r))for(var n in r)h(t,e+"["+n+"]",r[n]);else t.push(encodeURIComponent(e)+"="+encodeURIComponent(r));else null===r&&t.push(encodeURIComponent(e))}function d(t){for(var e,r,n={},o=t.split("&"),i=0,a=o.length;i<a;++i)-1==(r=(e=o[i]).indexOf("="))?n[decodeURIComponent(e)]="":n[decodeURIComponent(e.slice(0,r))]=decodeURIComponent(e.slice(r+1));return n}function y(t){return/[\/+]json($|[^-\w])/.test(t)}function v(t){this.req=t,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||void 0===this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText;var e=this.xhr.status;1223===e&&(e=204),this._setStatusProperties(e),this.header=this.headers=function(t){for(var e,r,n,o,i=t.split(/\r?\n/),a={},s=0,u=i.length;s<u;++s)-1!==(e=(r=i[s]).indexOf(":"))&&(n=r.slice(0,e).toLowerCase(),o=l(r.slice(e+1)),a[n]=o);return a}(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this._setHeaderProperties(this.header),null===this.text&&t._responseType?this.body=this.xhr.response:this.body="HEAD"!=this.req.method?this._parseBody(this.text?this.text:this.xhr.response):null}function m(t,e){var r=this;this._query=this._query||[],this.method=t,this.url=e,this.header={},this._header={},this.on("end",function(){var t,e=null,n=null;try{n=new v(r)}catch(t){return(e=new Error("Parser is unable to parse the response")).parse=!0,e.original=t,r.xhr?(e.rawResponse=void 0===r.xhr.responseType?r.xhr.responseText:r.xhr.response,e.status=r.xhr.status?r.xhr.status:null,e.statusCode=e.status):(e.rawResponse=null,e.status=null),r.callback(e)}r.emit("response",n);try{r._isResponseOK(n)||(t=new Error(n.statusText||"Unsuccessful HTTP response"))}catch(e){t=e}t?(t.original=e,t.response=n,t.status=n.status,r.callback(t,n)):r.callback(null,n)})}function b(t,e,r){var n=f("DELETE",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n}f.serializeObject=p,f.parseString=d,f.types={html:"text/html",json:"application/json",xml:"text/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},f.serialize={"application/x-www-form-urlencoded":p,"application/json":JSON.stringify},f.parse={"application/x-www-form-urlencoded":d,"application/json":JSON.parse},s(v.prototype),v.prototype._parseBody=function(t){var e=f.parse[this.type];return this.req._parser?this.req._parser(this,t):(!e&&y(this.type)&&(e=f.parse["application/json"]),e&&t&&(t.length||t instanceof Object)?e(t):null)},v.prototype.toError=function(){var t=this.req,e=t.method,r=t.url,n="cannot "+e+" "+r+" ("+this.status+")",o=new Error(n);return o.status=this.status,o.method=e,o.url=r,o},f.Response=v,o(m.prototype),i(m.prototype),m.prototype.type=function(t){return this.set("Content-Type",f.types[t]||t),this},m.prototype.accept=function(t){return this.set("Accept",f.types[t]||t),this},m.prototype.auth=function(t,e,r){1===arguments.length&&(e=""),"object"==typeof e&&null!==e&&(r=e,e=""),r||(r={type:"function"==typeof btoa?"basic":"auto"});return this._auth(t,e,r,function(t){if("function"==typeof btoa)return btoa(t);throw new Error("Cannot use basic auth, btoa is not a function")})},m.prototype.query=function(t){return"string"!=typeof t&&(t=p(t)),t&&this._query.push(t),this},m.prototype.attach=function(t,e,r){if(e){if(this._data)throw Error("superagent can't mix .send() and .attach()");this._getFormData().append(t,e,r||e.name)}return this},m.prototype._getFormData=function(){return this._formData||(this._formData=new n.FormData),this._formData},m.prototype.callback=function(t,e){if(this._shouldRetry(t,e))return this._retry();var r=this._callback;this.clearTimeout(),t&&(this._maxRetries&&(t.retries=this._retries-1),this.emit("error",t)),r(t,e)},m.prototype.crossDomainError=function(){var t=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");t.crossDomain=!0,t.status=this.status,t.method=this.method,t.url=this.url,this.callback(t)},m.prototype.buffer=m.prototype.ca=m.prototype.agent=function(){return console.warn("This is not supported in browser version of superagent"),this},m.prototype.pipe=m.prototype.write=function(){throw Error("Streaming is not supported in browser version of superagent")},m.prototype._isHost=function(t){return t&&"object"==typeof t&&!Array.isArray(t)&&"[object Object]"!==Object.prototype.toString.call(t)},m.prototype.end=function(t){return this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=t||c,this._finalizeQueryString(),this._end()},m.prototype._end=function(){var t=this,e=this.xhr=f.getXHR(),r=this._formData||this._data;this._setTimeouts(),e.onreadystatechange=function(){var r=e.readyState;if(r>=2&&t._responseTimeoutTimer&&clearTimeout(t._responseTimeoutTimer),4==r){var n;try{n=e.status}catch(t){n=0}if(!n){if(t.timedout||t._aborted)return;return t.crossDomainError()}t.emit("end")}};var n=function(e,r){r.total>0&&(r.percent=r.loaded/r.total*100),r.direction=e,t.emit("progress",r)};if(this.hasListeners("progress"))try{e.onprogress=n.bind(null,"download"),e.upload&&(e.upload.onprogress=n.bind(null,"upload"))}catch(t){}try{this.username&&this.password?e.open(this.method,this.url,!0,this.username,this.password):e.open(this.method,this.url,!0)}catch(t){return this.callback(t)}if(this._withCredentials&&(e.withCredentials=!0),!this._formData&&"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof r&&!this._isHost(r)){var o=this._header["content-type"],i=this._serializer||f.serialize[o?o.split(";")[0]:""];!i&&y(o)&&(i=f.serialize["application/json"]),i&&(r=i(r))}for(var a in this.header)null!=this.header[a]&&this.header.hasOwnProperty(a)&&e.setRequestHeader(a,this.header[a]);return this._responseType&&(e.responseType=this._responseType),this.emit("request",this),e.send(void 0!==r?r:null),this},f.agent=function(){return new u},["GET","POST","OPTIONS","PATCH","PUT","DELETE"].forEach(function(t){u.prototype[t.toLowerCase()]=function(e,r){var n=new f.Request(t,e);return this._setDefaults(n),r&&n.end(r),n}}),u.prototype.del=u.prototype.delete,f.get=function(t,e,r){var n=f("GET",t);return"function"==typeof e&&(r=e,e=null),e&&n.query(e),r&&n.end(r),n},f.head=function(t,e,r){var n=f("HEAD",t);return"function"==typeof e&&(r=e,e=null),e&&n.query(e),r&&n.end(r),n},f.options=function(t,e,r){var n=f("OPTIONS",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n},f.del=b,f.delete=b,f.patch=function(t,e,r){var n=f("PATCH",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n},f.post=function(t,e,r){var n=f("POST",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n},f.put=function(t,e,r){var n=f("PUT",t);return"function"==typeof e&&(r=e,e=null),e&&n.send(e),r&&n.end(r),n}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.comparator,r=t.key,i=t.unique,a=void 0===i||i,s="function"==typeof a;if(e&&r)throw new Error("Both comparator and key cannot be defined");r?e=o(r):e||(e=n);return function(t,r){if(!t)return[r];for(var n=e(r),o=-1,i=t.length;o!==i-1;){var u=Math.floor((i-o)/2+o),c=n(t[u]);if(c>0)o=u;else{if(0===c){if(a){var f=t.slice(0);return f[u]=s?a(t[u],r):r,f}return t.slice(0,u).concat([r]).concat(t.slice(u))}i=u}}return t.slice(0,i).concat([r]).concat(t.slice(i))}};var n=function(t){return function(e){return t<e?-1:t==e?0:1}},o=function(t){return function(e){var r=t(e);return function(e){var n=t(e);return r<n?-1:r==n?0:1}}}},function(t,e,r){"use strict";for(var n=r(62),o=r(70),i={modified:"yellow",added:"green",removed:"red"},a={indent:2,indentChar:" ",newLineChar:"\n",wrap:function(t,e){return n[i[t]](e)}},s="",u=0;u<a.indent;u++)s+=a.indentChar;function c(t){return"object"==typeof t&&t&&!Array.isArray(t)}function f(t){return"function"==typeof t?t.toString().replace(/\{.+\}/,"{}"):"object"!=typeof t&&"string"!=typeof t||t instanceof RegExp?""+t:JSON.stringify(t)}function l(t,e){return s+t+": "+function(t){return t.split(a.newLineChar).map(function(t,e){return 0===e?t:s+t}).join(a.newLineChar)}(e)+a.newLineChar}function p(t,e){return a.wrap("removed","- "+t+": "+f(e))+a.newLineChar}function h(t,e){return a.wrap("added","+ "+t+": "+f(e))+a.newLineChar}t.exports=function t(e,r){var n,i,s="",u=!1,d="";if(Array.isArray(e)&&Array.isArray(r)){for(var y=0;y<e.length;y++)y<r.length?(n=t(e[y],r[y])).changed&&(d+=l(y,n.text),u=!0):(d+=p(y,e[y]),u=!0);if(r.length>e.length){for(;y<r.length;y++)d+=h(y,r[y]);u=!0}u&&(s="["+a.newLineChar+d+"]")}else if(c(e)&&c(r)){i=Object.keys(e);var v,m=o({},r);for(i.sort(),y=0;y<i.length;y++)v=i[y],r.hasOwnProperty(v)?((n=t(e[v],r[v])).changed&&(d+=l(v,n.text),u=!0),delete m[v]):(d+=p(v,e[v]),u=!0);var b=Object.keys(m);for(y=0;y<b.length;y++)d+=h(b[y],r[b[y]]),u=!0;u&&(s="{"+a.newLineChar+d+"}")}else e!==r&&(s=a.wrap("modified",f(e)+" => "+f(r)),u=!0);return{changed:u,text:s}}},function(t,e,r){"use strict";var n=r(71),o=r(74),i=n("MultiError");t.exports=function t(e){if(!(this instanceof t))return new t(e);e=Array.isArray(e)?e:[e];e=o(e,function(t){return t.stack});if(1===e.length)return e[0];var r=new i({message:e.map(function(t){return t.message}).join("; "),errors:e.reduce(function(t,e){return t.concat(e.errors||e)},[])});r.__defineGetter__("stack",function(){return e.map(function(t){return t.stack}).join("\n\n")});r.__defineSetter__("stack",function(t){return[t].concat(r.stack).join("\n\n")});return r}},function(t,e,r){"use strict";var n=r(30),o=r(31),i=r(38),a=r(97),s=i();n(s,{getPolyfill:i,implementation:o,shim:a}),t.exports=s},function(t,e,r){t.exports=r(107)},function(t,e,r){"use strict";r.r(e),function(t,n){var o,i=r(39);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:n;var a=Object(i.a)(o);e.default=a}.call(this,r(3),r(51)(t))},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.array=Array.isArray,e.primitive=function(t){return"string"==typeof t||"number"==typeof t}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.htmlDomApi={createElement:function(t){return document.createElement(t)},createElementNS:function(t,e){return document.createElementNS(t,e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,r){t.insertBefore(e,r)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},getTextContent:function(t){return t.textContent},isElement:function(t){return 1===t.nodeType},isText:function(t){return 3===t.nodeType},isComment:function(t){return 8===t.nodeType}},e.default=e.htmlDomApi},function(t,e,r){function n(t){if(t)return function(t){for(var e in n.prototype)t[e]=n.prototype[e];return t}(t)}t.exports=n,n.prototype.on=n.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},n.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<n.length;o++)if((r=n[o])===e||r.fn===e){n.splice(o,1);break}return this},n.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r)for(var n=0,o=(r=r.slice(0)).length;n<o;++n)r[n].apply(this,e);return this},n.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},n.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,r){"use strict";var n=r(29);function o(t){if(t)return function(t){for(var e in o.prototype)t[e]=o.prototype[e];return t}(t)}t.exports=o,o.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,this},o.prototype.parse=function(t){return this._parser=t,this},o.prototype.responseType=function(t){return this._responseType=t,this},o.prototype.serialize=function(t){return this._serializer=t,this},o.prototype.timeout=function(t){if(!t||"object"!=typeof t)return this._timeout=t,this._responseTimeout=0,this;for(var e in t)switch(e){case"deadline":this._timeout=t.deadline;break;case"response":this._responseTimeout=t.response;break;default:console.warn("Unknown timeout option",e)}return this},o.prototype.retry=function(t,e){return 0!==arguments.length&&!0!==t||(t=1),t<=0&&(t=0),this._maxRetries=t,this._retries=0,this._retryCallback=e,this};var i=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];o.prototype._shouldRetry=function(t,e){if(!this._maxRetries||this._retries++>=this._maxRetries)return!1;if(this._retryCallback)try{var r=this._retryCallback(t,e);if(!0===r)return!0;if(!1===r)return!1}catch(t){console.error(t)}if(e&&e.status&&e.status>=500&&501!=e.status)return!0;if(t){if(t.code&&~i.indexOf(t.code))return!0;if(t.timeout&&"ECONNABORTED"==t.code)return!0;if(t.crossDomain)return!0}return!1},o.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this._end()},o.prototype.then=function(t,e){if(!this._fullfilledPromise){var r=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise(function(t,e){r.end(function(r,n){r?e(r):t(n)})})}return this._fullfilledPromise.then(t,e)},o.prototype.catch=function(t){return this.then(void 0,t)},o.prototype.use=function(t){return t(this),this},o.prototype.ok=function(t){if("function"!=typeof t)throw Error("Callback required");return this._okCallback=t,this},o.prototype._isResponseOK=function(t){return!!t&&(this._okCallback?this._okCallback(t):t.status>=200&&t.status<300)},o.prototype.get=function(t){return this._header[t.toLowerCase()]},o.prototype.getHeader=o.prototype.get,o.prototype.set=function(t,e){if(n(t)){for(var r in t)this.set(r,t[r]);return this}return this._header[t.toLowerCase()]=e,this.header[t]=e,this},o.prototype.unset=function(t){return delete this._header[t.toLowerCase()],delete this.header[t],this},o.prototype.field=function(t,e){if(null===t||void 0===t)throw new Error(".field(name, val) name can not be empty");if(this._data&&console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()"),n(t)){for(var r in t)this.field(r,t[r]);return this}if(Array.isArray(e)){for(var o in e)this.field(t,e[o]);return this}if(null===e||void 0===e)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof e&&(e=""+e),this._getFormData().append(t,e),this},o.prototype.abort=function(){return this._aborted?this:(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort"),this)},o.prototype._auth=function(t,e,r,n){switch(r.type){case"basic":this.set("Authorization","Basic "+n(t+":"+e));break;case"auto":this.username=t,this.password=e;break;case"bearer":this.set("Authorization","Bearer "+t)}return this},o.prototype.withCredentials=function(t){return void 0==t&&(t=!0),this._withCredentials=t,this},o.prototype.redirects=function(t){return this._maxRedirects=t,this},o.prototype.maxResponseSize=function(t){if("number"!=typeof t)throw TypeError("Invalid argument");return this._maxResponseSize=t,this},o.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},o.prototype.send=function(t){var e=n(t),r=this._header["content-type"];if(this._formData&&console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()"),e&&!this._data)Array.isArray(t)?this._data=[]:this._isHost(t)||(this._data={});else if(t&&this._data&&this._isHost(this._data))throw Error("Can't merge these send calls");if(e&&n(this._data))for(var o in t)this._data[o]=t[o];else"string"==typeof t?(r||this.type("form"),r=this._header["content-type"],this._data="application/x-www-form-urlencoded"==r?this._data?this._data+"&"+t:t:(this._data||"")+t):this._data=t;return!e||this._isHost(t)?this:(r||this.type("json"),this)},o.prototype.sortQuery=function(t){return this._sort=void 0===t||t,this},o.prototype._finalizeQueryString=function(){var t=this._query.join("&");if(t&&(this.url+=(this.url.indexOf("?")>=0?"&":"?")+t),this._query.length=0,this._sort){var e=this.url.indexOf("?");if(e>=0){var r=this.url.substring(e+1).split("&");"function"==typeof this._sort?r.sort(this._sort):r.sort(),this.url=this.url.substring(0,e)+"?"+r.join("&")}}},o.prototype._appendQueryString=function(){console.trace("Unsupported")},o.prototype._timeoutError=function(t,e,r){if(!this._aborted){var n=new Error(t+e+"ms exceeded");n.timeout=e,n.code="ECONNABORTED",n.errno=r,this.timedout=!0,this.abort(),this.callback(n)}},o.prototype._setTimeouts=function(){var t=this;this._timeout&&!this._timer&&(this._timer=setTimeout(function(){t._timeoutError("Timeout of ",t._timeout,"ETIME")},this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout(function(){t._timeoutError("Response timeout of ",t._responseTimeout,"ETIMEDOUT")},this._responseTimeout))}},function(t,e,r){"use strict";var n=r(57);function o(t){if(t)return function(t){for(var e in o.prototype)t[e]=o.prototype[e];return t}(t)}t.exports=o,o.prototype.get=function(t){return this.header[t.toLowerCase()]},o.prototype._setHeaderProperties=function(t){var e=t["content-type"]||"";this.type=n.type(e);var r=n.params(e);for(var o in r)this[o]=r[o];this.links={};try{t.link&&(this.links=n.parseLinks(t.link))}catch(t){}},o.prototype._setStatusProperties=function(t){var e=t/100|0;this.status=this.statusCode=t,this.statusType=e,this.info=1==e,this.ok=2==e,this.redirect=3==e,this.clientError=4==e,this.serverError=5==e,this.error=(4==e||5==e)&&this.toError(),this.created=201==t,this.accepted=202==t,this.noContent=204==t,this.badRequest=400==t,this.unauthorized=401==t,this.notAcceptable=406==t,this.forbidden=403==t,this.notFound=404==t,this.unprocessableEntity=422==t}},function(t,e,r){"use strict";e.type=function(t){return t.split(/ *; */).shift()},e.params=function(t){return t.split(/ *; */).reduce(function(t,e){var r=e.split(/ *= */),n=r.shift(),o=r.shift();return n&&o&&(t[n]=o),t},{})},e.parseLinks=function(t){return t.split(/ *, */).reduce(function(t,e){var r=e.split(/ *; */),n=r[0].slice(1,-1);return t[r[1].split(/ *= */)[1].slice(1,-1)]=n,t},{})},e.cleanHeader=function(t,e){return delete t["content-type"],delete t["content-length"],delete t["transfer-encoding"],delete t.host,e&&(delete t.authorization,delete t.cookie),t}},function(t,e){function r(){this._defaults=[]}["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert"].forEach(function(t){r.prototype[t]=function(){return this._defaults.push({fn:t,arguments:arguments}),this}}),r.prototype._setDefaults=function(t){this._defaults.forEach(function(e){t[e.fn].apply(t,e.arguments)})},t.exports=r},function(t,e,r){(function(t,n){var o=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(s(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,i=n.length,a=String(t).replace(o,function(t){if("%%"===t)return"%";if(r>=i)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}}),u=n[r];r<i;u=n[++r])y(u)||!_(u)?a+=" "+u:a+=" "+s(u);return a},e.deprecate=function(r,o){if(b(t.process))return function(){return e.deprecate(r,o).apply(this,arguments)};if(!0===n.noDeprecation)return r;var i=!1;return function(){if(!i){if(n.throwDeprecation)throw new Error(o);n.traceDeprecation?console.trace(o):console.error(o),i=!0}return r.apply(this,arguments)}};var i,a={};function s(t,r){var n={seen:[],stylize:c};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),d(r)?n.showHidden=r:r&&e._extend(n,r),b(n.showHidden)&&(n.showHidden=!1),b(n.depth)&&(n.depth=2),b(n.colors)&&(n.colors=!1),b(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=u),f(n,t,n.depth)}function u(t,e){var r=s.styles[e];return r?"["+s.colors[r][0]+"m"+t+"["+s.colors[r][1]+"m":t}function c(t,e){return t}function f(t,r,n){if(t.customInspect&&r&&j(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return m(o)||(o=f(t,o,n)),o}var i=function(t,e){if(b(e))return t.stylize("undefined","undefined");if(m(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}if(v(e))return t.stylize(""+e,"number");if(d(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,r);if(i)return i;var a=Object.keys(r),s=function(t){var e={};return t.forEach(function(t,r){e[t]=!0}),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(r)),O(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return l(r);if(0===a.length){if(j(r)){var u=r.name?": "+r.name:"";return t.stylize("[Function"+u+"]","special")}if(g(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(w(r))return t.stylize(Date.prototype.toString.call(r),"date");if(O(r))return l(r)}var c,_="",E=!1,x=["{","}"];(h(r)&&(E=!0,x=["[","]"]),j(r))&&(_=" [Function"+(r.name?": "+r.name:"")+"]");return g(r)&&(_=" "+RegExp.prototype.toString.call(r)),w(r)&&(_=" "+Date.prototype.toUTCString.call(r)),O(r)&&(_=" "+l(r)),0!==a.length||E&&0!=r.length?n<0?g(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),c=E?function(t,e,r,n,o){for(var i=[],a=0,s=e.length;a<s;++a)S(e,String(a))?i.push(p(t,e,r,n,String(a),!0)):i.push("");return o.forEach(function(o){o.match(/^\d+$/)||i.push(p(t,e,r,n,o,!0))}),i}(t,r,n,s,a):a.map(function(e){return p(t,r,n,s,e,E)}),t.seen.pop(),function(t,e,r){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1];return r[0]+e+" "+t.join(", ")+" "+r[1]}(c,_,x)):x[0]+_+x[1]}function l(t){return"["+Error.prototype.toString.call(t)+"]"}function p(t,e,r,n,o,i){var a,s,u;if((u=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?s=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(s=t.stylize("[Setter]","special")),S(n,o)||(a="["+o+"]"),s||(t.seen.indexOf(u.value)<0?(s=y(r)?f(t,u.value,null):f(t,u.value,r-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+s.split("\n").map(function(t){return"   "+t}).join("\n")):s=t.stylize("[Circular]","special")),b(a)){if(i&&o.match(/^\d+$/))return s;(a=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function h(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function y(t){return null===t}function v(t){return"number"==typeof t}function m(t){return"string"==typeof t}function b(t){return void 0===t}function g(t){return _(t)&&"[object RegExp]"===E(t)}function _(t){return"object"==typeof t&&null!==t}function w(t){return _(t)&&"[object Date]"===E(t)}function O(t){return _(t)&&("[object Error]"===E(t)||t instanceof Error)}function j(t){return"function"==typeof t}function E(t){return Object.prototype.toString.call(t)}function x(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(b(i)&&(i=n.env.NODE_DEBUG||""),t=t.toUpperCase(),!a[t])if(new RegExp("\\b"+t+"\\b","i").test(i)){var r=n.pid;a[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else a[t]=function(){};return a[t]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=h,e.isBoolean=d,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=b,e.isRegExp=g,e.isObject=_,e.isDate=w,e.isError=O,e.isFunction=j,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(60);var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function S(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",function(){var t=new Date,e=[x(t.getHours()),x(t.getMinutes()),x(t.getSeconds())].join(":");return[t.getDate(),T[t.getMonth()],e].join(" ")}(),e.format.apply(e,arguments))},e.inherits=r(61),e._extend=function(t,e){if(!e||!_(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t}}).call(this,r(3),r(5))},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){"use strict";(function(e){var n=r(63),o=r(64),i=r(65),a=r(67),s=r(69),u=Object.defineProperties,c="win32"===e.platform&&!/^xterm/i.test(e.env.TERM);function f(t){this.enabled=t&&void 0!==t.enabled?t.enabled:s}c&&(o.blue.open="[94m");var l=function(){var t={};return Object.keys(o).forEach(function(e){o[e].closeRe=new RegExp(n(o[e].close),"g"),t[e]={get:function(){return h.call(this,this._styles.concat(e))}}}),t}(),p=u(function(){},l);function h(t){var e=function(){return function(){var t=arguments,e=t.length,r=0!==e&&String(arguments[0]);if(e>1)for(var n=1;n<e;n++)r+=" "+t[n];if(!this.enabled||!r)return r;var i=this._styles,a=i.length,s=o.dim.open;!c||-1===i.indexOf("gray")&&-1===i.indexOf("grey")||(o.dim.open="");for(;a--;){var u=o[i[a]];r=u.open+r.replace(u.closeRe,u.open)+u.close}return o.dim.open=s,r}.apply(e,arguments)};return e._styles=t,e.enabled=this.enabled,e.__proto__=p,e}u(f.prototype,function(){var t={};return Object.keys(l).forEach(function(e){t[e]={get:function(){return h.call(this,[e])}}}),t}()),t.exports=new f,t.exports.styles=o,t.exports.hasColor=a,t.exports.stripColor=i,t.exports.supportsColor=s}).call(this,r(5))},function(t,e,r){"use strict";var n=/[|\\{}()[\]^$+*?.]/g;t.exports=function(t){if("string"!=typeof t)throw new TypeError("Expected a string");return t.replace(n,"\\$&")}},function(t,e,r){"use strict";(function(t){Object.defineProperty(t,"exports",{enumerable:!0,get:function(){var t={modifiers:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},colors:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39]},bgColors:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49]}};return t.colors.grey=t.colors.gray,Object.keys(t).forEach(function(e){var r=t[e];Object.keys(r).forEach(function(e){var n=r[e];t[e]=r[e]={open:"["+n[0]+"m",close:"["+n[1]+"m"}}),Object.defineProperty(t,e,{value:r,enumerable:!1})}),t}})}).call(this,r(6)(t))},function(t,e,r){"use strict";var n=r(66)();t.exports=function(t){return"string"==typeof t?t.replace(n,""):t}},function(t,e,r){"use strict";t.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},function(t,e,r){"use strict";var n=r(68),o=new RegExp(n().source);t.exports=o.test.bind(o)},function(t,e,r){"use strict";t.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},function(t,e,r){"use strict";(function(e){var r=e.argv,n=r.indexOf("--"),o=function(t){t="--"+t;var e=r.indexOf(t);return-1!==e&&(-1===n||e<n)};t.exports="FORCE_COLOR"in e.env||!(o("no-color")||o("no-colors")||o("color=false"))&&(!!(o("color")||o("colors")||o("color=true")||o("color=always"))||!(e.stdout&&!e.stdout.isTTY)&&("win32"===e.platform||"COLORTERM"in e.env||"dumb"!==e.env.TERM&&!!/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(e.env.TERM)))}).call(this,r(5))},function(t,e,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},r=0;r<10;r++)e["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach(function(t){n[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var r,a,s=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),u=1;u<arguments.length;u++){for(var c in r=Object(arguments[u]))o.call(r,c)&&(s[c]=r[c]);if(n){a=n(r);for(var f=0;f<a.length;f++)i.call(r,a[f])&&(s[a[f]]=r[a[f]])}}return s}},function(t,e,r){t.exports=r(72)},function(t,e,r){"use strict";t.exports=o,o.factory=r(73);var n=o("CustomError");function o(t,e,r,n){var l,p;return e=i(arguments,1,Error,u,[c,a]),r=i(arguments,2,{},c,[a]),n=i(arguments,3,f,a,[]),t=i(arguments,0,e===Error?"Error":e.prototype.CustomError.name,s,[u,c,a]),(p=e===Error)&&n===f&&(n=o.factory.root),(l=function(e,r){var n,i,a,s,u,c;if(!(this instanceof l))return new l(e,r);for(delete this.constructor.name,Object.defineProperty(this.constructor,"name",{enumerable:!1,configurable:!0,value:t,writable:!1}),"string"==typeof e&&(e={message:e}),e||(e={}),(i=this.CustomError.chain.slice(0).reverse().map(function(t){return t.properties})).push(e),i.unshift({}),c=Object.assign.apply(Object,i),n=this,a={},Object.keys(o.factory).forEach(function(t){a[t]=function(e,r){o.factory[t].call(n,e,r,a)}}),s=this.CustomError.chain.length-1;s>=0;s--)(u=this.CustomError.chain[s]).factory!==f&&u.factory.call(this,c,r,a)}).prototype=Object.create(e.prototype),l.prototype.constructor=l,l.prototype.name=t,l.prototype.CustomError={chain:p?[]:e.prototype.CustomError.chain.slice(0),factory:n,name:t,parent:e,properties:r},l.prototype.CustomError.chain.unshift(l.prototype.CustomError),l.prototype.toString=function(){var t=this.CustomError.chain[this.CustomError.chain.length-1].name;return this.code&&(t+=" "+this.code),this.message&&(t+=": "+this.message),t},l}function i(t,e,r,o,i){var a,s,u,c=-1,f=-1,l=e<t.length?e:t.length;for(a=0;a<=l;a++){if(u=t[a],-1===c)for(s=0;s<i.length;s++)i[s](u)&&(c=a);-1===f&&o(u)&&(f=a)}if(-1!==f&&-1!==c&&c<f)throw new n.order;return-1!==f?t[f]:r}function a(t){return"function"==typeof t&&t!==Error&&!t.prototype.CustomError}function s(t){return"string"==typeof t}function u(t){return"function"==typeof t&&(t===Error||t.prototype.CustomError)}function c(t){return t&&"object"==typeof t}function f(){}n.order=o(n,{message:"Arguments out of order.",code:"EOARG"})},function(t,e,r){"use strict";e.expectReceive=function(t,e,r){var n;r.root(t,e,r),n=this.message,t.hasOwnProperty("expected")&&(n+=" Expected "+t.expected+"."),t.hasOwnProperty("received")&&(n+=" Received: "+t.received+"."),this.message=n},e.root=function(t,e,r){var n,o,i=this,a={stackLength:Error.stackTraceLimit,rootOnly:!0},s="",u=Error.stackTraceLimit;function c(){o[0]=i.toString(),i.stack=o.join("\n")}e&&"object"==typeof e||(e={}),e.hasOwnProperty("stackLength")&&"number"==typeof e.stackLength&&!isNaN(e.stackLength)&&e.stackLength>=0&&(a.stackLength=e.stackLength),e.hasOwnProperty("rootOnly")||(a.rootOnly=e.rootOnly),a.rootOnly&&this.CustomError.parent!==Error||(Object.keys(t).forEach(function(e){switch(e){case"code":n=t.code||void 0;break;case"message":s=t.message||"";break;default:i[e]=t[e]}}),Error.stackTraceLimit=a.stackLength+2,(o=(new Error).stack.split("\n")).splice(0,3),o.unshift(""),Error.stackTraceLimit=u,this.stack=o.join("\n"),Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,get:function(){return n},set:function(t){n=t,c()}}),Object.defineProperty(this,"message",{configurable:!0,enumerable:!0,get:function(){return s},set:function(t){s=t,c()}}),c())}},function(t,e,r){var n=r(75),o=r(78);t.exports=function(t,e){return t&&t.length?o(t,n(e)):[]}},function(t,e,r){(function(t,n){var o=r(76),i=200,a="__lodash_hash_undefined__",s=1,u=2,c=1/0,f=9007199254740991,l="[object Arguments]",p="[object Array]",h="[object Boolean]",d="[object Date]",y="[object Error]",v="[object Function]",m="[object GeneratorFunction]",b="[object Map]",g="[object Number]",_="[object Object]",w="[object RegExp]",O="[object Set]",j="[object String]",E="[object Symbol]",x="[object ArrayBuffer]",T="[object DataView]",S=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,A=/^\w*$/,k=/^\[object .+?Constructor\]$/,P=/^(?:0|[1-9]\d*)$/,C={};C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C[l]=C[p]=C[x]=C[h]=C[T]=C[d]=C[y]=C[v]=C[b]=C[g]=C[_]=C[w]=C[O]=C[j]=C["[object WeakMap]"]=!1;var N={function:!0,object:!0},I=N[typeof e]&&e&&!e.nodeType?e:void 0,$=N[typeof t]&&t&&!t.nodeType?t:void 0,D=q(I&&$&&"object"==typeof n&&n),M=q(N[typeof self]&&self),L=q(N[typeof window]&&window),R=q(N[typeof this]&&this),B=D||L!==(R&&R.window)&&L||M||R||Function("return this")();function F(t,e){for(var r=-1,n=t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function U(t,e){return function(t,e){for(var r=-1,n=t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}(e,function(e){return[e,t[e]]})}function q(t){return t&&t.Object===Object?t:null}function H(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}function G(t){var e=-1,r=Array(t.size);return t.forEach(function(t,n){r[++e]=[n,t]}),r}function W(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=t}),r}var z=Array.prototype,V=Object.prototype,K=Function.prototype.toString,J=V.hasOwnProperty,X=V.toString,Y=RegExp("^"+K.call(J).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Z=B.Symbol,Q=B.Uint8Array,tt=V.propertyIsEnumerable,et=z.splice,rt=Object.getPrototypeOf,nt=Object.keys,ot=Nt(B,"DataView"),it=Nt(B,"Map"),at=Nt(B,"Promise"),st=Nt(B,"Set"),ut=Nt(B,"WeakMap"),ct=Nt(Object,"create"),ft=Ft(ot),lt=Ft(it),pt=Ft(at),ht=Ft(st),dt=Ft(ut),yt=Z?Z.prototype:void 0,vt=yt?yt.valueOf:void 0;function mt(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function bt(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function gt(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function _t(t){var e=-1,r=t?t.length:0;for(this.__data__=new gt;++e<r;)this.add(t[e])}function wt(t){this.__data__=new bt(t)}function Ot(t,e){for(var r=t.length;r--;)if(Ut(t[r][0],e))return r;return-1}function jt(t,e){for(var r=0,n=(e=Mt(e,t)?[e]:At(e)).length;null!=t&&r<n;)t=t[Bt(e[r++])];return r&&r==n?t:void 0}function Et(t,e){return J.call(t,e)||"object"==typeof t&&e in t&&null===function(t){return rt(Object(t))}(t)}function xt(t,e){return e in Object(t)}function Tt(t,e,r,n,o){return t===e||(null==t||null==e||!Vt(t)&&!Kt(e)?t!=t&&e!=e:function(t,e,r,n,o,i){var a=Ht(t),c=Ht(e),f=p,v=p;a||(f=(f=It(t))==l?_:f);c||(v=(v=It(e))==l?_:v);var m=f==_&&!H(t),S=v==_&&!H(e),A=f==v;if(A&&!m)return i||(i=new wt),a||function(t){return Kt(t)&&zt(t.length)&&!!C[X.call(t)]}(t)?kt(t,e,r,n,o,i):function(t,e,r,n,o,i,a){switch(r){case T:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case x:return!(t.byteLength!=e.byteLength||!n(new Q(t),new Q(e)));case h:case d:return+t==+e;case y:return t.name==e.name&&t.message==e.message;case g:return t!=+t?e!=+e:t==+e;case w:case j:return t==e+"";case b:var c=G;case O:var f=i&u;if(c||(c=W),t.size!=e.size&&!f)return!1;var l=a.get(t);return l?l==e:(i|=s,a.set(t,e),kt(c(t),c(e),n,o,i,a));case E:if(vt)return vt.call(t)==vt.call(e)}return!1}(t,e,f,r,n,o,i);if(!(o&u)){var k=m&&J.call(t,"__wrapped__"),P=S&&J.call(e,"__wrapped__");if(k||P){var N=k?t.value():t,I=P?e.value():e;return i||(i=new wt),r(N,I,n,o,i)}}if(!A)return!1;return i||(i=new wt),function(t,e,r,n,o,i){var a=o&u,s=Yt(t),c=s.length,f=Yt(e).length;if(c!=f&&!a)return!1;for(var l=c;l--;){var p=s[l];if(!(a?p in e:Et(e,p)))return!1}var h=i.get(t);if(h)return h==e;var d=!0;i.set(t,e);for(var y=a;++l<c;){p=s[l];var v=t[p],m=e[p];if(n)var b=a?n(m,v,p,e,t,i):n(v,m,p,t,e,i);if(!(void 0===b?v===m||r(v,m,n,o,i):b)){d=!1;break}y||(y="constructor"==p)}if(d&&!y){var g=t.constructor,_=e.constructor;g!=_&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof _&&_ instanceof _)&&(d=!1)}return i.delete(t),d}(t,e,r,n,o,i)}(t,e,Tt,r,n,o))}function St(t){return function(e){return null==e?void 0:e[t]}}function At(t){return Ht(t)?t:o(t)}function kt(t,e,r,n,o,i){var a=o&u,c=t.length,f=e.length;if(c!=f&&!(a&&f>c))return!1;var l=i.get(t);if(l)return l==e;var p=-1,h=!0,d=o&s?new _t:void 0;for(i.set(t,e);++p<c;){var y=t[p],v=e[p];if(n)var m=a?n(v,y,p,e,t,i):n(y,v,p,t,e,i);if(void 0!==m){if(m)continue;h=!1;break}if(d){if(!F(e,function(t,e){if(!d.has(e)&&(y===t||r(y,t,n,o,i)))return d.add(e)})){h=!1;break}}else if(y!==v&&!r(y,v,n,o,i)){h=!1;break}}return i.delete(t),h}mt.prototype.clear=function(){this.__data__=ct?ct(null):{}},mt.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},mt.prototype.get=function(t){var e=this.__data__;if(ct){var r=e[t];return r===a?void 0:r}return J.call(e,t)?e[t]:void 0},mt.prototype.has=function(t){var e=this.__data__;return ct?void 0!==e[t]:J.call(e,t)},mt.prototype.set=function(t,e){return this.__data__[t]=ct&&void 0===e?a:e,this},bt.prototype.clear=function(){this.__data__=[]},bt.prototype.delete=function(t){var e=this.__data__,r=Ot(e,t);return!(r<0||(r==e.length-1?e.pop():et.call(e,r,1),0))},bt.prototype.get=function(t){var e=this.__data__,r=Ot(e,t);return r<0?void 0:e[r][1]},bt.prototype.has=function(t){return Ot(this.__data__,t)>-1},bt.prototype.set=function(t,e){var r=this.__data__,n=Ot(r,t);return n<0?r.push([t,e]):r[n][1]=e,this},gt.prototype.clear=function(){this.__data__={hash:new mt,map:new(it||bt),string:new mt}},gt.prototype.delete=function(t){return Ct(this,t).delete(t)},gt.prototype.get=function(t){return Ct(this,t).get(t)},gt.prototype.has=function(t){return Ct(this,t).has(t)},gt.prototype.set=function(t,e){return Ct(this,t).set(t,e),this},_t.prototype.add=_t.prototype.push=function(t){return this.__data__.set(t,a),this},_t.prototype.has=function(t){return this.__data__.has(t)},wt.prototype.clear=function(){this.__data__=new bt},wt.prototype.delete=function(t){return this.__data__.delete(t)},wt.prototype.get=function(t){return this.__data__.get(t)},wt.prototype.has=function(t){return this.__data__.has(t)},wt.prototype.set=function(t,e){var r=this.__data__;return r instanceof bt&&r.__data__.length==i&&(r=this.__data__=new gt(r.__data__)),r.set(t,e),this};var Pt=St("length");function Ct(t,e){var r=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?r["string"==typeof e?"string":"hash"]:r.map}function Nt(t,e){var r=t[e];return function(t){if(!Vt(t))return!1;return(Wt(t)||H(t)?Y:k).test(Ft(t))}(r)?r:void 0}function It(t){return X.call(t)}function $t(t){var e=t?t.length:void 0;return zt(e)&&(Ht(t)||Jt(t)||qt(t))?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(e,String):null}function Dt(t,e){return!!(e=null==e?f:e)&&("number"==typeof t||P.test(t))&&t>-1&&t%1==0&&t<e}function Mt(t,e){if(Ht(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!Xt(t))||(A.test(t)||!S.test(t)||null!=e&&t in Object(e))}function Lt(t){return t==t&&!Vt(t)}function Rt(t,e){return function(r){return null!=r&&(r[t]===e&&(void 0!==e||t in Object(r)))}}function Bt(t){if("string"==typeof t||Xt(t))return t;var e=t+"";return"0"==e&&1/t==-c?"-0":e}function Ft(t){if(null!=t){try{return K.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Ut(t,e){return t===e||t!=t&&e!=e}function qt(t){return function(t){return Kt(t)&&Gt(t)}(t)&&J.call(t,"callee")&&(!tt.call(t,"callee")||X.call(t)==l)}(ot&&It(new ot(new ArrayBuffer(1)))!=T||it&&It(new it)!=b||at&&"[object Promise]"!=It(at.resolve())||st&&It(new st)!=O||ut&&"[object WeakMap]"!=It(new ut))&&(It=function(t){var e=X.call(t),r=e==_?t.constructor:void 0,n=r?Ft(r):void 0;if(n)switch(n){case ft:return T;case lt:return b;case pt:return"[object Promise]";case ht:return O;case dt:return"[object WeakMap]"}return e});var Ht=Array.isArray;function Gt(t){return null!=t&&zt(Pt(t))&&!Wt(t)}function Wt(t){var e=Vt(t)?X.call(t):"";return e==v||e==m}function zt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=f}function Vt(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function Kt(t){return!!t&&"object"==typeof t}function Jt(t){return"string"==typeof t||!Ht(t)&&Kt(t)&&X.call(t)==j}function Xt(t){return"symbol"==typeof t||Kt(t)&&X.call(t)==E}function Yt(t){var e=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||V)}(t);if(!e&&!Gt(t))return function(t){return nt(Object(t))}(t);var r=$t(t),n=!!r,o=r||[],i=o.length;for(var a in t)!Et(t,a)||n&&("length"==a||Dt(a,i))||e&&"constructor"==a||o.push(a);return o}var Zt=function(t){return function(e){var r=It(e);return r==b?G(e):r==O?function(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=[t,t]}),r}(e):U(e,t(e))}}(Yt);function Qt(t){return t}t.exports=function(t){return"function"==typeof t?t:null==t?Qt:"object"==typeof t?Ht(t)?function(t,e){return Mt(t)&&Lt(e)?Rt(Bt(t),e):function(r){var n=function(t,e,r){var n=null==t?void 0:jt(t,e);return void 0===n?r:n}(r,t);return void 0===n&&n===e?function(t,e){return null!=t&&function(t,e,r){for(var n,o=-1,i=(e=Mt(e,t)?[e]:At(e)).length;++o<i;){var a=Bt(e[o]);if(!(n=null!=t&&r(t,a)))break;t=t[a]}return n||!!(i=t?t.length:0)&&zt(i)&&Dt(a,i)&&(Ht(t)||Jt(t)||qt(t))}(t,e,xt)}(r,t):Tt(e,n,void 0,s|u)}}(t[0],t[1]):function(t){var e=function(t){for(var e=Zt(t),r=e.length;r--;)e[r][2]=Lt(e[r][1]);return e}(t);return 1==e.length&&e[0][2]?Rt(e[0][0],e[0][1]):function(r){return r===t||function(t,e,r,n){var o=r.length,i=o,a=!n;if(null==t)return!i;for(t=Object(t);o--;){var c=r[o];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++o<i;){var f=(c=r[o])[0],l=t[f],p=c[1];if(a&&c[2]){if(void 0===l&&!(f in t))return!1}else{var h=new wt;if(n)var d=n(l,p,f,t,e,h);if(!(void 0===d?Tt(p,l,n,s|u,h):d))return!1}}return!0}(r,t,e)}}(t):function(t){return Mt(t)?St(Bt(t)):function(t){return function(e){return jt(e,t)}}(t)}(t)}}).call(this,r(6)(t),r(3))},function(t,e,r){(function(t,n){var o=r(77),i="Expected a function",a="__lodash_hash_undefined__",s="[object Function]",u="[object GeneratorFunction]",c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g,f=/\\(\\)?/g,l=/^\[object .+?Constructor\]$/,p={function:!0,object:!0},h=p[typeof e]&&e&&!e.nodeType?e:void 0,d=p[typeof t]&&t&&!t.nodeType?t:void 0,y=_(h&&d&&"object"==typeof n&&n),v=_(p[typeof self]&&self),m=_(p[typeof window]&&window),b=_(p[typeof this]&&this),g=y||m!==(b&&b.window)&&m||v||b||Function("return this")();function _(t){return t&&t.Object===Object?t:null}var w=Array.prototype,O=Object.prototype,j=Function.prototype.toString,E=O.hasOwnProperty,x=O.toString,T=RegExp("^"+j.call(E).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),S=w.splice,A=D(g,"Map"),k=D(Object,"create");function P(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function C(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function N(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function I(t,e){for(var r=t.length;r--;)if(R(t[r][0],e))return r;return-1}function $(t,e){var r=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?r["string"==typeof e?"string":"hash"]:r.map}function D(t,e){var r=t[e];return function(t){if(!B(t))return!1;return(function(t){var e=B(t)?x.call(t):"";return e==s||e==u}(t)||function(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}(t)?T:l).test(function(t){if(null!=t){try{return j.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t))}(r)?r:void 0}P.prototype.clear=function(){this.__data__=k?k(null):{}},P.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},P.prototype.get=function(t){var e=this.__data__;if(k){var r=e[t];return r===a?void 0:r}return E.call(e,t)?e[t]:void 0},P.prototype.has=function(t){var e=this.__data__;return k?void 0!==e[t]:E.call(e,t)},P.prototype.set=function(t,e){return this.__data__[t]=k&&void 0===e?a:e,this},C.prototype.clear=function(){this.__data__=[]},C.prototype.delete=function(t){var e=this.__data__,r=I(e,t);return!(r<0||(r==e.length-1?e.pop():S.call(e,r,1),0))},C.prototype.get=function(t){var e=this.__data__,r=I(e,t);return r<0?void 0:e[r][1]},C.prototype.has=function(t){return I(this.__data__,t)>-1},C.prototype.set=function(t,e){var r=this.__data__,n=I(r,t);return n<0?r.push([t,e]):r[n][1]=e,this},N.prototype.clear=function(){this.__data__={hash:new P,map:new(A||C),string:new P}},N.prototype.delete=function(t){return $(this,t).delete(t)},N.prototype.get=function(t){return $(this,t).get(t)},N.prototype.has=function(t){return $(this,t).has(t)},N.prototype.set=function(t,e){return $(this,t).set(t,e),this};var M=L(function(t){var e=[];return function(t){return null==t?"":o(t)}(t).replace(c,function(t,r,n,o){e.push(n?o.replace(f,"$1"):r||t)}),e});function L(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new TypeError(i);var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=t.apply(this,n);return r.cache=i.set(o,a),a};return r.cache=new(L.Cache||N),r}function R(t,e){return t===e||t!=t&&e!=e}function B(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}L.Cache=N,t.exports=M}).call(this,r(6)(t),r(3))},function(t,e,r){(function(t,r){var n=1/0,o="[object Symbol]",i={function:!0,object:!0},a=i[typeof e]&&e&&!e.nodeType?e:void 0,s=i[typeof t]&&t&&!t.nodeType?t:void 0,u=h(a&&s&&"object"==typeof r&&r),c=h(i[typeof self]&&self),f=h(i[typeof window]&&window),l=h(i[typeof this]&&this),p=u||f!==(l&&l.window)&&f||c||l||Function("return this")();function h(t){return t&&t.Object===Object?t:null}var d=Object.prototype.toString,y=p.Symbol,v=y?y.prototype:void 0,m=v?v.toString:void 0;t.exports=function(t){if("string"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&d.call(t)==o}(t))return m?m.call(t):"";var e=t+"";return"0"==e&&1/t==-n?"-0":e}}).call(this,r(6)(t),r(3))},function(t,e,r){var n=r(79),o=r(80),i=200,a="__lodash_hash_undefined__",s="[object Function]",u="[object GeneratorFunction]",c=/^\[object .+?Constructor\]$/;function f(t,e){return!!t.length&&function(t,e,r){if(e!=e)return function(t,e,r){var n=t.length,o=e+(r?0:-1);for(;r?o--:++o<n;){var i=t[o];if(i!=i)return o}return-1}(t,r);var n=r-1,o=t.length;for(;++n<o;)if(t[n]===e)return n;return-1}(t,e,0)>-1}function l(t,e,r){for(var n=-1,o=t.length;++n<o;)if(r(e,t[n]))return!0;return!1}function p(t,e){return t.has(e)}var h=Array.prototype,d=Object.prototype,y=Function.prototype.toString,v=d.hasOwnProperty,m=d.toString,b=RegExp("^"+y.call(v).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),g=h.splice,_=A(o,"Map"),w=A(Object,"create");function O(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function j(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function E(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function x(t){var e=-1,r=t?t.length:0;for(this.__data__=new E;++e<r;)this.add(t[e])}function T(t,e){for(var r=t.length;r--;)if(k(t[r][0],e))return r;return-1}function S(t,e){var r=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?r["string"==typeof e?"string":"hash"]:r.map}function A(t,e){var r=t[e];return function(t){if(!P(t))return!1;return(function(t){var e=P(t)?m.call(t):"";return e==s||e==u}(t)||function(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}(t)?b:c).test(function(t){if(null!=t){try{return y.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t))}(r)?r:void 0}function k(t,e){return t===e||t!=t&&e!=e}function P(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}O.prototype.clear=function(){this.__data__=w?w(null):{}},O.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},O.prototype.get=function(t){var e=this.__data__;if(w){var r=e[t];return r===a?void 0:r}return v.call(e,t)?e[t]:void 0},O.prototype.has=function(t){var e=this.__data__;return w?void 0!==e[t]:v.call(e,t)},O.prototype.set=function(t,e){return this.__data__[t]=w&&void 0===e?a:e,this},j.prototype.clear=function(){this.__data__=[]},j.prototype.delete=function(t){var e=this.__data__,r=T(e,t);return!(r<0||(r==e.length-1?e.pop():g.call(e,r,1),0))},j.prototype.get=function(t){var e=this.__data__,r=T(e,t);return r<0?void 0:e[r][1]},j.prototype.has=function(t){return T(this.__data__,t)>-1},j.prototype.set=function(t,e){var r=this.__data__,n=T(r,t);return n<0?r.push([t,e]):r[n][1]=e,this},E.prototype.clear=function(){this.__data__={hash:new O,map:new(_||j),string:new O}},E.prototype.delete=function(t){return S(this,t).delete(t)},E.prototype.get=function(t){return S(this,t).get(t)},E.prototype.has=function(t){return S(this,t).has(t)},E.prototype.set=function(t,e){return S(this,t).set(t,e),this},x.prototype.add=x.prototype.push=function(t){return this.__data__.set(t,a),this},x.prototype.has=function(t){return this.__data__.has(t)},t.exports=function(t,e,r){var o=-1,a=f,s=t.length,u=!0,c=[],h=c;if(r)u=!1,a=l;else if(s>=i){var d=e?null:n(t);if(d)return function(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=t}),r}(d);u=!1,a=p,h=new x}else h=e?[]:c;t:for(;++o<s;){var y=t[o],v=e?e(y):y;if(y=r||0!==y?y:0,u&&v==v){for(var m=h.length;m--;)if(h[m]===v)continue t;e&&h.push(v),c.push(y)}else a(h,v,r)||(h!==c&&h.push(v),c.push(y))}return c}},function(t,e,r){(function(t,r){var n="[object Function]",o="[object GeneratorFunction]",i=/^\[object .+?Constructor\]$/,a={function:!0,object:!0},s=a[typeof e]&&e&&!e.nodeType?e:void 0,u=a[typeof t]&&t&&!t.nodeType?t:void 0,c=d(s&&u&&"object"==typeof r&&r),f=d(a[typeof self]&&self),l=d(a[typeof window]&&window),p=d(a[typeof this]&&this),h=c||l!==(p&&p.window)&&l||f||p||Function("return this")();function d(t){return t&&t.Object===Object?t:null}var y=Object.prototype,v=Function.prototype.toString,m=y.hasOwnProperty,b=y.toString,g=RegExp("^"+v.call(m).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),_=function(t,e){var r=t[e];return function(t){if(!O(t))return!1;return(function(t){var e=O(t)?b.call(t):"";return e==n||e==o}(t)||function(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}(t)?g:i).test(function(t){if(null!=t){try{return v.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t))}(r)?r:void 0}(h,"Set"),w=_&&1/function(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=t}),r}(new _([,-0]))[1]==1/0?function(t){return new _(t)}:function(){};function O(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}t.exports=w}).call(this,r(6)(t),r(3))},function(t,e,r){(function(t,r){var n={function:!0,object:!0},o=n[typeof e]&&e&&!e.nodeType?e:void 0,i=n[typeof t]&&t&&!t.nodeType?t:void 0,a=l(o&&i&&"object"==typeof r&&r),s=l(n[typeof self]&&self),u=l(n[typeof window]&&window),c=l(n[typeof this]&&this),f=a||u!==(c&&c.window)&&u||s||c||Function("return this")();function l(t){return t&&t.Object===Object?t:null}t.exports=f}).call(this,r(6)(t),r(3))},function(t,e,r){"use strict";var n=Object.prototype.hasOwnProperty,o=Object.prototype.toString,i=Array.prototype.slice,a=r(82),s=Object.prototype.propertyIsEnumerable,u=!s.call({toString:null},"toString"),c=s.call(function(){},"prototype"),f=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],l=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},h=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&n.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{l(window[t])}catch(t){return!0}}catch(t){return!0}return!1}(),d=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===o.call(t),i=a(t),s=e&&"[object String]"===o.call(t),p=[];if(!e&&!r&&!i)throw new TypeError("Object.keys called on a non-object");var d=c&&r;if(s&&t.length>0&&!n.call(t,0))for(var y=0;y<t.length;++y)p.push(String(y));if(i&&t.length>0)for(var v=0;v<t.length;++v)p.push(String(v));else for(var m in t)d&&"prototype"===m||!n.call(t,m)||p.push(String(m));if(u)for(var b=function(t){if("undefined"==typeof window||!h)return l(t);try{return l(t)}catch(t){return!1}}(t),g=0;g<f.length;++g)b&&"constructor"===f[g]||!n.call(t,f[g])||p.push(f[g]);return p};d.shim=function(){if(Object.keys){if(!function(){return 2===(Object.keys(arguments)||"").length}(1,2)){var t=Object.keys;Object.keys=function(e){return a(e)?t(i.call(e)):t(e)}}}else Object.keys=d;return Object.keys||d},t.exports=d},function(t,e,r){"use strict";var n=Object.prototype.toString;t.exports=function(t){var e=n.call(t),r="[object Arguments]"===e;return r||(r="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===n.call(t.callee)),r}},function(t,e,r){"use strict";var n=r(84),o=r(17),i=o(o({},n),{ToIndex:function(t){if(void 0===t)return 0;var e=this.ToInteger(t);if(e<0)throw new RangeError("index must be >= 0");var r=this.ToLength(e);if(!this.SameValueZero(e,r))throw new RangeError("index must be >= 0 and < 2 ** 53 - 1");return r}});delete i.EnumerableOwnNames,t.exports=i},function(t,e,r){"use strict";var n=r(85),o=r(17),i=o(o({},n),{SameValueNonNumber:function(t,e){if("number"==typeof t||typeof t!=typeof e)throw new TypeError("SameValueNonNumber requires two non-number values of the same type.");return this.SameValue(t,e)}});t.exports=i},function(t,e,r){"use strict";var n=r(14),o=r(87),i=r(33),a=i("%TypeError%"),s=i("%SyntaxError%"),u=i("%Array%"),c=i("%String%"),f=i("%Object%"),l=i("%Number%"),p=i("%Symbol%",!0),h=i("%RegExp%"),d=!!p,y=r(34),v=r(35),m=l.MAX_SAFE_INTEGER||Math.pow(2,53)-1,b=r(17),g=r(36),_=r(37),w=r(93),O=parseInt,j=r(15),E=j.call(Function.call,u.prototype.slice),x=j.call(Function.call,c.prototype.slice),T=j.call(Function.call,h.prototype.test,/^0b[01]+$/i),S=j.call(Function.call,h.prototype.test,/^0o[0-7]+$/i),A=j.call(Function.call,h.prototype.exec),k=new h("["+["","​","￾"].join("")+"]","g"),P=j.call(Function.call,h.prototype.test,k),C=j.call(Function.call,h.prototype.test,/^[-+]0x[0-9a-f]+$/i),N=j.call(Function.call,c.prototype.charCodeAt),I=j.call(Function.call,Object.prototype.toString),$=Math.floor,D=Math.abs,M=Object.create,L=f.getOwnPropertyDescriptor,R=f.isExtensible,B=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),F=new RegExp("(^["+B+"]+)|(["+B+"]+$)","g"),U=j.call(Function.call,c.prototype.replace),q=r(94),H=r(96),G=b(b({},q),{Call:function(t,e){var r=arguments.length>2?arguments[2]:[];if(!this.IsCallable(t))throw new a(t+" is not a function");return t.apply(e,r)},ToPrimitive:o,ToNumber:function(t){var e=w(t)?t:o(t,l);if("symbol"==typeof e)throw new a("Cannot convert a Symbol value to a number");if("string"==typeof e){if(T(e))return this.ToNumber(O(x(e,2),2));if(S(e))return this.ToNumber(O(x(e,2),8));if(P(e)||C(e))return NaN;var r=function(t){return U(t,F,"")}(e);if(r!==e)return this.ToNumber(r)}return l(e)},ToInt16:function(t){var e=this.ToUint16(t);return e>=32768?e-65536:e},ToInt8:function(t){var e=this.ToUint8(t);return e>=128?e-256:e},ToUint8:function(t){var e=this.ToNumber(t);if(y(e)||0===e||!v(e))return 0;var r=g(e)*$(D(e));return _(r,256)},ToUint8Clamp:function(t){var e=this.ToNumber(t);if(y(e)||e<=0)return 0;if(e>=255)return 255;var r=$(t);return r+.5<e?r+1:e<r+.5?r:r%2!=0?r+1:r},ToString:function(t){if("symbol"==typeof t)throw new a("Cannot convert a Symbol value to a string");return c(t)},ToObject:function(t){return this.RequireObjectCoercible(t),f(t)},ToPropertyKey:function(t){var e=this.ToPrimitive(t,c);return"symbol"==typeof e?e:this.ToString(e)},ToLength:function(t){var e=this.ToInteger(t);return e<=0?0:e>m?m:e},CanonicalNumericIndexString:function(t){if("[object String]"!==I(t))throw new a("must be a string");if("-0"===t)return-0;var e=this.ToNumber(t);return this.SameValue(this.ToString(e),t)?e:void 0},RequireObjectCoercible:q.CheckObjectCoercible,IsArray:u.isArray||function(t){return"[object Array]"===I(t)},IsConstructor:function(t){return"function"==typeof t&&!!t.prototype},IsExtensible:Object.preventExtensions?function(t){return!w(t)&&R(t)}:function(t){return!0},IsInteger:function(t){if("number"!=typeof t||y(t)||!v(t))return!1;var e=D(t);return $(e)===e},IsPropertyKey:function(t){return"string"==typeof t||"symbol"==typeof t},IsRegExp:function(t){if(!t||"object"!=typeof t)return!1;if(d){var e=t[p.match];if(void 0!==e)return q.ToBoolean(e)}return H(t)},SameValueZero:function(t,e){return t===e||y(t)&&y(e)},GetV:function(t,e){if(!this.IsPropertyKey(e))throw new a("Assertion failed: IsPropertyKey(P) is not true");return this.ToObject(t)[e]},GetMethod:function(t,e){if(!this.IsPropertyKey(e))throw new a("Assertion failed: IsPropertyKey(P) is not true");var r=this.GetV(t,e);if(null!=r){if(!this.IsCallable(r))throw new a(e+"is not a function");return r}},Get:function(t,e){if("Object"!==this.Type(t))throw new a("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(e))throw new a("Assertion failed: IsPropertyKey(P) is not true");return t[e]},Type:function(t){return"symbol"==typeof t?"Symbol":q.Type(t)},SpeciesConstructor:function(t,e){if("Object"!==this.Type(t))throw new a("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==this.Type(r))throw new a("O.constructor is not an Object");var n=d&&p.species?r[p.species]:void 0;if(null==n)return e;if(this.IsConstructor(n))return n;throw new a("no constructor found")},CompletePropertyDescriptor:function(t){if(!this.IsPropertyDescriptor(t))throw new a("Desc must be a Property Descriptor");return this.IsGenericDescriptor(t)||this.IsDataDescriptor(t)?(n(t,"[[Value]]")||(t["[[Value]]"]=void 0),n(t,"[[Writable]]")||(t["[[Writable]]"]=!1)):(n(t,"[[Get]]")||(t["[[Get]]"]=void 0),n(t,"[[Set]]")||(t["[[Set]]"]=void 0)),n(t,"[[Enumerable]]")||(t["[[Enumerable]]"]=!1),n(t,"[[Configurable]]")||(t["[[Configurable]]"]=!1),t},Set:function(t,e,r,n){if("Object"!==this.Type(t))throw new a("O must be an Object");if(!this.IsPropertyKey(e))throw new a("P must be a Property Key");if("Boolean"!==this.Type(n))throw new a("Throw must be a Boolean");if(n)return t[e]=r,!0;try{t[e]=r}catch(t){return!1}},HasOwnProperty:function(t,e){if("Object"!==this.Type(t))throw new a("O must be an Object");if(!this.IsPropertyKey(e))throw new a("P must be a Property Key");return n(t,e)},HasProperty:function(t,e){if("Object"!==this.Type(t))throw new a("O must be an Object");if(!this.IsPropertyKey(e))throw new a("P must be a Property Key");return e in t},IsConcatSpreadable:function(t){if("Object"!==this.Type(t))return!1;if(d&&"symbol"==typeof p.isConcatSpreadable){var e=this.Get(t,Symbol.isConcatSpreadable);if(void 0!==e)return this.ToBoolean(e)}return this.IsArray(t)},Invoke:function(t,e){if(!this.IsPropertyKey(e))throw new a("P must be a Property Key");var r=E(arguments,2),n=this.GetV(t,e);return this.Call(n,t,r)},GetIterator:function(t,e){if(!d)throw new SyntaxError("ES.GetIterator depends on native iterator support.");var r=e;arguments.length<2&&(r=this.GetMethod(t,p.iterator));var n=this.Call(r,t);if("Object"!==this.Type(n))throw new a("iterator must return an object");return n},IteratorNext:function(t,e){var r=this.Invoke(t,"next",arguments.length<2?[]:[e]);if("Object"!==this.Type(r))throw new a("iterator next must return an object");return r},IteratorComplete:function(t){if("Object"!==this.Type(t))throw new a("Assertion failed: Type(iterResult) is not Object");return this.ToBoolean(this.Get(t,"done"))},IteratorValue:function(t){if("Object"!==this.Type(t))throw new a("Assertion failed: Type(iterResult) is not Object");return this.Get(t,"value")},IteratorStep:function(t){var e=this.IteratorNext(t);return!0!==this.IteratorComplete(e)&&e},IteratorClose:function(t,e){if("Object"!==this.Type(t))throw new a("Assertion failed: Type(iterator) is not Object");if(!this.IsCallable(e))throw new a("Assertion failed: completion is not a thunk for a Completion Record");var r,n=e,o=this.GetMethod(t,"return");if(void 0===o)return n();try{var i=this.Call(o,t,[])}catch(t){throw r=n(),n=null,t}if(r=n(),n=null,"Object"!==this.Type(i))throw new a("iterator .return must return an object");return r},CreateIterResultObject:function(t,e){if("Boolean"!==this.Type(e))throw new a("Assertion failed: Type(done) is not Boolean");return{value:t,done:e}},RegExpExec:function(t,e){if("Object"!==this.Type(t))throw new a("R must be an Object");if("String"!==this.Type(e))throw new a("S must be a String");var r=this.Get(t,"exec");if(this.IsCallable(r)){var n=this.Call(r,t,[e]);if(null===n||"Object"===this.Type(n))return n;throw new a('"exec" method must return `null` or an Object')}return A(t,e)},ArraySpeciesCreate:function(t,e){if(!this.IsInteger(e)||e<0)throw new a("Assertion failed: length must be an integer >= 0");var r,n=0===e?0:e;if(this.IsArray(t)&&(r=this.Get(t,"constructor"),"Object"===this.Type(r)&&d&&p.species&&null===(r=this.Get(r,p.species))&&(r=void 0)),void 0===r)return u(n);if(!this.IsConstructor(r))throw new a("C must be a constructor");return new r(n)},CreateDataProperty:function(t,e,r){if("Object"!==this.Type(t))throw new a("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(e))throw new a("Assertion failed: IsPropertyKey(P) is not true");var n=L(t,e),o=n||"function"!=typeof R||R(t);if(n&&(!n.writable||!n.configurable)||!o)return!1;var i={configurable:!0,enumerable:!0,value:r,writable:!0};return Object.defineProperty(t,e,i),!0},CreateDataPropertyOrThrow:function(t,e,r){if("Object"!==this.Type(t))throw new a("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(e))throw new a("Assertion failed: IsPropertyKey(P) is not true");var n=this.CreateDataProperty(t,e,r);if(!n)throw new a("unable to create data property");return n},ObjectCreate:function(t,e){if(null!==t&&"Object"!==this.Type(t))throw new a("Assertion failed: proto must be null or an object");if((arguments.length<2?[]:e).length>0)throw new s("es-abstract does not yet support internal slots");if(null===t&&!M)throw new s("native Object.create support is required to create null objects");return M(t)},AdvanceStringIndex:function(t,e,r){if("String"!==this.Type(t))throw new a("S must be a String");if(!this.IsInteger(e)||e<0||e>m)throw new a("Assertion failed: length must be an integer >= 0 and <= 2**53");if("Boolean"!==this.Type(r))throw new a("Assertion failed: unicode must be a Boolean");if(!r)return e+1;if(e+1>=t.length)return e+1;var n=N(t,e);if(n<55296||n>56319)return e+1;var o=N(t,e+1);return o<56320||o>57343?e+1:e+2}});delete G.CheckObjectCoercible,t.exports=G},function(t,e,r){"use strict";var n=Array.prototype.slice,o=Object.prototype.toString;t.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==o.call(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,i=n.call(arguments,1),a=Math.max(0,e.length-i.length),s=[],u=0;u<a;u++)s.push("$"+u);if(r=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(function(){if(this instanceof r){var o=e.apply(this,i.concat(n.call(arguments)));return Object(o)===o?o:this}return e.apply(t,i.concat(n.call(arguments)))}),e.prototype){var c=function(){};c.prototype=e.prototype,r.prototype=new c,c.prototype=null}return r}},function(t,e,r){"use strict";t.exports=r(88)},function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,o=r(32),i=r(16),a=r(89),s=r(90);t.exports=function(t){if(o(t))return t;var e,r="default";if(arguments.length>1&&(arguments[1]===String?r="string":arguments[1]===Number&&(r="number")),n&&(Symbol.toPrimitive?e=function(t,e){var r=t[e];if(null!==r&&void 0!==r){if(!i(r))throw new TypeError(r+" returned for property "+e+" of object "+t+" is not a function");return r}}(t,Symbol.toPrimitive):s(t)&&(e=Symbol.prototype.valueOf)),void 0!==e){var u=e.call(t,r);if(o(u))return u;throw new TypeError("unable to convert exotic object to primitive")}return"default"===r&&(a(t)||s(t))&&(r="string"),function(t,e){if(void 0===t||null===t)throw new TypeError("Cannot call method on "+t);if("string"!=typeof e||"number"!==e&&"string"!==e)throw new TypeError('hint must be "string" or "number"');var r,n,a,s="string"===e?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<s.length;++a)if(r=t[s[a]],i(r)&&(n=r.call(t),o(n)))return n;throw new TypeError("No default value")}(t,"default"===r?"number":r)}},function(t,e,r){"use strict";var n=Date.prototype.getDay,o=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){return"object"==typeof t&&null!==t&&(i?function(t){try{return n.call(t),!0}catch(t){return!1}}(t):"[object Date]"===o.call(t))}},function(t,e,r){"use strict";var n=Object.prototype.toString;if(r(91)()){var o=Symbol.prototype.toString,i=/^Symbol\(.*\)$/;t.exports=function(t){if("symbol"==typeof t)return!0;if("[object Symbol]"!==n.call(t))return!1;try{return function(t){return"symbol"==typeof t.valueOf()&&i.test(o.call(t))}(t)}catch(t){return!1}}}else t.exports=function(t){return!1}},function(t,e,r){"use strict";(function(e){var n=e.Symbol,o=r(92);t.exports=function(){return"function"==typeof n&&("function"==typeof Symbol&&("symbol"==typeof n("foo")&&("symbol"==typeof Symbol("bar")&&o())))}}).call(this,r(3))},function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},function(t,e){t.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},function(t,e,r){"use strict";var n=r(33),o=n("%Object%"),i=n("%TypeError%"),a=n("%String%"),s=r(34),u=r(35),c=r(36),f=r(37),l=r(16),p=r(95),h=r(14),d={ToPrimitive:p,ToBoolean:function(t){return!!t},ToNumber:function(t){return+t},ToInteger:function(t){var e=this.ToNumber(t);return s(e)?0:0!==e&&u(e)?c(e)*Math.floor(Math.abs(e)):e},ToInt32:function(t){return this.ToNumber(t)>>0},ToUint32:function(t){return this.ToNumber(t)>>>0},ToUint16:function(t){var e=this.ToNumber(t);if(s(e)||0===e||!u(e))return 0;var r=c(e)*Math.floor(Math.abs(e));return f(r,65536)},ToString:function(t){return a(t)},ToObject:function(t){return this.CheckObjectCoercible(t),o(t)},CheckObjectCoercible:function(t,e){if(null==t)throw new i(e||"Cannot call method on "+t);return t},IsCallable:l,SameValue:function(t,e){return t===e?0!==t||1/t==1/e:s(t)&&s(e)},Type:function(t){return null===t?"Null":void 0===t?"Undefined":"function"==typeof t||"object"==typeof t?"Object":"number"==typeof t?"Number":"boolean"==typeof t?"Boolean":"string"==typeof t?"String":void 0},IsPropertyDescriptor:function(t){if("Object"!==this.Type(t))return!1;var e={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var r in t)if(h(t,r)&&!e[r])return!1;var n=h(t,"[[Value]]"),o=h(t,"[[Get]]")||h(t,"[[Set]]");if(n&&o)throw new i("Property Descriptors may not be both accessor and data descriptors");return!0},IsAccessorDescriptor:function(t){if(void 0===t)return!1;if(!this.IsPropertyDescriptor(t))throw new i("Desc must be a Property Descriptor");return!(!h(t,"[[Get]]")&&!h(t,"[[Set]]"))},IsDataDescriptor:function(t){if(void 0===t)return!1;if(!this.IsPropertyDescriptor(t))throw new i("Desc must be a Property Descriptor");return!(!h(t,"[[Value]]")&&!h(t,"[[Writable]]"))},IsGenericDescriptor:function(t){if(void 0===t)return!1;if(!this.IsPropertyDescriptor(t))throw new i("Desc must be a Property Descriptor");return!this.IsAccessorDescriptor(t)&&!this.IsDataDescriptor(t)},FromPropertyDescriptor:function(t){if(void 0===t)return t;if(!this.IsPropertyDescriptor(t))throw new i("Desc must be a Property Descriptor");if(this.IsDataDescriptor(t))return{value:t["[[Value]]"],writable:!!t["[[Writable]]"],enumerable:!!t["[[Enumerable]]"],configurable:!!t["[[Configurable]]"]};if(this.IsAccessorDescriptor(t))return{get:t["[[Get]]"],set:t["[[Set]]"],enumerable:!!t["[[Enumerable]]"],configurable:!!t["[[Configurable]]"]};throw new i("FromPropertyDescriptor must be called with a fully populated Property Descriptor")},ToPropertyDescriptor:function(t){if("Object"!==this.Type(t))throw new i("ToPropertyDescriptor requires an object");var e={};if(h(t,"enumerable")&&(e["[[Enumerable]]"]=this.ToBoolean(t.enumerable)),h(t,"configurable")&&(e["[[Configurable]]"]=this.ToBoolean(t.configurable)),h(t,"value")&&(e["[[Value]]"]=t.value),h(t,"writable")&&(e["[[Writable]]"]=this.ToBoolean(t.writable)),h(t,"get")){var r=t.get;if(void 0!==r&&!this.IsCallable(r))throw new TypeError("getter must be a function");e["[[Get]]"]=r}if(h(t,"set")){var n=t.set;if(void 0!==n&&!this.IsCallable(n))throw new i("setter must be a function");e["[[Set]]"]=n}if((h(e,"[[Get]]")||h(e,"[[Set]]"))&&(h(e,"[[Value]]")||h(e,"[[Writable]]")))throw new i("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return e}};t.exports=d},function(t,e,r){"use strict";var n=Object.prototype.toString,o=r(32),i=r(16),a=function(t){var e;if((e=arguments.length>1?arguments[1]:"[object Date]"===n.call(t)?String:Number)===String||e===Number){var r,a,s=e===String?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<s.length;++a)if(i(t[s[a]])&&(r=t[s[a]](),o(r)))return r;throw new TypeError("No default value")}throw new TypeError("invalid [[DefaultValue]] hint supplied")};t.exports=function(t){return o(t)?t:arguments.length>1?a(t,arguments[1]):a(t)}},function(t,e,r){"use strict";var n=r(14),o=RegExp.prototype.exec,i=Object.getOwnPropertyDescriptor,a=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!s)return"[object RegExp]"===a.call(t);var e=i(t,"lastIndex");return!(!e||!n(e,"value"))&&function(t){try{var e=t.lastIndex;return t.lastIndex=0,o.call(t),!0}catch(t){return!1}finally{t.lastIndex=e}}(t)}},function(t,e,r){"use strict";var n=r(38),o=r(30);t.exports=function(){var t=n();return o(Object,{fromEntries:t},{fromEntries:function(){return Object.fromEntries!==t}}),t}},function(t,e,r){var n=r(99);"string"==typeof n&&(n=[[t.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(9)(n,o);n.locals&&(t.exports=n.locals)},function(t,e,r){(t.exports=r(8)(!1)).push([t.i,'\nhtml, body {\n  margin: 0;\n  height: 100%;\n  overflow: hidden;\n}\n\n#app {\n  width: 100%;\n  height: 100%;\n}\n\n#app * {\n  box-sizing: border-box;\n}\n\n.app {\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(to bottom, #323e4a 0%,#161618 100%);\n\n  display: flex;\n  flex-direction: column;\n\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.header {\n  position: fixed;\n  z-index: 1;\n}\n\n.view-container {\n  flex: 1 1 auto;\n  align-self: auto;\n\n  position: relative;\n  top: 54px;\n}\n\n.view-container .view {\n  height: 100%;\n  width: calc(100% - 50px);\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition-property: opacity, left, filter;\n  transition-duration: .5s, .5s, .5s;\n}\n\n.view-container .view[data-page="home"] {\n  left: 10%;\n  width: 70%;\n}\n\n.view-container .view[data-page="item"] {\n  left: 30%;\n  width: 70%;\n  position: fixed;\n  top: calc(54px + 20px);\n}\n\n.view-container[data-active-page="home"] .view[data-page="item"] {\n  opacity: 0;\n  left: 50%;\n  z-index: -1;\n}\n\n.view-container[data-active-page="item"] .view[data-page="home"] {\n  left: 2%;\n  /* -webkit-mask-image: linear-gradient(to right, rgba(0, 0, 0, .25), transparent 45%);\n  mask-image: linear-gradient(to right, rgba(0, 0, 0, .25), transparent 45%); */\n  opacity: .15;\n  filter: blur(10px);\n}\n\n.view-container[data-active-page="item"] .view[data-page="item"] {\n  left: 20%;\n}\n',""])},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var r=e.protocol+"//"+e.host,n=r+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?r+i:n+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,r){var n=r(102);"string"==typeof n&&(n=[[t.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(9)(n,o);n.locals&&(t.exports=n.locals)},function(t,e,r){(t.exports=r(8)(!1)).push([t.i,"\n.search-phrase {\n  width: 100%;\n  max-width: 1245px;\n}\n",""])},function(t,e,r){var n=r(104);"string"==typeof n&&(n=[[t.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(9)(n,o);n.locals&&(t.exports=n.locals)},function(t,e,r){(t.exports=r(8)(!1)).push([t.i,"\n/* Fine adjustments on uk-thumbnav */\n.results-container .uk-thumbnav > * > ::after {\n  background: rgba(255,255,255,0.2);\n}\n\n.results-container .result-item-thumbnail-holder,\n.results-container .uk-thumbnav > * > ::after {\n  height: 169px;\n}\n\n.results-container .uk-thumbnav > * > :focus::after,\n.results-container .uk-thumbnav > * > :hover::after {\n  background-color: transparent;\n}\n\n.results-container .result-item-caption {\n  width: 300px;\n}\n\n.results-container .uk-thumbnav > * > :focus,\n.results-container .uk-thumbnav > * > :hover {\n  text-decoration: none;\n}\n",""])},function(t,e,r){var n=r(106);"string"==typeof n&&(n=[[t.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(9)(n,o);n.locals&&(t.exports=n.locals)},function(t,e,r){(t.exports=r(8)(!1)).push([t.i,"\n.movie-details dt {\n  color: rgba(255, 255, 255, .3);\n}\n\n.movie-details-img-container {\n  float: left;\n  min-width: 342px;\n  min-height: 497px;\n}\n\n.movie-details dt,\n.movie-details dd {\n  margin-left: 362px;\n}\n",""])},function(t,e,r){"use strict";r.r(e);var n=r(0),o=r.n(n),i=r(40),a=r.n(i),s=r(41),u=a()();function c(t){return 0===Object.keys(t).length}function f(t,e){if("function"!=typeof t)throw new Error("First argument given to Cycle must be the 'main' function.");if("object"!=typeof e||null===e)throw new Error("Second argument given to Cycle must be an object with driver functions as properties.");if(c(e))throw new Error("Second argument given to Cycle must be an object with at least one driver function declared as a property.");var r=function(t){if("object"!=typeof t||null===t)throw new Error("Argument given to setupReusable must be an object with driver functions as properties.");if(c(t))throw new Error("Argument given to setupReusable must be an object with at least one driver function declared as a property.");var e=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=o.a.create());return e}(t),r=function(t){for(var e in t)t.hasOwnProperty(e)&&t[e]&&"function"==typeof t[e].shamefullySendNext&&(t[e]=Object(s.a)(t[e]));return t}(function(t,e){var r={};for(var n in t)t.hasOwnProperty(n)&&(r[n]=t[n](e[n],n),r[n]&&"object"==typeof r[n]&&(r[n]._isCycleSource=n));return r}(t,e));return{sources:r,run:function(t){return function(t,e){var r=Object.keys(t).filter(function(t){return!!e[t]}),n={},i={};r.forEach(function(t){n[t]={_n:[],_e:[]},i[t]={next:function(e){return n[t]._n.push(e)},error:function(e){return n[t]._e.push(e)},complete:function(){}}});var a=r.map(function(e){return o.a.fromObservable(t[e]).subscribe(i[e])});return r.forEach(function(t){var r=e[t],o=function(t){u(function(){return r._n(t)})},a=function(t){u(function(){(console.error||console.log)(t),r._e(t)})};n[t]._n.forEach(o),n[t]._e.forEach(a),i[t].next=o,i[t].error=a,i[t]._n=o,i[t]._e=a}),n=null,function(){a.forEach(function(t){return t.unsubscribe()})}}(t,e)},dispose:function(){(function(t){for(var e in t)t.hasOwnProperty(e)&&t[e]&&t[e].dispose&&t[e].dispose()})(r),function(t){Object.keys(t).forEach(function(e){return t[e]._c()})}(e)}}}(e),n=t(r.sources);return"undefined"!=typeof window&&(window.Cyclejs=window.Cyclejs||{},window.Cyclejs.sinks=n),{sinks:n,sources:r.sources,run:function(){var t=r.run(n);return function(){t(),r.dispose()}}}}function l(t,e){var r=f(t,e);return"undefined"!=typeof window&&window.CyclejsDevTool_startGraphSerializer&&window.CyclejsDevTool_startGraphSerializer(r.sinks),r.run()}var p=r(4);var h=r(1);function d(t,e,r,o,i){void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=!1);var a=null;return n.Stream.create({start:function(n){a=o?function(t){y(t,o),n.next(t)}:function(t){n.next(t)},t.addEventListener(e,a,{capture:r,passive:i})},stop:function(){t.removeEventListener(e,a,r)}})}function y(t,e){if(e)if("boolean"==typeof e)t.preventDefault();else if(function(t){return"function"==typeof t}(e))e(t)&&t.preventDefault();else{if("object"!=typeof e)throw new Error("preventDefault has to be either a boolean, predicate function or object");(function t(e,r){for(var n=Object.keys(e),o=n.length,i=0;i<o;i++){var a=n[i];if("object"==typeof e[a]&&"object"==typeof r[a]){if(!t(e[a],r[a]))return!1}else if(e[a]!==r[a])return!1}return!0})(e,t)&&t.preventDefault()}}var v=function(){function t(t){this._name=t}return t.prototype.select=function(t){return this},t.prototype.elements=function(){var t=Object(h.adapt)(o.a.of([document]));return t._isCycleSource=this._name,t},t.prototype.element=function(){var t=Object(h.adapt)(o.a.of(document));return t._isCycleSource=this._name,t},t.prototype.events=function(t,e,r){var n;void 0===e&&(e={}),n=d(document,t,e.useCapture,e.preventDefault);var o=Object(h.adapt)(n);return o._isCycleSource=this._name,o},t}(),m=function(){function t(t){this._name=t}return t.prototype.select=function(t){return this},t.prototype.elements=function(){var t=Object(h.adapt)(o.a.of([document.body]));return t._isCycleSource=this._name,t},t.prototype.element=function(){var t=Object(h.adapt)(o.a.of(document.body));return t._isCycleSource=this._name,t},t.prototype.events=function(t,e,r){var n;void 0===e&&(e={}),n=d(document.body,t,e.useCapture,e.preventDefault);var o=Object(h.adapt)(n);return o._isCycleSource=this._name,o},t}();function b(t){if("string"!=typeof t&&!function(t){return"object"==typeof HTMLElement?t instanceof HTMLElement||t instanceof DocumentFragment:t&&"object"==typeof t&&null!==t&&(1===t.nodeType||11===t.nodeType)&&"string"==typeof t.nodeName}(t))throw new Error("Given container is not a DOM element neither a selector string.")}function g(t){for(var e="",r=t.length-1;r>=0&&"selector"===t[r].type;r--)e=t[r].scope+" "+e;return e.trim()}function _(t,e){if(!Array.isArray(t)||!Array.isArray(e)||t.length!==e.length)return!1;for(var r=0;r<t.length;r++)if(t[r].type!==e[r].type||t[r].scope!==e[r].scope)return!1;return!0}var w=function(){function t(t,e){this.namespace=t,this.isolateModule=e,this._namespace=t.filter(function(t){return"selector"!==t.type})}return t.prototype.isDirectlyInScope=function(t){var e=this.isolateModule.getNamespace(t);if(!e)return!1;if(this._namespace.length>e.length||!_(this._namespace,e.slice(0,this._namespace.length)))return!1;for(var r=this._namespace.length;r<e.length;r++)if("total"===e[r].type)return!1;return!0},t}();var O=function(){function t(t,e){this.namespace=t,this.isolateModule=e}return t.prototype.call=function(){var t=this.namespace,e=g(t),r=new w(t,this.isolateModule),n=this.isolateModule.getElement(t.filter(function(t){return"selector"!==t.type}));return void 0===n?[]:""===e?[n]:function(t){return Array.prototype.slice.call(t)}(n.querySelectorAll(e)).filter(r.isDirectlyInScope,r).concat(n.matches(e)?[n]:[])},t}(),j=function(){return(j=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function E(t){return{type:function(t){return t.length>1&&("."===t[0]||"#"===t[0])}(t)?"sibling":"total",scope:t}}var x=function(){function t(e,r,n,o,i,a){void 0===n&&(n=[]),this._rootElement$=e,this._sanitation$=r,this._namespace=n,this._isolateModule=o,this._eventDelegator=i,this._name=a,this.isolateSource=function(e,r){return new t(e._rootElement$,e._sanitation$,e._namespace.concat(E(r)),e._isolateModule,e._eventDelegator,e._name)},this.isolateSink=function(t){return function(e,r){return":root"===r?e:e.map(function(e){if(!e)return e;var n=E(r),o=j({},e,{data:j({},e.data,{isolate:e.data&&Array.isArray(e.data.isolate)?e.data.isolate:t.concat([n])})});return j({},o,{key:void 0!==o.key?o.key:JSON.stringify(o.data.isolate)})})}}(this._namespace)}return t.prototype._elements=function(){if(0===this._namespace.length)return this._rootElement$.map(function(t){return[t]});var t=new O(this._namespace,this._isolateModule);return this._rootElement$.map(function(){return t.call()})},t.prototype.elements=function(){var t=Object(h.adapt)(this._elements().remember());return t._isCycleSource=this._name,t},t.prototype.element=function(){var t=Object(h.adapt)(this._elements().filter(function(t){return t.length>0}).map(function(t){return t[0]}).remember());return t._isCycleSource=this._name,t},Object.defineProperty(t.prototype,"namespace",{get:function(){return this._namespace},enumerable:!0,configurable:!0}),t.prototype.select=function(e){if("string"!=typeof e)throw new Error("DOM driver's select() expects the argument to be a string as a CSS selector");if("document"===e)return new v(this._name);if("body"===e)return new m(this._name);var r=":root"===e?[]:this._namespace.concat({type:"selector",scope:e.trim()});return new t(this._rootElement$,this._sanitation$,r,this._isolateModule,this._eventDelegator,this._name)},t.prototype.events=function(t,e,r){if(void 0===e&&(e={}),"string"!=typeof t)throw new Error("DOM driver's events() expects argument to be a string representing the event type to listen for.");var n=this._eventDelegator.addEventListener(t,this._namespace,e,r),o=Object(h.adapt)(n);return o._isCycleSource=this._name,o},t.prototype.dispose=function(){this._sanitation$.shamefullySendNext(null)},t}();function T(t,e,r,n,o){return{sel:t,data:e,children:r,text:n,elm:o,key:void 0===e?void 0:e.key}}var S=T,A=Array.isArray;function k(t){return"string"==typeof t||"number"==typeof t}var P={createElement:function(t){return document.createElement(t)},createElementNS:function(t,e){return document.createElementNS(t,e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,r){t.insertBefore(e,r)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},getTextContent:function(t){return t.textContent},isElement:function(t){return 1===t.nodeType},isText:function(t){return 3===t.nodeType},isComment:function(t){return 8===t.nodeType}};function C(t){return void 0===t}function N(t){return void 0!==t}var I=S("",{},[],void 0,void 0);function $(t,e){return t.key===e.key&&t.sel===e.sel}function D(t,e,r){var n,o,i,a={};for(n=e;n<=r;++n)null!=(i=t[n])&&void 0!==(o=i.key)&&(a[o]=n);return a}var M=["create","update","remove","destroy","pre","post"];function L(t,e){var r,n,o={},i=void 0!==e?e:P;for(r=0;r<M.length;++r)for(o[M[r]]=[],n=0;n<t.length;++n){var a=t[n][M[r]];void 0!==a&&o[M[r]].push(a)}function s(t,e){return function(){if(0==--e){var r=i.parentNode(t);i.removeChild(r,t)}}}function u(t,e){var r,n=t.data;void 0!==n&&N(r=n.hook)&&N(r=r.init)&&(r(t),n=t.data);var a=t.children,s=t.sel;if("!"===s)C(t.text)&&(t.text=""),t.elm=i.createComment(t.text);else if(void 0!==s){var c=s.indexOf("#"),f=s.indexOf(".",c),l=c>0?c:s.length,p=f>0?f:s.length,h=-1!==c||-1!==f?s.slice(0,Math.min(l,p)):s,d=t.elm=N(n)&&N(r=n.ns)?i.createElementNS(r,h):i.createElement(h);for(l<p&&d.setAttribute("id",s.slice(l+1,p)),f>0&&d.setAttribute("class",s.slice(p+1).replace(/\./g," ")),r=0;r<o.create.length;++r)o.create[r](I,t);if(A(a))for(r=0;r<a.length;++r){var y=a[r];null!=y&&i.appendChild(d,u(y,e))}else k(t.text)&&i.appendChild(d,i.createTextNode(t.text));N(r=t.data.hook)&&(r.create&&r.create(I,t),r.insert&&e.push(t))}else t.elm=i.createTextNode(t.text);return t.elm}function c(t,e,r,n,o,a){for(;n<=o;++n){var s=r[n];null!=s&&i.insertBefore(t,u(s,a),e)}}function f(t){var e,r,n=t.data;if(void 0!==n){for(N(e=n.hook)&&N(e=e.destroy)&&e(t),e=0;e<o.destroy.length;++e)o.destroy[e](t);if(void 0!==t.children)for(r=0;r<t.children.length;++r)null!=(e=t.children[r])&&"string"!=typeof e&&f(e)}}function l(t,e,r,n){for(;r<=n;++r){var a=void 0,u=void 0,c=void 0,l=e[r];if(null!=l)if(N(l.sel)){for(f(l),u=o.remove.length+1,c=s(l.elm,u),a=0;a<o.remove.length;++a)o.remove[a](l,c);N(a=l.data)&&N(a=a.hook)&&N(a=a.remove)?a(l,c):c()}else i.removeChild(t,l.elm)}}function p(t,e,r){var n,a;N(n=e.data)&&N(a=n.hook)&&N(n=a.prepatch)&&n(t,e);var s=e.elm=t.elm,f=t.children,h=e.children;if(t!==e){if(void 0!==e.data){for(n=0;n<o.update.length;++n)o.update[n](t,e);N(n=e.data.hook)&&N(n=n.update)&&n(t,e)}C(e.text)?N(f)&&N(h)?f!==h&&function(t,e,r,n){for(var o,a,s,f=0,h=0,d=e.length-1,y=e[0],v=e[d],m=r.length-1,b=r[0],g=r[m];f<=d&&h<=m;)null==y?y=e[++f]:null==v?v=e[--d]:null==b?b=r[++h]:null==g?g=r[--m]:$(y,b)?(p(y,b,n),y=e[++f],b=r[++h]):$(v,g)?(p(v,g,n),v=e[--d],g=r[--m]):$(y,g)?(p(y,g,n),i.insertBefore(t,y.elm,i.nextSibling(v.elm)),y=e[++f],g=r[--m]):$(v,b)?(p(v,b,n),i.insertBefore(t,v.elm,y.elm),v=e[--d],b=r[++h]):(void 0===o&&(o=D(e,f,d)),C(a=o[b.key])?(i.insertBefore(t,u(b,n),y.elm),b=r[++h]):((s=e[a]).sel!==b.sel?i.insertBefore(t,u(b,n),y.elm):(p(s,b,n),e[a]=void 0,i.insertBefore(t,s.elm,y.elm)),b=r[++h]));(f<=d||h<=m)&&(f>d?c(t,null==r[m+1]?null:r[m+1].elm,r,h,m,n):l(t,e,f,d))}(s,f,h,r):N(h)?(N(t.text)&&i.setTextContent(s,""),c(s,null,h,0,h.length-1,r)):N(f)?l(s,f,0,f.length-1):N(t.text)&&i.setTextContent(s,""):t.text!==e.text&&i.setTextContent(s,e.text),N(a)&&N(n=a.postpatch)&&n(t,e)}}return function(t,e){var r,n,a,s=[];for(r=0;r<o.pre.length;++r)o.pre[r]();for(function(t){return void 0!==t.sel}(t)||(t=function(t){var e=t.id?"#"+t.id:"",r=t.className?"."+t.className.split(" ").join("."):"";return S(i.tagName(t).toLowerCase()+e+r,{},[],void 0,t)}(t)),$(t,e)?p(t,e,s):(n=t.elm,a=i.parentNode(n),u(e,s),null!==a&&(i.insertBefore(a,e.elm,i.nextSibling(n)),l(a,[t],0,0))),r=0;r<s.length;++r)s[r].data.hook.insert(s[r]);for(r=0;r<o.post.length;++r)o.post[r]();return e}}var R=r(42),B=r.n(R),F=r(43),U=r.n(F),q=r(24),H=r(10);var G=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},W="[\\w-]+",z="[ \t]*",V="[^\\]]+",K="(?:=|\\$=|\\^=|\\*=|~=|\\|=)",J="(?:(?:[ \t]+)|"+("(?:"+z+"(>)"+z+")")+"|"+("(?:"+z+"(\\+)"+z+")")+"|"+("(?:"+z+"(~)"+z+")")+")",X="(:?"+W+")?",Y="(?:\\."+W+")"+"|"+("(?:#"+W+")")+"|"+("(?:\\["+z+W+z+"(?:"+K+z+V+z+")?\\])")+'|:(?:first-child|last-child|nth-child\\((?:even|odd|\\d*(?:-?n(?:\\+\\d+)?)?)\\)|empty|root|contains\\("[^"]*"\\))|'+J,Z=new RegExp("^"+J+"$");function Q(t){var e=t.trim(),r=new RegExp(X,"y"),n=r.exec(e)[0],o=new RegExp(Y,"y");o.lastIndex=r.lastIndex;for(var i=[],a=void 0,s=void 0,u=-1;o.lastIndex<e.length;){var c=o.exec(e);if(!c&&void 0===s)throw new Error("Parse error, invalid selector");if(c&&Z.test(c[0])){s=Z.exec(c[0])[0],u=o.lastIndex}else{if(void 0!==s){a=[tt(s),Q(e.substring(u))];break}i.push(c[0])}}var f=i.filter(function(t){return t.startsWith(".")}).map(function(t){return t.substring(1)}),l=i.filter(function(t){return t.startsWith("#")}).map(function(t){return t.substring(1)});if(l.length>1)throw new Error("Invalid selector, only one id is allowed");var p=new RegExp("("+W+")"+z+"("+K+")?"+z+"("+V+")?"),h=i.filter(function(t){return t.startsWith("[")}).map(function(t){return p.exec(t).slice(1,4)}).map(function(t){var e,r=t[0],n=t[1],o=t[2];return(e={})[r]=[function(t){switch(t){case"=":return"exact";case"^=":return"startsWith";case"$=":return"endsWith";case"*=":return"contains";case"~=":return"whitespace";case"|=":return"dash";default:return"has"}}(n),o?function(t){if(t.startsWith('"'))return t.slice(1,-1);if("true"===t)return!0;if("false"===t)return!1;var e=parseFloat(t);if(isNaN(e))return t;return e}(o):o],e}).reduce(function(t,e){return G({},t,e)},{}),d=i.filter(function(t){return t.startsWith(":")}).map(function(t){return function(t){if("first-child"===t||"last-child"===t||"root"===t||"empty"===t)return[t,void 0];if(t.startsWith("contains")){var e=t.slice(10,-2);return["contains",e]}var r=t.slice(10,-1);"even"===r&&(r="2n");"odd"===r&&(r="2n+1");return["nth-child",r]}(t.substring(1))});return{id:l[0]||"",tag:n,classList:f,attributes:h,nextSelector:a,pseudos:d}}function tt(t){switch(t.trim()){case">":return"child";case"+":return"nextSibling";case"~":return"sibling";default:return"subtree"}}function et(t){return function(e,r){var n="object"==typeof e?e:Q(e),o=n.tag,i=n.id,a=n.classList,s=n.attributes,u=n.nextSelector,c=n.pseudos;if(void 0!==u)throw new Error("matches can only process selectors that target a single element");if(!r)return!1;if(o&&o.toLowerCase()!==t.tag(r).toLowerCase())return!1;if(i&&i!==t.id(r))return!1;for(var f=t.className(r).split(" "),l=0;l<a.length;l++)if(-1===f.indexOf(a[l]))return!1;for(var p in s){var h=t.attr(r,p),d=s[p][0],y=s[p][1];if(void 0===h)return!1;if("has"===d)return!0;if("exact"===d&&h!==y)return!1;if("exact"!==d){if("string"!=typeof y)throw new Error("All non-string values have to be an exact match");if("startsWith"===d&&!h.startsWith(y))return!1;if("endsWith"===d&&!h.endsWith(y))return!1;if("contains"===d&&-1===h.indexOf(y))return!1;if("whitespace"===d&&-1===h.split(" ").indexOf(y))return!1;if("dash"===d&&-1===h.split("-").indexOf(y))return!1}}for(l=0;l<c.length;l++){var v=c[l],m=(d=v[0],v[1]);if("contains"===d&&m!==t.contents(r))return!1;if("empty"===d&&(t.contents(r)||0!==t.children(r).length))return!1;if("root"===d&&void 0!==t.parent(r))return!1;if(-1!==d.indexOf("child")){if(!t.parent(r))return!1;var b=t.children(t.parent(r));if("first-child"===d&&0!==b.indexOf(r))return!1;if("last-child"===d&&b.indexOf(r)!==b.length-1)return!1;if("nth-child"===d){var g=/([\+-]?)(\d*)(n?)(\+\d+)?/.exec(m).slice(1),_=b.indexOf(r);g[0]||(g[0]="+");var w=g[1]?parseInt(g[0]+g[1]):void 0,O=parseInt(g[3]||"0");if(w&&"n"===g[2]&&_%w!==O)return!1;if(!w&&g[2]&&("+"===g[0]&&_-O<0||"-"===g[0]&&_-O>=0))return!1;if(!g[2]&&w&&_!==w-1)return!1}}}return!0}}function rt(t){if(!t.sel)return{tagName:"",id:"",className:""};var e=t.sel,r=e.indexOf("#"),n=e.indexOf(".",r),o=r>0?r:e.length,i=n>0?n:e.length;return{tagName:-1!==r||-1!==n?e.slice(0,Math.min(o,i)):e,id:o<i?e.slice(o+1,i):void 0,className:n>0?e.slice(i+1).replace(/\./g," "):void 0}}function nt(t){var e=rt(t).className,r=void 0===e?"":e;if(!t.data)return r;var n=t.data,o=n.class,i=n.props;o&&(r+=" "+Object.keys(o).filter(function(t){return o[t]}).join(" "));return i&&i.className&&(r+=" "+i.className),r&&r.trim()}var ot=r(7),it={tag:function(t){return rt(t).tagName},className:function(t){return nt(t)},id:function(t){return rt(t).id||""},children:function(t){return t.children||[]},parent:function(t){return t.data[ot.a]||t},contents:function(t){return t.text||""},attr:function(t,e){if(t.data){var r=t.data,n=r.attrs,o=void 0===n?{}:n,i=r.props,a=void 0===i?{}:i,s=r.dataset,u=void 0===s?{}:s;if(o[e])return o[e];if(a[e])return a[e];if(0===e.indexOf("data-")&&u[e.slice(5)])return u[e.slice(5)]}}},at=et(it);var st=function(t,e){var r=e||et(t);return function(e,n){if(!n)return[];var o=[n],i="object"==typeof e?e:Q(e),a="subtree",s=void 0,u=function(){if(s=i.nextSelector,i.nextSelector=void 0,"subtree"===a||"child"===a){var e="subtree"===a?1/0:1;o=o.map(function(n){return function e(n,o,i){if(!i)return[];var a=r(n,i),s=a?"object"==typeof a?[a]:[i]:[];if(0===o)return s;var u=t.children(i).filter(function(t){return"string"!=typeof t}).map(function(t){return e(n,o-1,t)}).reduce(function(t,e){return t.concat(e)},[]);return s.concat(u)}(i,e,n)}).reduce(function(t,e){return t.concat(e)},[])}else{var n="nextSibling"===a;o=o.map(function(e){return function(e,n,o){if(!o||void 0===t.parent(o))return[];for(var i=[],a=t.children(t.parent(o)),s=a.indexOf(o)+1;s<a.length;s++)if("string"!=typeof a[s]){var u=r(e,a[s]);if(u&&("object"==typeof u?i.push(u):i.push(a[s])),n)break}return i}(i,n,e)}).reduce(function(t,e){return t.concat(e)},[])}s&&(i=s[1],a=s[0])};do{u()}while(void 0!==s);return o}}(it,function(t,e){var r=e.data,n=at.bind(null,t);if(r&&r.fn){var o=void 0;return!!n(o=Array.isArray(r.args)?r.fn.apply(null,r.args):r.args?r.fn.call(null,r.args):r.fn())&&o}return n(e)});function ut(t,e,r){e||(t.data||(t.data={}),t.data[ot.a]||Object.defineProperty(t.data,ot.a,{value:r}))}var ct=function(){function t(t){this.rootElement=t}return t.prototype.call=function(t){if(function(t){return 11===t.nodeType}(this.rootElement))return this.wrapDocFrag(null===t?[]:[t]);if(null===t)return this.wrap([]);var e=rt(t),r=e.tagName,n=e.id,o=nt(t),i=((t.data||{}).props||{}).id,a=void 0===i?n:i;return"string"==typeof a&&a.toUpperCase()===this.rootElement.id.toUpperCase()&&r.toUpperCase()===this.rootElement.tagName.toUpperCase()&&o.toUpperCase()===this.rootElement.className.toUpperCase()?t:this.wrap([t])},t.prototype.wrapDocFrag=function(t){return Object(H.vnode)("",{isolate:[]},t,void 0,this.rootElement)},t.prototype.wrap=function(t){var e=this.rootElement,r=e.tagName,n=e.id,o=e.className,i=n?"#"+n:"",a=o?"."+o.split(" ").join("."):"",s=Object(p.h)(""+r.toLowerCase()+i+a,{},t);return s.data=s.data||{},s.data.isolate=s.data.isolate||[],s},t}(),ft=r(18),lt=r.n(ft),pt=r(19),ht=r.n(pt),dt=r(20),yt=r.n(dt),vt=r(21),mt=r.n(vt),bt=r(22),gt=r.n(bt),_t=[mt.a,lt.a,ht.a,yt.a,gt.a],wt=function(){function t(t){this.mapper=t,this.tree=[void 0,{}]}return t.prototype.set=function(t,e,r){for(var n=this.tree,o=void 0!==r?r:t.length,i=0;i<o;i++){var a=this.mapper(t[i]),s=n[1][a];s||(s=[void 0,{}],n[1][a]=s),n=s}n[0]=e},t.prototype.getDefault=function(t,e,r){return this.get(t,e,r)},t.prototype.get=function(t,e,r){for(var n=this.tree,o=void 0!==r?r:t.length,i=0;i<o;i++){var a=this.mapper(t[i]),s=n[1][a];if(!s){if(!e)return;s=[void 0,{}],n[1][a]=s}n=s}return e&&!n[0]&&(n[0]=e()),n[0]},t.prototype.delete=function(t){for(var e=this.tree,r=0;r<t.length-1;r++){var n=e[1][this.mapper(t[r])];if(!n)return;e=n}delete e[1][this.mapper(t[t.length-1])]},t}(),Ot=function(){function t(){this.namespaceTree=new wt(function(t){return t.scope}),this.namespaceByElement=new Map,this.vnodesBeingRemoved=[]}return t.prototype.setEventDelegator=function(t){this.eventDelegator=t},t.prototype.insertElement=function(t,e){this.namespaceByElement.set(e,t),this.namespaceTree.set(t,e)},t.prototype.removeElement=function(t){this.namespaceByElement.delete(t);var e=this.getNamespace(t);e&&this.namespaceTree.delete(e)},t.prototype.getElement=function(t,e){return this.namespaceTree.get(t,void 0,e)},t.prototype.getRootElement=function(t){if(this.namespaceByElement.has(t))return t;for(var e=t;!this.namespaceByElement.has(e);){if(!(e=e.parentNode))return;if("HTML"===e.tagName)throw new Error("No root element found, this should not happen at all")}return e},t.prototype.getNamespace=function(t){var e=this.getRootElement(t);if(e)return this.namespaceByElement.get(e)},t.prototype.createModule=function(){var t=this;return{create:function(e,r){var n=r.elm,o=r.data,i=(void 0===o?{}:o).isolate;Array.isArray(i)&&t.insertElement(i,n)},update:function(e,r){var n=e.elm,o=e.data,i=void 0===o?{}:o,a=r.elm,s=r.data,u=void 0===s?{}:s,c=i.isolate,f=u.isolate;_(c,f)||Array.isArray(c)&&t.removeElement(n),Array.isArray(f)&&t.insertElement(f,a)},destroy:function(e){t.vnodesBeingRemoved.push(e)},remove:function(e,r){t.vnodesBeingRemoved.push(e),r()},post:function(){for(var e=t.vnodesBeingRemoved,r=e.length-1;r>=0;r--){var n=e[r],o=void 0!==n.data?n.data.isolation:void 0;void 0!==o&&t.removeElement(o),t.eventDelegator.removeElement(n.elm,o)}t.vnodesBeingRemoved=[]}}},t}(),jt=function(){function t(){this.toDelete=[],this.toDeleteSize=0,this._set=new Set}return t.prototype.add=function(t){this._set.add(t)},t.prototype.forEach=function(t){this._set.forEach(t),this.flush()},t.prototype.delete=function(t){this.toDelete.length===this.toDeleteSize?this.toDelete.push(t):this.toDelete[this.toDeleteSize]=t,this.toDeleteSize++},t.prototype.flush=function(){for(var t=0;t<this.toDelete.length;t++)t<this.toDeleteSize&&this._set.delete(this.toDelete[t]),this.toDelete[t]=void 0;this.toDeleteSize=0},t}(),Et=function(){function t(){this.arr=[],this.prios=[]}return t.prototype.add=function(t,e){for(var r=0;r<this.arr.length;r++)if(this.prios[r]<e)return this.arr.splice(r,0,t),void this.prios.splice(r,0,e);this.arr.push(t),this.prios.push(e)},t.prototype.forEach=function(t){for(var e=0;e<this.arr.length;e++)t(this.arr[e],e,this.arr)},t.prototype.delete=function(t){for(var e=0;e<this.arr.length;e++)if(this.arr[e]===t)return this.arr.splice(e,1),void this.prios.splice(e,1)},t}(),xt=function(){return(xt=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},Tt=["blur","canplay","canplaythrough","durationchange","emptied","ended","focus","load","loadeddata","loadedmetadata","mouseenter","mouseleave","pause","play","playing","ratechange","reset","scroll","seeked","seeking","stalled","submit","suspend","timeupdate","unload","volumechange","waiting"],St=function(){function t(t,e){var r=this;this.rootElement$=t,this.isolateModule=e,this.virtualListeners=new wt(function(t){return t.scope}),this.nonBubblingListenersToAdd=new jt,this.virtualNonBubblingListener=[],this.isolateModule.setEventDelegator(this),this.domListeners=new Map,this.domListenersToAdd=new Map,this.nonBubblingListeners=new Map,t.addListener({next:function(t){r.origin!==t&&(r.origin=t,r.resetEventListeners(),r.domListenersToAdd.forEach(function(t,e){return r.setupDOMListener(e,t)}),r.domListenersToAdd.clear()),r.resetNonBubblingListeners(),r.nonBubblingListenersToAdd.forEach(function(t){r.setupNonBubblingListener(t)})}})}return t.prototype.addEventListener=function(t,e,r,n){var i=o.a.never(),a=new w(e,this.isolateModule),s=this.insertListener(i,a,t,r);if(void 0===n?-1===Tt.indexOf(t):n)this.domListeners.has(t)||this.setupDOMListener(t,!!r.passive);else{var u=new O(e,this.isolateModule);this.setupNonBubblingListener([t,u,s])}return i},t.prototype.removeElement=function(t,e){void 0!==e&&this.virtualListeners.delete(e);var r=[];this.nonBubblingListeners.forEach(function(e,n){e.has(t)&&r.push([n,t])});for(var n=0;n<r.length;n++){var o=this.nonBubblingListeners.get(r[n][0]);o&&(o.delete(r[n][1]),0===o.size?this.nonBubblingListeners.delete(r[n][0]):this.nonBubblingListeners.set(r[n][0],o))}},t.prototype.insertListener=function(t,e,r,n){var o=[],i=e._namespace,a=i.length;do{o.push(this.getVirtualListeners(r,i,!0,a)),a--}while(a>=0&&"total"!==i[a].type);for(var s=xt({},n,{scopeChecker:e,subject:t,bubbles:!!n.bubbles,useCapture:!!n.useCapture,passive:!!n.passive}),u=0;u<o.length;u++)o[u].add(s,i.length);return s},t.prototype.getVirtualListeners=function(t,e,r,n){void 0===r&&(r=!1);var o=void 0!==n?n:e.length;if(!r)for(var i=o-1;i>=0;i--){if("total"===e[i].type){o=i+1;break}o=i}var a=this.virtualListeners.getDefault(e,function(){return new Map},o);return a.has(t)||a.set(t,new Et),a.get(t)},t.prototype.setupDOMListener=function(t,e){var r=this;if(this.origin){var n=d(this.origin,t,!1,!1,e).subscribe({next:function(n){return r.onEvent(t,n,e)},error:function(){},complete:function(){}});this.domListeners.set(t,{sub:n,passive:e})}else this.domListenersToAdd.set(t,e)},t.prototype.setupNonBubblingListener=function(t){var e=this,r=t[0],n=t[1],o=t[2];if(this.origin){var i=n.call()[0];if(i){this.nonBubblingListenersToAdd.delete(t);var a=d(i,r,!1,!1,o.passive).subscribe({next:function(t){return e.onEvent(r,t,!!o.passive,!1)},error:function(){},complete:function(){}});this.nonBubblingListeners.has(r)||this.nonBubblingListeners.set(r,new Map);var s=this.nonBubblingListeners.get(r);if(!s)return;s.set(i,{sub:a,destination:o})}else this.nonBubblingListenersToAdd.add(t)}else this.nonBubblingListenersToAdd.add(t)},t.prototype.resetEventListeners=function(){for(var t=this.domListeners.entries(),e=t.next();!e.done;){var r=e.value,n=r[0],o=r[1],i=o.sub,a=o.passive;i.unsubscribe(),this.setupDOMListener(n,a),e=t.next()}},t.prototype.resetNonBubblingListeners=function(){var t=this,e=new Map,r=function(t){return function(e,r,n){var o;t.has(e)?(o=t.get(e)).set(r,n):((o=new Map).set(r,n),t.set(e,o))}}(e);this.nonBubblingListeners.forEach(function(n,o){n.forEach(function(e,n){if(document.body.contains(n))r(o,n,e);else{var i=e.sub,a=e.destination;i&&i.unsubscribe();var s=new O(a.scopeChecker.namespace,t.isolateModule).call()[0],u=d(s,o,!1,!1,a.passive).subscribe({next:function(e){return t.onEvent(o,e,!!a.passive,!1)},error:function(){},complete:function(){}});r(o,s,{sub:u,destination:a})}}),t.nonBubblingListeners=e})},t.prototype.putNonBubblingListener=function(t,e,r,n){var o=this.nonBubblingListeners.get(t);if(o){var i=o.get(e);i&&i.destination.passive===n&&i.destination.useCapture===r&&(this.virtualNonBubblingListener[0]=i.destination)}},t.prototype.onEvent=function(t,e,r,n){void 0===n&&(n=!0);var o=this.patchEvent(e),i=this.isolateModule.getRootElement(e.target);if(n){var a=this.isolateModule.getNamespace(e.target);if(!a)return;var s=this.getVirtualListeners(t,a);this.bubble(t,e.target,i,o,s,a,a.length-1,!0,r),this.bubble(t,e.target,i,o,s,a,a.length-1,!1,r)}else this.putNonBubblingListener(t,e.target,!0,r),this.doBubbleStep(t,e.target,i,o,this.virtualNonBubblingListener,!0,r),this.putNonBubblingListener(t,e.target,!1,r),this.doBubbleStep(t,e.target,i,o,this.virtualNonBubblingListener,!1,r),e.stopPropagation()},t.prototype.bubble=function(t,e,r,n,o,i,a,s,u){s||n.propagationHasBeenStopped||this.doBubbleStep(t,e,r,n,o,s,u);var c=r,f=a;if(e===r){if(!(a>=0&&"sibling"===i[a].type))return;c=this.isolateModule.getElement(i,a),f--}e.parentNode&&c&&this.bubble(t,e.parentNode,c,n,o,i,f,s,u),s&&!n.propagationHasBeenStopped&&this.doBubbleStep(t,e,r,n,o,s,u)},t.prototype.doBubbleStep=function(t,e,r,n,o,i,a){r&&(this.mutateEventCurrentTarget(n,e),o.forEach(function(t){if(t.passive===a&&t.useCapture===i){var o=g(t.scopeChecker.namespace);!n.propagationHasBeenStopped&&t.scopeChecker.isDirectlyInScope(e)&&(""!==o&&e.matches(o)||""===o&&e===r)&&(y(n,t.preventDefault),t.subject.shamefullySendNext(n))}}))},t.prototype.patchEvent=function(t){var e=t;e.propagationHasBeenStopped=!1;var r=e.stopPropagation;return e.stopPropagation=function(){r.call(this),this.propagationHasBeenStopped=!0},e},t.prototype.mutateEventCurrentTarget=function(t,e){try{Object.defineProperty(t,"currentTarget",{value:e,configurable:!0})}catch(t){console.log("please use event.ownerTarget")}t.ownerTarget=e},t}();function At(t){return o.a.merge(t,o.a.never())}function kt(t){return t.elm}function Pt(t){(console.error||console.log)(t)}!function(){function t(t){this._mockConfig=t,t.elements?this._elements=t.elements:this._elements=Object(h.adapt)(o.a.empty())}t.prototype.elements=function(){var t=this._elements;return t._isCycleSource="MockedDOM",t},t.prototype.element=function(){var t=this.elements().filter(function(t){return t.length>0}).map(function(t){return t[0]}).remember(),e=Object(h.adapt)(t);return e._isCycleSource="MockedDOM",e},t.prototype.events=function(t,e,r){var n=this._mockConfig[t],i=Object(h.adapt)(n||o.a.empty());return i._isCycleSource="MockedDOM",i},t.prototype.select=function(e){return new t(this._mockConfig[e]||{})},t.prototype.isolateSource=function(t,e){return t.select(".___"+e)},t.prototype.isolateSink=function(t,e){return Object(h.adapt)(o.a.fromObservable(t).map(function(t){return t.sel&&-1!==t.sel.indexOf("___"+e)?t:(t.sel+=".___"+e,t)}))}}();function Ct(t){return function(t){return"string"==typeof t&&t.length>0}(t)&&("."===t[0]||"#"===t[0])}function Nt(t){return function(e,r,n){var o=void 0!==e,i=void 0!==r,a=void 0!==n;return Ct(e)?i&&a?Object(p.h)(t+e,r,n):i?Object(p.h)(t+e,r):Object(p.h)(t+e,{}):a?Object(p.h)(t+e,r,n):i?Object(p.h)(t,e,r):o?Object(p.h)(t,e):Object(p.h)(t,{})}}var It=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","colorProfile","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotlight","feTile","feTurbulence","filter","font","fontFace","fontFaceFormat","fontFaceName","fontFaceSrc","fontFaceUri","foreignObject","g","glyph","glyphRef","hkern","image","line","linearGradient","marker","mask","metadata","missingGlyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"],$t=Nt("svg");It.forEach(function(t){$t[t]=Nt(t)});var Dt=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","dd","del","details","dfn","dir","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","meta","nav","noscript","object","ol","optgroup","option","p","param","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","u","ul","video"],Mt={SVG_TAG_NAMES:It,TAG_NAMES:Dt,svg:$t,isSelector:Ct,createTagFunction:Nt};Dt.forEach(function(t){Mt[t]=Nt(t)});var Lt=Mt;Lt.svg,Lt.a,Lt.abbr,Lt.address,Lt.area,Lt.article,Lt.aside,Lt.audio,Lt.b,Lt.base,Lt.bdi,Lt.bdo,Lt.blockquote,Lt.body,Lt.br,Lt.button,Lt.canvas,Lt.caption,Lt.cite,Lt.code,Lt.col,Lt.colgroup,Lt.dd,Lt.del,Lt.dfn,Lt.dir,Lt.div,Lt.dl,Lt.dt,Lt.em,Lt.embed,Lt.fieldset,Lt.figcaption,Lt.figure,Lt.footer,Lt.form,Lt.h1,Lt.h2,Lt.h3,Lt.h4,Lt.h5,Lt.h6,Lt.head,Lt.header,Lt.hgroup,Lt.hr,Lt.html,Lt.i,Lt.iframe,Lt.img,Lt.input,Lt.ins,Lt.kbd,Lt.keygen,Lt.label,Lt.legend,Lt.li,Lt.link,Lt.main,Lt.map,Lt.mark,Lt.menu,Lt.meta,Lt.nav,Lt.noscript,Lt.object,Lt.ol,Lt.optgroup,Lt.option,Lt.p,Lt.param,Lt.pre,Lt.progress,Lt.q,Lt.rp,Lt.rt,Lt.ruby,Lt.s,Lt.samp,Lt.script,Lt.section,Lt.select,Lt.small,Lt.source,Lt.span,Lt.strong,Lt.style,Lt.sub,Lt.sup,Lt.table,Lt.tbody,Lt.td,Lt.textarea,Lt.tfoot,Lt.th,Lt.thead,Lt.title,Lt.tr,Lt.u,Lt.ul,Lt.video;function Rt(t,e){return null===e?t:t.filter(function(r){return Array.isArray(r._namespace)&&function(t,e){for(var r=0;r<e.length;r++)if(t[r]!==e[r])return!1;return!0}(r._namespace,t._namespace.concat(e))},e)}function Bt(t,e){return null===e?t:Object(h.adapt)(o.a.fromObservable(t).map(function(t){return"string"==typeof t?{url:t,_namespace:[e]}:(t._namespace=t._namespace||[],t._namespace.unshift(e),t)}))}var Ft=function(){function t(t,e,r){void 0===r&&(r=[]),this._res$$=t,this._name=e,this._namespace=r,this.isolateSource=Rt,this.isolateSink=Bt}return t.prototype.filter=function(e,r){return new t(this._res$$.filter(function(t){return e(t.request)}),this._name,void 0===r?this._namespace:this._namespace.concat(r))},t.prototype.select=function(t){var e=t?this._res$$.filter(function(e){return e.request&&e.request.category===t}):this._res$$,r=Object(h.adapt)(e);return r._isCycleSource=this._name,r},t}(),Ut=r(44);function qt(t){return o.a.create({start:function(e){try{var r=Ht(t);this.request=function(t){var e=function(t){return t.withCredentials=t.withCredentials||!1,t.redirects="number"==typeof t.redirects?t.redirects:5,t.method=t.method||"get",t}(t);if("string"!=typeof e.url)throw new Error("Please provide a `url` property in the request options.");var r=(e.method||"GET").toLowerCase(),n=Ut["delete"===r?"del":r](e.url);if("function"==typeof n.redirects&&(n=n.redirects(e.redirects)),e.type&&(n=n.type(e.type)),e.send&&(n=n.send(e.send)),e.accept&&(n=n.accept(e.accept)),e.query&&(n=n.query(e.query)),e.withCredentials&&(n=n.withCredentials()),e.agent&&(n=(n=n.key(e.agent.key)).cert(e.agent.cert)),"string"==typeof e.user&&"string"==typeof e.password&&(n=n.auth(e.user,e.password)),e.headers)for(var o in e.headers)e.headers.hasOwnProperty(o)&&(n=n.set(o,e.headers[o]));if(e.field)for(var o in e.field)e.field.hasOwnProperty(o)&&(n=n.field(o,e.field[o]));if(e.attach)for(var i=e.attach.length-1;i>=0;i--){var a=e.attach[i];n=n.attach(a.name,a.path,a.filename)}return e.responseType&&(n=n.responseType(e.responseType)),e.ok&&(n=n.ok(e.ok)),n}(r),r.progress&&(this.request=this.request.on("progress",function(t){t.request=r,e.next(t)})),this.request.end(function(t,n){t?(t.response&&(t.response.request=r),e.error(t)):(n.request=r,e.next(n),e.complete())})}catch(t){e.error(t)}},stop:function(){this.request&&this.request.abort&&this.request.abort()}})}function Ht(t){if("string"==typeof t)return{url:t};if("object"==typeof t)return t;throw new Error("Observable of requests given to HTTP Driver must emit either URL strings or objects with parameters.")}function Gt(t){var e=qt(t).remember(),r=function(t){var e;try{e=Ht(t)}catch(t){e={url:"Error",_error:t}}return e}(t);return r.lazy||e.addListener({next:function(){},error:function(){},complete:function(){}}),e=Object(h.adapt)(e),Object.defineProperty(e,"request",{value:r,writable:!1}),e}var Wt=r(45),zt=r.n(Wt),Vt=function(t){return function(e){if(t.time<e.time)return-1;if(t.time===e.time&&t.stream===e.stream){if("complete"===t.type&&"next"===e.type)return 1;if("complete"===e.type&&"next"===t.type)return-1}return 1}};function Kt(){var t=[];var e=zt()({comparator:Vt,unique:!1});function r(r){return t=e(t,r),r}function n(){}return{shiftNextEntry:function(){return t.shift()},isEmpty:function(){return 0===t.length},peek:function(){return t[0]},add:{_schedule:function(){return t},next:function(t,e,o,i){return void 0===i&&(i=n),r({type:"next",stream:t,time:e,value:o,f:i})},error:function(t,e,n){return r({type:"error",stream:t,time:e,error:n})},complete:function(t,e){return r({type:"complete",stream:t,time:e})}}}}function Jt(t){var e=t(),r=e.schedule,n=e.currentTime;return function(t){return function(e){var i={start:function(i){var a=function(t,e,r,n){var o=function(){return e()+r};return{next:function(e){t.next(n,o(),e)},error:function(e){t.error(n,o(),e)},complete:function(){t.complete(n,o())}}}(r,n,t,i);o.a.fromObservable(e).addListener(a)},stop:function(){}};return Object(h.adapt)(o.a.create(i))}}}function Xt(t){var e=t(),r=e.schedule,n=e.currentTime;return function(t){return function(e){var i={scheduledEntry:null},a=o.a.create({start:function(a){var s=function(t,e,r,n,o){return{next:function(i){var a=o.scheduledEntry,s=e()+r;a&&s-a.time<=r&&(a.cancelled=!0),o.scheduledEntry=t.next(n,s,i)},error:function(t){n.error(t)},complete:function(){n.complete()}}}(r,n,t,a,i);o.a.fromObservable(e).addListener(s)},stop:function(){}});return Object(h.adapt)(a)}}}function Yt(t){var e=t(),r=e.schedule,n=e.currentTime;return function(t){var e=!1,i=0;function a(r,n,o,s){if(!e){var u=r.value+1;o.next(r.stream,i+t,u,a),i+=t}}var s={listener:null,start:function(e){s.listener=e;var o=n()+t;r.next(e,o,0,a),i=o},stop:function(){e=!0,s.listener.complete()}};return Object(h.adapt)(o.a.create(s))}}function Zt(t){var e=t(),r=e.schedule,n=e.currentTime;return function(t){return function(e){var i={lastEventTime:-1/0},a=o.a.create({start:function(a){var s=function(t,e,r,n,o){return{next:function(i){var a=o.lastEventTime,s=e();s-a<=r||(t.next(n,s,i),o.lastEventTime=s)},error:function(t){n.error(t)},complete:function(){t.complete(n,e())}}}(r,n,t,a,i);o.a.fromObservable(e).addListener(s)},stop:function(){}});return Object(h.adapt)(a)}}}var Qt=1e3/60;function te(t,e,r){return function(e){var r=t(),n=o.a.create({start:function(t){var n=null,i=!0,a=o.a.fromObservable(r.animationFrames()),s={next:function(e){i||(t.next(n),i=!0)}};o.a.fromObservable(e).addListener({next:function(t){n=t,i=!1},error:function(e){t.error(e)},complete:function(){a.removeListener(s),t.complete()}}),a.addListener(s)},stop:function(){}});return Object(h.adapt)(n)}}var ee=r(11),re=r(13),ne=r(23);function oe(t){var e=0,r=[],n=Kt();function i(){return e}function a(t){e=t}var s=function(t,e,r,n){var o=!1;return re(function t(r){o?re(t):(n(r),function(t){for(var e=[];t.length>0;)e.push(t.pop());return e}(e).forEach(function(t){return t(r)}),re(t))}),setInterval(function(){if(!o){var e=ne();if(n(e),!t.isEmpty())for(var i=t.peek().time;i<e;){var a=t.shiftNextEntry();if(!a.cancelled)if(a.f&&a.f(a,e,t.add,r),"next"===a.type)a.stream.shamefullySendNext(a.value);else if("complete"===a.type)a.stream.shamefullySendComplete();else{if("error"!==a.type)throw new Error("Unhandled event type: "+a.type);a.stream.shamefullySendError(a.error)}i=t.peek()&&t.peek().time||1/0}}},10),{pause:function(){return o=!0},resume:function(t){n(t),o=!1}}}(n,r,i,a),u=s.pause,c=s.resume;function f(){return{schedule:n.add,currentTime:i}}var l={animationFrames:function(t,e){return function(){var r={time:0,delta:16,normalizedDelta:1},n=!1,i=o.a.create({start:function(o){r.time=e(),t(function i(){if(!n){var a=r.time;r.time=e(),r.delta=r.time-a,r.normalizedDelta=r.delta/Qt,o.next(r),t(i)}})},stop:function(){n=!0}});return Object(h.adapt)(i)}}(function(t){r.push(t)},i),delay:Jt(f),debounce:Xt(f),periodic:Yt(f),throttle:Zt(f),throttleAnimation:te(function(){return l},n.add),_time:i,_scheduler:n.add,_pause:u,_resume:c,_runVirtually:function(t,e){Object(ee.a)(n,t,i,a,e)},dispose:u,createOperator:f};return l}r(25),r(46);r(47);var ie=r(2),ae=r.n(ie),se=r(12),ue=r.n(se);function ce(t){return"/"===t.charAt(0)}function fe(t,e){for(var r=e,n=r+1,o=t.length;n<o;r+=1,n+=1)t[r]=t[n];t.pop()}var le=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=t&&t.split("/")||[],n=e&&e.split("/")||[],o=t&&ce(t),i=e&&ce(e),a=o||i;if(t&&ce(t)?n=r:r.length&&(n.pop(),n=n.concat(r)),!n.length)return"/";var s=void 0;if(n.length){var u=n[n.length-1];s="."===u||".."===u||""===u}else s=!1;for(var c=0,f=n.length;f>=0;f--){var l=n[f];"."===l?fe(n,f):".."===l?(fe(n,f),c++):c&&(fe(n,f),c--)}if(!a)for(;c--;c)n.unshift("..");!a||""===n[0]||n[0]&&ce(n[0])||n.unshift("");var p=n.join("/");return s&&"/"!==p.substr(-1)&&(p+="/"),p};"function"==typeof Symbol&&Symbol.iterator;var pe=function(t){return"/"===t.charAt(0)?t:"/"+t},he=function(t,e){return new RegExp("^"+e+"(\\/|\\?|#|$)","i").test(t)},de=function(t,e){return he(t,e)?t.substr(e.length):t},ye=function(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t},ve=function(t){var e=t.pathname,r=t.search,n=t.hash,o=e||"/";return r&&"?"!==r&&(o+="?"===r.charAt(0)?r:"?"+r),n&&"#"!==n&&(o+="#"===n.charAt(0)?n:"#"+n),o},me=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},be=function(t,e,r,n){var o=void 0;"string"==typeof t?(o=function(t){var e=t||"/",r="",n="",o=e.indexOf("#");-1!==o&&(n=e.substr(o),e=e.substr(0,o));var i=e.indexOf("?");return-1!==i&&(r=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===r?"":r,hash:"#"===n?"":n}}(t)).state=e:(void 0===(o=me({},t)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==e&&void 0===o.state&&(o.state=e));try{o.pathname=decodeURI(o.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return r&&(o.key=r),n?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=le(o.pathname,n.pathname)):o.pathname=n.pathname:o.pathname||(o.pathname="/"),o},ge=function(){var t=null,e=[];return{setPrompt:function(e){return ae()(null==t,"A history supports only one prompt at a time"),t=e,function(){t===e&&(t=null)}},confirmTransitionTo:function(e,r,n,o){if(null!=t){var i="function"==typeof t?t(e,r):t;"string"==typeof i?"function"==typeof n?n(i,o):(ae()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==i)}else o(!0)},appendListener:function(t){var r=!0,n=function(){r&&t.apply(void 0,arguments)};return e.push(n),function(){r=!1,e=e.filter(function(t){return t!==n})}},notifyListeners:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];e.forEach(function(t){return t.apply(void 0,r)})}}},_e=!("undefined"==typeof window||!window.document||!window.document.createElement),we=function(t,e,r){return t.addEventListener?t.addEventListener(e,r,!1):t.attachEvent("on"+e,r)},Oe=function(t,e,r){return t.removeEventListener?t.removeEventListener(e,r,!1):t.detachEvent("on"+e,r)},je=function(t,e){return e(window.confirm(t))},Ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},xe=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},Te=function(){try{return window.history.state||{}}catch(t){return{}}},Se=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};ue()(_e,"Browser history needs a DOM");var e=window.history,r=function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),n=!(-1===window.navigator.userAgent.indexOf("Trident")),o=t.forceRefresh,i=void 0!==o&&o,a=t.getUserConfirmation,s=void 0===a?je:a,u=t.keyLength,c=void 0===u?6:u,f=t.basename?ye(pe(t.basename)):"",l=function(t){var e=t||{},r=e.key,n=e.state,o=window.location,i=o.pathname+o.search+o.hash;return ae()(!f||he(i,f),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+f+'".'),f&&(i=de(i,f)),be(i,n,r)},p=function(){return Math.random().toString(36).substr(2,c)},h=ge(),d=function(t){xe(S,t),S.length=e.length,h.notifyListeners(S.location,S.action)},y=function(t){(function(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")})(t)||b(l(t.state))},v=function(){b(l(Te()))},m=!1,b=function(t){m?(m=!1,d()):h.confirmTransitionTo(t,"POP",s,function(e){e?d({action:"POP",location:t}):g(t)})},g=function(t){var e=S.location,r=w.indexOf(e.key);-1===r&&(r=0);var n=w.indexOf(t.key);-1===n&&(n=0);var o=r-n;o&&(m=!0,j(o))},_=l(Te()),w=[_.key],O=function(t){return f+ve(t)},j=function(t){e.go(t)},E=0,x=function(t){1===(E+=t)?(we(window,"popstate",y),n&&we(window,"hashchange",v)):0===E&&(Oe(window,"popstate",y),n&&Oe(window,"hashchange",v))},T=!1,S={length:e.length,action:"POP",location:_,createHref:O,push:function(t,n){ae()(!("object"===(void 0===t?"undefined":Ee(t))&&void 0!==t.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=be(t,n,p(),S.location);h.confirmTransitionTo(o,"PUSH",s,function(t){if(t){var n=O(o),a=o.key,s=o.state;if(r)if(e.pushState({key:a,state:s},null,n),i)window.location.href=n;else{var u=w.indexOf(S.location.key),c=w.slice(0,-1===u?0:u+1);c.push(o.key),w=c,d({action:"PUSH",location:o})}else ae()(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=n}})},replace:function(t,n){ae()(!("object"===(void 0===t?"undefined":Ee(t))&&void 0!==t.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=be(t,n,p(),S.location);h.confirmTransitionTo(o,"REPLACE",s,function(t){if(t){var n=O(o),a=o.key,s=o.state;if(r)if(e.replaceState({key:a,state:s},null,n),i)window.location.replace(n);else{var u=w.indexOf(S.location.key);-1!==u&&(w[u]=o.key),d({action:"REPLACE",location:o})}else ae()(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(n)}})},go:j,goBack:function(){return j(-1)},goForward:function(){return j(1)},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=h.setPrompt(t);return T||(x(1),T=!0),function(){return T&&(T=!1,x(-1)),e()}},listen:function(t){var e=h.appendListener(t);return x(1),function(){x(-1),e()}}};return S};Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;function Ae(t,e){var r=o.a.createWithMemory().startWith(t.location),n=function(t){return function(e){"push"===e.type&&t.push(e.pathname,e.state),"replace"===e.type&&t.replace(e.pathname,e.state),"go"===e.type&&t.go(e.amount),"goBack"===e.type&&t.goBack(),"goForward"===e.type&&t.goForward()}}(t),i=t.listen(function(t){r._n(t)}),a=e.subscribe(function(t,e){return{next:function(e){t("string"==typeof e?{type:"push",pathname:e}:e)},error:function(t){e()},complete:function(){setTimeout(e)}}}(n,i));return r.dispose=function(){a.unsubscribe(),i()},r}"undefined"!=typeof document&&document.ontouchstart;var ke=r(26),Pe=r.n(ke),Ce=function(t){return function(t){return"string"==typeof t}(t)||function(t){return"number"==typeof t}(t)},Ne=function(t){return Array.isArray(t)},Ie=function(t){return"object"==typeof t&&null!==t},$e={svg:1,circle:1,ellipse:1,line:1,polygon:1,polyline:1,rect:1,g:1,path:1,text:1},De=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return Pe.a.apply(void 0,[!0].concat(t))},Me=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return Pe.a.apply(void 0,[!1].concat(t))},Le=function(t,e,r){for(var n=r,o=0;o<t.length;o++){var i=t[o];n=Ne(i)?Le(i,e,n):e(n,i)}return n},Re=function(t,e){return Object.keys(t).map(function(r){return e(r,t[r])}).reduce(function(t,e){return De(t,e)},{})},Be=function(t){return Re(t,function(t,e){return Ie(e)?Re(Be(e),function(e,r){return(n={})[t+"-"+e]=r,n;var n}):((r={})[t]=e,r);var r})},Fe=function(t,e){return Re(e,function(e,r){return e!==t?((n={})[e]=r,n):{};var n})},Ue=function(t){return function(t){return t.sel in $e}(t)?Me(t,{data:Fe("props",De(t.data,{ns:"http://www.w3.org/2000/svg",attrs:Fe("className",De(t.data.props,{class:t.data.props?t.data.props.className:void 0}))}))},{children:function(t){return void 0===t}(t.children)?void 0:t.children.map(function(t){return Ue(t)})}):t},qe={for:1,role:1,tabindex:1},He=function(t){return function(t){return Re(t,function(t,e){return Ie(e)?((r={})[t]=e,r):{props:(n={},n[t]=e,n)};var r,n})}(function(t){return t.attrs||t.aria?Fe("aria",Me(t,{attrs:De(t.attrs,t.aria?Be({aria:t.aria}):{})})):t}(function(t){return t.data?Re(t,function(t,e){var r;return(r={})["data"===t?"dataset":t]=e,r}):t}(function(t){return Re(t,function(t,e){return t in qe?{attrs:De(e.attrs,(n={},n[t]=e,n))}:((r={})[t]=e,r);var r,n})}(function(t){return"key"in t?Fe("key",t):t}(function(t){return Re(t,function(t,e){var r,n=t.indexOf("-");if(n>-1){var o,i={};return i[t.slice(n+1)]=e,(o={})[t.slice(0,n)]=i,o}return(r={})[t]=e,r})}(t))))))},Ge=function(t){return Le(t,function(t,e){var r=function(t){return Ie(t)&&"sel"in t&&"data"in t&&"children"in t&&"text"in t}(e)?e:function(t){return Ce(t)?{text:t,sel:void 0,data:void 0,children:void 0,elm:void 0,key:void 0}:void 0}(e);return t.push(r),t},[])},We={createElement:function(t,e){for(var r=[],n=arguments.length-2;n-- >0;)r[n]=arguments[n+2];if(function(t){return"function"==typeof t}(t))return t(e||{},r);var o=function(t){return t.length>1||!Ce(t[0])?void 0:t[0]}(r);return Ue({sel:t,data:e?He(e):{},children:o?void 0:Ge(r),text:o,elm:void 0,key:e?e.key:void 0})}},ze=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t};function Ve(t){return t.split("/").filter(function(t){return t.length>0})}var Ke=function(t,e){return t[0]===e},Je=function(t,e,r){return t[0]===e&&t[1]===r};function Xe(t,e){return function(r){if("object"==typeof r&&null!==r){var n=""+t.join("/")+r.pathname;return Ke(n,"/")||Je(n,"#","/")?e(ze({},r,{pathname:n})):e(ze({},r,{pathname:"/"+n}))}if("string"==typeof r){n=""+t.join("/")+r;return Ke(n,"/")||Je(n,"#","/")?e({pathname:n}):e({pathname:"/"+n})}}}var Ye=function(){function t(t,e,r,n){this._history$=t,this._namespace=e,this._createHref=r,this._routeMatcher=n,this.history$=Object(h.adapt)(this._history$)}return t.prototype.path=function(e){var r=this._namespace.concat(Ve(e)),n=this._history$.filter(function(t){var e=t.pathname;return function(t,e){var r=Ve(e);return t.every(function(t,e){return r[e]===t})}(r,e)}).remember(),o=this._createHref;return new t(n,r,o,this._routeMatcher)},t.prototype.define=function(t,e){var r=this,n=this._namespace,o=this._createHref,i=Xe(n,o),a=this._history$.map(function(o){var a=(e||r._routeMatcher)(function(t,e){return"/"+function(t,e){return t.filter(function(t){return e.indexOf(t)<0}).join("/")}(Ve(e),t)}(n,o.pathname),t);return{path:a.path,value:a.value,location:o,createHref:i}}).remember(),s=Object(h.adapt)(a);return s.createHref=i,s},t.prototype.createHref=function(t){return Xe(this._namespace,this._createHref)(t)},t}(),Ze=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t};function Qe(t){return"/"===t.charAt(0)||"*"===t}function tr(t){return!(!t||"object"!=typeof t)&&Qe(Object.keys(t)[0])}function er(t){return null!==t}function rr(t){return t.split("/").filter(function(t){return!!t})}function nr(t){return null!==t.match(/:\w+/)}function or(t,e){for(var r=rr(e),n=rr(t),o=[],i=0;i<r.length;++i)o.push(n[i]);return o.filter(er).join("/")}function ir(t,e){for(var r=rr(t),n=rr(e),o=0;o<n.length;++o)if(n[o]!==r[o])return null;return"/"+or(t,e)}function ar(t,e){return!!er(t)&&(!er(e)||!!ir(t,e)&&t.length>=e.length)}var sr=r(48),ur=r.n(sr);r(98),r(101),r(103);function cr(t){const e=t.DOM.select(".result-item").events("click"),r=t.DOM.select(".search-phrase .uk-icon").events("click"),n=t.DOM.select(".search-phrase-input").events("input"),i=o.a.merge(n,r).map(t=>t instanceof InputEvent?t.target.value:"").compose(t.Time.debounce(300)).startWith(""),a=t=>0===t.length,s=o.a.of({url:t.SvcUrl("/movie/popular?language=en-US&page=1"),category:"discovery",isRequest:!0}),u=t.HTTP.select("discovery").map(t=>t.replaceError(t=>o.a.of(t))).flatten().map(t=>t instanceof Error?t:JSON.parse(t.text)).startWith(""),c=i.filter(t=>!a(t)).map(e=>({url:t.SvcUrl(`/search/movie?query=${e}`),category:"search",isRequest:!0})),f=t.HTTP.select("search").map(t=>t.replaceError(t=>o.a.of(t))).flatten().map(t=>t instanceof Error?t:JSON.parse(t.text)).startWith(""),l=o.a.combine(i,f,u).map(([t,e,r])=>a(t)?r:e).startWith(""),p=o.a.combine(l,e).map(([t,e])=>{const r=t.results&&t.results.find(t=>t.id==e.target.dataset.id);return r?r.title:""}),h=o.a.merge(c,f).map(t=>t&&t.isRequest).startWith(!1),d=o.a.merge(c,f).map(t=>t instanceof Error).startWith(!1);return{DOM:o.a.combine(i,l,h,d).map(([t,e,r,n])=>We.createElement("div",null,We.createElement("h1",null,"TMDb UI – Home"),We.createElement("legend",{className:"uk-legend"},"Search for a Title:"),We.createElement("div",{className:"search-phrase uk-inline uk-margin-bottom"},t&&We.createElement("a",{className:"uk-form-icon uk-form-icon-flip",attrs:{"uk-icon":"icon: close"}}),We.createElement("input",{className:"search-phrase-input uk-input",type:"text",value:t})),We.createElement("h3",{className:"uk-heading-bullet uk-margin-remove-top"},a(t)?"Popular Now":"Search Results"),function(t,e,r){return We.createElement("div",{className:"results-container"},We.createElement("div",null,t?"Loading...":""),We.createElement("div",null,e?"Network error":""),We.createElement("ul",{className:"uk-thumbnav"},"object"==typeof r&&!t&&!e&&r.map(t=>t.backdrop_path&&We.createElement("li",{className:"uk-margin-bottom"},We.createElement("a",{className:"result-item",href:"#",attrs:{onclick:"return false"},"data-id":t.id},We.createElement("div",{className:"result-item-thumbnail-holder"},We.createElement("img",{src:`http://image.tmdb.org/t/p/w300${t.backdrop_path}`,alt:""})),We.createElement("div",{className:"result-item-caption uk-text-small uk-text-muted"},t.title))))))}(r,n,e.results))),HTTP:o.a.merge(c,s),router:e.map(t=>`/movie/${t.target.closest("[data-id]").dataset.id}`),movieTitle$:p}}r(105);function fr(t){const e=t.props$.map(t=>t.movieId$).flatten(),r=t.props$.map(t=>t.movieTitle$).flatten().startWith(""),n=e.map(e=>({url:t.SvcUrl(`/movie/${e}`),category:"details",isRequest:!0})).compose(t.Time.delay(100)),i=t.HTTP.select("details").map(t=>t.replaceError(t=>o.a.of(t))).flatten().map(t=>t instanceof Error?t:JSON.parse(t.text)),a=n.map(t=>({url:t.url.replace("?","/credits?"),category:"credits",isRequest:!0})),s=t.HTTP.select("credits").map(t=>t.replaceError(t=>o.a.of(t))).flatten().map(t=>t instanceof Error?t:JSON.parse(t.text)),u=o.a.combine(i,s).startWith(""),c=o.a.merge(n,i).map(t=>Boolean(t&&t.isRequest)).startWith(!1),f=o.a.merge(n,i).map(t=>t instanceof Error).startWith(!1);return{DOM:o.a.combine(r,u,c,f).map(([t,[e,r],n,o])=>We.createElement("div",null,We.createElement("h1",null,t||e&&e.title),We.createElement("div",null,n?"Loading...":""),We.createElement("div",null,o?"Network error":""),e&&!n&&!o&&((t,e)=>We.createElement("div",{className:"movie-details"},We.createElement("div",{className:"movie-details-img-container uk-margin-right",style:"float: left"},We.createElement("img",{src:`http://image.tmdb.org/t/p/w342${t.poster_path}`,alt:""})),We.createElement("dl",{className:"uk-description-list"},We.createElement("dt",null,"Popularity"),We.createElement("dd",null,t.vote_average),We.createElement("dt",null,"Overview"),We.createElement("dd",null,t.overview),We.createElement("dt",null,"Genres"),We.createElement("dd",null,t.genres.map(t=>t.name).join(", ")),We.createElement("dt",null,"Starring"),We.createElement("dd",null,e.cast.slice(0,3).map(t=>t.name).join(", ")),We.createElement("dt",null,"Languages"),We.createElement("dd",null,t.spoken_languages.map(t=>t.name).join(", ")),We.createElement("dt",null,"Original Title"),We.createElement("dd",null,t.original_title),We.createElement("dt",null,"Release Date"),We.createElement("dd",null,t.release_date),t.imdb_id&&We.createElement("dt",null,"IMDb URL"),t.imdb_id&&We.createElement("dd",null,We.createElement("a",{href:`https://www.imdb.com/title/${t.imdb_id}/`},`https://www.imdb.com/title/${t.imdb_id}/`)))))(e,r))),HTTP:o.a.merge(n,a)}}function lr(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function pr(t){const e=t.DOM.select('.home, .view-container[data-active-page="item"] > .view[data-page="home"]').events("click"),r=[{path:"/",key:"home"},{path:"/movie/:id",key:"item"}].map(({path:t,key:e})=>[t,/\/:\w+/.test(t)?(...t)=>({key:e,args:t}):{key:e,args:[]}]),n=t.router.define(ur()(r)),i=n.map(t=>t.value.key),a=n.map(t=>t.value.args[0]).filter(t=>t),s=cr(t),u=fr(function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),n.forEach(function(e){lr(t,e,r[e])})}return t}({},t,{props$:o.a.of({movieId$:a,movieTitle$:s.movieTitle$})})),c=(t,e,r)=>We.createElement("div",{className:"view uk-margin-top-small uk-margin-left uk-margin-right","data-page":t,"data-active":r},e);return{DOM:o.a.combine(s.DOM,u.DOM,i).map(([t,e,r])=>((t,e)=>We.createElement("div",{className:"app uk-light uk-background-secondary"},We.createElement("div",{className:"header"},We.createElement("ul",{className:"uk-breadcrumb uk-padding-small"},"home"!==e?We.createElement("li",null,We.createElement("a",{className:"home"},"Back")):We.createElement("li",null," "))),We.createElement("div",{className:"view-container","data-activePage":e},t.map(t=>t))))([c("home",t,"home"===r),c("item",e,"item"===r)],r)),HTTP:o.a.merge(s.HTTP,u.HTTP),router:o.a.merge(e.mapTo("/"),s.router)}}r.d(e,"main",function(){return pr}),l(function(t,e,r){if("function"!=typeof t)throw new Error("First argument to routerify must be a valid cycle app");var n=Ze({basename:"/",historyName:"history",routerName:"router",omitHistory:!0},r),i=function(t){return n.basename+ve(t)};return function(r){var a=new Ye(o.a.fromObservable(r[n.historyName]).remember(),[],i,e),s=r;n.omitHistory&&delete s[n.historyName];var u,c,f=t(Ze({},s,((u={})[n.routerName]=a,u)));return Ze({},f,((c={})[n.historyName]=Object(h.adapt)(o.a.merge(f[n.historyName]&&!n.omitHistory?o.a.fromObservable(f[n.historyName]):o.a.never(),f[n.routerName]?o.a.fromObservable(f[n.routerName]):o.a.never())),c))}}(pr,function t(e,r){!function(t,e){if(!Qe(t))throw new Error("First parameter to switchPath must be a route path.");if(!tr(e))throw new Error("Second parameter to switchPath must be an object containing route patterns.")}(e,r);var n=null,o=null;return function(t,e){for(var r=Object.keys(t),n=0;n<r.length;++n){var o=r[n];"*"!==o&&e(o)}}(r,function(i){0===e.search(i)&&ar(i,n)&&(n=i,o=r[i]);var a=function(t,e){var r=rr(t),n=rr(e),o=n.map(function(t,e){return nr(t)?r[e]:null}).filter(er);return n.every(function(t,e){return nr(t)||t===r[e]})?o:[]}(e,i).filter(Boolean);if(a.length>0&&ar(e,n)&&(n=or(e,i),o=function(t,e){var r=tr(t)?t["/"]:t;return"function"==typeof r?r.apply(void 0,e):r}(r[i],a)),tr(r[i])&&0===a.length&&"/"!==e){var s=t(function(t,e){return t.split(e)[1]}(e,i)||"/",r[i]),u=i+s.path;null!==s.path&&ar(u,n)&&(n=u,o=s.value)}}),function(t){var e=t.sourcePath,r=t.matchedPath,n=t.matchedValue,o=t.routes,i=r?ir(e,r):null,a=n;return i||(a=(i=o["*"]?e:null)?o["*"]:null),{path:i,value:a}}({sourcePath:e,matchedPath:n,matchedValue:o,routes:r})}),{DOM:function(t,e){e||(e={}),b(t);var r=e.modules||_t;!function(t){if(!Array.isArray(t))throw new Error("Optional modules option must be an array for snabbdom modules")}(r);var n,i,a=new Ot,s=L([a.createModule()].concat(r)),u=o.a.create({start:function(t){"loading"===document.readyState?document.addEventListener("readystatechange",function(){var e=document.readyState;"interactive"!==e&&"complete"!==e||(t.next(null),t.complete())}):(t.next(null),t.complete())},stop:function(){}}),c=o.a.create({start:function(t){i=new MutationObserver(function(){return t.next(null)})},stop:function(){i.disconnect()}});return function(e,r){void 0===r&&(r="DOM"),function(t){if(!t||"function"!=typeof t.addListener||"function"!=typeof t.fold)throw new Error("The DOM driver function expects as input a Stream of virtual DOM elements")}(e);var f=o.a.create(),l=u.map(function(){var e=function(t){var e="string"==typeof t?document.querySelector(t):t;if("string"==typeof t&&null===e)throw new Error("Cannot render into unknown element `"+t+"`");return e}(t)||document.body;return n=new ct(e),e}),p=e.remember();p.addListener({}),c.addListener({});var h=l.map(function(t){return o.a.merge(p.endWhen(f),f).map(function(t){return n.call(t)}).startWith(function(t){return t.data=t.data||{},t.data.isolate=[],t}(Object(q.toVNode)(t))).fold(s,Object(q.toVNode)(t)).drop(1).map(kt).startWith(t).map(function(t){return i.observe(t,{childList:!0,attributes:!0,characterData:!0,subtree:!0,attributeOldValue:!0,characterDataOldValue:!0}),t}).compose(At)}).flatten(),d=B()(u,c).endWhen(f).compose(U()(h)).map(function(t){return t[1]}).remember();d.addListener({error:Pt});var y=new St(d,a);return new x(d,f,[],a,y,r)}}("#app"),history:function(t){var e;return e=t&&function(t){return!!t.createHref}(t)?t:Se(t),function(t){return Ae(e,t)}}(),HTTP:function(t,e){var r=t.map(Gt),n=new Ft(r,e,[]);return r.addListener({next:function(){},error:function(){},complete:function(){}}),n},Time:function(t){return oe()},SvcUrl:()=>t=>t.replace(/^/,"https://api.themoviedb.org/3").replace(/(\?|$)/,"?api_key=bf6b860ab05ac2d94054ba9ca96cf1fa&")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3hzdHJlYW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9ydW4vbGliL2FkYXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuYWJiZG9tLXNlbGVjdG9yL2xpYi9lczYvcGFyZW50LXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbmFiYmRvbS92bm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL3RpbWUvbGliL2VzNi9zcmMvcnVuLXZpcnR1YWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtY2FsbGFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbmFiYmRvbS9tb2R1bGVzL2NsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbmFiYmRvbS9tb2R1bGVzL3Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbmFiYmRvbS9tb2R1bGVzL2F0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuYWJiZG9tL21vZHVsZXMvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuYWJiZG9tL21vZHVsZXMvZGF0YXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGVyZm9ybWFuY2Utbm93L2xpYi9wZXJmb3JtYW5jZS1ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuYWJiZG9tL3Rvdm5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWZpbmUtcHJvcGVydGllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmZyb21lbnRyaWVzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvaGVscGVycy9pc1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvR2V0SW50cmluc2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2lzTmFOLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2lzRmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvbW9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuZnJvbWVudHJpZXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWlja3Rhc2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9ydW4vbGliL2VzNi9hZGFwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHN0cmVhbS9leHRyYS9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3hzdHJlYW0vZXh0cmEvc2FtcGxlQ29tYmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvY2xpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb3J0ZWQtaW1tdXRhYmxlLWxpc3QvbGliL3NvcnRlZF9pbW11dGFibGVfbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFyaWFibGUtZGlmZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tYmluZS1lcnJvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5mcm9tZW50cmllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbmFiYmRvbS9pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vaHRtbGRvbWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL3JlcXVlc3QtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvcmVzcG9uc2UtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3VwZXJhZ2VudC9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL2FnZW50LWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFyaWFibGUtZGlmZi9ub2RlX21vZHVsZXMvY2hhbGsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzY2FwZS1zdHJpbmctcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YXJpYWJsZS1kaWZmL25vZGVfbW9kdWxlcy9hbnNpLXN0eWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFyaWFibGUtZGlmZi9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFyaWFibGUtZGlmZi9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWFuc2kvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1hbnNpL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YXJpYWJsZS1kaWZmL25vZGVfbW9kdWxlcy9zdXBwb3J0cy1jb2xvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3VzdG9tLWVycm9yLWluc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jdXN0b20tZXJyb3ItaW5zdGFuY2UvYmluL2Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jdXN0b20tZXJyb3ItaW5zdGFuY2UvYmluL2ZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLnVuaXFieS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLl9iYXNlaXRlcmF0ZWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5fc3RyaW5ndG9wYXRoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guX2Jhc2V0b3N0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLl9iYXNldW5pcS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLl9jcmVhdGVzZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5fcm9vdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9lczIwMTcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2VzMjAxNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvZXMyMDE1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvZXMyMDE1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1kYXRlLW9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNQcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2VzNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtdG8tcHJpbWl0aXZlL2VzNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtcmVnZXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5mcm9tZW50cmllcy9zaGltLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmNzcz9lMGQzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3L2hvbWUvSG9tZVBhZ2UuY3NzPzMzODQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvaG9tZS9Ib21lUGFnZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvaG9tZS9SZXN1bHRzQ29udGFpbmVyLmNzcz9jM2FlIiwid2VicGFjazovLy8uL3NyYy92aWV3L2hvbWUvUmVzdWx0c0NvbnRhaW5lci5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvZGV0YWlscy9Nb3ZpZURldGFpbHNQYWdlLmNzcz83YjNjIiwid2VicGFjazovLy8uL3NyYy92aWV3L2RldGFpbHMvTW92aWVEZXRhaWxzUGFnZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9ydW4vbGliL2VzNi9pbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9ydW4vbGliL2VzNi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL2RvbS9saWIvZXM2L3RodW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvZG9tL2xpYi9lczYvZnJvbUV2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvZG9tL2xpYi9lczYvRG9jdW1lbnRET01Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9kb20vbGliL2VzNi9Cb2R5RE9NU291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvZG9tL2xpYi9lczYvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9kb20vbGliL2VzNi9TY29wZUNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9kb20vbGliL2VzNi9FbGVtZW50RmluZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvZG9tL2xpYi9lczYvaXNvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL2RvbS9saWIvZXM2L01haW5ET01Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuYWJiZG9tL2VzL3Zub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbmFiYmRvbS9lcy9pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vZXMvaHRtbGRvbWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20vZXMvc25hYmJkb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RyZWUtc2VsZWN0b3IvbGliL2VzNi9zZWxlY3RvclBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHJlZS1zZWxlY3Rvci9saWIvZXM2L21hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuYWJiZG9tLXNlbGVjdG9yL2xpYi9lczYvc2VsZWN0b3JQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuYWJiZG9tLXNlbGVjdG9yL2xpYi9lczYvY2xhc3NOYW1lRnJvbVZOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbmFiYmRvbS1zZWxlY3Rvci9saWIvZXM2L3F1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmVlLXNlbGVjdG9yL2xpYi9lczYvcXVlcnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20tc2VsZWN0b3IvbGliL2VzNi9maW5kTWF0Y2hlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25hYmJkb20tc2VsZWN0b3IvbGliL2VzNi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL2RvbS9saWIvZXM2L1ZOb2RlV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL2RvbS9saWIvZXM2L21vZHVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9kb20vbGliL2VzNi9TeW1ib2xUcmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvZG9tL2xpYi9lczYvSXNvbGF0ZU1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL2RvbS9saWIvZXM2L1JlbW92YWxTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9kb20vbGliL2VzNi9Qcmlvcml0eVF1ZXVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvZG9tL2xpYi9lczYvRXZlbnREZWxlZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9kb20vbGliL2VzNi9tYWtlRE9NRHJpdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvZG9tL2xpYi9lczYvbW9ja0RPTVNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL2RvbS9saWIvZXM2L2h5cGVyc2NyaXB0LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9kb20vbGliL2VzNi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL2h0dHAvbGliL2VzNi9pc29sYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvaHR0cC9saWIvZXM2L01haW5IVFRQU291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvaHR0cC9saWIvZXM2L2h0dHAtZHJpdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvdGltZS9saWIvZXM2L3NyYy9zY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS90aW1lL2xpYi9lczYvc3JjL2RlbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvdGltZS9saWIvZXM2L3NyYy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL3RpbWUvbGliL2VzNi9zcmMvcGVyaW9kaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS90aW1lL2xpYi9lczYvc3JjL3Rocm90dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvdGltZS9saWIvZXM2L3NyYy9hbmltYXRpb24tZnJhbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvdGltZS9saWIvZXM2L3NyYy90aHJvdHRsZS1hbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS90aW1lL2xpYi9lczYvc3JjL3RpbWUtZHJpdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvaGlzdG9yeS9saWIvZXM2L2NyZWF0ZUhpc3RvcnkkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AY3ljbGUvaGlzdG9yeS9saWIvZXM2L2NhcHR1cmVDbGlja3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuYWJiZG9tLXByYWdtYS9kaXN0L2luZGV4LmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3ljbGljLXJvdXRlci9saWIvZXM2L3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2N5Y2xpYy1yb3V0ZXIvbGliL2VzNi9Sb3V0ZXJTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2N5Y2xpYy1yb3V0ZXIvbGliL2VzNi9yb3V0ZXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3aXRjaC1wYXRoL2xpYi9lczIwMTUvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dpdGNoLXBhdGgvbGliL2VzMjAxNS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9ob21lL0hvbWVQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3L2hvbWUvUmVzdWx0c0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9kZXRhaWxzL01vdmllRGV0YWlsc1BhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BjeWNsZS9oaXN0b3J5L2xpYi9lczYvZHJpdmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGN5Y2xlL3RpbWUvbGliL2VzNi9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fZXh0ZW5kcyIsInRoaXMiLCJleHRlbmRTdGF0aWNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImIiLCJfXyIsImNvbnN0cnVjdG9yIiwic3ltYm9sX29ic2VydmFibGVfMSIsIk5PIiwibm9vcCIsImNwIiwiYSIsImxlbmd0aCIsIl90cnkiLCJ1IiwiZiIsImUiLCJfZSIsIk5PX0lMIiwiX24iLCJfYyIsImludGVybmFsaXplUHJvZHVjZXIiLCJwcm9kdWNlciIsIl9zdGFydCIsImlsIiwibmV4dCIsImVycm9yIiwiY29tcGxldGUiLCJzdGFydCIsIl9zdG9wIiwic3RvcCIsIlN0cmVhbVN1YiIsIl9zdHJlYW0iLCJfbGlzdGVuZXIiLCJ1bnN1YnNjcmliZSIsIl9yZW1vdmUiLCJPYnNlcnZlciIsImVyciIsIkZyb21PYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsInR5cGUiLCJpbnMiLCJhY3RpdmUiLCJvdXQiLCJfc3ViIiwic3Vic2NyaWJlIiwiTWVyZ2UiLCJpbnNBcnIiLCJhYyIsIkwiLCJfYWRkIiwiQ29tYmluZUxpc3RlbmVyIiwiaWxzIiwicHVzaCIsInVwIiwidmFscyIsIk5jIiwiQ29tYmluZSIsIk5uIiwidiIsIkZyb21BcnJheSIsIkZyb21Qcm9taXNlIiwib24iLCJwcm9kIiwidGhlbiIsInNldFRpbWVvdXQiLCJQZXJpb2RpYyIsInBlcmlvZCIsImludGVydmFsSUQiLCJzZWxmIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiRGVidWciLCJhcmciLCJjb25zb2xlIiwibG9nIiwiRHJvcCIsIm1heCIsImRyb3BwZWQiLCJFbmRXaGVuTGlzdGVuZXIiLCJvcCIsImVuZCIsIkVuZFdoZW4iLCJvaWwiLCJGaWx0ZXIiLCJwYXNzZXMiLCJGbGF0dGVuTGlzdGVuZXIiLCJpbm5lciIsImxlc3MiLCJGbGF0dGVuIiwib3BlbiIsIkZvbGQiLCJzZWVkIiwiX3RoaXMiLCJhY2MiLCJMYXN0IiwiaGFzIiwidmFsIiwiRXJyb3IiLCJNYXBPcCIsInByb2plY3QiLCJSZW1lbWJlciIsIlJlcGxhY2VFcnJvciIsInJlcGxhY2VyIiwiU3RhcnRXaXRoIiwiVGFrZSIsInRha2VuIiwiU3RyZWFtIiwiX3Byb2QiLCJfaWxzIiwiX3N0b3BJRCIsIl9kbCIsIl9kIiwiX3RhcmdldCIsIl9lcnIiLCJfeCIsIl9zdG9wTm93IiwidGEiLCJjbGVhclRpbWVvdXQiLCJpbmRleE9mIiwic3BsaWNlIiwiX3BydW5lQ3ljbGVzIiwiX2hhc05vU2lua3MiLCJ4IiwidHJhY2UiLCJjb25jYXQiLCJOIiwiY3RvciIsIk1lbW9yeVN0cmVhbSIsImFkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImRlZmF1bHQiLCJjcmVhdGVXaXRoTWVtb3J5IiwibmV2ZXIiLCJlbXB0eSIsInRocm93IiwiZnJvbSIsImlucHV0IiwiZnJvbU9ic2VydmFibGUiLCJmcm9tUHJvbWlzZSIsImlzQXJyYXkiLCJmcm9tQXJyYXkiLCJUeXBlRXJyb3IiLCJvZiIsIml0ZW1zIiwiX2kiLCJhcmd1bWVudHMiLCJhcnJheSIsInByb21pc2UiLCJvYnMiLCJlbmRXaGVuIiwicGVyaW9kaWMiLCJfbWFwIiwibWFwIiwibWFwVG8iLCJwcm9qZWN0ZWRWYWx1ZSIsImZpbHRlciIsImYxIiwiZjIiLCJhbmQiLCJ0YWtlIiwiYW1vdW50IiwiZHJvcCIsImxhc3QiLCJzdGFydFdpdGgiLCJpbml0aWFsIiwib3RoZXIiLCJmb2xkIiwiYWNjdW11bGF0ZSIsInJlcGxhY2VFcnJvciIsInJlcGxhY2UiLCJmbGF0dGVuIiwiY29tcG9zZSIsIm9wZXJhdG9yIiwicmVtZW1iZXIiLCJkZWJ1ZyIsImxhYmVsT3JTcHkiLCJpbWl0YXRlIiwidGFyZ2V0Iiwic2hhbWVmdWxseVNlbmROZXh0Iiwic2hhbWVmdWxseVNlbmRFcnJvciIsInNoYW1lZnVsbHlTZW5kQ29tcGxldGUiLCJzZXREZWJ1Z0xpc3RlbmVyIiwibWVyZ2UiLCJzdHJlYW1zIiwiY29tYmluZSIsIl9zdXBlciIsIl9oYXMiLCJfdiIsInhzIiwiZ2xvYmFsIiwiZ2V0R2xvYmFsIiwiZ2xvYmFsT2JqIiwid2luZG93IiwiQ3ljbGVqcyIsImFkYXB0U3RyZWFtIiwic2V0QWRhcHQiLCJhZGFwdCIsInN0cmVhbSIsImciLCJGdW5jdGlvbiIsImV2YWwiLCJ2bm9kZV8xIiwiaXMiLCJoIiwic2VsIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZGF0YSIsInVuZGVmaW5lZCIsInByaW1pdGl2ZSIsInZub2RlIiwiYWRkTlMiLCJjaGlsZERhdGEiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibmV4dFRpY2siLCJhcmdzIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib25jZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsInBhcmVudFN5bWJvbCIsIl9fd2VicGFja19leHBvcnRzX18iLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJpZCIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImZuIiwibWVtbyIsIm1lbW9pemUiLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRFbGVtZW50IiwicGFyZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJvcHRpb25zIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwibm9uY2UiLCJuYyIsImdldE5vbmNlIiwiYWRkQXR0cnMiLCJlbCIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicmVzdWx0IiwidHJhbnNmb3JtIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJyZXBsYWNlVGV4dCIsInRleHRTdG9yZSIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJlbG0iLCJzZXRJbW1lZGlhdGUiLCJydW5WaXJ0dWFsbHkiLCJwcm9jZXNzRXZlbnQiLCJzY2hlZHVsZXIiLCJkb25lIiwiY3VycmVudFRpbWUiLCJzZXRUaW1lIiwidGltZVRvUnVuVG8iLCJuZXh0RXZlbnQiLCJwZWVrIiwib3V0T2ZUaW1lIiwidGltZSIsImV2ZW50VG9Qcm9jZXNzIiwic2hpZnROZXh0RW50cnkiLCJjYW5jZWxsZWQiLCJhZGQiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwibm93Iiwicm9vdCIsInZlbmRvcnMiLCJzdWZmaXgiLCJyYWYiLCJjYWYiLCJjYWxsYmFjayIsIl9ub3ciLCJNYXRoIiwic2xpY2UiLCJyb3VuZCIsImhhbmRsZSIsImNhbmNlbCIsInBvbHlmaWxsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpbXBsZW1lbnRhdGlvbiIsImZuVG9TdHIiLCJjb25zdHJ1Y3RvclJlZ2V4IiwiaXNFUzZDbGFzc0ZuIiwiZm5TdHIiLCJ0ZXN0IiwidG9TdHIiLCJoYXNUb1N0cmluZ1RhZyIsInRyeUZ1bmN0aW9uT2JqZWN0Iiwic3RyQ2xhc3MiLCIkYXNzaWduIiwiYXNzaWduIiwidXBkYXRlQ2xhc3MiLCJvbGRWbm9kZSIsImN1ciIsIm9sZENsYXNzIiwiY2xhc3MiLCJrbGFzcyIsImNsYXNzTGlzdCIsImNsYXNzTW9kdWxlIiwidXBkYXRlUHJvcHMiLCJvbGRQcm9wcyIsInByb3BzIiwicHJvcHNNb2R1bGUiLCJ4bGlua05TIiwieG1sTlMiLCJjb2xvbkNoYXIiLCJ4Q2hhciIsInVwZGF0ZUF0dHJzIiwib2xkQXR0cnMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjaGFyQ29kZUF0Iiwic2V0QXR0cmlidXRlTlMiLCJhdHRyaWJ1dGVzTW9kdWxlIiwibmV4dEZyYW1lIiwicmVmbG93Rm9yY2VkIiwic2V0TmV4dEZyYW1lIiwicHJvcCIsInVwZGF0ZVN0eWxlIiwib2xkU3R5bGUiLCJvbGRIYXNEZWwiLCJyZW1vdmVQcm9wZXJ0eSIsImRlbGF5ZWQiLCJuYW1lMiIsInNldFByb3BlcnR5Iiwic3R5bGVNb2R1bGUiLCJwcmUiLCJkZXN0cm95Iiwicm0iLCJnZXRDb21wdXRlZFN0eWxlIiwiYm9keSIsImFwcGxpZWQiLCJzcGxpdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldiIsIkNBUFNfUkVHRVgiLCJ1cGRhdGVEYXRhc2V0Iiwib2xkRGF0YXNldCIsImRhdGFzZXQiLCJ0b0xvd2VyQ2FzZSIsImRhdGFzZXRNb2R1bGUiLCJnZXROYW5vU2Vjb25kcyIsImhydGltZSIsImxvYWRUaW1lIiwibW9kdWxlTG9hZFRpbWUiLCJub2RlTG9hZFRpbWUiLCJ1cFRpbWUiLCJwZXJmb3JtYW5jZSIsImhyIiwidXB0aW1lIiwiRGF0ZSIsImdldFRpbWUiLCJodG1sZG9tYXBpXzEiLCJ0b1ZOb2RlIiwibm9kZSIsImRvbUFwaSIsImFwaSIsImlzRWxlbWVudCIsIm5hbWVfMSIsImNuIiwiZ2V0QXR0cmlidXRlIiwidGFnTmFtZSIsImVsbUF0dHJzIiwiYXR0cmlidXRlcyIsImVsbUNoaWxkcmVuIiwibm9kZU5hbWUiLCJub2RlVmFsdWUiLCJpc1RleHQiLCJnZXRUZXh0Q29udGVudCIsImlzQ29tbWVudCIsImNvbXBhcmUiLCJ5IiwibWluIiwiaXNCdWZmZXIiLCJCdWZmZXIiLCJfaXNCdWZmZXIiLCJ1dGlsIiwiaGFzT3duIiwicFNsaWNlIiwiZnVuY3Rpb25zSGF2ZU5hbWVzIiwicFRvU3RyaW5nIiwiaXNWaWV3IiwiYXJyYnVmIiwiQXJyYXlCdWZmZXIiLCJEYXRhVmlldyIsImJ1ZmZlciIsImFzc2VydCIsIm9rIiwicmVnZXgiLCJnZXROYW1lIiwiZnVuYyIsImlzRnVuY3Rpb24iLCJtYXRjaCIsInRydW5jYXRlIiwiaW5zcGVjdCIsInNvbWV0aGluZyIsInJhd25hbWUiLCJmYWlsIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJtZXNzYWdlIiwic3RhY2tTdGFydEZ1bmN0aW9uIiwiQXNzZXJ0aW9uRXJyb3IiLCJfZGVlcEVxdWFsIiwic3RyaWN0IiwibWVtb3MiLCJpc0RhdGUiLCJpc1JlZ0V4cCIsIm11bHRpbGluZSIsImxhc3RJbmRleCIsImlnbm9yZUNhc2UiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJVaW50OEFycmF5IiwiYWN0dWFsSW5kZXgiLCJhY3R1YWxWaXNpdGVkT2JqZWN0cyIsImlzUHJpbWl0aXZlIiwiZ2V0UHJvdG90eXBlT2YiLCJhSXNBcmdzIiwiaXNBcmd1bWVudHMiLCJiSXNBcmdzIiwia2EiLCJvYmplY3RLZXlzIiwia2IiLCJzb3J0Iiwib2JqRXF1aXYiLCJleHBlY3RlZEV4Y2VwdGlvbiIsImlzUHJvdG90eXBlT2YiLCJfdGhyb3dzIiwic2hvdWxkVGhyb3ciLCJibG9jayIsIl90cnlCbG9jayIsInVzZXJQcm92aWRlZE1lc3NhZ2UiLCJpc1Vud2FudGVkRXhjZXB0aW9uIiwiaXNFcnJvciIsImlzVW5leHBlY3RlZEV4Y2VwdGlvbiIsImdlbmVyYXRlZE1lc3NhZ2UiLCJnZXRNZXNzYWdlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzdGFjayIsImZuX25hbWUiLCJuZXh0X2xpbmUiLCJzdWJzdHJpbmciLCJpbmhlcml0cyIsImVxdWFsIiwibm90RXF1YWwiLCJkZWVwRXF1YWwiLCJkZWVwU3RyaWN0RXF1YWwiLCJub3REZWVwRXF1YWwiLCJub3REZWVwU3RyaWN0RXF1YWwiLCJzdHJpY3RFcXVhbCIsIm5vdFN0cmljdEVxdWFsIiwidGhyb3dzIiwiZG9lc05vdFRocm93IiwiaWZFcnJvciIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJhcnIiLCJpc1BsYWluT2JqZWN0IiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwiY29uZmlndXJhYmxlIiwibmV3VmFsdWUiLCJ3cml0YWJsZSIsImdldFByb3BlcnR5IiwiZXh0ZW5kIiwic3JjIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwiY2xvc2UiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIm1lc3NhZ2VQcmVmaXgiLCJyYW5kb20iLCJvbkdsb2JhbE1lc3NhZ2UiLCJldmVudCIsImF0dGFjaEV2ZW50IiwiaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24iLCJNZXNzYWdlQ2hhbm5lbCIsImNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24iLCJodG1sIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbiIsInRhc2siLCJoYXNTeW1ib2xzIiwib3JpZ0RlZmluZVByb3BlcnR5Iiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsIl8iLCJhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkIiwicHJlZGljYXRlIiwiZGVmaW5lUHJvcGVydGllcyIsInByZWRpY2F0ZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJFUyIsIlRocm93Q29tcGxldGlvbiIsIml0ZXJhYmxlIiwiUmVxdWlyZU9iamVjdENvZXJjaWJsZSIsIklzQXJyYXkiLCJlbnRyaWVzIiwiZW50cnkiLCJUeXBlIiwiR2V0IiwicHJvcGVydHlLZXkiLCJUb1Byb3BlcnR5S2V5IiwiQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyIsImxlZ2FjeUFzc2lnbiIsIml0ZXIiLCJHZXRJdGVyYXRvciIsIkl0ZXJhdG9yU3RlcCIsIm5leHRJdGVtIiwiSXRlcmF0b3JWYWx1ZSIsIkl0ZXJhdG9yQ2xvc2UiLCJUaHJvd1R5cGVFcnJvciIsIml0ZXJhdG9yIiwiZ2V0UHJvdG8iLCJhc3luY0dlbkl0ZXJhdG9yIiwiVHlwZWRBcnJheSIsIklOVFJJTlNJQ1MiLCIkICVBcnJheSUiLCIkICVBcnJheUJ1ZmZlciUiLCIkICVBcnJheUJ1ZmZlclByb3RvdHlwZSUiLCIkICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSIsIiQgJUFycmF5UHJvdG90eXBlJSIsIiQgJUFycmF5UHJvdG9fZW50cmllcyUiLCIkICVBcnJheVByb3RvX2ZvckVhY2glIiwiJCAlQXJyYXlQcm90b19rZXlzJSIsIiQgJUFycmF5UHJvdG9fdmFsdWVzJSIsInZhbHVlcyIsIiQgJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUiLCIkICVBc3luY0Z1bmN0aW9uJSIsIiQgJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlIiwiJCAlQXN5bmNHZW5lcmF0b3IlIiwiJCAlQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUiLCIkICVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUiLCIkICVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSIsImFzeW5jSXRlcmF0b3IiLCIkICVBdG9taWNzJSIsIkF0b21pY3MiLCIkICVCb29sZWFuJSIsIiQgJUJvb2xlYW5Qcm90b3R5cGUlIiwiJCAlRGF0YVZpZXclIiwiJCAlRGF0YVZpZXdQcm90b3R5cGUlIiwiJCAlRGF0ZSUiLCIkICVEYXRlUHJvdG90eXBlJSIsIiQgJWRlY29kZVVSSSUiLCJkZWNvZGVVUkkiLCIkICVkZWNvZGVVUklDb21wb25lbnQlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiJCAlZW5jb2RlVVJJJSIsImVuY29kZVVSSSIsIiQgJWVuY29kZVVSSUNvbXBvbmVudCUiLCIkICVFcnJvciUiLCIkICVFcnJvclByb3RvdHlwZSUiLCIkICVldmFsJSIsIiQgJUV2YWxFcnJvciUiLCJFdmFsRXJyb3IiLCIkICVFdmFsRXJyb3JQcm90b3R5cGUlIiwiJCAlRmxvYXQzMkFycmF5JSIsIiQgJUZsb2F0MzJBcnJheVByb3RvdHlwZSUiLCIkICVGbG9hdDY0QXJyYXklIiwiJCAlRmxvYXQ2NEFycmF5UHJvdG90eXBlJSIsIiQgJUZ1bmN0aW9uJSIsIiQgJUZ1bmN0aW9uUHJvdG90eXBlJSIsIiQgJUdlbmVyYXRvciUiLCIkICVHZW5lcmF0b3JGdW5jdGlvbiUiLCIkICVHZW5lcmF0b3JQcm90b3R5cGUlIiwiJCAlSW50OEFycmF5JSIsIkludDhBcnJheSIsIiQgJUludDhBcnJheVByb3RvdHlwZSUiLCIkICVJbnQxNkFycmF5JSIsIkludDE2QXJyYXkiLCIkICVJbnQxNkFycmF5UHJvdG90eXBlJSIsIiQgJUludDMyQXJyYXklIiwiSW50MzJBcnJheSIsIiQgJUludDMyQXJyYXlQcm90b3R5cGUlIiwiJCAlaXNGaW5pdGUlIiwiaXNGaW5pdGUiLCIkICVpc05hTiUiLCJpc05hTiIsIiQgJUl0ZXJhdG9yUHJvdG90eXBlJSIsIiQgJUpTT04lIiwiJCAlSlNPTlBhcnNlJSIsInBhcnNlIiwiJCAlTWFwJSIsIk1hcCIsIiQgJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSIsIiQgJU1hcFByb3RvdHlwZSUiLCIkICVNYXRoJSIsIiQgJU51bWJlciUiLCJOdW1iZXIiLCIkICVOdW1iZXJQcm90b3R5cGUlIiwiJCAlT2JqZWN0JSIsIiQgJU9iamVjdFByb3RvdHlwZSUiLCIkICVPYmpQcm90b190b1N0cmluZyUiLCIkICVPYmpQcm90b192YWx1ZU9mJSIsInZhbHVlT2YiLCIkICVwYXJzZUZsb2F0JSIsInBhcnNlRmxvYXQiLCIkICVwYXJzZUludCUiLCJwYXJzZUludCIsIiQgJVByb21pc2UlIiwiUHJvbWlzZSIsIiQgJVByb21pc2VQcm90b3R5cGUlIiwiJCAlUHJvbWlzZVByb3RvX3RoZW4lIiwiJCAlUHJvbWlzZV9hbGwlIiwiJCAlUHJvbWlzZV9yZWplY3QlIiwicmVqZWN0IiwiJCAlUHJvbWlzZV9yZXNvbHZlJSIsInJlc29sdmUiLCIkICVQcm94eSUiLCJQcm94eSIsIiQgJVJhbmdlRXJyb3IlIiwiUmFuZ2VFcnJvciIsIiQgJVJhbmdlRXJyb3JQcm90b3R5cGUlIiwiJCAlUmVmZXJlbmNlRXJyb3IlIiwiUmVmZXJlbmNlRXJyb3IiLCIkICVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUiLCIkICVSZWZsZWN0JSIsIlJlZmxlY3QiLCIkICVSZWdFeHAlIiwiUmVnRXhwIiwiJCAlUmVnRXhwUHJvdG90eXBlJSIsIiQgJVNldCUiLCJTZXQiLCIkICVTZXRJdGVyYXRvclByb3RvdHlwZSUiLCIkICVTZXRQcm90b3R5cGUlIiwiJCAlU2hhcmVkQXJyYXlCdWZmZXIlIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCIkICVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUiLCIkICVTdHJpbmclIiwiU3RyaW5nIiwiJCAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlIiwiJCAlU3RyaW5nUHJvdG90eXBlJSIsIiQgJVN5bWJvbCUiLCIkICVTeW1ib2xQcm90b3R5cGUlIiwiJCAlU3ludGF4RXJyb3IlIiwiU3ludGF4RXJyb3IiLCIkICVTeW50YXhFcnJvclByb3RvdHlwZSUiLCIkICVUaHJvd1R5cGVFcnJvciUiLCIkICVUeXBlZEFycmF5JSIsIiQgJVR5cGVkQXJyYXlQcm90b3R5cGUlIiwiJCAlVHlwZUVycm9yJSIsIiQgJVR5cGVFcnJvclByb3RvdHlwZSUiLCIkICVVaW50OEFycmF5JSIsIiQgJVVpbnQ4QXJyYXlQcm90b3R5cGUlIiwiJCAlVWludDhDbGFtcGVkQXJyYXklIiwiVWludDhDbGFtcGVkQXJyYXkiLCIkICVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUiLCIkICVVaW50MTZBcnJheSUiLCJVaW50MTZBcnJheSIsIiQgJVVpbnQxNkFycmF5UHJvdG90eXBlJSIsIiQgJVVpbnQzMkFycmF5JSIsIlVpbnQzMkFycmF5IiwiJCAlVWludDMyQXJyYXlQcm90b3R5cGUlIiwiJCAlVVJJRXJyb3IlIiwiVVJJRXJyb3IiLCIkICVVUklFcnJvclByb3RvdHlwZSUiLCIkICVXZWFrTWFwJSIsIldlYWtNYXAiLCIkICVXZWFrTWFwUHJvdG90eXBlJSIsIiQgJVdlYWtTZXQlIiwiV2Vha1NldCIsIiQgJVdlYWtTZXRQcm90b3R5cGUlIiwiYWxsb3dNaXNzaW5nIiwiJGlzTmFOIiwiSW5maW5pdHkiLCJudW1iZXIiLCJtb2R1bG8iLCJyZW1haW4iLCJmbG9vciIsImZyb21FbnRyaWVzIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwiTXV0YXRpb25PYnNlcnZlciIsIm5vZGVfMSIsInF1ZXVlXzEiLCJpXzEiLCJzaGlmdCIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiaW5kZXhfMSIsIkNvbmNhdFByb2R1Y2VyIiwiU2FtcGxlQ29tYmluZUxpc3RlbmVyIiwiZG93biIsInNhbXBsZUNvbWJpbmUiLCJTYW1wbGVDb21iaW5lT3BlcmF0b3IiLCJvdGhlcnMiLCJzYW1wbGVyIiwid2FybiIsIkVtaXR0ZXIiLCJSZXF1ZXN0QmFzZSIsImlzT2JqZWN0IiwiUmVzcG9uc2VCYXNlIiwiQWdlbnQiLCJyZXF1ZXN0IiwibWV0aG9kIiwidXJsIiwiUmVxdWVzdCIsImdldFhIUiIsIlhNTEh0dHBSZXF1ZXN0IiwibG9jYXRpb24iLCJwcm90b2NvbCIsIkFjdGl2ZVhPYmplY3QiLCJ0cmltIiwic2VyaWFsaXplIiwicGFpcnMiLCJwdXNoRW5jb2RlZEtleVZhbHVlUGFpciIsInN1YmtleSIsInBhcnNlU3RyaW5nIiwic3RyIiwicGFpciIsInBvcyIsImlzSlNPTiIsIm1pbWUiLCJSZXNwb25zZSIsInJlcSIsInhociIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJzdGF0dXMiLCJfc2V0U3RhdHVzUHJvcGVydGllcyIsImhlYWRlciIsImhlYWRlcnMiLCJsaW5lIiwiZmllbGQiLCJsaW5lcyIsImZpZWxkcyIsInBhcnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJfc2V0SGVhZGVyUHJvcGVydGllcyIsIl9yZXNwb25zZVR5cGUiLCJyZXNwb25zZSIsIl9wYXJzZUJvZHkiLCJfcXVlcnkiLCJfaGVhZGVyIiwibmV3X2VyciIsInJlcyIsIm9yaWdpbmFsIiwicmF3UmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwiX2lzUmVzcG9uc2VPSyIsImN1c3RvbV9lcnIiLCJkZWwiLCJzZW5kIiwic2VyaWFsaXplT2JqZWN0IiwidHlwZXMiLCJqc29uIiwieG1sIiwidXJsZW5jb2RlZCIsImZvcm0iLCJmb3JtLWRhdGEiLCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCJhcHBsaWNhdGlvbi9qc29uIiwiX3BhcnNlciIsInRvRXJyb3IiLCJtc2ciLCJzZXQiLCJhY2NlcHQiLCJhdXRoIiwidXNlciIsInBhc3MiLCJfYXV0aCIsInN0cmluZyIsInF1ZXJ5IiwiYXR0YWNoIiwiZmlsZSIsIl9kYXRhIiwiX2dldEZvcm1EYXRhIiwiYXBwZW5kIiwiX2Zvcm1EYXRhIiwiRm9ybURhdGEiLCJfc2hvdWxkUmV0cnkiLCJfcmV0cnkiLCJfY2FsbGJhY2siLCJfbWF4UmV0cmllcyIsInJldHJpZXMiLCJfcmV0cmllcyIsImNyb3NzRG9tYWluRXJyb3IiLCJjcm9zc0RvbWFpbiIsImNhIiwiYWdlbnQiLCJwaXBlIiwid3JpdGUiLCJfaXNIb3N0IiwiX2VuZENhbGxlZCIsIl9maW5hbGl6ZVF1ZXJ5U3RyaW5nIiwiX2VuZCIsIl9zZXRUaW1lb3V0cyIsInJlYWR5U3RhdGUiLCJfcmVzcG9uc2VUaW1lb3V0VGltZXIiLCJ0aW1lZG91dCIsIl9hYm9ydGVkIiwiaGFuZGxlUHJvZ3Jlc3MiLCJkaXJlY3Rpb24iLCJ0b3RhbCIsInBlcmNlbnQiLCJsb2FkZWQiLCJoYXNMaXN0ZW5lcnMiLCJvbnByb2dyZXNzIiwidXBsb2FkIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIl93aXRoQ3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJjb250ZW50VHlwZSIsIl9zZXJpYWxpemVyIiwic2V0UmVxdWVzdEhlYWRlciIsIl9zZXREZWZhdWx0cyIsInBhdGNoIiwicG9zdCIsInB1dCIsIl9yZWYiLCJjb21wYXJhdG9yIiwiX3JlZiR1bmlxdWUiLCJ1bmlxdWUiLCJ1bmlxdWVJc0Z1bmN0aW9uIiwiZ2VuZXJhdGVDb21wYXJhdG9yRm9yS2V5IiwiZGVmYXVsdENvbXBhcmF0b3IiLCJzZWVkZWRDb21wYXJhdG9yIiwibG93IiwiaGlnaCIsIm1pZCIsImNvbXBhcmlzb24iLCJjaGFsayIsIm9iamVjdEFzc2lnbiIsInR5cGVDb2xvcnMiLCJtb2RpZmllZCIsImFkZGVkIiwicmVtb3ZlZCIsImluZGVudCIsImluZGVudENoYXIiLCJuZXdMaW5lQ2hhciIsIndyYXAiLCJwcmludFZhciIsInZhcmlhYmxlIiwia2V5Q2hhbmdlZCIsImluZGVudFN1Ykl0ZW0iLCJrZXlSZW1vdmVkIiwia2V5QWRkZWQiLCJkaWZmIiwibGVmdCIsInJpZ2h0IiwiaXRlbURpZmYiLCJjaGFuZ2VkIiwic3ViT3V0cHV0IiwicmlnaHRPYmoiLCJhZGRlZEtleXMiLCJDdXN0b20iLCJ1bmlxIiwiTXVsdGlFcnJvciIsImVycm9ycyIsIm11bHRpZXJyb3IiLCJyZWR1Y2UiLCJlcnJzIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fZGVmaW5lU2V0dGVyX18iLCJkZWZpbmUiLCJnZXRQb2x5ZmlsbCIsInNoaW0iLCJfcG9ueWZpbGxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIm9yaWdpbmFsTW9kdWxlIiwiaHRtbERvbUFwaSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZVVSSSIsInF1YWxpZmllZE5hbWUiLCJjcmVhdGVDb21tZW50IiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJjaGlsZCIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJub2RlVHlwZSIsIm1peGluIiwiX2NhbGxiYWNrcyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYiIsImNhbGxiYWNrcyIsIl90aW1lciIsIl90aW1lb3V0IiwiX3Jlc3BvbnNlVGltZW91dCIsIm9wdGlvbiIsImRlYWRsaW5lIiwicmV0cnkiLCJjb3VudCIsIl9yZXRyeUNhbGxiYWNrIiwiRVJST1JfQ09ERVMiLCJvdmVycmlkZSIsImNvZGUiLCJfZnVsbGZpbGxlZFByb21pc2UiLCJpbm5lclJlc29sdmUiLCJpbm5lclJlamVjdCIsInVzZSIsIl9va0NhbGxiYWNrIiwiZ2V0SGVhZGVyIiwidW5zZXQiLCJhYm9ydCIsImJhc2U2NEVuY29kZXIiLCJyZWRpcmVjdHMiLCJfbWF4UmVkaXJlY3RzIiwibWF4UmVzcG9uc2VTaXplIiwiX21heFJlc3BvbnNlU2l6ZSIsInRvSlNPTiIsImlzT2JqIiwic29ydFF1ZXJ5IiwiX3NvcnQiLCJxdWVyeUFyciIsIl9hcHBlbmRRdWVyeVN0cmluZyIsIl90aW1lb3V0RXJyb3IiLCJyZWFzb24iLCJlcnJubyIsInV0aWxzIiwiY3QiLCJwYXJhbXMiLCJsaW5rcyIsInBhcnNlTGlua3MiLCJzdGF0dXNUeXBlIiwiaW5mbyIsInJlZGlyZWN0IiwiY2xpZW50RXJyb3IiLCJzZXJ2ZXJFcnJvciIsImNyZWF0ZWQiLCJhY2NlcHRlZCIsIm5vQ29udGVudCIsImJhZFJlcXVlc3QiLCJ1bmF1dGhvcml6ZWQiLCJub3RBY2NlcHRhYmxlIiwiZm9yYmlkZGVuIiwibm90Rm91bmQiLCJ1bnByb2Nlc3NhYmxlRW50aXR5IiwiY2xlYW5IZWFkZXIiLCJjaGFuZ2VzT3JpZ2luIiwiX2RlZmF1bHRzIiwiZGVmIiwiZm9ybWF0UmVnRXhwIiwiaXNTdHJpbmciLCJvYmplY3RzIiwiaXNOdWxsIiwiaXNVbmRlZmluZWQiLCJub0RlcHJlY2F0aW9uIiwid2FybmVkIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJkZWJ1Z0Vudmlyb24iLCJkZWJ1Z3MiLCJvcHRzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwicmVjdXJzZVRpbWVzIiwicmV0Iiwic2ltcGxlIiwiaXNOdW1iZXIiLCJmb3JtYXRQcmltaXRpdmUiLCJ2aXNpYmxlS2V5cyIsImhhc2giLCJhcnJheVRvSGFzaCIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JtYXRFcnJvciIsIm91dHB1dCIsImJyYWNlcyIsInRvVVRDU3RyaW5nIiwiZm9ybWF0UHJvcGVydHkiLCJmb3JtYXRBcnJheSIsInBvcCIsInByZXYiLCJudW1MaW5lc0VzdCIsInJlZHVjZVRvU2luZ2xlU3RyaW5nIiwiZGVzYyIsInN1YnN0ciIsImFyIiwicmUiLCJvYmplY3RUb1N0cmluZyIsInBhZCIsImRlYnVnbG9nIiwiTk9ERV9ERUJVRyIsInRvVXBwZXJDYXNlIiwicGlkIiwiYm9sZCIsIml0YWxpYyIsInVuZGVybGluZSIsImludmVyc2UiLCJ3aGl0ZSIsImdyZXkiLCJibGFjayIsImJsdWUiLCJjeWFuIiwiZ3JlZW4iLCJtYWdlbnRhIiwicmVkIiwieWVsbG93Iiwic3BlY2lhbCIsImJvb2xlYW4iLCJudWxsIiwiZGF0ZSIsInJlZ2V4cCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNTeW1ib2wiLCJtb250aHMiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0RGF0ZSIsImdldE1vbnRoIiwidGltZXN0YW1wIiwib3JpZ2luIiwiZmlsbCIsInJlYWRVSW50OCIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiZXNjYXBlU3RyaW5nUmVnZXhwIiwiYW5zaVN0eWxlcyIsInN0cmlwQW5zaSIsImhhc0Fuc2kiLCJzdXBwb3J0c0NvbG9yIiwiZGVmaW5lUHJvcHMiLCJpc1NpbXBsZVdpbmRvd3NUZXJtIiwicGxhdGZvcm0iLCJURVJNIiwiQ2hhbGsiLCJlbmFibGVkIiwiY2xvc2VSZSIsImJ1aWxkIiwiX3N0eWxlcyIsInByb3RvIiwiYnVpbGRlciIsImFyZ3NMZW4iLCJuZXN0ZWRTdHlsZXMiLCJvcmlnaW5hbERpbSIsImRpbSIsImluaXQiLCJoYXNDb2xvciIsInN0cmlwQ29sb3IiLCJtYXRjaE9wZXJhdG9yc1JlIiwibW9kaWZpZXJzIiwicmVzZXQiLCJoaWRkZW4iLCJzdHJpa2V0aHJvdWdoIiwiZ3JheSIsImJnQ29sb3JzIiwiYmdCbGFjayIsImJnUmVkIiwiYmdHcmVlbiIsImJnWWVsbG93IiwiYmdCbHVlIiwiYmdNYWdlbnRhIiwiYmdDeWFuIiwiYmdXaGl0ZSIsImdyb3VwTmFtZSIsImdyb3VwIiwic3R5bGVOYW1lIiwiYW5zaVJlZ2V4IiwidGVybWluYXRvciIsImhhc0ZsYWciLCJmbGFnIiwic3Rkb3V0IiwiaXNUVFkiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidG8iLCJ0b09iamVjdCIsIkN1c3RvbUVycm9yIiwiZmFjdG9yeSIsIkVyciIsInByb3BlcnRpZXMiLCJjb25zdHJ1Y3QiLCJpc1Jvb3QiLCJmaW5kQXJnIiwiaXNQYXJlbnRBcmciLCJpc1Byb3BlcnRpZXNBcmciLCJpc0ZhY3RvcnlBcmciLCJpc05hbWVBcmciLCJjb25maWd1cmF0aW9uIiwiZmFjdG9yaWVzIiwiY2hhaW4iLCJyZXZlcnNlIiwidW5zaGlmdCIsImNvbmZpZyIsImRlZmF1bHRWYWx1ZSIsImFudGlGaWx0ZXJzIiwiYW50aSIsImZvdW5kIiwib3JkZXIiLCJleHBlY3RSZWNlaXZlIiwicmVjZWl2ZWQiLCJzdGFja0xlbmd0aCIsInN0YWNrVHJhY2VMaW1pdCIsInJvb3RPbmx5IiwibWVzc2FnZVN0ciIsIm9yaWdpbmFsU3RhY2tMZW5ndGgiLCJ1cGRhdGVTdGFjayIsImJhc2VJdGVyYXRlZSIsImJhc2VVbmlxIiwiaXRlcmF0ZWUiLCJzdHJpbmdUb1BhdGgiLCJMQVJHRV9BUlJBWV9TSVpFIiwiSEFTSF9VTkRFRklORUQiLCJVTk9SREVSRURfQ09NUEFSRV9GTEFHIiwiUEFSVElBTF9DT01QQVJFX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsIm9iamVjdFR5cGVzIiwiZnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJmcmVlR2xvYmFsIiwiY2hlY2tHbG9iYWwiLCJmcmVlU2VsZiIsImZyZWVXaW5kb3ciLCJ0aGlzR2xvYmFsIiwiYXJyYXlTb21lIiwiYmFzZVRvUGFpcnMiLCJhcnJheU1hcCIsImlzSG9zdE9iamVjdCIsIm1hcFRvQXJyYXkiLCJzaXplIiwic2V0VG9BcnJheSIsImFycmF5UHJvdG8iLCJvYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsInJlSXNOYXRpdmUiLCJuYXRpdmVHZXRQcm90b3R5cGUiLCJuYXRpdmVLZXlzIiwiZ2V0TmF0aXZlIiwibmF0aXZlQ3JlYXRlIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJIYXNoIiwiY2xlYXIiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImFzc29jSW5kZXhPZiIsImVxIiwiYmFzZUdldCIsInBhdGgiLCJpc0tleSIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlSGFzIiwiZ2V0UHJvdG90eXBlIiwiYmFzZUhhc0luIiwiYmFzZUlzRXF1YWwiLCJjdXN0b21pemVyIiwiYml0bWFzayIsImlzT2JqZWN0TGlrZSIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJnZXRUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiaXNMZW5ndGgiLCJpc1R5cGVkQXJyYXkiLCJlcXVhbEFycmF5cyIsInRhZyIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwiY29udmVydCIsImlzUGFydGlhbCIsInN0YWNrZWQiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvdGhMZW5ndGgiLCJza2lwQ3RvciIsIm9ialZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZVByb3BlcnR5IiwiYXJyTGVuZ3RoIiwiYXJyVmFsdWUiLCJvdGhJbmRleCIsImdldE1hcERhdGEiLCJjYWNoZSIsImdldExlbmd0aCIsImlzS2V5YWJsZSIsImlzTmF0aXZlIiwiaW5kZXhLZXlzIiwiYmFzZVRpbWVzIiwiaXNJbmRleCIsImlzU3RyaWN0Q29tcGFyYWJsZSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwic3JjVmFsdWUiLCJpc0FycmF5TGlrZSIsImlzQXJyYXlMaWtlT2JqZWN0IiwiQ3RvciIsImN0b3JTdHJpbmciLCJpc1Byb3RvIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5cyIsImluZGV4ZXMiLCJza2lwSW5kZXhlcyIsInRvUGFpcnMiLCJrZXlzRnVuYyIsInNldFRvUGFpcnMiLCJjcmVhdGVUb1BhaXJzIiwiaWRlbnRpdHkiLCJoYXNGdW5jIiwiaGFzUGF0aCIsImhhc0luIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsIm1hdGNoRGF0YSIsImdldE1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsImJhc2VJc01hdGNoIiwiYmFzZU1hdGNoZXMiLCJiYXNlUHJvcGVydHlEZWVwIiwiYmFzZVRvU3RyaW5nIiwiRlVOQ19FUlJPUl9URVhUIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInF1b3RlIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwic3ltYm9sVG9TdHJpbmciLCJjcmVhdGVTZXQiLCJhcnJheUluY2x1ZGVzIiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0IiwiaW5kZXhPZk5hTiIsImJhc2VJbmRleE9mIiwiYXJyYXlJbmNsdWRlc1dpdGgiLCJjYWNoZUhhcyIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJvdXRlciIsImNvbXB1dGVkIiwic2VlbkluZGV4IiwiaXNBcmdzIiwiaXNFbnVtZXJhYmxlIiwiaGFzRG9udEVudW1CdWciLCJoYXNQcm90b0VudW1CdWciLCJkb250RW51bXMiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSIsImV4Y2x1ZGVkS2V5cyIsIiRhcHBsaWNhdGlvbkNhY2hlIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG91dGVySGVpZ2h0IiwiJG91dGVyV2lkdGgiLCIkcGFnZVhPZmZzZXQiLCIkcGFnZVlPZmZzZXQiLCIkcGFyZW50IiwiJHNjcm9sbExlZnQiLCIkc2Nyb2xsVG9wIiwiJHNjcm9sbFgiLCIkc2Nyb2xsWSIsIiRzZWxmIiwiJHdlYmtpdEluZGV4ZWREQiIsIiR3ZWJraXRTdG9yYWdlSW5mbyIsIiR3aW5kb3ciLCJoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWciLCJrIiwia2V5c1NoaW0iLCJ0aGVLZXlzIiwic2tpcFByb3RvIiwic2tpcENvbnN0cnVjdG9yIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5Iiwib3JpZ2luYWxLZXlzIiwiY2FsbGVlIiwiRVMyMDE2IiwiRVMyMDE3IiwiVG9JbmRleCIsImludGVnZXJJbmRleCIsIlRvSW50ZWdlciIsIlRvTGVuZ3RoIiwiU2FtZVZhbHVlWmVybyIsIkVudW1lcmFibGVPd25OYW1lcyIsIkVTMjAxNSIsIlNhbWVWYWx1ZU5vbk51bWJlciIsIlNhbWVWYWx1ZSIsInRvUHJpbWl0aXZlIiwiR2V0SW50cmluc2ljIiwiJFR5cGVFcnJvciIsIiRTeW50YXhFcnJvciIsIiRBcnJheSIsIiRTdHJpbmciLCIkT2JqZWN0IiwiJE51bWJlciIsIiRTeW1ib2wiLCIkUmVnRXhwIiwiJGlzRmluaXRlIiwicG93Iiwic2lnbiIsIm1vZCIsInBhcnNlSW50ZWdlciIsImFycmF5U2xpY2UiLCJzdHJTbGljZSIsImlzQmluYXJ5IiwiaXNPY3RhbCIsInJlZ2V4RXhlYyIsImV4ZWMiLCJub25XU3JlZ2V4IiwiaGFzTm9uV1MiLCJpc0ludmFsaWRIZXhMaXRlcmFsIiwiJGNoYXJDb2RlQXQiLCIkZmxvb3IiLCIkYWJzIiwiYWJzIiwiJE9iamVjdENyZWF0ZSIsIiRnT1BEIiwiJGlzRXh0ZW5zaWJsZSIsImlzRXh0ZW5zaWJsZSIsIndzIiwidHJpbVJlZ2V4IiwiRVM1IiwiaGFzUmVnRXhwTWF0Y2hlciIsIkVTNiIsIkNhbGwiLCJGIiwiViIsIklzQ2FsbGFibGUiLCJUb1ByaW1pdGl2ZSIsIlRvTnVtYmVyIiwiYXJndW1lbnQiLCJOYU4iLCJ0cmltbWVkIiwiVG9JbnQxNiIsImludDE2Yml0IiwiVG9VaW50MTYiLCJUb0ludDgiLCJpbnQ4Yml0IiwiVG9VaW50OCIsInBvc0ludCIsIlRvVWludDhDbGFtcCIsIlRvU3RyaW5nIiwiVG9PYmplY3QiLCJDYW5vbmljYWxOdW1lcmljSW5kZXhTdHJpbmciLCJDaGVja09iamVjdENvZXJjaWJsZSIsIklzQ29uc3RydWN0b3IiLCJJc0V4dGVuc2libGUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIklzSW50ZWdlciIsIklzUHJvcGVydHlLZXkiLCJJc1JlZ0V4cCIsIlRvQm9vbGVhbiIsIkdldFYiLCJQIiwiR2V0TWV0aG9kIiwiTyIsIlNwZWNpZXNDb25zdHJ1Y3RvciIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIkMiLCJTIiwic3BlY2llcyIsIkNvbXBsZXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiRGVzYyIsIklzUHJvcGVydHlEZXNjcmlwdG9yIiwiSXNHZW5lcmljRGVzY3JpcHRvciIsIklzRGF0YURlc2NyaXB0b3IiLCJUaHJvdyIsIkhhc093blByb3BlcnR5IiwiSGFzUHJvcGVydHkiLCJJc0NvbmNhdFNwcmVhZGFibGUiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiSW52b2tlIiwiYXJndW1lbnRzTGlzdCIsImFjdHVhbE1ldGhvZCIsIkl0ZXJhdG9yTmV4dCIsIkl0ZXJhdG9yQ29tcGxldGUiLCJpdGVyUmVzdWx0IiwiY29tcGxldGlvbiIsImNvbXBsZXRpb25SZWNvcmQiLCJjb21wbGV0aW9uVGh1bmsiLCJpdGVyYXRvclJldHVybiIsImlubmVyUmVzdWx0IiwiQ3JlYXRlSXRlclJlc3VsdE9iamVjdCIsIlJlZ0V4cEV4ZWMiLCJSIiwiQXJyYXlTcGVjaWVzQ3JlYXRlIiwib3JpZ2luYWxBcnJheSIsIkNyZWF0ZURhdGFQcm9wZXJ0eSIsIm9sZERlc2MiLCJleHRlbnNpYmxlIiwibmV3RGVzYyIsInN1Y2Nlc3MiLCJPYmplY3RDcmVhdGUiLCJpbnRlcm5hbFNsb3RzTGlzdCIsIkFkdmFuY2VTdHJpbmdJbmRleCIsInVuaWNvZGUiLCJmaXJzdCIsInNlY29uZCIsInRoYXQiLCJib3VuZCIsImJvdW5kTGVuZ3RoIiwiYm91bmRBcmdzIiwiRW1wdHkiLCJpc0NhbGxhYmxlIiwiZXhvdGljVG9QcmltIiwiaGludCIsIm1ldGhvZE5hbWVzIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImdldERheSIsInRyeURhdGVPYmplY3QiLCJzeW1Ub1N0ciIsInN5bVN0cmluZ1JlZ2V4IiwiaXNTeW1ib2xPYmplY3QiLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsInN5bSIsInN5bU9iaiIsInN5bXMiLCJkZXNjcmlwdG9yIiwiVG9JbnQzMiIsIlRvVWludDMyIiwib3B0TWVzc2FnZSIsImFsbG93ZWQiLCJbW0NvbmZpZ3VyYWJsZV1dIiwiW1tFbnVtZXJhYmxlXV0iLCJbW0dldF1dIiwiW1tTZXRdXSIsIltbVmFsdWVdXSIsIltbV3JpdGFibGVdXSIsImlzRGF0YSIsIklzQWNjZXNzb3IiLCJJc0FjY2Vzc29yRGVzY3JpcHRvciIsIkZyb21Qcm9wZXJ0eURlc2NyaXB0b3IiLCJUb1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iaiIsInNldHRlciIsIkVTNWludGVybmFsU2xvdHMiLCJhY3R1YWxIaW50IiwibWV0aG9kcyIsInRyeVJlZ2V4RXhlY0NhbGwiLCJobXIiLCJsb2NhbHMiLCJiYXNlVXJsIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsInNjaGVkdWxlTWljcm90YXNrIiwicXVpY2t0YXNrX2RlZmF1bHQiLCJpc09iamVjdEVtcHR5Iiwic2V0dXAiLCJtYWluIiwiZHJpdmVycyIsImVuZ2luZSIsInNpbmtQcm94aWVzIiwieHN0cmVhbV9kZWZhdWx0IiwibWFrZVNpbmtQcm94aWVzIiwibmFtZV8zIiwiYWRhcHRTb3VyY2VzIiwibmFtZV8yIiwiX2lzQ3ljbGVTb3VyY2UiLCJjYWxsRHJpdmVycyIsInNpbmtzIiwic2lua05hbWVzIiwiYnVmZmVycyIsInJlcGxpY2F0b3JzIiwic3Vic2NyaXB0aW9ucyIsInJlcGxpY2F0ZU1hbnkiLCJkaXNwb3NlIiwiZGlzcG9zZVNvdXJjZXMiLCJkaXNwb3NlU2lua1Byb3hpZXMiLCJzZXR1cFJldXNhYmxlIiwiZGlzcG9zZVJ1biIsInByb2dyYW0iLCJDeWNsZWpzRGV2VG9vbF9zdGFydEdyYXBoU2VyaWFsaXplciIsImZyb21FdmVudCIsImVsZW1lbnQiLCJldmVudE5hbWUiLCJ1c2VDYXB0dXJlIiwicHJldmVudERlZmF1bHQiLCJwYXNzaXZlIiwieHN0cmVhbSIsInByZXZlbnREZWZhdWx0Q29uZGl0aW9uYWwiLCJjYXB0dXJlIiwiaXNQcmVkaWNhdGUiLCJtYXRjaE9iamVjdCIsIm1hdGNoZXIiLCJEb2N1bWVudERPTVNvdXJjZV9Eb2N1bWVudERPTVNvdXJjZSIsIkRvY3VtZW50RE9NU291cmNlIiwiX25hbWUiLCJzZWxlY3QiLCJzZWxlY3RvciIsImVsZW1lbnRzIiwibGliX2FkYXB0IiwiZXZlbnRzIiwiZXZlbnRUeXBlIiwiYnViYmxlcyIsIkJvZHlET01Tb3VyY2VfQm9keURPTVNvdXJjZSIsIkJvZHlET01Tb3VyY2UiLCJjaGVja1ZhbGlkQ29udGFpbmVyIiwiY29udGFpbmVyIiwiSFRNTEVsZW1lbnQiLCJEb2N1bWVudEZyYWdtZW50IiwiaXNWYWxpZE5vZGUiLCJnZXRTZWxlY3RvcnMiLCJuYW1lc3BhY2UiLCJpc0VxdWFsTmFtZXNwYWNlIiwiU2NvcGVDaGVja2VyX1Njb3BlQ2hlY2tlciIsIlNjb3BlQ2hlY2tlciIsImlzb2xhdGVNb2R1bGUiLCJfbmFtZXNwYWNlIiwiaXNEaXJlY3RseUluU2NvcGUiLCJsZWFmIiwiZ2V0TmFtZXNwYWNlIiwiRWxlbWVudEZpbmRlcl9FbGVtZW50RmluZGVyIiwiRWxlbWVudEZpbmRlciIsInNjb3BlQ2hlY2tlciIsInRvcE5vZGUiLCJ0b0VsQXJyYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlcyIsIl9fYXNzaWduIiwiZ2V0U2NvcGVPYmoiLCJpc0NsYXNzT3JJZCIsIk1haW5ET01Tb3VyY2VfTWFpbkRPTVNvdXJjZSIsIk1haW5ET01Tb3VyY2UiLCJfcm9vdEVsZW1lbnQkIiwiX3Nhbml0YXRpb24kIiwiX2lzb2xhdGVNb2R1bGUiLCJfZXZlbnREZWxlZ2F0b3IiLCJpc29sYXRlU291cmNlIiwiaXNvbGF0ZVNpbmsiLCJzaW5rIiwic2NvcGVPYmoiLCJpc29sYXRlIiwibWFrZUlzb2xhdGVTaW5rIiwiX2VsZW1lbnRzIiwiZWxlbWVudEZpbmRlcl8xIiwiZXZlbnQkIiwidm5vZGVfdm5vZGUiLCJlc192bm9kZSIsImh0bWxkb21hcGkiLCJpc1VuZGVmIiwiaXNEZWYiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ2bm9kZTEiLCJ2bm9kZTIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY2giLCJob29rcyIsInNuYWJiZG9tX2luaXQiLCJjYnMiLCJob29rIiwiY3JlYXRlUm1DYiIsImNoaWxkRWxtIiwicGFyZW50XzEiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJoYXNoSWR4IiwiZG90SWR4IiwiZG90IiwiaW5zZXJ0IiwiYWRkVm5vZGVzIiwicGFyZW50RWxtIiwidm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsInBhdGNoVm5vZGUiLCJwcmVwYXRjaCIsIm9sZENoIiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwiZWxtVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsInVwZGF0ZUNoaWxkcmVuIiwicG9zdHBhdGNoIiwiaXNWbm9kZSIsImNsYXNzTmFtZSIsImVtcHR5Tm9kZUF0Iiwic2VsZWN0b3JQYXJzZXJfYXNzaWduIiwiSURFTlQiLCJTUEFDRSIsIlZBTFVFIiwiT1AiLCJDT01CSU5BVE9SIiwiVEFHIiwiVE9LRU5TIiwiY29tYmluYXRvclJlZ2V4IiwicGFyc2VTZWxlY3RvciIsInRhZ1JlZ2V4IiwibmV4dFNlbGVjdG9yIiwibGFzdENvbWJpbmF0b3IiLCJnZXRDb21iaW5hdG9yIiwic3RhcnRzV2l0aCIsImlkcyIsInBvc3Rwcm9jZXNzUmVnZXgiLCJfYSIsIl9iIiwiYXR0ciIsImdldE9wIiwicGFyc2VBdHRyVmFsdWUiLCJjdXJyIiwicHNldWRvcyIsInBvc3RQcm9jZXNzUHNldWRvcyIsImNvbWIiLCJjcmVhdGVNYXRjaGVzIiwiY2xhc3NlcyIsImVuZHNXaXRoIiwiY29udGVudHMiLCJzaWJsaW5ncyIsInBhcnNlUmVzdWx0IiwiZmFjdG9yIiwic2VsZWN0b3JQYXJzZXIiLCJjbGFzc05hbWVGcm9tVk5vZGUiLCJ2Tm9kZSIsImRhdGFDbGFzcyIsImNsIiwicXVlcnlfb3B0aW9ucyIsInBhcmVudF9zeW1ib2wiLCJxdWVyeV9tYXRjaGVzIiwicXVlcnlfcXVlcnlTZWxlY3RvciIsIl9tYXRjaGVzIiwicmVzdWx0cyIsImN1cnJlbnRTZWxlY3RvciIsImN1cnJlbnRDb21iaW5hdG9yIiwidGFpbCIsIl9sb29wXzEiLCJkZXB0aF8xIiwiZmluZFN1YnRyZWUiLCJtYXRjaGVkIiwiY2hpbGRNYXRjaGVkIiwibmV4dF8xIiwiZmluZFNpYmxpbmciLCJjcmVhdGVRdWVyeVNlbGVjdG9yIiwiYWRkUGFyZW50IiwiaXNQYXJlbnQiLCJWTm9kZVdyYXBwZXJfVk5vZGVXcmFwcGVyIiwiVk5vZGVXcmFwcGVyIiwicm9vdEVsZW1lbnQiLCJpc0RvY0ZyYWciLCJ3cmFwRG9jRnJhZyIsInNlbFRhZ05hbWUiLCJzZWxJZCIsInZOb2RlQ2xhc3NOYW1lIiwidk5vZGVJZCIsInNuYWJiZG9tX3Zub2RlIiwic2VsQ2xhc3MiLCJlczZfbW9kdWxlcyIsInN0eWxlX2RlZmF1bHQiLCJjbGFzc19kZWZhdWx0IiwicHJvcHNfZGVmYXVsdCIsImF0dHJpYnV0ZXNfZGVmYXVsdCIsImRhdGFzZXRfZGVmYXVsdCIsImVzNl9TeW1ib2xUcmVlIiwiU3ltYm9sVHJlZSIsIm1hcHBlciIsInRyZWUiLCJfbWF4IiwiZ2V0RGVmYXVsdCIsIm1rRGVmYXVsdEVsZW1lbnQiLCJkZWxldGUiLCJJc29sYXRlTW9kdWxlX0lzb2xhdGVNb2R1bGUiLCJJc29sYXRlTW9kdWxlIiwibmFtZXNwYWNlVHJlZSIsIm5hbWVzcGFjZUJ5RWxlbWVudCIsInZub2Rlc0JlaW5nUmVtb3ZlZCIsInNldEV2ZW50RGVsZWdhdG9yIiwiZXZlbnREZWxlZ2F0b3IiLCJpbnNlcnRFbGVtZW50IiwicmVtb3ZlRWxlbWVudCIsImdldFJvb3RFbGVtZW50IiwiY3JlYXRlTW9kdWxlIiwiZW1wdHlWTm9kZSIsIm9sZFZOb2RlIiwib2xkRWxtIiwib2xkRGF0YSIsIm9sZE5hbWVzcGFjZSIsImlzb2xhdGlvbiIsImVzNl9SZW1vdmFsU2V0IiwiUmVtb3ZhbFNldCIsInRvRGVsZXRlIiwidG9EZWxldGVTaXplIiwiX3NldCIsImZsdXNoIiwiZXM2X1ByaW9yaXR5UXVldWUiLCJQcmlvcml0eVF1ZXVlIiwicHJpb3MiLCJwcmlvIiwiRXZlbnREZWxlZ2F0b3JfYXNzaWduIiwiZXZlbnRUeXBlc1RoYXREb250QnViYmxlIiwiRXZlbnREZWxlZ2F0b3JfRXZlbnREZWxlZ2F0b3IiLCJFdmVudERlbGVnYXRvciIsInJvb3RFbGVtZW50JCIsInZpcnR1YWxMaXN0ZW5lcnMiLCJub25CdWJibGluZ0xpc3RlbmVyc1RvQWRkIiwidmlydHVhbE5vbkJ1YmJsaW5nTGlzdGVuZXIiLCJkb21MaXN0ZW5lcnMiLCJkb21MaXN0ZW5lcnNUb0FkZCIsIm5vbkJ1YmJsaW5nTGlzdGVuZXJzIiwicmVzZXRFdmVudExpc3RlbmVycyIsInNldHVwRE9NTGlzdGVuZXIiLCJyZXNldE5vbkJ1YmJsaW5nTGlzdGVuZXJzIiwic2V0dXBOb25CdWJibGluZ0xpc3RlbmVyIiwic3ViamVjdCIsImRlc3QiLCJpbnNlcnRMaXN0ZW5lciIsImZpbmRlciIsInRvUmVtb3ZlIiwicmVsZXZhbnRTZXRzIiwiZ2V0VmlydHVhbExpc3RlbmVycyIsImRlc3RpbmF0aW9uIiwiZXhhY3QiLCJzdWIiLCJvbkV2ZW50IiwiZWxlbWVudEZpbmRlciIsIm5ld01hcCIsImlubmVyTWFwIiwibWFrZUluc2VydCIsImNvbnRhaW5zIiwiZGVzdGluYXRpb25fMSIsIm5ld0VsbSIsIm5ld1N1YiIsInB1dE5vbkJ1YmJsaW5nTGlzdGVuZXIiLCJjeWNsZUV2ZW50IiwicGF0Y2hFdmVudCIsImJ1YmJsZSIsImRvQnViYmxlU3RlcCIsInN0b3BQcm9wYWdhdGlvbiIsInByb3BhZ2F0aW9uSGFzQmVlblN0b3BwZWQiLCJuZXdSb290IiwibmV3SW5kZXgiLCJtdXRhdGVFdmVudEN1cnJlbnRUYXJnZXQiLCJwRXZlbnQiLCJvbGRTdG9wUHJvcGFnYXRpb24iLCJjdXJyZW50VGFyZ2V0RWxlbWVudCIsIm93bmVyVGFyZ2V0IiwiZHJvcENvbXBsZXRpb24iLCJ1bndyYXBFbGVtZW50RnJvbVZOb2RlIiwicmVwb3J0U25hYmJkb21FcnJvciIsIk1vY2tlZERPTVNvdXJjZSIsIl9tb2NrQ29uZmlnIiwib3V0cHV0JCIsInN0cmVhbUZvckV2ZW50VHlwZSIsImlzU2VsZWN0b3IiLCJwYXJhbSIsImlzVmFsaWRTdHJpbmciLCJjcmVhdGVUYWdGdW5jdGlvbiIsImhhc0EiLCJoYXNCIiwiaGFzQyIsIlNWR19UQUdfTkFNRVMiLCJzdmciLCJUQUdfTkFNRVMiLCJleHBvcnRlZCIsImh5cGVyc2NyaXB0X2hlbHBlcnMiLCJhYmJyIiwiYWRkcmVzcyIsImFyZWEiLCJhcnRpY2xlIiwiYXNpZGUiLCJhdWRpbyIsImJkaSIsImJkbyIsImJsb2NrcXVvdGUiLCJiciIsImJ1dHRvbiIsImNhbnZhcyIsImNhcHRpb24iLCJjaXRlIiwiY29sIiwiY29sZ3JvdXAiLCJkZCIsImRmbiIsImRpdiIsImRsIiwiZHQiLCJlbSIsImVtYmVkIiwiZmllbGRzZXQiLCJmaWdjYXB0aW9uIiwiZmlndXJlIiwiZm9vdGVyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaGdyb3VwIiwiaWZyYW1lIiwiaW1nIiwia2JkIiwia2V5Z2VuIiwibGFiZWwiLCJsZWdlbmQiLCJsaSIsIm1hcmsiLCJtZW51IiwibWV0YSIsIm5hdiIsIm5vc2NyaXB0Iiwib2wiLCJvcHRncm91cCIsInByb2dyZXNzIiwicSIsInJwIiwicnQiLCJydWJ5Iiwic2FtcCIsInNlY3Rpb24iLCJzbWFsbCIsInNwYW4iLCJzdHJvbmciLCJzdXAiLCJ0YWJsZSIsInRib2R5IiwidGQiLCJ0ZXh0YXJlYSIsInRmb290IiwidGgiLCJ0aGVhZCIsInRyIiwidWwiLCJ2aWRlbyIsImh0dHBTb3VyY2UiLCJyZXF1ZXN0TmFtZXNwYWNlIiwic291cmNlTmFtZXNwYWNlIiwiYXJyYXlFcXVhbCIsInJlcXVlc3QkIiwiTWFpbkhUVFBTb3VyY2VfTWFpbkhUVFBTb3VyY2UiLCJNYWluSFRUUFNvdXJjZSIsIl9yZXMkJCIsInIkIiwiY2F0ZWdvcnkiLCJyZXMkJCIsInJlcyQiLCJjcmVhdGVSZXNwb25zZSQiLCJyZXFJbnB1dCIsInJlcU9wdGlvbnNfMSIsIm5vcm1hbGl6ZVJlcXVlc3RJbnB1dCIsInJhd1JlcU9wdGlvbnMiLCJyZXFPcHRpb25zIiwicHJlcHJvY2Vzc1JlcU9wdGlvbnMiLCJsb3dlckNhc2VNZXRob2QiLCJjbGllbnQiLCJjZXJ0IiwiZmlsZW5hbWUiLCJvcHRpb25zVG9TdXBlcmFnZW50IiwicmVxdWVzdElucHV0VG9SZXNwb25zZSQiLCJyZXNwb25zZSQiLCJfZXJyb3IiLCJzb2Z0Tm9ybWFsaXplUmVxdWVzdElucHV0IiwibGF6eSIsInNjaGVkdWxlcl9jb21wYXJhdG9yIiwibWFrZVNjaGVkdWxlciIsInNjaGVkdWxlIiwiYWRkU2NoZWR1bGVFbnRyeSIsInNvcnRlZF9pbW11dGFibGVfbGlzdF9kZWZhdWx0Iiwic2NoZWR1bGVFbnRyeSIsIm5ld0VudHJ5IiwiaXNFbXB0eSIsIl9zY2hlZHVsZSIsIm1ha2VEZWxheSIsImNyZWF0ZU9wZXJhdG9yIiwiZGVsYXlUaW1lIiwiZGVsYXlMaXN0ZW5lciIsImRlbGF5ZWRUaW1lIiwibWFrZURlbGF5TGlzdGVuZXIiLCJtYWtlRGVib3VuY2UiLCJkZWJvdW5jZUludGVydmFsIiwic3RhdGUiLCJzY2hlZHVsZWRFbnRyeSIsImRlYm91bmNlZFN0cmVhbSIsImRlYm91bmNlTGlzdGVuZXIiLCJ0aW1lVG9TY2hlZHVsZSIsIm1ha2VEZWJvdW5jZUxpc3RlbmVyIiwibWFrZVBlcmlvZGljIiwic3RvcHBlZCIsImxhc3RFbWl0VGltZSIsInNjaGVkdWxlTmV4dEV2ZW50IiwiX2N1cnJlbnRUaW1lIiwidGltZVRvRW1pdCIsIm1ha2VUaHJvdHRsZSIsImxhc3RFdmVudFRpbWUiLCJ0aHJvdHRsZWRTdHJlYW0iLCJ0aHJvdHRsZUxpc3RlbmVyIiwibWFrZVRocm90dGxlTGlzdGVuZXIiLCJFWFBFQ1RFRF9ERUxUQSIsIm1ha2VUaHJvdHRsZUFuaW1hdGlvbiIsInRpbWVTb3VyY2UiLCJsYXN0VmFsdWUiLCJlbWl0dGVkTGFzdFZhbHVlIiwiZnJhbWUkIiwiYW5pbWF0aW9uRnJhbWVzIiwiYW5pbWF0aW9uTGlzdGVuZXIiLCJ0aW1lRHJpdmVyIiwiZnJhbWVDYWxsYmFja3MiLCJuZXdUaW1lIiwicGF1c2VkIiwicHJvY2Vzc0ZyYW1lQ2FsbGJhY2tzIiwicG9wcGVkSXRlbXMiLCJwb3BBbGwiLCJwZXJmb3JtYW5jZV9ub3ciLCJuZXh0RXZlbnRUaW1lIiwicGF1c2UiLCJyZXN1bWUiLCJydW5SZWFsdGltZSIsImFkZEZyYW1lQ2FsbGJhY2siLCJmcmFtZSIsImRlbHRhIiwibm9ybWFsaXplZERlbHRhIiwiZnJhbWVTdHJlYW0iLCJvbGRUaW1lIiwibWFrZUFuaW1hdGlvbkZyYW1lcyIsImRlbGF5IiwiZGVib3VuY2UiLCJ0aHJvdHRsZSIsInRocm90dGxlQW5pbWF0aW9uIiwiX3RpbWUiLCJfc2NoZWR1bGVyIiwiX3BhdXNlIiwiX3Jlc3VtZSIsIl9ydW5WaXJ0dWFsbHkiLCJydW5fdmlydHVhbGx5IiwiaXNBYnNvbHV0ZSIsImNoYXJBdCIsInNwbGljZU9uZSIsInJlc29sdmVfcGF0aG5hbWUiLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwiYWRkTGVhZGluZ1NsYXNoIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsInNlYXJjaCIsIl9leHRlbmRzIiwiTG9jYXRpb25VdGlsc19jcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZXNfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiYnJvd3Nlcl9kZWZhdWx0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIl9rZXkiLCJjYW5Vc2VET00iLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJjcmVhdGVCcm93c2VySGlzdG9yeV90eXBlb2YiLCJjcmVhdGVCcm93c2VySGlzdG9yeV9leHRlbmRzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImVzX2NyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiaW52YXJpYW50X2Jyb3dzZXJfZGVmYXVsdCIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzdXBwb3J0c0hpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsInNldFN0YXRlIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiY3JlYXRlSGlzdG9yeSQiLCJzaW5rJCIsImhpc3RvcnkkIiwibWFrZUNhbGxPbkhpc3RvcnkiLCJsb2MiLCJjcmVhdGVPYnNlcnZlciIsIm9udG91Y2hzdGFydCIsImluZGV4X2VzNl90ZXh0IiwiaW5kZXhfZXM2X2FycmF5IiwiaW5kZXhfZXM2X29iamVjdCIsInN2Z1Byb3BzTWFwIiwiY2lyY2xlIiwiZWxsaXBzZSIsInBvbHlnb24iLCJwb2x5bGluZSIsInJlY3QiLCJpbmRleF9lczZfZXh0ZW5kIiwib2JqcyIsImV4dGVuZF9kZWZhdWx0IiwiaW5kZXhfZXM2X2Fzc2lnbiIsInJlZHVjZURlZXAiLCJtYXBPYmplY3QiLCJmbGF0aWZ5S2V5cyIsIm9taXQiLCJjb25zaWRlclN2ZyIsInZub2RlJCQxIiwiaW5kZXhfZXM2X3N2ZyIsInVuZGVmaW5lZHYiLCJyZXdyaXRlc01hcCIsImZvciIsInJvbGUiLCJ0YWJpbmRleCIsInNhbml0aXplRGF0YSIsIm9iaiQxIiwiY29uc2lkZXJQcm9wcyIsImFyaWEiLCJjb25zaWRlckFyaWEiLCJjb25zaWRlckRhdGEiLCJjb25zaWRlckF0dHJzIiwiY29uc2lkZXJLZXkiLCJkYXNoSW5kZXgiLCJtb2R1bGVEYXRhIiwiZGVlcGlmeUtleXMiLCJzYW5pdGl6ZUNoaWxkcmVuIiwiaW5kZXhfZXM2X3Zub2RlIiwidGV4dCQkMSIsImNyZWF0ZVRleHRFbGVtZW50IiwiaW5kZXhfZXM2Iiwic2FuaXRpemVUZXh0IiwidXRpbF9hc3NpZ24iLCJzcGxpdFBhdGgiLCJzdGFydHNXaXRoMiIsInZhbHVlMSIsInZhbHVlMiIsIm1ha2VDcmVhdGVIcmVmIiwiX2NyZWF0ZUhyZWYiLCJmdWxsUGF0aCIsIlJvdXRlclNvdXJjZV9Sb3V0ZXJTb3VyY2UiLCJSb3V0ZXJTb3VyY2UiLCJfaGlzdG9yeSQiLCJfcm91dGVNYXRjaGVyIiwic2NvcGVkTmFtZXNwYWNlIiwic2NvcGVkSGlzdG9yeSQiLCJfcGF0aCIsInBhdGhQYXJ0cyIsImV2ZXJ5IiwiaXNTdHJpY3RseUluU2NvcGUiLCJyb3V0ZXMiLCJyb3V0ZU1hdGNoZXIiLCJtYXRjaCQiLCJmaWx0ZXJQYXRoIiwiZ2V0RmlsdGVyZWRQYXRoIiwib3V0JCIsInJvdXRlcmlmeV9hc3NpZ24iLCJpc1BhdHRlcm4iLCJjYW5kaWRhdGUiLCJpc1JvdXRlRGVmaW5pdGlvbiIsImlzTm90TnVsbCIsInV0aWxfc3BsaXRQYXRoIiwiaXNQYXJhbSIsImV4dHJhY3RQYXJ0aWFsIiwic291cmNlUGF0aCIsInBhdHRlcm4iLCJwYXR0ZXJuUGFydHMiLCJzb3VyY2VQYXJ0cyIsIm1hdGNoZWRQYXJ0cyIsInZhbGlkYXRlUGF0aCIsIm1hdGNoZWRQYXRoIiwiYmV0dGVyTWF0Y2giLCJyZWZlcmVuY2UiLCJIb21lUGFnZSIsInNlYXJjaFJlc3VsdEl0ZW1DbGljayQiLCJET00iLCJjbGVhclNlYXJjaENsaWNrJCIsInNlYXJjaFBocmFzZUlucHV0JCIsInNlYXJjaFBocmFzZSQiLCJJbnB1dEV2ZW50IiwiVGltZSIsImRpc2NvdmVyeU1vZGVQcmVkaWNhdGUiLCJwaHJhc2UiLCJkaXNjb3ZlcnlSZXF1ZXN0JCIsIlN2Y1VybCIsImlzUmVxdWVzdCIsImRpc2NvdmVyeVJlc3BvbnNlJCIsIkhUVFAiLCJyZXNwJCIsInJlc3AiLCJzZWFyY2hSZXF1ZXN0JCIsInNlYXJjaFBocmFzZSIsInNlYXJjaFJlc3BvbnNlJCIsImNvbnRlbnQkIiwic2VhcmNoUmVzcG9uc2UiLCJkaXNjb3ZlcnlSZXNwb25zZSIsIm1vdmllVGl0bGUkIiwic2VhcmNoUmVzdWx0SXRlbUNsaWNrIiwiY2xpY2tlZEl0ZW0iLCJmaW5kIiwiaXNMb2FkaW5nJCIsImlzRXJyb3IkIiwiaXNMb2FkaW5nIiwidWstaWNvbiIsImJhY2tkcm9wX3BhdGgiLCJvbmNsaWNrIiwiZGF0YS1pZCIsImFsdCIsIlJlc3VsdHNDb250YWluZXIiLCJyb3V0ZXIiLCJjbG9zZXN0IiwiTW92aWVEZXRhaWxzUGFnZSIsIm1vdmllSWQkIiwicHJvcHMkIiwiZGV0YWlsc1JlcXVlc3QkIiwiZGV0YWlsc1Jlc3BvbnNlJCIsImNyZWRpdHNSZXF1ZXN0JCIsImRldGFpbHNSZXF1ZXN0IiwiY3JlZGl0c1Jlc3BvbnNlJCIsIm1vdmllVGl0bGUiLCJkZXRhaWxzIiwiY2FzdCIsInBvc3Rlcl9wYXRoIiwidm90ZV9hdmVyYWdlIiwib3ZlcnZpZXciLCJnZW5yZXMiLCJzcG9rZW5fbGFuZ3VhZ2VzIiwib3JpZ2luYWxfdGl0bGUiLCJyZWxlYXNlX2RhdGUiLCJpbWRiX2lkIiwiTW92aWVEZXRhaWxzIiwiaG9tZVBhZ2VDbGljayQiLCJyb3V0ZXJEZWZFbnRyaWVzIiwicm91dGVyTWF0Y2gkIiwicGFnZUtleSQiLCJhY3RpdmVQYWdlIiwiaG9tZVBhZ2VTaW5rcyIsIm1vdmllUGFnZVNpbmtzIiwiX29iamVjdFNwcmVhZCIsInZpZXdUZW1wbGF0ZSIsInZkb20iLCJkYXRhLXBhZ2UiLCJkYXRhLWFjdGl2ZSIsImhvbWVQYWdlVmRvbSIsIm1vdmllUGFnZVZkb20iLCJwYWdlS2V5Iiwidmlld3NWRG9tcyIsImFjdGl2ZVBhZ2VOYW1lIiwiZGF0YS1hY3RpdmVQYWdlIiwibWFpblRlbXBsYXRlIiwiaGlzdG9yeU5hbWUiLCJyb3V0ZXJOYW1lIiwib21pdEhpc3RvcnkiLCJyb3V0ZXJTb3VyY2UiLCJzcmNzIiwicm91dGVyaWZ5Iiwic3dpdGNoUGF0aCIsInN3aXRjaFBhdGhJbnB1dEd1YXJkIiwibWF0Y2hlZFZhbHVlIiwidHJhdmVyc2VSb3V0ZXMiLCJtYXRjaGVzV2l0aFBhcmFtcyIsInBhcmFtRm4iLCJfcGFyYW1GbiIsImdldFBhcmFtRm5WYWx1ZSIsImZ1bGxTdHJpbmciLCJ1bnByZWZpeGVkIiwibmVzdGVkUGF0aCIsInZhbGlkYXRlIiwibWFrZURPTURyaXZlcklucHV0R3VhcmQiLCJ2bm9kZVdyYXBwZXIiLCJtdXRhdGlvbk9ic2VydmVyIiwiZG9tUmVhZHkkIiwibGlzIiwibXV0YXRpb25Db25maXJtZWQkIiwiZGlzY29ubmVjdCIsInZub2RlJCIsInZpZXckIiwiZG9tRHJpdmVySW5wdXRHdWFyZCIsInNhbml0YXRpb24kIiwiZmlyc3RSb290JCIsImZpcnN0Um9vdCIsInNlbGVjdG9ycyIsImRvbUVsZW1lbnQiLCJnZXRWYWxpZE5vZGUiLCJyZW1lbWJlcmVkVk5vZGUkIiwiZWxlbWVudEFmdGVyUGF0Y2gkIiwiYWRkUm9vdFNjb3BlIiwidG92bm9kZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJhdHRyaWJ1dGVPbGRWYWx1ZSIsImNoYXJhY3RlckRhdGFPbGRWYWx1ZSIsImNvbmNhdF9kZWZhdWx0Iiwic2FtcGxlQ29tYmluZV9kZWZhdWx0IiwiZGVsZWdhdG9yIiwibWFrZURPTURyaXZlciIsImlzSGlzdG9yeSIsIm1ha2VIaXN0b3J5RHJpdmVyIiwicmVzcG9uc2UkJCIsInJlbGF0aXZlVXJsIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXpCLEVBQUE2QixFQUFBLFNBQUExQixHQUNBLElBQUFTLEVBQUFULEtBQUFxQixXQUNBLFdBQTJCLE9BQUFyQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REL0IsRUFBQWtDLEVBQUEsR0FJQWxDLElBQUFtQyxFQUFBLG1DQ2pGQSxJQUFBQyxFQUFBQyxXQUFBRCxXQUFBLFdBQ0EsSUFBQUUsRUFBQXhCLE9BQUF5QixpQkFDVUMsd0JBQWdCQyxPQUFBLFNBQUEvQixFQUFBZ0MsR0FBc0NoQyxFQUFBOEIsVUFBQUUsSUFDaEUsU0FBQWhDLEVBQUFnQyxHQUF5QixRQUFBUixLQUFBUSxJQUFBVCxlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFRLEVBQUFSLEtBQ3pCLGdCQUFBeEIsRUFBQWdDLEdBRUEsU0FBQUMsSUFBdUJOLEtBQUFPLFlBQUFsQyxFQUR2QjRCLEVBQUE1QixFQUFBZ0MsR0FFQWhDLEVBQUFzQixVQUFBLE9BQUFVLEVBQUE1QixPQUFBWSxPQUFBZ0IsSUFBQUMsRUFBQVgsVUFBQVUsRUFBQVYsVUFBQSxJQUFBVyxJQVBBLEdBVUE3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBd0IsRUFBMEI3QyxFQUFRLElBQ2xDOEMsS0FFQSxTQUFBQyxLQUNBLFNBQUFDLEVBQUFDLEdBR0EsSUFGQSxJQUFBNUMsRUFBQTRDLEVBQUFDLE9BQ0FSLEVBQUFELE1BQUFwQyxHQUNBRCxFQUFBLEVBQW1CQSxFQUFBQyxJQUFPRCxFQUMxQnNDLEVBQUF0QyxHQUFBNkMsRUFBQTdDLEdBQ0EsT0FBQXNDLEVBT0EsU0FBQVMsRUFBQTFDLEVBQUFhLEVBQUE4QixHQUNBLElBQ0EsT0FBQTNDLEVBQUE0QyxFQUFBL0IsR0FFQSxNQUFBZ0MsR0FFQSxPQURBRixFQUFBRyxHQUFBRCxHQUNBUixHQXBCQTVDLEVBQUE0QyxLQXVCQSxJQUFBVSxHQUNBQyxHQUFBVixFQUNBUSxHQUFBUixFQUNBVyxHQUFBWCxHQUlBLFNBQUFZLEVBQUFDLEdBQ0FBLEVBQUFDLE9BQUEsU0FBQUMsR0FDQUEsRUFBQUMsS0FBQUQsRUFBQUwsR0FDQUssRUFBQUUsTUFBQUYsRUFBQVAsR0FDQU8sRUFBQUcsU0FBQUgsRUFBQUosR0FDQXJCLEtBQUE2QixNQUFBSixJQUVBRixFQUFBTyxNQUFBUCxFQUFBUSxLQVRBbEUsRUFBQXNELFFBV0EsSUFBQWEsRUFBQSxXQUNBLFNBQUFBLEVBQUFDLEVBQUFDLEdBQ0FsQyxLQUFBaUMsVUFDQWpDLEtBQUFrQyxZQUtBLE9BSEFGLEVBQUFyQyxVQUFBd0MsWUFBQSxXQUNBbkMsS0FBQWlDLFFBQUFHLFFBQUFwQyxLQUFBa0MsWUFFQUYsRUFSQSxHQVVBSyxFQUFBLFdBQ0EsU0FBQUEsRUFBQUgsR0FDQWxDLEtBQUFrQyxZQVdBLE9BVEFHLEVBQUExQyxVQUFBK0IsS0FBQSxTQUFBMUMsR0FDQWdCLEtBQUFrQyxVQUFBZCxHQUFBcEMsSUFFQXFELEVBQUExQyxVQUFBZ0MsTUFBQSxTQUFBVyxHQUNBdEMsS0FBQWtDLFVBQUFoQixHQUFBb0IsSUFFQUQsRUFBQTFDLFVBQUFpQyxTQUFBLFdBQ0E1QixLQUFBa0MsVUFBQWIsTUFFQWdCLEVBYkEsR0FlQUUsRUFBQSxXQUNBLFNBQUFBLEVBQUFDLEdBQ0F4QyxLQUFBeUMsS0FBQSxpQkFDQXpDLEtBQUEwQyxJQUFBRixFQUNBeEMsS0FBQTJDLFFBQUEsRUFjQSxPQVpBSixFQUFBNUMsVUFBQTZCLE9BQUEsU0FBQW9CLEdBQ0E1QyxLQUFBNEMsTUFDQTVDLEtBQUEyQyxRQUFBLEVBQ0EzQyxLQUFBNkMsS0FBQTdDLEtBQUEwQyxJQUFBSSxVQUFBLElBQUFULEVBQUFPLElBQ0E1QyxLQUFBMkMsUUFDQTNDLEtBQUE2QyxLQUFBVixlQUVBSSxFQUFBNUMsVUFBQW1DLE1BQUEsV0FDQTlCLEtBQUE2QyxNQUNBN0MsS0FBQTZDLEtBQUFWLGNBQ0FuQyxLQUFBMkMsUUFBQSxHQUVBSixFQWxCQSxHQW9CQVEsRUFBQSxXQUNBLFNBQUFBLEVBQUFDLEdBQ0FoRCxLQUFBeUMsS0FBQSxRQUNBekMsS0FBQWdELFNBQ0FoRCxLQUFBNEMsSUFBQW5DLEVBQ0FULEtBQUFpRCxHQUFBLEVBcUNBLE9BbkNBRixFQUFBcEQsVUFBQTZCLE9BQUEsU0FBQW9CLEdBQ0E1QyxLQUFBNEMsTUFDQSxJQUFBOUMsRUFBQUUsS0FBQWdELE9BQ0FFLEVBQUFwRCxFQUFBZSxPQUNBYixLQUFBaUQsR0FBQUMsRUFDQSxRQUFBbkYsRUFBQSxFQUF1QkEsRUFBQW1GLEVBQU9uRixJQUM5QitCLEVBQUEvQixHQUFBb0YsS0FBQW5ELE9BRUErQyxFQUFBcEQsVUFBQW1DLE1BQUEsV0FHQSxJQUZBLElBQUFoQyxFQUFBRSxLQUFBZ0QsT0FDQUUsRUFBQXBELEVBQUFlLE9BQ0E5QyxFQUFBLEVBQXVCQSxFQUFBbUYsRUFBT25GLElBQzlCK0IsRUFBQS9CLEdBQUFxRSxRQUFBcEMsTUFDQUEsS0FBQTRDLElBQUFuQyxHQUVBc0MsRUFBQXBELFVBQUF5QixHQUFBLFNBQUFuQyxHQUNBLElBQUE4QixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFLLEdBQUFuQyxJQUVBOEQsRUFBQXBELFVBQUF1QixHQUFBLFNBQUFvQixHQUNBLElBQUF2QixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFHLEdBQUFvQixJQUVBUyxFQUFBcEQsVUFBQTBCLEdBQUEsV0FDQSxLQUFBckIsS0FBQWlELElBQUEsR0FDQSxJQUFBbEMsRUFBQWYsS0FBQTRDLElBQ0EsR0FBQTdCLElBQUFOLEVBQ0EsT0FDQU0sRUFBQU0sT0FHQTBCLEVBMUNBLEdBNENBSyxFQUFBLFdBQ0EsU0FBQUEsRUFBQXJGLEVBQUE2RSxFQUFBL0MsR0FDQUcsS0FBQWpDLElBQ0FpQyxLQUFBNEMsTUFDQTVDLEtBQUFILElBQ0FBLEVBQUF3RCxJQUFBQyxLQUFBdEQsTUE0QkEsT0ExQkFvRCxFQUFBekQsVUFBQXlCLEdBQUEsU0FBQW5DLEdBQ0EsSUFBQVksRUFBQUcsS0FBQUgsRUFBQStDLEVBQUE1QyxLQUFBNEMsSUFDQSxHQUFBQSxJQUFBbkMsR0FFQVosRUFBQTBELEdBQUF0RSxFQUFBZSxLQUFBakMsR0FBQSxDQUlBLElBSEEsSUFBQTZDLEVBQUFmLEVBQUEyRCxLQUNBeEYsRUFBQTRDLEVBQUFDLE9BQ0FSLEVBQUFELE1BQUFwQyxHQUNBRCxFQUFBLEVBQTJCQSxFQUFBQyxJQUFPRCxFQUNsQ3NDLEVBQUF0QyxHQUFBNkMsRUFBQTdDLEdBQ0E2RSxFQUFBeEIsR0FBQWYsS0FHQStDLEVBQUF6RCxVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxJQUFBTSxFQUFBNUMsS0FBQTRDLElBQ0FBLElBQUFuQyxHQUVBbUMsRUFBQTFCLEdBQUFvQixJQUVBYyxFQUFBekQsVUFBQTBCLEdBQUEsV0FDQSxJQUFBeEIsRUFBQUcsS0FBQUgsRUFDQUEsRUFBQStDLE1BQUFuQyxHQUVBLEtBQUFaLEVBQUE0RCxJQUNBNUQsRUFBQStDLElBQUF2QixNQUVBK0IsRUFqQ0EsR0FtQ0FNLEVBQUEsV0FDQSxTQUFBQSxFQUFBVixHQUNBaEQsS0FBQXlDLEtBQUEsVUFDQXpDLEtBQUFnRCxTQUNBaEQsS0FBQTRDLElBQUFuQyxFQUNBVCxLQUFBcUQsT0FDQXJELEtBQUF5RCxHQUFBekQsS0FBQTJELEdBQUEsRUFDQTNELEtBQUF3RCxRQWtDQSxPQWhDQUUsRUFBQS9ELFVBQUE0RCxHQUFBLFNBQUF0RSxFQUFBbEIsR0FDQSxJQUFBNkYsRUFBQTVELEtBQUF3RCxLQUFBekYsR0FDQTRGLEVBQUEzRCxLQUFBMkQsR0FBQUMsSUFBQW5ELElBQUFULEtBQUEyRCxHQUFBM0QsS0FBQTJELEdBQUEsRUFFQSxPQURBM0QsS0FBQXdELEtBQUF6RixHQUFBa0IsRUFDQSxJQUFBMEUsR0FFQUQsRUFBQS9ELFVBQUE2QixPQUFBLFNBQUFvQixHQUNBNUMsS0FBQTRDLE1BQ0EsSUFBQTlDLEVBQUFFLEtBQUFnRCxPQUNBeEQsRUFBQVEsS0FBQXlELEdBQUF6RCxLQUFBMkQsR0FBQTdELEVBQUFlLE9BQ0EyQyxFQUFBeEQsS0FBQXdELEtBQUEsSUFBQXBELE1BQUFaLEdBQ0EsT0FBQUEsRUFDQW9ELEVBQUF4QixPQUNBd0IsRUFBQXZCLFVBR0EsUUFBQXRELEVBQUEsRUFBMkJBLEVBQUF5QixFQUFPekIsSUFDbEN5RixFQUFBekYsR0FBQTBDLEVBQ0FYLEVBQUEvQixHQUFBb0YsS0FBQSxJQUFBQyxFQUFBckYsRUFBQTZFLEVBQUE1QyxRQUlBMEQsRUFBQS9ELFVBQUFtQyxNQUFBLFdBSUEsSUFIQSxJQUFBaEMsRUFBQUUsS0FBQWdELE9BQ0F4RCxFQUFBTSxFQUFBZSxPQUNBd0MsRUFBQXJELEtBQUFxRCxJQUNBdEYsRUFBQSxFQUF1QkEsRUFBQXlCLEVBQU96QixJQUM5QitCLEVBQUEvQixHQUFBcUUsUUFBQWlCLEVBQUF0RixJQUNBaUMsS0FBQTRDLElBQUFuQyxFQUNBVCxLQUFBcUQsT0FDQXJELEtBQUF3RCxTQUVBRSxFQXpDQSxHQTJDQUcsRUFBQSxXQUNBLFNBQUFBLEVBQUFqRCxHQUNBWixLQUFBeUMsS0FBQSxZQUNBekMsS0FBQVksSUFVQSxPQVJBaUQsRUFBQWxFLFVBQUE2QixPQUFBLFNBQUFvQixHQUVBLElBREEsSUFBQWhDLEVBQUFaLEtBQUFZLEVBQ0E3QyxFQUFBLEVBQUF5QixFQUFBb0IsRUFBQUMsT0FBcUM5QyxFQUFBeUIsRUFBT3pCLElBQzVDNkUsRUFBQXhCLEdBQUFSLEVBQUE3QyxJQUNBNkUsRUFBQXZCLE1BRUF3QyxFQUFBbEUsVUFBQW1DLE1BQUEsYUFFQStCLEVBYkEsR0FlQUMsRUFBQSxXQUNBLFNBQUFBLEVBQUFqRSxHQUNBRyxLQUFBeUMsS0FBQSxjQUNBekMsS0FBQStELElBQUEsRUFDQS9ELEtBQUFILElBbUJBLE9BakJBaUUsRUFBQW5FLFVBQUE2QixPQUFBLFNBQUFvQixHQUNBLElBQUFvQixFQUFBaEUsS0FDQUEsS0FBQStELElBQUEsRUFDQS9ELEtBQUFILEVBQUFvRSxLQUFBLFNBQUFMLEdBQ0FJLEVBQUFELEtBQ0FuQixFQUFBeEIsR0FBQXdDLEdBQ0FoQixFQUFBdkIsT0FFUyxTQUFBSixHQUNUMkIsRUFBQTFCLEdBQUFELEtBQ1NnRCxLQUFBdkQsRUFBQSxTQUFBNEIsR0FDVDRCLFdBQUEsV0FBb0MsTUFBQTVCLE9BR3BDd0IsRUFBQW5FLFVBQUFtQyxNQUFBLFdBQ0E5QixLQUFBK0QsSUFBQSxHQUVBRCxFQXZCQSxHQXlCQUssRUFBQSxXQUNBLFNBQUFBLEVBQUFDLEdBQ0FwRSxLQUFBeUMsS0FBQSxXQUNBekMsS0FBQW9FLFNBQ0FwRSxLQUFBcUUsWUFBQSxFQUNBckUsS0FBQWpDLEVBQUEsRUFhQSxPQVhBb0csRUFBQXhFLFVBQUE2QixPQUFBLFNBQUFvQixHQUNBLElBQUEwQixFQUFBdEUsS0FFQUEsS0FBQXFFLFdBQUFFLFlBREEsV0FBb0MzQixFQUFBeEIsR0FBQWtELEVBQUF2RyxNQUNwQ2lDLEtBQUFvRSxTQUVBRCxFQUFBeEUsVUFBQW1DLE1BQUEsWUFDQSxJQUFBOUIsS0FBQXFFLFlBQ0FHLGNBQUF4RSxLQUFBcUUsWUFDQXJFLEtBQUFxRSxZQUFBLEVBQ0FyRSxLQUFBakMsRUFBQSxHQUVBb0csRUFsQkEsR0FvQkFNLEVBQUEsV0FDQSxTQUFBQSxFQUFBL0IsRUFBQWdDLEdBQ0ExRSxLQUFBeUMsS0FBQSxRQUNBekMsS0FBQTBDLE1BQ0ExQyxLQUFBNEMsSUFBQW5DLEVBQ0FULEtBQUFGLEVBQUFZLEVBQ0FWLEtBQUFoQyxFQUFBLEdBQ0EsaUJBQUEwRyxFQUNBMUUsS0FBQWhDLEVBQUEwRyxFQUNBLG1CQUFBQSxJQUNBMUUsS0FBQUYsRUFBQTRFLEdBeUNBLE9BdkNBRCxFQUFBOUUsVUFBQTZCLE9BQUEsU0FBQW9CLEdBQ0E1QyxLQUFBNEMsTUFDQTVDLEtBQUEwQyxJQUFBUyxLQUFBbkQsT0FFQXlFLEVBQUE5RSxVQUFBbUMsTUFBQSxXQUNBOUIsS0FBQTBDLElBQUFOLFFBQUFwQyxNQUNBQSxLQUFBNEMsSUFBQW5DLEdBRUFnRSxFQUFBOUUsVUFBQXlCLEdBQUEsU0FBQW5DLEdBQ0EsSUFBQThCLEVBQUFmLEtBQUE0QyxJQUNBLEdBQUE3QixJQUFBTixFQUFBLENBRUEsSUFBQVgsRUFBQUUsS0FBQUYsRUFBQTlCLEVBQUFnQyxLQUFBaEMsRUFDQSxHQUFBOEIsSUFBQVksRUFDQSxJQUNBWixFQUFBYixHQUVBLE1BQUFnQyxHQUNBRixFQUFBRyxHQUFBRCxRQUdBakQsRUFDQTJHLFFBQUFDLElBQUE1RyxFQUFBLElBQUFpQixHQUVBMEYsUUFBQUMsSUFBQTNGLEdBQ0E4QixFQUFBSyxHQUFBbkMsS0FFQXdGLEVBQUE5RSxVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxJQUFBdkIsRUFBQWYsS0FBQTRDLElBQ0E3QixJQUFBTixHQUVBTSxFQUFBRyxHQUFBb0IsSUFFQW1DLEVBQUE5RSxVQUFBMEIsR0FBQSxXQUNBLElBQUFOLEVBQUFmLEtBQUE0QyxJQUNBN0IsSUFBQU4sR0FFQU0sRUFBQU0sTUFFQW9ELEVBbkRBLEdBcURBSSxFQUFBLFdBQ0EsU0FBQUEsRUFBQUMsRUFBQXBDLEdBQ0ExQyxLQUFBeUMsS0FBQSxPQUNBekMsS0FBQTBDLE1BQ0ExQyxLQUFBNEMsSUFBQW5DLEVBQ0FULEtBQUE4RSxNQUNBOUUsS0FBQStFLFFBQUEsRUE4QkEsT0E1QkFGLEVBQUFsRixVQUFBNkIsT0FBQSxTQUFBb0IsR0FDQTVDLEtBQUE0QyxNQUNBNUMsS0FBQStFLFFBQUEsRUFDQS9FLEtBQUEwQyxJQUFBUyxLQUFBbkQsT0FFQTZFLEVBQUFsRixVQUFBbUMsTUFBQSxXQUNBOUIsS0FBQTBDLElBQUFOLFFBQUFwQyxNQUNBQSxLQUFBNEMsSUFBQW5DLEdBRUFvRSxFQUFBbEYsVUFBQXlCLEdBQUEsU0FBQW5DLEdBQ0EsSUFBQThCLEVBQUFmLEtBQUE0QyxJQUNBN0IsSUFBQU4sR0FFQVQsS0FBQStFLFdBQUEvRSxLQUFBOEUsS0FDQS9ELEVBQUFLLEdBQUFuQyxJQUVBNEYsRUFBQWxGLFVBQUF1QixHQUFBLFNBQUFvQixHQUNBLElBQUF2QixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFHLEdBQUFvQixJQUVBdUMsRUFBQWxGLFVBQUEwQixHQUFBLFdBQ0EsSUFBQU4sRUFBQWYsS0FBQTRDLElBQ0E3QixJQUFBTixHQUVBTSxFQUFBTSxNQUVBd0QsRUFwQ0EsR0FzQ0FHLEVBQUEsV0FDQSxTQUFBQSxFQUFBcEMsRUFBQXFDLEdBQ0FqRixLQUFBNEMsTUFDQTVDLEtBQUFpRixLQVdBLE9BVEFELEVBQUFyRixVQUFBeUIsR0FBQSxXQUNBcEIsS0FBQWlGLEdBQUFDLE9BRUFGLEVBQUFyRixVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQXRDLEtBQUE0QyxJQUFBMUIsR0FBQW9CLElBRUEwQyxFQUFBckYsVUFBQTBCLEdBQUEsV0FDQXJCLEtBQUFpRixHQUFBQyxPQUVBRixFQWRBLEdBZ0JBRyxFQUFBLFdBQ0EsU0FBQUEsRUFBQTNHLEVBQUFrRSxHQUNBMUMsS0FBQXlDLEtBQUEsVUFDQXpDLEtBQUEwQyxNQUNBMUMsS0FBQTRDLElBQUFuQyxFQUNBVCxLQUFBeEIsSUFDQXdCLEtBQUFvRixJQUFBakUsRUFrQ0EsT0FoQ0FnRSxFQUFBeEYsVUFBQTZCLE9BQUEsU0FBQW9CLEdBQ0E1QyxLQUFBNEMsTUFDQTVDLEtBQUF4QixFQUFBMkUsS0FBQW5ELEtBQUFvRixJQUFBLElBQUFKLEVBQUFwQyxFQUFBNUMsT0FDQUEsS0FBQTBDLElBQUFTLEtBQUFuRCxPQUVBbUYsRUFBQXhGLFVBQUFtQyxNQUFBLFdBQ0E5QixLQUFBMEMsSUFBQU4sUUFBQXBDLE1BQ0FBLEtBQUF4QixFQUFBNEQsUUFBQXBDLEtBQUFvRixLQUNBcEYsS0FBQTRDLElBQUFuQyxFQUNBVCxLQUFBb0YsSUFBQWpFLEdBRUFnRSxFQUFBeEYsVUFBQXVGLElBQUEsV0FDQSxJQUFBbkUsRUFBQWYsS0FBQTRDLElBQ0E3QixJQUFBTixHQUVBTSxFQUFBTSxNQUVBOEQsRUFBQXhGLFVBQUF5QixHQUFBLFNBQUFuQyxHQUNBLElBQUE4QixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFLLEdBQUFuQyxJQUVBa0csRUFBQXhGLFVBQUF1QixHQUFBLFNBQUFvQixHQUNBLElBQUF2QixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFHLEdBQUFvQixJQUVBNkMsRUFBQXhGLFVBQUEwQixHQUFBLFdBQ0FyQixLQUFBa0YsT0FFQUMsRUF4Q0EsR0EwQ0FFLEVBQUEsV0FDQSxTQUFBQSxFQUFBQyxFQUFBNUMsR0FDQTFDLEtBQUF5QyxLQUFBLFNBQ0F6QyxLQUFBMEMsTUFDQTFDLEtBQUE0QyxJQUFBbkMsRUFDQVQsS0FBQWdCLEVBQUFzRSxFQStCQSxPQTdCQUQsRUFBQTFGLFVBQUE2QixPQUFBLFNBQUFvQixHQUNBNUMsS0FBQTRDLE1BQ0E1QyxLQUFBMEMsSUFBQVMsS0FBQW5ELE9BRUFxRixFQUFBMUYsVUFBQW1DLE1BQUEsV0FDQTlCLEtBQUEwQyxJQUFBTixRQUFBcEMsTUFDQUEsS0FBQTRDLElBQUFuQyxHQUVBNEUsRUFBQTFGLFVBQUF5QixHQUFBLFNBQUFuQyxHQUNBLElBQUE4QixFQUFBZixLQUFBNEMsSUFDQSxHQUFBN0IsSUFBQU4sRUFBQSxDQUVBLElBQUE1QixFQUFBaUMsRUFBQWQsS0FBQWYsRUFBQThCLEdBQ0FsQyxJQUFBNEIsR0FBQTVCLEdBRUFrQyxFQUFBSyxHQUFBbkMsS0FFQW9HLEVBQUExRixVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxJQUFBdkIsRUFBQWYsS0FBQTRDLElBQ0E3QixJQUFBTixHQUVBTSxFQUFBRyxHQUFBb0IsSUFFQStDLEVBQUExRixVQUFBMEIsR0FBQSxXQUNBLElBQUFOLEVBQUFmLEtBQUE0QyxJQUNBN0IsSUFBQU4sR0FFQU0sRUFBQU0sTUFFQWdFLEVBcENBLEdBc0NBRSxFQUFBLFdBQ0EsU0FBQUEsRUFBQTNDLEVBQUFxQyxHQUNBakYsS0FBQTRDLE1BQ0E1QyxLQUFBaUYsS0FZQSxPQVZBTSxFQUFBNUYsVUFBQXlCLEdBQUEsU0FBQW5DLEdBQ0FlLEtBQUE0QyxJQUFBeEIsR0FBQW5DLElBRUFzRyxFQUFBNUYsVUFBQXVCLEdBQUEsU0FBQW9CLEdBQ0F0QyxLQUFBNEMsSUFBQTFCLEdBQUFvQixJQUVBaUQsRUFBQTVGLFVBQUEwQixHQUFBLFdBQ0FyQixLQUFBaUYsR0FBQU8sTUFBQS9FLEVBQ0FULEtBQUFpRixHQUFBUSxRQUVBRixFQWZBLEdBaUJBRyxFQUFBLFdBQ0EsU0FBQUEsRUFBQWhELEdBQ0ExQyxLQUFBeUMsS0FBQSxVQUNBekMsS0FBQTBDLE1BQ0ExQyxLQUFBNEMsSUFBQW5DLEVBQ0FULEtBQUEyRixNQUFBLEVBQ0EzRixLQUFBd0YsTUFBQS9FLEVBQ0FULEtBQUF5QixHQUFBTixFQTRDQSxPQTFDQXVFLEVBQUEvRixVQUFBNkIsT0FBQSxTQUFBb0IsR0FDQTVDLEtBQUE0QyxNQUNBNUMsS0FBQTJGLE1BQUEsRUFDQTNGLEtBQUF3RixNQUFBL0UsRUFDQVQsS0FBQXlCLEdBQUFOLEVBQ0FuQixLQUFBMEMsSUFBQVMsS0FBQW5ELE9BRUEwRixFQUFBL0YsVUFBQW1DLE1BQUEsV0FDQTlCLEtBQUEwQyxJQUFBTixRQUFBcEMsTUFDQUEsS0FBQXdGLFFBQUEvRSxHQUNBVCxLQUFBd0YsTUFBQXBELFFBQUFwQyxLQUFBeUIsSUFDQXpCLEtBQUE0QyxJQUFBbkMsRUFDQVQsS0FBQTJGLE1BQUEsRUFDQTNGLEtBQUF3RixNQUFBL0UsRUFDQVQsS0FBQXlCLEdBQUFOLEdBRUF1RSxFQUFBL0YsVUFBQThGLEtBQUEsV0FDQSxJQUFBMUUsRUFBQWYsS0FBQTRDLElBQ0E3QixJQUFBTixJQUVBVCxLQUFBMkYsTUFBQTNGLEtBQUF3RixRQUFBL0UsR0FDQU0sRUFBQU0sT0FFQXFFLEVBQUEvRixVQUFBeUIsR0FBQSxTQUFBdEIsR0FDQSxJQUFBaUIsRUFBQWYsS0FBQTRDLElBQ0EsR0FBQTdCLElBQUFOLEVBQUEsQ0FFQSxJQUFBK0UsRUFBQXhGLEtBQUF3RixNQUFBL0QsRUFBQXpCLEtBQUF5QixHQUNBK0QsSUFBQS9FLEdBQUFnQixJQUFBTixHQUNBcUUsRUFBQXBELFFBQUFYLElBQ0F6QixLQUFBd0YsTUFBQTFGLEdBQUFxRCxLQUFBbkQsS0FBQXlCLEdBQUEsSUFBQThELEVBQUF4RSxFQUFBZixTQUVBMEYsRUFBQS9GLFVBQUF1QixHQUFBLFNBQUFvQixHQUNBLElBQUF2QixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFHLEdBQUFvQixJQUVBb0QsRUFBQS9GLFVBQUEwQixHQUFBLFdBQ0FyQixLQUFBMkYsTUFBQSxFQUNBM0YsS0FBQXlGLFFBRUFDLEVBbkRBLEdBcURBRSxFQUFBLFdBQ0EsU0FBQUEsRUFBQTVFLEVBQUE2RSxFQUFBbkQsR0FDQSxJQUFBb0QsRUFBQTlGLEtBQ0FBLEtBQUF5QyxLQUFBLE9BQ0F6QyxLQUFBMEMsTUFDQTFDLEtBQUE0QyxJQUFBbkMsRUFDQVQsS0FBQWdCLEVBQUEsU0FBQS9CLEdBQStCLE9BQUErQixFQUFBOEUsRUFBQUMsSUFBQTlHLElBQy9CZSxLQUFBK0YsSUFBQS9GLEtBQUE2RixPQWtDQSxPQWhDQUQsRUFBQWpHLFVBQUE2QixPQUFBLFNBQUFvQixHQUNBNUMsS0FBQTRDLE1BQ0E1QyxLQUFBK0YsSUFBQS9GLEtBQUE2RixLQUNBakQsRUFBQXhCLEdBQUFwQixLQUFBK0YsS0FDQS9GLEtBQUEwQyxJQUFBUyxLQUFBbkQsT0FFQTRGLEVBQUFqRyxVQUFBbUMsTUFBQSxXQUNBOUIsS0FBQTBDLElBQUFOLFFBQUFwQyxNQUNBQSxLQUFBNEMsSUFBQW5DLEVBQ0FULEtBQUErRixJQUFBL0YsS0FBQTZGLE1BRUFELEVBQUFqRyxVQUFBeUIsR0FBQSxTQUFBbkMsR0FDQSxJQUFBOEIsRUFBQWYsS0FBQTRDLElBQ0EsR0FBQTdCLElBQUFOLEVBQUEsQ0FFQSxJQUFBNUIsRUFBQWlDLEVBQUFkLEtBQUFmLEVBQUE4QixHQUNBbEMsSUFBQTRCLEdBRUFNLEVBQUFLLEdBQUFwQixLQUFBK0YsSUFBQWxILEtBRUErRyxFQUFBakcsVUFBQXVCLEdBQUEsU0FBQW9CLEdBQ0EsSUFBQXZCLEVBQUFmLEtBQUE0QyxJQUNBN0IsSUFBQU4sR0FFQU0sRUFBQUcsR0FBQW9CLElBRUFzRCxFQUFBakcsVUFBQTBCLEdBQUEsV0FDQSxJQUFBTixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFNLE1BRUF1RSxFQXpDQSxHQTJDQUksRUFBQSxXQUNBLFNBQUFBLEVBQUF0RCxHQUNBMUMsS0FBQXlDLEtBQUEsT0FDQXpDLEtBQUEwQyxNQUNBMUMsS0FBQTRDLElBQUFuQyxFQUNBVCxLQUFBaUcsS0FBQSxFQUNBakcsS0FBQWtHLElBQUF6RixFQWlDQSxPQS9CQXVGLEVBQUFyRyxVQUFBNkIsT0FBQSxTQUFBb0IsR0FDQTVDLEtBQUE0QyxNQUNBNUMsS0FBQWlHLEtBQUEsRUFDQWpHLEtBQUEwQyxJQUFBUyxLQUFBbkQsT0FFQWdHLEVBQUFyRyxVQUFBbUMsTUFBQSxXQUNBOUIsS0FBQTBDLElBQUFOLFFBQUFwQyxNQUNBQSxLQUFBNEMsSUFBQW5DLEVBQ0FULEtBQUFrRyxJQUFBekYsR0FFQXVGLEVBQUFyRyxVQUFBeUIsR0FBQSxTQUFBbkMsR0FDQWUsS0FBQWlHLEtBQUEsRUFDQWpHLEtBQUFrRyxJQUFBakgsR0FFQStHLEVBQUFyRyxVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxJQUFBdkIsRUFBQWYsS0FBQTRDLElBQ0E3QixJQUFBTixHQUVBTSxFQUFBRyxHQUFBb0IsSUFFQTBELEVBQUFyRyxVQUFBMEIsR0FBQSxXQUNBLElBQUFOLEVBQUFmLEtBQUE0QyxJQUNBN0IsSUFBQU4sSUFFQVQsS0FBQWlHLEtBQ0FsRixFQUFBSyxHQUFBcEIsS0FBQWtHLEtBQ0FuRixFQUFBTSxNQUdBTixFQUFBRyxHQUFBLElBQUFpRixNQUFBLG1EQUVBSCxFQXZDQSxHQXlDQUksRUFBQSxXQUNBLFNBQUFBLEVBQUFDLEVBQUEzRCxHQUNBMUMsS0FBQXlDLEtBQUEsTUFDQXpDLEtBQUEwQyxNQUNBMUMsS0FBQTRDLElBQUFuQyxFQUNBVCxLQUFBZ0IsRUFBQXFGLEVBK0JBLE9BN0JBRCxFQUFBekcsVUFBQTZCLE9BQUEsU0FBQW9CLEdBQ0E1QyxLQUFBNEMsTUFDQTVDLEtBQUEwQyxJQUFBUyxLQUFBbkQsT0FFQW9HLEVBQUF6RyxVQUFBbUMsTUFBQSxXQUNBOUIsS0FBQTBDLElBQUFOLFFBQUFwQyxNQUNBQSxLQUFBNEMsSUFBQW5DLEdBRUEyRixFQUFBekcsVUFBQXlCLEdBQUEsU0FBQW5DLEdBQ0EsSUFBQThCLEVBQUFmLEtBQUE0QyxJQUNBLEdBQUE3QixJQUFBTixFQUFBLENBRUEsSUFBQTVCLEVBQUFpQyxFQUFBZCxLQUFBZixFQUFBOEIsR0FDQWxDLElBQUE0QixHQUVBTSxFQUFBSyxHQUFBdkMsS0FFQXVILEVBQUF6RyxVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxJQUFBdkIsRUFBQWYsS0FBQTRDLElBQ0E3QixJQUFBTixHQUVBTSxFQUFBRyxHQUFBb0IsSUFFQThELEVBQUF6RyxVQUFBMEIsR0FBQSxXQUNBLElBQUFOLEVBQUFmLEtBQUE0QyxJQUNBN0IsSUFBQU4sR0FFQU0sRUFBQU0sTUFFQStFLEVBcENBLEdBc0NBRSxFQUFBLFdBQ0EsU0FBQUEsRUFBQTVELEdBQ0ExQyxLQUFBeUMsS0FBQSxXQUNBekMsS0FBQTBDLE1BQ0ExQyxLQUFBNEMsSUFBQW5DLEVBVUEsT0FSQTZGLEVBQUEzRyxVQUFBNkIsT0FBQSxTQUFBb0IsR0FDQTVDLEtBQUE0QyxNQUNBNUMsS0FBQTBDLElBQUFTLEtBQUFQLElBRUEwRCxFQUFBM0csVUFBQW1DLE1BQUEsV0FDQTlCLEtBQUEwQyxJQUFBTixRQUFBcEMsS0FBQTRDLEtBQ0E1QyxLQUFBNEMsSUFBQW5DLEdBRUE2RixFQWRBLEdBZ0JBQyxFQUFBLFdBQ0EsU0FBQUEsRUFBQUMsRUFBQTlELEdBQ0ExQyxLQUFBeUMsS0FBQSxlQUNBekMsS0FBQTBDLE1BQ0ExQyxLQUFBNEMsSUFBQW5DLEVBQ0FULEtBQUFnQixFQUFBd0YsRUFrQ0EsT0FoQ0FELEVBQUE1RyxVQUFBNkIsT0FBQSxTQUFBb0IsR0FDQTVDLEtBQUE0QyxNQUNBNUMsS0FBQTBDLElBQUFTLEtBQUFuRCxPQUVBdUcsRUFBQTVHLFVBQUFtQyxNQUFBLFdBQ0E5QixLQUFBMEMsSUFBQU4sUUFBQXBDLE1BQ0FBLEtBQUE0QyxJQUFBbkMsR0FFQThGLEVBQUE1RyxVQUFBeUIsR0FBQSxTQUFBbkMsR0FDQSxJQUFBOEIsRUFBQWYsS0FBQTRDLElBQ0E3QixJQUFBTixHQUVBTSxFQUFBSyxHQUFBbkMsSUFFQXNILEVBQUE1RyxVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxJQUFBdkIsRUFBQWYsS0FBQTRDLElBQ0EsR0FBQTdCLElBQUFOLEVBRUEsSUFDQVQsS0FBQTBDLElBQUFOLFFBQUFwQyxPQUNBQSxLQUFBMEMsSUFBQTFDLEtBQUFnQixFQUFBc0IsSUFBQWEsS0FBQW5ELE1BRUEsTUFBQWlCLEdBQ0FGLEVBQUFHLEdBQUFELEtBR0FzRixFQUFBNUcsVUFBQTBCLEdBQUEsV0FDQSxJQUFBTixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFNLE1BRUFrRixFQXZDQSxHQXlDQUUsRUFBQSxXQUNBLFNBQUFBLEVBQUEvRCxFQUFBd0QsR0FDQWxHLEtBQUF5QyxLQUFBLFlBQ0F6QyxLQUFBMEMsTUFDQTFDLEtBQUE0QyxJQUFBbkMsRUFDQVQsS0FBQWtHLE1BV0EsT0FUQU8sRUFBQTlHLFVBQUE2QixPQUFBLFNBQUFvQixHQUNBNUMsS0FBQTRDLE1BQ0E1QyxLQUFBNEMsSUFBQXhCLEdBQUFwQixLQUFBa0csS0FDQWxHLEtBQUEwQyxJQUFBUyxLQUFBUCxJQUVBNkQsRUFBQTlHLFVBQUFtQyxNQUFBLFdBQ0E5QixLQUFBMEMsSUFBQU4sUUFBQXBDLEtBQUE0QyxLQUNBNUMsS0FBQTRDLElBQUFuQyxHQUVBZ0csRUFoQkEsR0FrQkFDLEVBQUEsV0FDQSxTQUFBQSxFQUFBNUIsRUFBQXBDLEdBQ0ExQyxLQUFBeUMsS0FBQSxPQUNBekMsS0FBQTBDLE1BQ0ExQyxLQUFBNEMsSUFBQW5DLEVBQ0FULEtBQUE4RSxNQUNBOUUsS0FBQTJHLE1BQUEsRUFzQ0EsT0FwQ0FELEVBQUEvRyxVQUFBNkIsT0FBQSxTQUFBb0IsR0FDQTVDLEtBQUE0QyxNQUNBNUMsS0FBQTJHLE1BQUEsRUFDQTNHLEtBQUE4RSxLQUFBLEVBQ0FsQyxFQUFBdkIsS0FFQXJCLEtBQUEwQyxJQUFBUyxLQUFBbkQsT0FFQTBHLEVBQUEvRyxVQUFBbUMsTUFBQSxXQUNBOUIsS0FBQTBDLElBQUFOLFFBQUFwQyxNQUNBQSxLQUFBNEMsSUFBQW5DLEdBRUFpRyxFQUFBL0csVUFBQXlCLEdBQUEsU0FBQW5DLEdBQ0EsSUFBQThCLEVBQUFmLEtBQUE0QyxJQUNBLEdBQUE3QixJQUFBTixFQUFBLENBRUEsSUFBQXRDLElBQUE2QixLQUFBMkcsTUFDQXhJLEVBQUE2QixLQUFBOEUsSUFDQS9ELEVBQUFLLEdBQUFuQyxHQUNBZCxJQUFBNkIsS0FBQThFLE1BQ0EvRCxFQUFBSyxHQUFBbkMsR0FDQThCLEVBQUFNLFFBR0FxRixFQUFBL0csVUFBQXVCLEdBQUEsU0FBQW9CLEdBQ0EsSUFBQXZCLEVBQUFmLEtBQUE0QyxJQUNBN0IsSUFBQU4sR0FFQU0sRUFBQUcsR0FBQW9CLElBRUFvRSxFQUFBL0csVUFBQTBCLEdBQUEsV0FDQSxJQUFBTixFQUFBZixLQUFBNEMsSUFDQTdCLElBQUFOLEdBRUFNLEVBQUFNLE1BRUFxRixFQTVDQSxHQThDQUUsRUFBQSxXQUNBLFNBQUFBLEVBQUFyRixHQUNBdkIsS0FBQTZHLE1BQUF0RixHQUFBZCxFQUNBVCxLQUFBOEcsUUFDQTlHLEtBQUErRyxRQUFBdEcsRUFDQVQsS0FBQWdILElBQUF2RyxFQUNBVCxLQUFBaUgsSUFBQSxFQUNBakgsS0FBQWtILFFBQUF6RyxFQUNBVCxLQUFBbUgsS0FBQTFHLEVBbTNCQSxPQWozQkFtRyxFQUFBakgsVUFBQXlCLEdBQUEsU0FBQW5DLEdBQ0EsSUFBQTJCLEVBQUFaLEtBQUE4RyxLQUNBNUQsRUFBQXRDLEVBQUFDLE9BR0EsR0FGQWIsS0FBQWlILElBQ0FqSCxLQUFBZ0gsSUFBQTVGLEdBQUFuQyxHQUNBLEdBQUFpRSxFQUNBdEMsRUFBQSxHQUFBUSxHQUFBbkMsT0FDQSxPQUFBaUUsRUFDQSxPQUdBLElBREEsSUFBQTdDLEVBQUFNLEVBQUFDLEdBQ0E3QyxFQUFBLEVBQTJCQSxFQUFBbUYsRUFBT25GLElBQ2xDc0MsRUFBQXRDLEdBQUFxRCxHQUFBbkMsS0FHQTJILEVBQUFqSCxVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxHQUFBdEMsS0FBQW1ILE9BQUExRyxFQUFBLENBRUFULEtBQUFtSCxLQUFBN0UsRUFDQSxJQUFBMUIsRUFBQVosS0FBQThHLEtBQ0E1RCxFQUFBdEMsRUFBQUMsT0FJQSxHQUhBYixLQUFBb0gsS0FDQXBILEtBQUFpSCxJQUNBakgsS0FBQWdILElBQUE5RixHQUFBb0IsR0FDQSxHQUFBWSxFQUNBdEMsRUFBQSxHQUFBTSxHQUFBb0IsT0FDQSxPQUFBWSxFQUNBLE9BR0EsSUFEQSxJQUFBN0MsRUFBQU0sRUFBQUMsR0FDQTdDLEVBQUEsRUFBMkJBLEVBQUFtRixFQUFPbkYsSUFDbENzQyxFQUFBdEMsR0FBQW1ELEdBQUFvQixHQUVBLElBQUF0QyxLQUFBaUgsSUFBQSxHQUFBL0QsRUFDQSxNQUFBbEQsS0FBQW1ILE9BRUFQLEVBQUFqSCxVQUFBMEIsR0FBQSxXQUNBLElBQUFULEVBQUFaLEtBQUE4RyxLQUNBNUQsRUFBQXRDLEVBQUFDLE9BSUEsR0FIQWIsS0FBQW9ILEtBQ0FwSCxLQUFBaUgsSUFDQWpILEtBQUFnSCxJQUFBM0YsS0FDQSxHQUFBNkIsRUFDQXRDLEVBQUEsR0FBQVMsU0FDQSxPQUFBNkIsRUFDQSxPQUdBLElBREEsSUFBQTdDLEVBQUFNLEVBQUFDLEdBQ0E3QyxFQUFBLEVBQTJCQSxFQUFBbUYsRUFBT25GLElBQ2xDc0MsRUFBQXRDLEdBQUFzRCxPQUdBdUYsRUFBQWpILFVBQUF5SCxHQUFBLFdBQ0EsSUFBQXBILEtBQUE4RyxLQUFBakcsU0FFQWIsS0FBQTZHLFFBQUFwRyxHQUNBVCxLQUFBNkcsTUFBQS9FLFFBQ0E5QixLQUFBbUgsS0FBQTFHLEVBQ0FULEtBQUE4RyxVQUVBRixFQUFBakgsVUFBQTBILFNBQUEsV0FHQXJILEtBQUE2RyxNQUFBL0UsUUFDQTlCLEtBQUFtSCxLQUFBMUcsRUFDQVQsS0FBQStHLFFBQUF0RyxHQUVBbUcsRUFBQWpILFVBQUF3RCxLQUFBLFNBQUExQixHQUNBLElBQUE2RixFQUFBdEgsS0FBQWtILFFBQ0EsR0FBQUksSUFBQTdHLEVBQ0EsT0FBQTZHLEVBQUFuRSxLQUFBMUIsR0FDQSxJQUFBYixFQUFBWixLQUFBOEcsS0FFQSxHQURBbEcsRUFBQTBDLEtBQUE3QixLQUNBYixFQUFBQyxPQUFBLEdBRUEsR0FBQWIsS0FBQStHLFVBQUF0RyxFQUNBOEcsYUFBQXZILEtBQUErRyxTQUNBL0csS0FBQStHLFFBQUF0RyxNQUVBLENBQ0EsSUFBQVosRUFBQUcsS0FBQTZHLE1BQ0FoSCxJQUFBWSxHQUNBWixFQUFBMkIsT0FBQXhCLFFBR0E0RyxFQUFBakgsVUFBQXlDLFFBQUEsU0FBQVgsR0FDQSxJQUFBcUUsRUFBQTlGLEtBQ0FzSCxFQUFBdEgsS0FBQWtILFFBQ0EsR0FBQUksSUFBQTdHLEVBQ0EsT0FBQTZHLEVBQUFsRixRQUFBWCxHQUNBLElBQUFiLEVBQUFaLEtBQUE4RyxLQUNBL0ksRUFBQTZDLEVBQUE0RyxRQUFBL0YsR0FDQTFELEdBQUEsSUFDQTZDLEVBQUE2RyxPQUFBMUosRUFBQSxHQUNBaUMsS0FBQTZHLFFBQUFwRyxHQUFBRyxFQUFBQyxRQUFBLEdBQ0FiLEtBQUFtSCxLQUFBMUcsRUFDQVQsS0FBQStHLFFBQUE3QyxXQUFBLFdBQXVELE9BQUE0QixFQUFBdUIsY0FFdkQsSUFBQXpHLEVBQUFDLFFBQ0FiLEtBQUEwSCxpQkFRQWQsRUFBQWpILFVBQUErSCxhQUFBLFdBQ0ExSCxLQUFBMkgsWUFBQTNILFVBQ0FBLEtBQUFvQyxRQUFBcEMsS0FBQThHLEtBQUEsS0FNQUYsRUFBQWpILFVBQUFnSSxZQUFBLFNBQUFDLEVBQUFDLEdBQ0EsUUFBQUEsRUFBQUwsUUFBQUksR0FDQSxTQUNBLEdBQUFBLEVBQUFoRixNQUFBNUMsS0FDQSxTQUNBLEdBQUE0SCxFQUFBaEYsS0FBQWdGLEVBQUFoRixNQUFBbkMsRUFDQSxPQUFBVCxLQUFBMkgsWUFBQUMsRUFBQWhGLElBQUFpRixFQUFBQyxPQUFBRixJQUNBLEdBQUFBLEVBQUFkLEtBQUEsQ0FDQSxRQUFBL0ksRUFBQSxFQUFBZ0ssRUFBQUgsRUFBQWQsS0FBQWpHLE9BQThDOUMsRUFBQWdLLEVBQU9oSyxJQUNyRCxJQUFBaUMsS0FBQTJILFlBQUFDLEVBQUFkLEtBQUEvSSxHQUFBOEosRUFBQUMsT0FBQUYsSUFDQSxTQUNBLFNBR0EsVUFFQWhCLEVBQUFqSCxVQUFBcUksS0FBQSxXQUNBLE9BQUFoSSxnQkFBQWlJLElBQUFyQixHQU9BQSxFQUFBakgsVUFBQXVJLFlBQUEsU0FBQUMsR0FDQUEsRUFBQS9HLEdBQUErRyxFQUFBekcsTUFBQWhCLEVBQ0F5SCxFQUFBakgsR0FBQWlILEVBQUF4RyxPQUFBakIsRUFDQXlILEVBQUE5RyxHQUFBOEcsRUFBQXZHLFVBQUFsQixFQUNBVixLQUFBbUQsS0FBQWdGLElBT0F2QixFQUFBakgsVUFBQXlJLGVBQUEsU0FBQUQsR0FDQW5JLEtBQUFvQyxRQUFBK0YsSUFTQXZCLEVBQUFqSCxVQUFBbUQsVUFBQSxTQUFBcUYsR0FFQSxPQURBbkksS0FBQWtJLFlBQUFDLEdBQ0EsSUFBQW5HLEVBQUFoQyxLQUFBbUksSUFPQXZCLEVBQUFqSCxVQUFBYSxFQUFBNkgsU0FBQSxXQUNBLE9BQUFySSxNQVVBNEcsRUFBQXZILE9BQUEsU0FBQWtDLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLHNCQUFBQSxFQUFBTSxPQUNBLG1CQUFBTixFQUFBUSxLQUNBLFVBQUFvRSxNQUFBLG1EQUNBN0UsRUFBQUMsR0FFQSxXQUFBcUYsRUFBQXJGLElBVUFxRixFQUFBMEIsaUJBQUEsU0FBQS9HLEdBR0EsT0FGQUEsR0FDQUQsRUFBQUMsR0FDQSxJQUFBMEcsRUFBQTFHLElBZUFxRixFQUFBMkIsTUFBQSxXQUNBLFdBQUEzQixHQUEyQnBGLE9BQUFkLEVBQUFvQixNQUFBcEIsS0FnQjNCa0csRUFBQTRCLE1BQUEsV0FDQSxXQUFBNUIsR0FDQXBGLE9BQUEsU0FBQUMsR0FBbUNBLEVBQUFKLE1BQ25DUyxNQUFBcEIsS0FtQkFrRyxFQUFBNkIsTUFBQSxTQUFBOUcsR0FDQSxXQUFBaUYsR0FDQXBGLE9BQUEsU0FBQUMsR0FBbUNBLEVBQUFQLEdBQUFTLElBQ25DRyxNQUFBcEIsS0FVQWtHLEVBQUE4QixLQUFBLFNBQUFDLEdBQ0Esc0JBQUFBLEVBQUFuSSxFQUFBNkgsU0FDQSxPQUFBekIsRUFBQWdDLGVBQUFELEdBQ0Esc0JBQUFBLEVBQUExRSxLQUNBLE9BQUEyQyxFQUFBaUMsWUFBQUYsR0FDQSxHQUFBdkksTUFBQTBJLFFBQUFILEdBQ0EsT0FBQS9CLEVBQUFtQyxVQUFBSixHQUNBLFVBQUFLLFVBQUEscUVBbUJBcEMsRUFBQXFDLEdBQUEsV0FFQSxJQURBLElBQUFDLEtBQ0FDLEVBQUEsRUFBd0JBLEVBQUFDLFVBQUF2SSxPQUF1QnNJLElBQy9DRCxFQUFBQyxHQUFBQyxVQUFBRCxHQUVBLE9BQUF2QyxFQUFBbUMsVUFBQUcsSUFpQkF0QyxFQUFBbUMsVUFBQSxTQUFBTSxHQUNBLFdBQUF6QyxFQUFBLElBQUEvQyxFQUFBd0YsS0FrQkF6QyxFQUFBaUMsWUFBQSxTQUFBUyxHQUNBLFdBQUExQyxFQUFBLElBQUE5QyxFQUFBd0YsS0FTQTFDLEVBQUFnQyxlQUFBLFNBQUFXLEdBQ0EsR0FBQUEsRUFBQUMsUUFDQSxPQUFBRCxFQUNBLElBQUEvSyxFQUFBLG1CQUFBK0ssRUFBQS9JLEVBQUE2SCxTQUFBa0IsRUFBQS9JLEVBQUE2SCxXQUFBa0IsRUFDQSxXQUFBM0MsRUFBQSxJQUFBckUsRUFBQS9ELEtBa0JBb0ksRUFBQTZDLFNBQUEsU0FBQXJGLEdBQ0EsV0FBQXdDLEVBQUEsSUFBQXpDLEVBQUFDLEtBRUF3QyxFQUFBakgsVUFBQStKLEtBQUEsU0FBQXJELEdBQ0EsV0FBQXJHLEtBQUFnSSxPQUFBLEtBQUE1QixFQUFBQyxFQUFBckcsUUFtQkE0RyxFQUFBakgsVUFBQWdLLElBQUEsU0FBQXRELEdBQ0EsT0FBQXJHLEtBQUEwSixLQUFBckQsSUFrQkFPLEVBQUFqSCxVQUFBaUssTUFBQSxTQUFBQyxHQUNBLElBQUEvSixFQUFBRSxLQUFBMkosSUFBQSxXQUFzQyxPQUFBRSxJQUd0QyxPQUZBL0osRUFBQStHLE1BQ0FwRSxLQUFBLFFBQ0EzQyxHQXNCQThHLEVBQUFqSCxVQUFBbUssT0FBQSxTQUFBeEUsR0FDQSxJQUFBekYsRUFBQUcsS0FBQTZHLE1BQ0EsT0FDQSxJQUFBRCxFQURBL0csYUFBQXdGLEVBQ0EsSUFBQUEsRUFwckNBLFNBQUEwRSxFQUFBQyxHQUNBLGdCQUFBL0ssR0FDQSxPQUFBOEssRUFBQTlLLElBQUErSyxFQUFBL0ssSUFrckNBZ0wsQ0FBQXBLLEVBQUFtQixFQUFBc0UsR0FBQXpGLEVBQUE2QyxLQUNBLElBQUEyQyxFQUFBQyxFQUFBdEYsUUFrQkE0RyxFQUFBakgsVUFBQXVLLEtBQUEsU0FBQUMsR0FDQSxXQUFBbkssS0FBQWdJLE9BQUEsS0FBQXRCLEVBQUF5RCxFQUFBbkssUUFtQkE0RyxFQUFBakgsVUFBQXlLLEtBQUEsU0FBQUQsR0FDQSxXQUFBdkQsRUFBQSxJQUFBL0IsRUFBQXNGLEVBQUFuSyxRQWdCQTRHLEVBQUFqSCxVQUFBMEssS0FBQSxXQUNBLFdBQUF6RCxFQUFBLElBQUFaLEVBQUFoRyxRQWtCQTRHLEVBQUFqSCxVQUFBMkssVUFBQSxTQUFBQyxHQUNBLFdBQUF0QyxFQUFBLElBQUF4QixFQUFBekcsS0FBQXVLLEtBcUJBM0QsRUFBQWpILFVBQUE2SixRQUFBLFNBQUFnQixHQUNBLFdBQUF4SyxLQUFBZ0ksT0FBQSxLQUFBN0MsRUFBQXFGLEVBQUF4SyxRQStCQTRHLEVBQUFqSCxVQUFBOEssS0FBQSxTQUFBQyxFQUFBN0UsR0FDQSxXQUFBb0MsRUFBQSxJQUFBckMsRUFBQThFLEVBQUE3RSxFQUFBN0YsUUF5QkE0RyxFQUFBakgsVUFBQWdMLGFBQUEsU0FBQUMsR0FDQSxXQUFBNUssS0FBQWdJLE9BQUEsS0FBQXpCLEVBQUFxRSxFQUFBNUssUUEyQkE0RyxFQUFBakgsVUFBQWtMLFFBQUEsV0FDQTdLLEtBQUE2RyxNQUNBLFdBQUFELEVBQUEsSUFBQWxCLEVBQUExRixRQWFBNEcsRUFBQWpILFVBQUFtTCxRQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQS9LLE9BU0E0RyxFQUFBakgsVUFBQXFMLFNBQUEsV0FDQSxXQUFBL0MsRUFBQSxJQUFBM0IsRUFBQXRHLFFBNEJBNEcsRUFBQWpILFVBQUFzTCxNQUFBLFNBQUFDLEdBQ0EsV0FBQWxMLEtBQUFnSSxPQUFBLEtBQUF2RCxFQUFBekUsS0FBQWtMLEtBa0VBdEUsRUFBQWpILFVBQUF3TCxRQUFBLFNBQUFDLEdBQ0EsR0FBQUEsYUFBQW5ELEVBQ0EsVUFBQTlCLE1BQUEsc0pBR0FuRyxLQUFBa0gsUUFBQWtFLEVBQ0EsUUFBQS9ILEVBQUFyRCxLQUFBOEcsS0FBQWlCLEVBQUExRSxFQUFBeEMsT0FBQTlDLEVBQUEsRUFBd0RBLEVBQUFnSyxFQUFPaEssSUFDL0RxTixFQUFBakksS0FBQUUsRUFBQXRGLElBQ0FpQyxLQUFBOEcsU0FZQUYsRUFBQWpILFVBQUEwTCxtQkFBQSxTQUFBck0sR0FDQWdCLEtBQUFvQixHQUFBcEMsSUFZQTRILEVBQUFqSCxVQUFBMkwsb0JBQUEsU0FBQTNKLEdBQ0EzQixLQUFBa0IsR0FBQVMsSUFTQWlGLEVBQUFqSCxVQUFBNEwsdUJBQUEsV0FDQXZMLEtBQUFxQixNQXNCQXVGLEVBQUFqSCxVQUFBNkwsaUJBQUEsU0FBQXJELEdBQ0FBLEdBS0FuSSxLQUFBaUgsSUFBQSxFQUNBa0IsRUFBQS9HLEdBQUErRyxFQUFBekcsTUFBQWhCLEVBQ0F5SCxFQUFBakgsR0FBQWlILEVBQUF4RyxPQUFBakIsRUFDQXlILEVBQUE5RyxHQUFBOEcsRUFBQXZHLFVBQUFsQixFQUNBVixLQUFBZ0gsSUFBQW1CLElBUkFuSSxLQUFBaUgsSUFBQSxFQUNBakgsS0FBQWdILElBQUF2RyxJQWdDQW1HLEVBQUE2RSxNQUFBLFdBRUEsSUFEQSxJQUFBQyxLQUNBdkMsRUFBQSxFQUF3QkEsRUFBQUMsVUFBQXZJLE9BQXVCc0ksSUFDL0N1QyxFQUFBdkMsR0FBQUMsVUFBQUQsR0FFQSxXQUFBdkMsRUFBQSxJQUFBN0QsRUFBQTJJLEtBMkJBOUUsRUFBQStFLFFBQUEsV0FFQSxJQURBLElBQUFELEtBQ0F2QyxFQUFBLEVBQXdCQSxFQUFBQyxVQUFBdkksT0FBdUJzSSxJQUMvQ3VDLEVBQUF2QyxHQUFBQyxVQUFBRCxHQUVBLFdBQUF2QyxFQUFBLElBQUFsRCxFQUFBZ0ksS0FFQTlFLEVBMzNCQSxHQTYzQkEvSSxFQUFBK0ksU0FDQSxJQUFBcUIsRUFBQSxTQUFBMkQsR0FFQSxTQUFBM0QsRUFBQTFHLEdBQ0EsSUFBQXVFLEVBQUE4RixFQUFBMU4sS0FBQThCLEtBQUF1QixJQUFBdkIsS0FFQSxPQURBOEYsRUFBQStGLE1BQUEsRUFDQS9GLEVBNkRBLE9BakVBL0YsRUFBQWtJLEVBQUEyRCxHQU1BM0QsRUFBQXRJLFVBQUF5QixHQUFBLFNBQUF3RyxHQUNBNUgsS0FBQThMLEdBQUFsRSxFQUNBNUgsS0FBQTZMLE1BQUEsRUFDQUQsRUFBQWpNLFVBQUF5QixHQUFBbEQsS0FBQThCLEtBQUE0SCxJQUVBSyxFQUFBdEksVUFBQXdELEtBQUEsU0FBQTFCLEdBQ0EsSUFBQTZGLEVBQUF0SCxLQUFBa0gsUUFDQSxHQUFBSSxJQUFBN0csRUFDQSxPQUFBNkcsRUFBQW5FLEtBQUExQixHQUNBLElBQUFiLEVBQUFaLEtBQUE4RyxLQUVBLEdBREFsRyxFQUFBMEMsS0FBQTdCLEdBQ0FiLEVBQUFDLE9BQUEsRUFDQWIsS0FBQTZMLE1BQ0FwSyxFQUFBTCxHQUFBcEIsS0FBQThMLFNBR0EsR0FBQTlMLEtBQUErRyxVQUFBdEcsRUFDQVQsS0FBQTZMLE1BQ0FwSyxFQUFBTCxHQUFBcEIsS0FBQThMLElBQ0F2RSxhQUFBdkgsS0FBQStHLFNBQ0EvRyxLQUFBK0csUUFBQXRHLE9BRUEsR0FBQVQsS0FBQTZMLEtBQ0FwSyxFQUFBTCxHQUFBcEIsS0FBQThMLFFBQ0EsQ0FDQSxJQUFBak0sRUFBQUcsS0FBQTZHLE1BQ0FoSCxJQUFBWSxHQUNBWixFQUFBMkIsT0FBQXhCLFFBR0FpSSxFQUFBdEksVUFBQTBILFNBQUEsV0FDQXJILEtBQUE2TCxNQUFBLEVBQ0FELEVBQUFqTSxVQUFBMEgsU0FBQW5KLEtBQUE4QixPQUVBaUksRUFBQXRJLFVBQUF5SCxHQUFBLFdBQ0FwSCxLQUFBNkwsTUFBQSxFQUNBRCxFQUFBak0sVUFBQXlILEdBQUFsSixLQUFBOEIsT0FFQWlJLEVBQUF0SSxVQUFBZ0ssSUFBQSxTQUFBdEQsR0FDQSxPQUFBckcsS0FBQTBKLEtBQUFyRCxJQUVBNEIsRUFBQXRJLFVBQUFpSyxNQUFBLFNBQUFDLEdBQ0EsT0FBQStCLEVBQUFqTSxVQUFBaUssTUFBQTFMLEtBQUE4QixLQUFBNkosSUFFQTVCLEVBQUF0SSxVQUFBdUssS0FBQSxTQUFBQyxHQUNBLE9BQUF5QixFQUFBak0sVUFBQXVLLEtBQUFoTSxLQUFBOEIsS0FBQW1LLElBRUFsQyxFQUFBdEksVUFBQTZKLFFBQUEsU0FBQWdCLEdBQ0EsT0FBQW9CLEVBQUFqTSxVQUFBNkosUUFBQXRMLEtBQUE4QixLQUFBd0ssSUFFQXZDLEVBQUF0SSxVQUFBZ0wsYUFBQSxTQUFBQyxHQUNBLE9BQUFnQixFQUFBak0sVUFBQWdMLGFBQUF6TSxLQUFBOEIsS0FBQTRLLElBRUEzQyxFQUFBdEksVUFBQXFMLFNBQUEsV0FDQSxPQUFBaEwsTUFFQWlJLEVBQUF0SSxVQUFBc0wsTUFBQSxTQUFBQyxHQUNBLE9BQUFVLEVBQUFqTSxVQUFBc0wsTUFBQS9NLEtBQUE4QixLQUFBa0wsSUFFQWpELEVBbEVBLENBbUVDckIsR0FDRC9JLEVBQUFvSyxlQUNBLElBQUE4RCxFQUFBbkYsRUFDQS9JLEVBQUF3SyxRQUFBMEQsaUNDaHREQSxTQUFBQyxHQUVBLFNBQUFDLElBQ0EsSUFBQUMsRUFhQSxPQVhBQSxFQURBLG9CQUFBQyxPQUNBQSxZQUVBLElBQUFILEVBQ0FBLEVBR0FoTSxNQUVBb00sUUFBQUYsRUFBQUUsYUFDQUYsSUFBQUUsU0FDQUMsWUFBQUgsRUFBQUcsYUFBQSxTQUFBekUsR0FBb0UsT0FBQUEsR0FDcEVzRSxFQWZBek4sT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFvQjlDbkIsRUFBQXlPLFNBSEEsU0FBQXRMLEdBQ0FpTCxJQUFBSSxZQUFBckwsR0FNQW5ELEVBQUEwTyxNQUhBLFNBQUFDLEdBQ0EsT0FBQVAsSUFBQUksWUFBQUcsb0RDb0NBMU8sRUFBQUQsUUF6Q0EsNEJDbEJBLElBQUE0TyxFQUdBQSxFQUFBLFdBQ0EsT0FBQXpNLEtBREEsR0FJQSxJQUVBeU0sS0FBQUMsU0FBQSxjQUFBQSxLQUFBLEVBQUFDLE1BQUEsUUFDQyxNQUFBMUwsR0FFRCxpQkFBQWtMLFNBQUFNLEVBQUFOLFFBT0FyTyxFQUFBRCxRQUFBNE8sZ0NDbEJBaE8sT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQTROLEVBQWNqUCxFQUFRLElBQ3RCa1AsRUFBU2xQLEVBQVEsSUFZakIsU0FBQW1QLEVBQUFDLEVBQUExTSxFQUFBakMsR0FDQSxJQUFpQjRPLEVBQUFDLEVBQUFsUCxFQUFqQm1QLEtBMkJBLFFBMUJBQyxJQUFBL08sR0FDQThPLEVBQUE3TSxFQUNBd00sRUFBQXhELE1BQUFqTCxHQUNBNE8sRUFBQTVPLEVBRUF5TyxFQUFBTyxVQUFBaFAsR0FDQTZPLEVBQUE3TyxFQUVBQSxLQUFBMk8sTUFDQUMsR0FBQTVPLFVBR0ErTyxJQUFBOU0sSUFDQXdNLEVBQUF4RCxNQUFBaEosR0FDQTJNLEVBQUEzTSxFQUVBd00sRUFBQU8sVUFBQS9NLEdBQ0E0TSxFQUFBNU0sRUFFQUEsS0FBQTBNLElBQ0FDLEdBQUEzTSxHQUdBNk0sRUFBQTdNLFFBR0E4TSxJQUFBSCxFQUNBLElBQUFqUCxFQUFBLEVBQW1CQSxFQUFBaVAsRUFBQW5NLFNBQXFCOUMsRUFDeEM4TyxFQUFBTyxVQUFBSixFQUFBalAsTUFDQWlQLEVBQUFqUCxHQUFBNk8sRUFBQVMsV0FBQUYsZ0JBQUFILEVBQUFqUCxRQUFBb1AsSUFPQSxNQUpBLE1BQUFKLEVBQUEsVUFBQUEsRUFBQSxVQUFBQSxFQUFBLElBQ0EsSUFBQUEsRUFBQWxNLFFBQUEsTUFBQWtNLEVBQUEsVUFBQUEsRUFBQSxJQTlDQSxTQUFBTyxFQUFBSixFQUFBRixFQUFBRCxHQUVBLEdBREFHLEVBQUE5TixHQUFBLDZCQUNBLGtCQUFBMk4sUUFBQUksSUFBQUgsRUFDQSxRQUFBalAsRUFBQSxFQUF1QkEsRUFBQWlQLEVBQUFuTSxTQUFxQjlDLEVBQUEsQ0FDNUMsSUFBQXdQLEVBQUFQLEVBQUFqUCxHQUFBbVAsVUFDQUMsSUFBQUksR0FDQUQsRUFBQUMsRUFBQVAsRUFBQWpQLEdBQUFpUCxXQUFBalAsR0FBQWdQLE1BeUNBTyxDQUFBSixFQUFBRixFQUFBRCxHQUVBSCxFQUFBUyxNQUFBTixFQUFBRyxFQUFBRixFQUFBQyxPQUFBRSxHQUVBdFAsRUFBQWlQLElBRUFqUCxFQUFBd0ssUUFBQXlFLGlCQ3hEQSxJQU9BVSxFQUNBQyxFQVJBQyxFQUFBNVAsRUFBQUQsV0FVQSxTQUFBOFAsSUFDQSxVQUFBeEgsTUFBQSxtQ0FFQSxTQUFBeUgsSUFDQSxVQUFBekgsTUFBQSxxQ0FzQkEsU0FBQTBILEVBQUFDLEdBQ0EsR0FBQU4sSUFBQXRKLFdBRUEsT0FBQUEsV0FBQTRKLEVBQUEsR0FHQSxJQUFBTixJQUFBRyxJQUFBSCxJQUFBdEosV0FFQSxPQURBc0osRUFBQXRKLFdBQ0FBLFdBQUE0SixFQUFBLEdBRUEsSUFFQSxPQUFBTixFQUFBTSxFQUFBLEdBQ0ssTUFBQTdNLEdBQ0wsSUFFQSxPQUFBdU0sRUFBQXRQLEtBQUEsS0FBQTRQLEVBQUEsR0FDUyxNQUFBN00sR0FFVCxPQUFBdU0sRUFBQXRQLEtBQUE4QixLQUFBOE4sRUFBQSxNQXZDQSxXQUNBLElBRUFOLEVBREEsbUJBQUF0SixXQUNBQSxXQUVBeUosRUFFSyxNQUFBMU0sR0FDTHVNLEVBQUFHLEVBRUEsSUFFQUYsRUFEQSxtQkFBQWxHLGFBQ0FBLGFBRUFxRyxFQUVLLE1BQUEzTSxHQUNMd00sRUFBQUcsR0FqQkEsR0F3RUEsSUFFQUcsRUFGQUMsS0FDQUMsR0FBQSxFQUVBQyxHQUFBLEVBRUEsU0FBQUMsSUFDQUYsR0FBQUYsSUFHQUUsR0FBQSxFQUNBRixFQUFBbE4sT0FDQW1OLEVBQUFELEVBQUFqRyxPQUFBa0csR0FFQUUsR0FBQSxFQUVBRixFQUFBbk4sUUFDQXVOLEtBSUEsU0FBQUEsSUFDQSxJQUFBSCxFQUFBLENBR0EsSUFBQUksRUFBQVIsRUFBQU0sR0FDQUYsR0FBQSxFQUdBLElBREEsSUFBQUssRUFBQU4sRUFBQW5OLE9BQ0F5TixHQUFBLENBR0EsSUFGQVAsRUFBQUMsRUFDQUEsT0FDQUUsRUFBQUksR0FDQVAsR0FDQUEsRUFBQUcsR0FBQUssTUFHQUwsR0FBQSxFQUNBSSxFQUFBTixFQUFBbk4sT0FFQWtOLEVBQUEsS0FDQUUsR0FBQSxFQW5FQSxTQUFBTyxHQUNBLEdBQUFmLElBQUFsRyxhQUVBLE9BQUFBLGFBQUFpSCxHQUdBLElBQUFmLElBQUFHLElBQUFILElBQUFsRyxhQUVBLE9BREFrRyxFQUFBbEcsYUFDQUEsYUFBQWlILEdBRUEsSUFFQWYsRUFBQWUsR0FDSyxNQUFBdk4sR0FDTCxJQUVBLE9BQUF3TSxFQUFBdlAsS0FBQSxLQUFBc1EsR0FDUyxNQUFBdk4sR0FHVCxPQUFBd00sRUFBQXZQLEtBQUE4QixLQUFBd08sS0FnREFDLENBQUFKLElBaUJBLFNBQUFLLEVBQUFaLEVBQUF6RSxHQUNBckosS0FBQThOLE1BQ0E5TixLQUFBcUosUUFZQSxTQUFBM0ksS0E1QkFnTixFQUFBaUIsU0FBQSxTQUFBYixHQUNBLElBQUFjLEVBQUEsSUFBQXhPLE1BQUFnSixVQUFBdkksT0FBQSxHQUNBLEdBQUF1SSxVQUFBdkksT0FBQSxFQUNBLFFBQUE5QyxFQUFBLEVBQXVCQSxFQUFBcUwsVUFBQXZJLE9BQXNCOUMsSUFDN0M2USxFQUFBN1EsRUFBQSxHQUFBcUwsVUFBQXJMLEdBR0FpUSxFQUFBMUssS0FBQSxJQUFBb0wsRUFBQVosRUFBQWMsSUFDQSxJQUFBWixFQUFBbk4sUUFBQW9OLEdBQ0FKLEVBQUFPLElBU0FNLEVBQUEvTyxVQUFBNE8sSUFBQSxXQUNBdk8sS0FBQThOLElBQUFlLE1BQUEsS0FBQTdPLEtBQUFxSixRQUVBcUUsRUFBQW9CLE1BQUEsVUFDQXBCLEVBQUFxQixTQUFBLEVBQ0FyQixFQUFBc0IsT0FDQXRCLEVBQUF1QixRQUNBdkIsRUFBQXdCLFFBQUEsR0FDQXhCLEVBQUF5QixZQUlBekIsRUFBQTNKLEdBQUFyRCxFQUNBZ04sRUFBQXhGLFlBQUF4SCxFQUNBZ04sRUFBQTBCLEtBQUExTyxFQUNBZ04sRUFBQTJCLElBQUEzTyxFQUNBZ04sRUFBQXRGLGVBQUExSCxFQUNBZ04sRUFBQTRCLG1CQUFBNU8sRUFDQWdOLEVBQUE2QixLQUFBN08sRUFDQWdOLEVBQUE4QixnQkFBQTlPLEVBQ0FnTixFQUFBK0Isb0JBQUEvTyxFQUVBZ04sRUFBQWdDLFVBQUEsU0FBQXBSLEdBQXFDLFVBRXJDb1AsRUFBQWlDLFFBQUEsU0FBQXJSLEdBQ0EsVUFBQTZILE1BQUEscUNBR0F1SCxFQUFBa0MsSUFBQSxXQUEyQixXQUMzQmxDLEVBQUFtQyxNQUFBLFNBQUFDLEdBQ0EsVUFBQTNKLE1BQUEsbUNBRUF1SCxFQUFBcUMsTUFBQSxXQUE0Qix5QkN2TDVCalMsRUFBQUQsUUFBQSxTQUFBQyxHQW9CQSxPQW5CQUEsRUFBQWtTLGtCQUNBbFMsRUFBQW1TLFVBQUEsYUFDQW5TLEVBQUFvUyxTQUVBcFMsRUFBQWtQLFdBQUFsUCxFQUFBa1AsYUFDQXZPLE9BQUFDLGVBQUFaLEVBQUEsVUFDQWEsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWQsRUFBQUUsS0FHQVMsT0FBQUMsZUFBQVosRUFBQSxNQUNBYSxZQUFBLEVBQ0FDLElBQUEsV0FDQSxPQUFBZCxFQUFBQyxLQUdBRCxFQUFBa1MsZ0JBQUEsR0FFQWxTLGtDQ3BCQSxTQUFBa08sR0FBQSxJQWNBbUUsRUFEQXJSLEdBWkEsb0JBQUF3RixLQUNBQSxLQUVBLG9CQUFBNkgsT0FDQUEsWUFFQSxJQUFBSCxFQUNBQSxFQUdBVSxTQUFBLGNBQUFBLElBRUE1TixPQUdBcVIsRUFEQSxtQkFBQXJSLEVBQ0FBLEVBQUEsVUFHQSw2QkFFZXNSLEVBQUEscUNDaEJmdFMsRUFBQUQsUUFBQSxTQUFBd1MsR0FDQSxJQUFBQyxLQXdDQSxPQXJDQUEsRUFBQUMsU0FBQSxXQUNBLE9BQUF2USxLQUFBMkosSUFBQSxTQUFBNkcsR0FDQSxJQUFBQyxFQXNDQSxTQUFBRCxFQUFBSCxHQUNBLElBQUFJLEVBQUFELEVBQUEsT0FDQUUsRUFBQUYsRUFBQSxHQUNBLElBQUFFLEVBQ0EsT0FBQUQsRUFHQSxHQUFBSixHQUFBLG1CQUFBTSxLQUFBLENBQ0EsSUFBQUMsRUFZQSxTQUFBQyxHQUtBLHlFQUhBRixLQUFBRyxTQUFBQyxtQkFBQUMsS0FBQUMsVUFBQUosTUFHQSxNQWpCQUssQ0FBQVIsR0FDQVMsRUFBQVQsRUFBQVUsUUFBQXpILElBQUEsU0FBQTBILEdBQ0EsdUJBQUFYLEVBQUFZLFdBQUFELEVBQUEsUUFHQSxPQUFBWixHQUFBM0ksT0FBQXFKLEdBQUFySixRQUFBOEksSUFBQVcsS0FBQSxNQUdBLE9BQUFkLEdBQUFjLEtBQUEsTUF0REFDLENBQUFoQixFQUFBSCxHQUNBLE9BQUFHLEVBQUEsR0FDQSxVQUFBQSxFQUFBLE9BQW1DQyxFQUFBLElBRW5DQSxJQUVHYyxLQUFBLEtBSUhqQixFQUFBdlMsRUFBQSxTQUFBRSxFQUFBd1QsR0FDQSxpQkFBQXhULElBQ0FBLElBQUEsS0FBQUEsRUFBQSxNQUVBLElBREEsSUFBQXlULEtBQ0EzVCxFQUFBLEVBQWdCQSxFQUFBaUMsS0FBQWEsT0FBaUI5QyxJQUFBLENBQ2pDLElBQUE0VCxFQUFBM1IsS0FBQWpDLEdBQUEsR0FDQSxpQkFBQTRULElBQ0FELEVBQUFDLElBQUEsR0FFQSxJQUFBNVQsRUFBQSxFQUFZQSxFQUFBRSxFQUFBNEMsT0FBb0I5QyxJQUFBLENBQ2hDLElBQUF5UyxFQUFBdlMsRUFBQUYsR0FLQSxpQkFBQXlTLEVBQUEsSUFBQWtCLEVBQUFsQixFQUFBLE1BQ0FpQixJQUFBakIsRUFBQSxHQUNBQSxFQUFBLEdBQUFpQixFQUNLQSxJQUNMakIsRUFBQSxPQUFBQSxFQUFBLGFBQUFpQixFQUFBLEtBRUFuQixFQUFBaE4sS0FBQWtOLE1BSUFGLG9CQ3pDQSxJQUFBc0IsS0FXQUMsRUFUQSxTQUFBQyxHQUNBLElBQUFDLEVBRUEsa0JBRUEsWUFEQSxJQUFBQSxNQUFBRCxFQUFBakQsTUFBQTdPLEtBQUFvSixZQUNBMkksR0FJQUMsQ0FBQSxXQU1BLE9BQUE3RixRQUFBOEYsbUJBQUFDLE1BQUEvRixPQUFBZ0csT0FVQUMsRUFBQSxTQUFBTixHQUNBLElBQUFDLEtBRUEsZ0JBQUEzRyxFQUFBaUgsR0FNQSxzQkFBQWpILEVBQ0EsT0FBQUEsSUFFQSxZQUFBMkcsRUFBQTNHLEdBQUEsQ0FDQSxJQUFBa0gsRUFwQkEsU0FBQWxILEVBQUFpSCxHQUNBLE9BQUFBLEVBQ0FBLEVBQUFFLGNBQUFuSCxHQUVBNkcsU0FBQU0sY0FBQW5ILElBZ0JBbE4sS0FBQThCLEtBQUFvTCxFQUFBaUgsR0FFQSxHQUFBbEcsT0FBQXFHLG1CQUFBRixhQUFBbkcsT0FBQXFHLGtCQUNBLElBR0FGLElBQUFHLGdCQUFBQyxLQUNLLE1BQUF6UixHQUNMcVIsRUFBQSxLQUdBUCxFQUFBM0csR0FBQWtILEVBRUEsT0FBQVAsRUFBQTNHLElBMUJBLEdBOEJBdUgsRUFBQSxLQUNBQyxFQUFBLEVBQ0FDLEtBRUFDLEVBQWNuVixFQUFRLEtBcUR0QixTQUFBb1YsRUFBQUMsRUFBQUMsR0FDQSxRQUFBbFYsRUFBQSxFQUFnQkEsRUFBQWlWLEVBQUFuUyxPQUFtQjlDLElBQUEsQ0FDbkMsSUFBQXlTLEVBQUF3QyxFQUFBalYsR0FDQW1WLEVBQUF0QixFQUFBcEIsRUFBQW1CLElBRUEsR0FBQXVCLEVBQUEsQ0FDQUEsRUFBQUMsT0FFQSxRQUFBQyxFQUFBLEVBQWlCQSxFQUFBRixFQUFBRyxNQUFBeFMsT0FBMkJ1UyxJQUM1Q0YsRUFBQUcsTUFBQUQsR0FBQTVDLEVBQUE2QyxNQUFBRCxJQUdBLEtBQVFBLEVBQUE1QyxFQUFBNkMsTUFBQXhTLE9BQXVCdVMsSUFDL0JGLEVBQUFHLE1BQUEvUCxLQUFBZ1EsRUFBQTlDLEVBQUE2QyxNQUFBRCxHQUFBSCxRQUVHLENBQ0gsSUFBQUksS0FFQSxJQUFBRCxFQUFBLEVBQWlCQSxFQUFBNUMsRUFBQTZDLE1BQUF4UyxPQUF1QnVTLElBQ3hDQyxFQUFBL1AsS0FBQWdRLEVBQUE5QyxFQUFBNkMsTUFBQUQsR0FBQUgsSUFHQXJCLEVBQUFwQixFQUFBbUIsS0FBMkJBLEdBQUFuQixFQUFBbUIsR0FBQXdCLEtBQUEsRUFBQUUsV0FLM0IsU0FBQUUsRUFBQWpELEVBQUEyQyxHQUlBLElBSEEsSUFBQUQsS0FDQVEsS0FFQXpWLEVBQUEsRUFBZ0JBLEVBQUF1UyxFQUFBelAsT0FBaUI5QyxJQUFBLENBQ2pDLElBQUF5UyxFQUFBRixFQUFBdlMsR0FDQTRULEVBQUFzQixFQUFBUSxLQUFBakQsRUFBQSxHQUFBeUMsRUFBQVEsS0FBQWpELEVBQUEsR0FJQWtELEdBQWNDLElBSGRuRCxFQUFBLEdBR2NvRCxNQUZkcEQsRUFBQSxHQUVjSyxVQURkTCxFQUFBLElBR0FnRCxFQUFBN0IsR0FDQTZCLEVBQUE3QixHQUFBMEIsTUFBQS9QLEtBQUFvUSxHQURBVixFQUFBMVAsS0FBQWtRLEVBQUE3QixJQUFrREEsS0FBQTBCLE9BQUFLLEtBSWxELE9BQUFWLEVBR0EsU0FBQWEsRUFBQVosRUFBQWEsR0FDQSxJQUFBMUksRUFBQWdILEVBQUFhLEVBQUFjLFlBRUEsSUFBQTNJLEVBQ0EsVUFBQWpGLE1BQUEsK0dBR0EsSUFBQTZOLEVBQUFuQixJQUFBaFMsT0FBQSxHQUVBLFdBQUFvUyxFQUFBZ0IsU0FDQUQsRUFFR0EsRUFBQUUsWUFDSDlJLEVBQUErSSxhQUFBTCxFQUFBRSxFQUFBRSxhQUVBOUksRUFBQWdKLFlBQUFOLEdBSkExSSxFQUFBK0ksYUFBQUwsRUFBQTFJLEVBQUFpSixZQU1BeEIsRUFBQXZQLEtBQUF3USxRQUNFLGNBQUFiLEVBQUFnQixTQUNGN0ksRUFBQWdKLFlBQUFOLE9BQ0UscUJBQUFiLEVBQUFnQixXQUFBaEIsRUFBQWdCLFNBQUFLLE9BSUYsVUFBQW5PLE1BQUEsOExBSEEsSUFBQStOLEVBQUE5QixFQUFBYSxFQUFBZ0IsU0FBQUssT0FBQWxKLEdBQ0FBLEVBQUErSSxhQUFBTCxFQUFBSSxJQU1BLFNBQUFLLEVBQUFULEdBQ0EsVUFBQUEsRUFBQVUsV0FBQSxTQUNBVixFQUFBVSxXQUFBQyxZQUFBWCxHQUVBLElBQUFZLEVBQUE3QixFQUFBckwsUUFBQXNNLEdBQ0FZLEdBQUEsR0FDQTdCLEVBQUFwTCxPQUFBaU4sRUFBQSxHQUlBLFNBQUFDLEVBQUExQixHQUNBLElBQUFhLEVBQUE3QixTQUFBMkMsY0FBQSxTQU1BLFFBSkF6SCxJQUFBOEYsRUFBQTRCLE1BQUFwUyxPQUNBd1EsRUFBQTRCLE1BQUFwUyxLQUFBLGlCQUdBMEssSUFBQThGLEVBQUE0QixNQUFBQyxNQUFBLENBQ0EsSUFBQUEsRUFnQ0EsV0FDSyxFQUlMLE9BQVFuWCxFQUFBb1gsR0FyQ1JDLEdBQ0FGLElBQ0E3QixFQUFBNEIsTUFBQUMsU0FPQSxPQUhBRyxFQUFBbkIsRUFBQWIsRUFBQTRCLE9BQ0FoQixFQUFBWixFQUFBYSxHQUVBQSxFQWlCQSxTQUFBbUIsRUFBQUMsRUFBQUwsR0FDQXBXLE9BQUEwVyxLQUFBTixHQUFBTyxRQUFBLFNBQUE5VixHQUNBNFYsRUFBQUcsYUFBQS9WLEVBQUF1VixFQUFBdlYsTUFZQSxTQUFBZ1UsRUFBQWdDLEVBQUFyQyxHQUNBLElBQUFhLEVBQUF5QixFQUFBQyxFQUFBQyxFQUdBLEdBQUF4QyxFQUFBeUMsV0FBQUosRUFBQTNCLElBQUEsQ0FLQSxLQUpBOEIsRUFBQSxtQkFBQXhDLEVBQUF5QyxVQUNBekMsRUFBQXlDLFVBQUFKLEVBQUEzQixLQUNBVixFQUFBeUMsVUFBQXJOLFFBQUFpTixFQUFBM0IsTUFTQSxvQkFKQTJCLEVBQUEzQixJQUFBOEIsRUFVQSxHQUFBeEMsRUFBQU4sVUFBQSxDQUNBLElBQUFnRCxFQUFBL0MsSUFFQWtCLEVBQUFuQixNQUFBZ0MsRUFBQTFCLElBRUFzQyxFQUFBSyxFQUFBclcsS0FBQSxLQUFBdVUsRUFBQTZCLEdBQUEsR0FDQUgsRUFBQUksRUFBQXJXLEtBQUEsS0FBQXVVLEVBQUE2QixHQUFBLFFBR0FMLEVBQUF6RSxXQUNBLG1CQUFBZ0YsS0FDQSxtQkFBQUEsSUFBQUMsaUJBQ0EsbUJBQUFELElBQUFFLGlCQUNBLG1CQUFBQyxNQUNBLG1CQUFBckYsTUFFQW1ELEVBbEVBLFNBQUFiLEdBQ0EsSUFBQWdELEVBQUFoRSxTQUFBMkMsY0FBQSxRQVVBLFlBUkF6SCxJQUFBOEYsRUFBQTRCLE1BQUFwUyxPQUNBd1EsRUFBQTRCLE1BQUFwUyxLQUFBLFlBRUF3USxFQUFBNEIsTUFBQXFCLElBQUEsYUFFQWpCLEVBQUFnQixFQUFBaEQsRUFBQTRCLE9BQ0FoQixFQUFBWixFQUFBZ0QsR0FFQUEsRUF1REFFLENBQUFsRCxHQUNBc0MsRUFpRkEsU0FBQVUsRUFBQWhELEVBQUFxQyxHQUNBLElBQUEzQixFQUFBMkIsRUFBQTNCLElBQ0E5QyxFQUFBeUUsRUFBQXpFLFVBUUF1RixPQUFBakosSUFBQThGLEVBQUFvRCx1QkFBQXhGLEdBRUFvQyxFQUFBb0QsdUJBQUFELEtBQ0F6QyxFQUFBYixFQUFBYSxJQUdBOUMsSUFFQThDLEdBQUEsdURBQXVEaEQsS0FBQUcsU0FBQUMsbUJBQUFDLEtBQUFDLFVBQUFKLE1BQUEsT0FHdkQsSUFBQXlGLEVBQUEsSUFBQU4sTUFBQXJDLElBQTZCbFIsS0FBQSxhQUU3QjhULEVBQUFOLEVBQUFPLEtBRUFQLEVBQUFPLEtBQUFYLElBQUFDLGdCQUFBUSxHQUVBQyxHQUFBVixJQUFBRSxnQkFBQVEsSUE1R0FoWCxLQUFBLEtBQUF1VSxFQUFBYixHQUNBdUMsRUFBQSxXQUNBakIsRUFBQVQsR0FFQUEsRUFBQTBDLE1BQUFYLElBQUFFLGdCQUFBakMsRUFBQTBDLFNBR0ExQyxFQUFBYSxFQUFBMUIsR0FDQXNDLEVBc0RBLFNBQUF6QixFQUFBd0IsR0FDQSxJQUFBM0IsRUFBQTJCLEVBQUEzQixJQUNBQyxFQUFBMEIsRUFBQTFCLE1BRUFBLEdBQ0FFLEVBQUF1QixhQUFBLFFBQUF6QixHQUdBLEdBQUFFLEVBQUEyQyxXQUNBM0MsRUFBQTJDLFdBQUFDLFFBQUEvQyxNQUNFLENBQ0YsS0FBQUcsRUFBQU8sWUFDQVAsRUFBQVcsWUFBQVgsRUFBQU8sWUFHQVAsRUFBQU0sWUFBQW5DLFNBQUEwRSxlQUFBaEQsTUFyRUFwVSxLQUFBLEtBQUF1VSxHQUNBMEIsRUFBQSxXQUNBakIsRUFBQVQsS0FNQSxPQUZBeUIsRUFBQUQsR0FFQSxTQUFBc0IsR0FDQSxHQUFBQSxFQUFBLENBQ0EsR0FDQUEsRUFBQWpELE1BQUEyQixFQUFBM0IsS0FDQWlELEVBQUFoRCxRQUFBMEIsRUFBQTFCLE9BQ0FnRCxFQUFBL0YsWUFBQXlFLEVBQUF6RSxVQUVBLE9BR0EwRSxFQUFBRCxFQUFBc0IsUUFFQXBCLEtBMVBBMVgsRUFBQUQsUUFBQSxTQUFBeVMsRUFBQTJDLEdBQ0EsdUJBQUE0RCxjQUNBLGlCQUFBNUUsU0FBQSxVQUFBOUwsTUFBQSxpRUFHQThNLFNBRUE0QixNQUFBLGlCQUFBNUIsRUFBQTRCLE1BQUE1QixFQUFBNEIsU0FJQTVCLEVBQUFOLFdBQUEsa0JBQUFNLEVBQUFOLFlBQUFNLEVBQUFOLFVBQUFkLEtBR0FvQixFQUFBYyxhQUFBZCxFQUFBYyxXQUFBLFFBR0FkLEVBQUFnQixXQUFBaEIsRUFBQWdCLFNBQUEsVUFFQSxJQUFBakIsRUFBQU8sRUFBQWpELEVBQUEyQyxHQUlBLE9BRkFGLEVBQUFDLEVBQUFDLEdBRUEsU0FBQTZELEdBR0EsSUFGQSxJQUFBQyxLQUVBaFosRUFBQSxFQUFpQkEsRUFBQWlWLEVBQUFuUyxPQUFtQjlDLElBQUEsQ0FDcEMsSUFBQXlTLEVBQUF3QyxFQUFBalYsSUFDQW1WLEVBQUF0QixFQUFBcEIsRUFBQW1CLEtBRUF3QixPQUNBNEQsRUFBQXpULEtBQUE0UCxHQUdBNEQsR0FFQS9ELEVBREFRLEVBQUF1RCxFQUFBN0QsR0FDQUEsR0FHQSxJQUFBbFYsRUFBQSxFQUFpQkEsRUFBQWdaLEVBQUFsVyxPQUFzQjlDLElBQUEsQ0FDdkMsSUFBQW1WLEVBRUEsUUFGQUEsRUFBQTZELEVBQUFoWixJQUVBb1YsS0FBQSxDQUNBLFFBQUFDLEVBQUEsRUFBbUJBLEVBQUFGLEVBQUFHLE1BQUF4UyxPQUEyQnVTLElBQUFGLEVBQUFHLE1BQUFELFlBRTlDeEIsRUFBQXNCLEVBQUF2QixRQWtOQSxJQUFBcUYsRUFBQSxXQUNBLElBQUFDLEtBRUEsZ0JBQUFDLEVBQUFDLEdBR0EsT0FGQUYsRUFBQUMsR0FBQUMsRUFFQUYsRUFBQW5OLE9BQUFzTixTQUFBN0YsS0FBQSxPQU5BLEdBVUEsU0FBQXFFLEVBQUE5QixFQUFBb0QsRUFBQTFCLEVBQUFGLEdBQ0EsSUFBQTNCLEVBQUE2QixFQUFBLEdBQUFGLEVBQUEzQixJQUVBLEdBQUFHLEVBQUEyQyxXQUNBM0MsRUFBQTJDLFdBQUFDLFFBQUFNLEVBQUFFLEVBQUF2RCxPQUNFLENBQ0YsSUFBQTBELEVBQUFwRixTQUFBMEUsZUFBQWhELEdBQ0EyRCxFQUFBeEQsRUFBQXdELFdBRUFBLEVBQUFKLElBQUFwRCxFQUFBVyxZQUFBNkMsRUFBQUosSUFFQUksRUFBQXpXLE9BQ0FpVCxFQUFBSyxhQUFBa0QsRUFBQUMsRUFBQUosSUFFQXBELEVBQUFNLFlBQUFpRCxtQ0N6VkEsU0FBQWhLLEVBQUFOLEVBQUFHLEVBQUFGLEVBQUFDLEVBQUFzSyxHQUVBLE9BQVl4SyxNQUFBRyxPQUFBRixXQUNaQyxPQUFBc0ssTUFBQWpZLFNBRkE2TixJQUFBRCxPQUFBQyxFQUFBRCxFQUFBNU4sS0FGQWIsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFNOUNuQixFQUFBd1AsUUFDQXhQLEVBQUF3SyxRQUFBZ0YsaUNDUkEsU0FBQW1LLEdBQUE3WixFQUFBVSxFQUFBK1IsRUFBQSxzQkFBQXFILElBQUE5WixFQUFBLElBRUEsU0FBQStaLEVBQUE5SSxHQUNBLElBQUErSSxFQUFBL0ksRUFBQStJLFVBQUFDLEVBQUFoSixFQUFBZ0osS0FBQUMsRUFBQWpKLEVBQUFpSixZQUFBQyxFQUFBbEosRUFBQWtKLFFBQUFDLEVBQUFuSixFQUFBbUosWUFDQUMsRUFBQUwsRUFBQU0sT0FDQUMsRUFBQUYsR0FBQUQsR0FBQUMsRUFBQUcsTUFBQUosRUFDQSxHQUFBQyxJQUFBRSxFQUFBLENBSUEsSUFBQUUsRUFBQVQsRUFBQVUsaUJBQ0EsR0FBQUQsRUFBQUUsVUFDQWQsRUFBQUUsRUFBQTlJLE9BREEsQ0FJQSxJQUFBdUosRUFBQUMsRUFBQUQsS0FDQUwsRUFBQUssR0FDQUMsRUFBQXBYLEdBQ0FvWCxFQUFBcFgsRUFBQW9YLEVBQUFELEVBQUFSLEVBQUFZLElBQUFWLEdBRUEsU0FBQU8sRUFBQTNWLE1BQ0EyVixFQUFBNUwsT0FBQW5CLG1CQUFBK00sRUFBQXBaLE9BRUEsVUFBQW9aLEVBQUEzVixNQUNBMlYsRUFBQTVMLE9BQUFsQixvQkFBQThNLEVBQUF6VyxPQUVBLGFBQUF5VyxFQUFBM1YsTUFDQTJWLEVBQUE1TCxPQUFBakIseUJBRUFpTSxFQUFBRSxFQUFBOUksU0F0QkFnSixJQXdCQSxTQUFBSCxFQUFBRSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxRQUNBLElBQUFBLElBQWlDQSxFQUFBLEdBRWpDUCxFQUFBRSxHQURnQkMsWUFBQUMsT0FBQUMsY0FBQUMsVUFBQUMsK0VDZWhCamEsRUFBQUQsUUE1QkEsU0FBQTJhLEVBQUFDLEVBQUE3WCxFQUFBUCxFQUFBakMsRUFBQUMsRUFBQTRDLEVBQUFELEdBT0EsSUFBQXdYLEVBQUEsQ0FDQSxJQUFBN1csRUFDQSxRQUFBd0wsSUFBQXNMLEVBQ0E5VyxFQUFBLElBQUF3RSxNQUNBLHFJQUdLLENBQ0wsSUFBQXlJLEdBQUFoTyxFQUFBUCxFQUFBakMsRUFBQUMsRUFBQTRDLEVBQUFELEdBQ0EwWCxFQUFBLEdBQ0EvVyxFQUFBLElBQUF3RSxNQUNBc1MsRUFBQTdOLFFBQUEsaUJBQTBDLE9BQUFnRSxFQUFBOEosU0FFMUNwYSxLQUFBLHNCQUlBLE1BREFxRCxFQUFBZ1gsWUFBQSxFQUNBaFgsc0JDNUNBLFNBQUFxSyxHQU9BLElBUEEsSUFBQTRNLEVBQVVqYixFQUFRLElBQ2xCa2IsRUFBQSxvQkFBQTFNLE9BQUFILEVBQUFHLE9BQ0EyTSxHQUFBLGdCQUNBQyxFQUFBLGlCQUNBQyxFQUFBSCxFQUFBLFVBQUFFLEdBQ0FFLEVBQUFKLEVBQUEsU0FBQUUsSUFBQUYsRUFBQSxnQkFBQUUsR0FFQWhiLEVBQUEsR0FBY2liLEdBQUFqYixFQUFBK2EsRUFBQWpZLE9BQTRCOUMsSUFDMUNpYixFQUFBSCxFQUFBQyxFQUFBL2EsR0FBQSxVQUFBZ2IsR0FDQUUsRUFBQUosRUFBQUMsRUFBQS9hLEdBQUEsU0FBQWdiLElBQ0FGLEVBQUFDLEVBQUEvYSxHQUFBLGdCQUFBZ2IsR0FJQSxJQUFBQyxJQUFBQyxFQUFBLENBQ0EsSUFBQTVPLEVBQUEsRUFDQXNILEVBQUEsRUFDQTNELEtBR0FnTCxFQUFBLFNBQUFFLEdBQ0EsT0FBQWxMLEVBQUFuTixPQUFBLENBQ0EsSUFBQXNZLEVBQUFQLElBQ0FsWCxFQUFBMFgsS0FBQXRVLElBQUEsRUFMQSxRQUtBcVUsRUFBQTlPLElBQ0FBLEVBQUEzSSxFQUFBeVgsRUFDQWpWLFdBQUEsV0FDQSxJQUFBdkQsRUFBQXFOLEVBQUFxTCxNQUFBLEdBSUFyTCxFQUFBbk4sT0FBQSxFQUNBLFFBQUE5QyxFQUFBLEVBQXNCQSxFQUFBNEMsRUFBQUUsT0FBZTlDLElBQ3JDLElBQUE0QyxFQUFBNUMsR0FBQXVhLFVBQ0EsSUFDQTNYLEVBQUE1QyxHQUFBbWIsU0FBQTdPLEdBQ2EsTUFBQXBKLEdBQ2JpRCxXQUFBLFdBQXFDLE1BQUFqRCxHQUFVLEtBSXhDbVksS0FBQUUsTUFBQTVYLElBT1AsT0FMQXNNLEVBQUExSyxNQUNBaVcsU0FBQTVILEVBQ0F1SCxXQUNBWixXQUFBLElBRUEzRyxHQUdBc0gsRUFBQSxTQUFBTSxHQUNBLFFBQUF4YixFQUFBLEVBQWtCQSxFQUFBaVEsRUFBQW5OLE9BQWtCOUMsSUFDcENpUSxFQUFBalEsR0FBQXdiLGFBQ0F2TCxFQUFBalEsR0FBQXVhLFdBQUEsSUFNQXhhLEVBQUFELFFBQUEsU0FBQWlVLEdBSUEsT0FBQWtILEVBQUE5YSxLQUFBMmEsRUFBQS9HLElBRUFoVSxFQUFBRCxRQUFBMmIsT0FBQSxXQUNBUCxFQUFBcEssTUFBQWdLLEVBQUF6UCxZQUVBdEwsRUFBQUQsUUFBQTRiLFNBQUEsU0FBQWhhLEdBQ0FBLElBQ0FBLEVBQUFvWixHQUVBcFosRUFBQWlhLHNCQUFBVixFQUNBdlosRUFBQWthLHFCQUFBVixtREN2RUEsSUFBQTFaLEVBQVc1QixFQUFRLElBRW5CRyxFQUFBRCxRQUFBMEIsRUFBQXJCLEtBQUF3TyxTQUFBeE8sS0FBQU8sT0FBQWtCLFVBQUFDLDhDQ0ZBLElBQUFnYSxFQUFxQmpjLEVBQVEsSUFFN0JHLEVBQUFELFFBQUE2TyxTQUFBL00sVUFBQUosTUFBQXFhLGdDQ0ZBLElBQUFDLEVBQUFuTixTQUFBL00sVUFBQTRRLFNBRUF1SixFQUFBLGNBQ0FDLEVBQUEsU0FBQS9hLEdBQ0EsSUFDQSxJQUFBZ2IsRUFBQUgsRUFBQTNiLEtBQUFjLEdBQ0EsT0FBQThhLEVBQUFHLEtBQUFELEdBQ0UsTUFBQS9ZLEdBQ0YsV0FhQWlaLEVBQUF6YixPQUFBa0IsVUFBQTRRLFNBR0E0SixFQUFBLG1CQUFBcmIsUUFBQSxpQkFBQUEsT0FBQUMsWUFFQWpCLEVBQUFELFFBQUEsU0FBQW1CLEdBQ0EsSUFBQUEsRUFBYyxTQUNkLHNCQUFBQSxHQUFBLGlCQUFBQSxFQUFnRSxTQUNoRSxzQkFBQUEsTUFBQVcsVUFBdUQsU0FDdkQsR0FBQXdhLEVBQXNCLE9BbEJ0QixTQUFBbmIsR0FDQSxJQUNBLE9BQUErYSxFQUFBL2EsS0FDQTZhLEVBQUEzYixLQUFBYyxJQUNBLEdBQ0UsTUFBQWlDLEdBQ0YsVUFZc0JtWixDQUFBcGIsR0FDdEIsR0FBQSthLEVBQUEvYSxHQUEyQixTQUMzQixJQUFBcWIsRUFBQUgsRUFBQWhjLEtBQUFjLEdBQ0EsTUFYQSxzQkFXQXFiLEdBVkEsK0JBVUFBLG9CQ25DQSxJQUNBcFUsRUFEV3RJLEVBQVEsSUFDbkJPLEtBQUF3TyxTQUFBeE8sS0FBQU8sT0FBQWtCLFVBQUFDLGdCQUVBMGEsRUFBQTdiLE9BQUE4YixPQUVBemMsRUFBQUQsUUFBQSxTQUFBdU4sRUFBQWlHLEdBQ0EsR0FBQWlKLEVBQ0EsT0FBQUEsRUFBQWxQLEVBQUFpRyxHQUdBLFFBQUEvUixLQUFBK1IsRUFDQXBMLEVBQUFvTCxFQUFBL1IsS0FDQThMLEVBQUE5TCxHQUFBK1IsRUFBQS9SLElBR0EsT0FBQThMLGlDQ2JBLFNBQUFvUCxFQUFBQyxFQUFBcE4sR0FDQSxJQUFBcU4sRUFBQXBjLEVBQUFpWixFQUFBbEssRUFBQWtLLElBQUFvRCxFQUFBRixFQUFBdk4sS0FBQTBOLE1BQUFDLEVBQUF4TixFQUFBSCxLQUFBME4sTUFDQSxJQUFBRCxHQUFBRSxJQUVBRixJQUFBRSxFQUFBLENBSUEsSUFBQXZjLEtBRkFxYyxRQUNBRSxRQUNBRixFQUNBRSxFQUFBdmMsSUFDQWlaLEVBQUF1RCxVQUFBdEYsT0FBQWxYLEdBR0EsSUFBQUEsS0FBQXVjLEdBQ0FILEVBQUFHLEVBQUF2YyxNQUNBcWMsRUFBQXJjLElBQ0FpWixFQUFBdUQsVUFBQUosRUFBQSxnQkFBQXBjLElBakJBRyxPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQXFCOUNuQixFQUFBa2QsYUFBdUIxYixPQUFBbWIsRUFBQWpGLE9BQUFpRixHQUN2QjNjLEVBQUF3SyxRQUFBeEssRUFBQWtkLDBDQ3JCQSxTQUFBQyxFQUFBUCxFQUFBcE4sR0FDQSxJQUFBL04sRUFBQW9iLEVBQUFuRCxFQUFBbEssRUFBQWtLLElBQUEwRCxFQUFBUixFQUFBdk4sS0FBQWdPLFFBQUE3TixFQUFBSCxLQUFBZ08sTUFDQSxJQUFBRCxHQUFBQyxJQUVBRCxJQUFBQyxFQUFBLENBSUEsSUFBQTViLEtBRkEyYixRQUNBQyxRQUNBRCxFQUNBQyxFQUFBNWIsV0FDQWlZLEVBQUFqWSxHQUdBLElBQUFBLEtBQUE0YixFQUNBUixFQUFBUSxFQUFBNWIsR0FDQTJiLEVBQUEzYixLQUNBb2IsR0FBQSxVQUFBcGIsR0FBQWlZLEVBQUFqWSxLQUFBb2IsSUFDQW5ELEVBQUFqWSxHQUFBb2IsSUFsQkFqYyxPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQXNCOUNuQixFQUFBc2QsYUFBdUI5YixPQUFBMmIsRUFBQXpGLE9BQUF5RixHQUN2Qm5kLEVBQUF3SyxRQUFBeEssRUFBQXNkLDBDQ3ZCQTFjLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFvYyxFQUFBLCtCQUNBQyxFQUFBLHVDQUNBQyxFQUFBLEdBQ0FDLEVBQUEsSUFDQSxTQUFBQyxFQUFBZixFQUFBcE4sR0FDQSxJQUFBL04sRUFBQWlZLEVBQUFsSyxFQUFBa0ssSUFBQWtFLEVBQUFoQixFQUFBdk4sS0FBQTJILFFBQUF4SCxFQUFBSCxLQUFBMkgsTUFDQSxJQUFBNEcsR0FBQTVHLElBRUE0RyxJQUFBNUcsRUFBQSxDQUtBLElBQUF2VixLQUhBbWMsUUFDQTVHLFFBRUEsQ0FDQSxJQUFBNkYsRUFBQTdGLEVBQUF2VixHQUNBbWMsRUFBQW5jLEtBQ0FvYixLQUNBLElBQUFBLEVBQ0FuRCxFQUFBbEMsYUFBQS9WLEVBQUEsS0FFQSxJQUFBb2IsRUFDQW5ELEVBQUFtRSxnQkFBQXBjLEdBR0FBLEVBQUFxYyxXQUFBLEtBQUFKLEVBQ0FoRSxFQUFBbEMsYUFBQS9WLEVBQUFvYixHQUVBcGIsRUFBQXFjLFdBQUEsS0FBQUwsRUFFQS9ELEVBQUFxRSxlQUFBUCxFQUFBL2IsRUFBQW9iLEdBRUFwYixFQUFBcWMsV0FBQSxLQUFBTCxFQUVBL0QsRUFBQXFFLGVBQUFSLEVBQUE5YixFQUFBb2IsR0FHQW5ELEVBQUFsQyxhQUFBL1YsRUFBQW9iLElBUUEsSUFBQXBiLEtBQUFtYyxFQUNBbmMsS0FBQXVWLEdBQ0EwQyxFQUFBbUUsZ0JBQUFwYyxJQUlBekIsRUFBQWdlLGtCQUE0QnhjLE9BQUFtYyxFQUFBakcsT0FBQWlHLEdBQzVCM2QsRUFBQXdLLFFBQUF4SyxFQUFBZ2UsK0NDcERBcGQsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQWdhLEVBQUEsb0JBQUE3TSxlQUFBdU4sdUJBQUF4VixXQUNBNFgsRUFBQSxTQUFBaEssR0FBK0JrSCxFQUFBLFdBQWtCQSxFQUFBbEgsTUFDakRpSyxHQUFBLEVBQ0EsU0FBQUMsRUFBQTFHLEVBQUEyRyxFQUFBL1YsR0FDQTRWLEVBQUEsV0FBMkJ4RyxFQUFBMkcsR0FBQS9WLElBRTNCLFNBQUFnVyxFQUFBekIsRUFBQXBOLEdBQ0EsSUFBQXFOLEVBQUFwYyxFQUFBaVosRUFBQWxLLEVBQUFrSyxJQUFBNEUsRUFBQTFCLEVBQUF2TixLQUFBNEcsUUFBQXpHLEVBQUFILEtBQUE0RyxNQUNBLElBQUFxSSxHQUFBckksSUFFQXFJLElBQUFySSxFQUFBLENBRUFxSSxRQUNBckksUUFDQSxJQUFBc0ksRUFBQSxZQUFBRCxFQUNBLElBQUE3ZCxLQUFBNmQsRUFDQXJJLEVBQUF4VixLQUNBLE1BQUFBLEVBQUEsVUFBQUEsRUFBQSxHQUNBaVosRUFBQXpELE1BQUF1SSxlQUFBL2QsR0FHQWlaLEVBQUF6RCxNQUFBeFYsR0FBQSxJQUlBLElBQUFBLEtBQUF3VixFQUVBLEdBREE0RyxFQUFBNUcsRUFBQXhWLEdBQ0EsWUFBQUEsR0FBQXdWLEVBQUF3SSxRQUNBLFFBQUFDLEtBQUF6SSxFQUFBd0ksUUFDQTVCLEVBQUE1RyxFQUFBd0ksUUFBQUMsR0FDQUgsR0FBQTFCLElBQUF5QixFQUFBRyxRQUFBQyxJQUNBUCxFQUFBekUsRUFBQXpELE1BQUF5SSxFQUFBN0IsT0FJQSxXQUFBcGMsR0FBQW9jLElBQUF5QixFQUFBN2QsS0FDQSxNQUFBQSxFQUFBLFVBQUFBLEVBQUEsR0FDQWlaLEVBQUF6RCxNQUFBMEksWUFBQWxlLEVBQUFvYyxHQUdBbkQsRUFBQXpELE1BQUF4VixHQUFBb2MsSUE0Q0E3YyxFQUFBNGUsYUFDQUMsSUFKQSxXQUNBWCxHQUFBLEdBSUExYyxPQUFBNmMsRUFDQTNHLE9BQUEyRyxFQUNBUyxRQTNDQSxTQUFBdFAsR0FDQSxJQUFBeUcsRUFBQXhWLEVBQUFpWixFQUFBbEssRUFBQWtLLElBQUF6WCxFQUFBdU4sRUFBQUgsS0FBQTRHLE1BQ0EsR0FBQWhVLElBQUFnVSxFQUFBaFUsRUFBQTZjLFNBRUEsSUFBQXJlLEtBQUF3VixFQUNBeUQsRUFBQXpELE1BQUF4VixHQUFBd1YsRUFBQXhWLElBdUNBa1gsT0FwQ0EsU0FBQW5JLEVBQUF1UCxHQUNBLElBQUE5YyxFQUFBdU4sRUFBQUgsS0FBQTRHLE1BQ0EsR0FBQWhVLEtBQUEwVixPQUFBLENBSUF1RyxJQUNBYyxpQkFBQTVLLFNBQUE2SyxNQUFBcEgsVUFDQXFHLEdBQUEsR0FFQSxJQUFBemQsRUFBQWlaLEVBQUFsSyxFQUFBa0ssSUFBQXhaLEVBQUEsRUFBQStWLEVBQUFoVSxFQUFBMFYsT0FBQXJMLEVBQUEsRUFBQTRTLEtBQ0EsSUFBQXplLEtBQUF3VixFQUNBaUosRUFBQXpaLEtBQUFoRixHQUNBaVosRUFBQXpELE1BQUF4VixHQUFBd1YsRUFBQXhWLEdBSUEsSUFEQSxJQUFBNGMsRUFEQTJCLGlCQUFBdEYsR0FDQSx1QkFBQXlGLE1BQUEsTUFDVWpmLEVBQUFtZCxFQUFBcmEsU0FBa0I5QyxHQUM1QixJQUFBZ2YsRUFBQXZWLFFBQUEwVCxFQUFBbmQsS0FDQW9NLElBRUFvTixFQUFBMEYsaUJBQUEseUJBQUFDLEdBQ0FBLEVBQUE5UixTQUFBbU0sS0FDQXBOLEVBQ0EsSUFBQUEsR0FDQXlTLFdBdEJBQSxNQW1DQS9lLEVBQUF3SyxRQUFBeEssRUFBQTRlLDBDQzVGQWhlLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFtZSxFQUFBLFNBQ0EsU0FBQUMsRUFBQTNDLEVBQUFwTixHQUNBLElBQUEvTixFQUFBaVksRUFBQWxLLEVBQUFrSyxJQUFBOEYsRUFBQTVDLEVBQUF2TixLQUFBb1EsVUFBQWpRLEVBQUFILEtBQUFvUSxRQUNBLElBQUFELEdBQUFDLElBRUFELElBQUFDLEVBQUEsQ0FFQUQsUUFDQUMsUUFDQSxJQUFBamYsRUFBQWtaLEVBQUErRixRQUNBLElBQUFoZSxLQUFBK2QsRUFDQUMsRUFBQWhlLEtBQ0FqQixFQUNBaUIsS0FBQWpCLFVBQ0FBLEVBQUFpQixHQUlBaVksRUFBQW1FLGdCQUFBLFFBQUFwYyxFQUFBc0wsUUFBQXVTLEVBQUEsT0FBQUksZ0JBSUEsSUFBQWplLEtBQUFnZSxFQUNBRCxFQUFBL2QsS0FBQWdlLEVBQUFoZSxLQUNBakIsRUFDQUEsRUFBQWlCLEdBQUFnZSxFQUFBaGUsR0FHQWlZLEVBQUFsQyxhQUFBLFFBQUEvVixFQUFBc0wsUUFBQXVTLEVBQUEsT0FBQUksY0FBQUQsRUFBQWhlLE1BS0F6QixFQUFBMmYsZUFBeUJuZSxPQUFBK2QsRUFBQTdILE9BQUE2SCxHQUN6QnZmLEVBQUF3SyxRQUFBeEssRUFBQTJmLGdDQ3BDQSxTQUFBOVAsSUFDQSxXQUNBLElBQUErUCxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUVBLG9CQUFBQyxhQUFBLE9BQUFBLHlCQUFBbkYsSUFDQTlhLEVBQUFELFFBQUEsV0FDQSxPQUFBa2dCLFlBQUFuRixZQUVHLElBQUFsTCxHQUFBLE9BQUFBLEtBQUFnUSxRQUNINWYsRUFBQUQsUUFBQSxXQUNBLE9BQUE0ZixJQUFBSSxHQUFBLEtBRUFILEVBQUFoUSxFQUFBZ1EsT0FNQUUsR0FMQUgsRUFBQSxXQUNBLElBQUFPLEVBRUEsWUFEQUEsRUFBQU4sS0FDQSxHQUFBTSxFQUFBLE9BR0FGLEVBQUEsSUFBQXBRLEVBQUF1USxTQUNBSixFQUFBRCxFQUFBRSxHQUNHSSxLQUFBdEYsS0FDSDlhLEVBQUFELFFBQUEsV0FDQSxPQUFBcWdCLEtBQUF0RixNQUFBK0UsR0FFQUEsRUFBQU8sS0FBQXRGLFFBRUE5YSxFQUFBRCxRQUFBLFdBQ0EsV0FBQXFnQixNQUFBQyxVQUFBUixHQUVBQSxHQUFBLElBQUFPLE1BQUFDLGFBR0NqZ0IsS0FBQThCLHNEQ2hDRHZCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUE0TixFQUFjalAsRUFBUSxJQUN0QnlnQixFQUFtQnpnQixFQUFRLElBQzNCLFNBQUEwZ0IsRUFBQUMsRUFBQUMsR0FDQSxJQUNBdFIsRUFEQXVSLE9BQUFyUixJQUFBb1IsSUFBQUgsRUFBQS9WLFFBRUEsR0FBQW1XLEVBQUFDLFVBQUFILEdBQUEsQ0FDQSxJQU1BSSxFQU5BL00sRUFBQTJNLEVBQUEzTSxHQUFBLElBQUEyTSxFQUFBM00sR0FBQSxHQUNBZ04sRUFBQUwsRUFBQU0sYUFBQSxTQUNBeGdCLEVBQUF1Z0IsRUFBQSxJQUFBQSxFQUFBM0IsTUFBQSxLQUFBekwsS0FBQSxRQUNBeEUsRUFBQXlSLEVBQUFLLFFBQUFQLEdBQUFmLGNBQUE1TCxFQUFBdlQsRUFDQXlXLEtBQ0E3SCxLQUVBalAsT0FBQSxFQUFBeUIsT0FBQSxFQUNBc2YsRUFBQVIsRUFBQVMsV0FDQUMsRUFBQVYsRUFBQWhILFdBQ0EsSUFBQXZaLEVBQUEsRUFBQXlCLEVBQUFzZixFQUFBamUsT0FBd0M5QyxFQUFBeUIsRUFBT3pCLElBRS9DLFFBREEyZ0IsRUFBQUksRUFBQS9nQixHQUFBa2hCLFdBQ0EsVUFBQVAsSUFDQTdKLEVBQUE2SixHQUFBSSxFQUFBL2dCLEdBQUFtaEIsV0FHQSxJQUFBbmhCLEVBQUEsRUFBQXlCLEVBQUF3ZixFQUFBbmUsT0FBMkM5QyxFQUFBeUIsRUFBT3pCLElBQ2xEaVAsRUFBQTFKLEtBQUErYSxFQUFBVyxFQUFBamhCLEdBQUF3Z0IsSUFFQSxPQUFBM1IsRUFBQXZFLFFBQUEwRSxHQUFxQzhILFNBQWU3SCxPQUFBRyxFQUFBbVIsR0FFcEQsT0FBQUUsRUFBQVcsT0FBQWIsSUFDQXJSLEVBQUF1UixFQUFBWSxlQUFBZCxHQUNBMVIsRUFBQXZFLGFBQUE4RSxnQkFBQUYsRUFBQXFSLElBRUFFLEVBQUFhLFVBQUFmLElBQ0FyUixFQUFBdVIsRUFBQVksZUFBQWQsR0FDQTFSLEVBQUF2RSxRQUFBLFVBQXNDNEUsRUFBQXFSLElBR3RDMVIsRUFBQXZFLFFBQUEsY0FBcUM4RSxFQUFBbVIsR0FHckN6Z0IsRUFBQXdnQixVQUNBeGdCLEVBQUF3SyxRQUFBZ1csaUNDMUNBLFNBQUFyUzs7Ozs7OztBQVdBLFNBQUFzVCxFQUFBMWUsRUFBQVAsR0FDQSxHQUFBTyxJQUFBUCxFQUNBLFNBTUEsSUFIQSxJQUFBdUgsRUFBQWhILEVBQUFDLE9BQ0EwZSxFQUFBbGYsRUFBQVEsT0FFQTlDLEVBQUEsRUFBQXVRLEVBQUE4SyxLQUFBb0csSUFBQTVYLEVBQUEyWCxHQUF1Q3hoQixFQUFBdVEsSUFBU3ZRLEVBQ2hELEdBQUE2QyxFQUFBN0MsS0FBQXNDLEVBQUF0QyxHQUFBLENBQ0E2SixFQUFBaEgsRUFBQTdDLEdBQ0F3aEIsRUFBQWxmLEVBQUF0QyxHQUNBLE1BSUEsT0FBQTZKLEVBQUEyWCxHQUNBLEVBRUFBLEVBQUEzWCxFQUNBLEVBRUEsRUFFQSxTQUFBNlgsRUFBQXBmLEdBQ0EsT0FBQTJMLEVBQUEwVCxRQUFBLG1CQUFBMVQsRUFBQTBULE9BQUFELFNBQ0F6VCxFQUFBMFQsT0FBQUQsU0FBQXBmLEtBRUEsTUFBQUEsTUFBQXNmLFdBNkJBLElBQUFDLEVBQVdqaUIsRUFBUSxJQUNuQmtpQixFQUFBcGhCLE9BQUFrQixVQUFBQyxlQUNBa2dCLEVBQUExZixNQUFBVCxVQUFBMFosTUFDQTBHLEVBQzBCLFFBQTFCLGFBQTBCemhCLEtBRTFCLFNBQUEwaEIsRUFBQTFLLEdBQ0EsT0FBQTdXLE9BQUFrQixVQUFBNFEsU0FBQXJTLEtBQUFvWCxHQUVBLFNBQUEySyxFQUFBQyxHQUNBLE9BQUFULEVBQUFTLEtBR0EsbUJBQUFsVSxFQUFBbVUsY0FHQSxtQkFBQUEsWUFBQUYsT0FDQUUsWUFBQUYsT0FBQUMsS0FFQUEsSUFHQUEsYUFBQUUsYUFHQUYsRUFBQUcsUUFBQUgsRUFBQUcsa0JBQUFGLGdCQVNBLElBQUFHLEVBQUF4aUIsRUFBQUQsUUFBQTBpQixFQU9BQyxFQUFBLDhCQUVBLFNBQUFDLEVBQUFDLEdBQ0EsR0FBQWQsRUFBQWUsV0FBQUQsR0FBQSxDQUdBLEdBQUFYLEVBQ0EsT0FBQVcsRUFBQXBpQixLQUVBLElBQ0FzaUIsRUFEQUYsRUFBQW5RLFdBQ0FxUSxNQUFBSixHQUNBLE9BQUFJLEtBQUEsSUF5Q0EsU0FBQUMsRUFBQS9nQixFQUFBTixHQUNBLHVCQUFBTSxFQUNBQSxFQUFBZSxPQUFBckIsRUFBQU0sSUFBQXVaLE1BQUEsRUFBQTdaLEdBRUFNLEVBR0EsU0FBQWdoQixFQUFBQyxHQUNBLEdBQUFoQixJQUFBSCxFQUFBZSxXQUFBSSxHQUNBLE9BQUFuQixFQUFBa0IsUUFBQUMsR0FFQSxJQUFBQyxFQUFBUCxFQUFBTSxHQUVBLG1CQURBQyxFQUFBLEtBQUFBLEVBQUEsSUFDQSxJQW1CQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBclcsRUFBQXNXLEdBQ0EsVUFBQWYsRUFBQWdCLGdCQUNBRixVQUNBRixTQUNBQyxXQUNBcFcsV0FDQXNXLHVCQWNBLFNBQUFkLEVBQUF2aEIsRUFBQW9pQixHQUNBcGlCLEdBQUFpaUIsRUFBQWppQixHQUFBLEVBQUFvaUIsRUFBQSxLQUFBZCxFQUFBQyxJQW9DQSxTQUFBZ0IsRUFBQUwsRUFBQUMsRUFBQUssRUFBQUMsR0FFQSxHQUFBUCxJQUFBQyxFQUNBLFNBQ0csR0FBQTFCLEVBQUF5QixJQUFBekIsRUFBQTBCLEdBQ0gsV0FBQTdCLEVBQUE0QixFQUFBQyxHQUlHLEdBQUF2QixFQUFBOEIsT0FBQVIsSUFBQXRCLEVBQUE4QixPQUFBUCxHQUNILE9BQUFELEVBQUEvQyxZQUFBZ0QsRUFBQWhELFVBS0csR0FBQXlCLEVBQUErQixTQUFBVCxJQUFBdEIsRUFBQStCLFNBQUFSLEdBQ0gsT0FBQUQsRUFBQTdQLFNBQUE4UCxFQUFBOVAsUUFDQTZQLEVBQUFsVixTQUFBbVYsRUFBQW5WLFFBQ0FrVixFQUFBVSxZQUFBVCxFQUFBUyxXQUNBVixFQUFBVyxZQUFBVixFQUFBVSxXQUNBWCxFQUFBWSxhQUFBWCxFQUFBVyxXQUlHLFVBQUFaLEdBQUEsaUJBQUFBLEdBQ0gsT0FBQUMsR0FBQSxpQkFBQUEsRUFTRyxJQUFBbEIsRUFBQWlCLElBQUFqQixFQUFBa0IsSUFDSG5CLEVBQUFrQixLQUFBbEIsRUFBQW1CLE1BQ0FELGFBQUFhLGNBQ0FiLGFBQUFjLGNBQ0EsT0FDQSxJQURBMUMsRUFBQSxJQUFBMkMsV0FBQWYsRUFBQWIsUUFDQSxJQUFBNEIsV0FBQWQsRUFBQWQsU0FRRyxHQUFBWixFQUFBeUIsS0FBQXpCLEVBQUEwQixHQUNILFNBSUEsSUFBQWUsR0FGQVQsTUFBc0JQLFVBQUFDLGNBRXRCRCxPQUFBMVosUUFBQTBaLEdBQ0EsV0FBQWdCLEdBQ0FBLElBQUFULEVBQUFOLFNBQUEzWixRQUFBMlosS0FLQU0sRUFBQVAsT0FBQTVkLEtBQUE0ZCxHQUNBTyxFQUFBTixTQUFBN2QsS0FBQTZkLEdBVUEsU0FBQXZnQixFQUFBUCxFQUFBbWhCLEVBQUFXLEdBQ0EsVUFBQXZoQixRQUFBdU0sSUFBQXZNLEdBQUEsT0FBQVAsUUFBQThNLElBQUE5TSxFQUNBLFNBRUEsR0FBQXVmLEVBQUF3QyxZQUFBeGhCLElBQUFnZixFQUFBd0MsWUFBQS9oQixHQUNBLE9BQUFPLElBQUFQLEVBQ0EsR0FBQW1oQixHQUFBL2lCLE9BQUE0akIsZUFBQXpoQixLQUFBbkMsT0FBQTRqQixlQUFBaGlCLEdBQ0EsU0FDQSxJQUFBaWlCLEVBQUFDLEVBQUEzaEIsR0FDQTRoQixFQUFBRCxFQUFBbGlCLEdBQ0EsR0FBQWlpQixJQUFBRSxJQUFBRixHQUFBRSxFQUNBLFNBQ0EsR0FBQUYsRUFHQSxPQUZBMWhCLEVBQUFrZixFQUFBNWhCLEtBQUEwQyxHQUNBUCxFQUFBeWYsRUFBQTVoQixLQUFBbUMsR0FDQWtoQixFQUFBM2dCLEVBQUFQLEVBQUFtaEIsR0FFQSxJQUVBbGlCLEVBQUF2QixFQUZBMGtCLEVBQUFDLEVBQUE5aEIsR0FDQStoQixFQUFBRCxFQUFBcmlCLEdBSUEsR0FBQW9pQixFQUFBNWhCLFNBQUE4aEIsRUFBQTloQixPQUNBLFNBS0EsSUFIQTRoQixFQUFBRyxPQUNBRCxFQUFBQyxPQUVBN2tCLEVBQUEwa0IsRUFBQTVoQixPQUFBLEVBQXlCOUMsR0FBQSxFQUFRQSxJQUNqQyxHQUFBMGtCLEVBQUExa0IsS0FBQTRrQixFQUFBNWtCLEdBQ0EsU0FJQSxJQUFBQSxFQUFBMGtCLEVBQUE1aEIsT0FBQSxFQUF5QjlDLEdBQUEsRUFBUUEsSUFFakMsR0FEQXVCLEVBQUFtakIsRUFBQTFrQixJQUNBd2pCLEVBQUEzZ0IsRUFBQXRCLEdBQUFlLEVBQUFmLEdBQUFraUIsRUFBQVcsR0FDQSxTQUVBLFNBL0NBVSxDQUFBM0IsRUFBQUMsRUFBQUssRUFBQUMsSUFwQ0EsT0FBQUQsRUFBQU4sSUFBQUMsRUFBQUQsR0FBQUMsRUF3Q0EsU0FBQW9CLEVBQUE5aUIsR0FDQSw0QkFBQWhCLE9BQUFrQixVQUFBNFEsU0FBQXJTLEtBQUF1QixHQWdGQSxTQUFBcWpCLEVBQUE1QixFQUFBQyxHQUNBLElBQUFELElBQUFDLEVBQ0EsU0FHQSxzQkFBQTFpQixPQUFBa0IsVUFBQTRRLFNBQUFyUyxLQUFBaWpCLEdBQ0EsT0FBQUEsRUFBQWxILEtBQUFpSCxHQUdBLElBQ0EsR0FBQUEsYUFBQUMsRUFDQSxTQUVHLE1BQUFsZ0IsSUFJSCxPQUFBa0YsTUFBQTRjLGNBQUE1QixLQUl5QixJQUF6QkEsRUFBQWpqQixRQUF5QmdqQixHQWF6QixTQUFBOEIsRUFBQUMsRUFBQUMsRUFBQS9CLEVBQUFDLEdBQ0EsSUFBQUYsRUFFQSxzQkFBQWdDLEVBQ0EsVUFBQWxhLFVBQUEsdUNBR0EsaUJBQUFtWSxJQUNBQyxFQUFBRCxFQUNBQSxFQUFBLE1BR0FELEVBdEJBLFNBQUFnQyxHQUNBLElBQUF2aEIsRUFDQSxJQUNBdWhCLElBQ0csTUFBQWppQixHQUNIVSxFQUFBVixFQUVBLE9BQUFVLEVBZUF3aEIsQ0FBQUQsR0FFQTlCLEdBQUFELEtBQUE3aUIsS0FBQSxLQUFBNmlCLEVBQUE3aUIsS0FBQSxXQUNBOGlCLEVBQUEsSUFBQUEsRUFBQSxLQUVBNkIsSUFBQS9CLEdBQ0FELEVBQUFDLEVBQUFDLEVBQUEsNkJBQUFDLEdBR0EsSUFBQWdDLEVBQUEsaUJBQUFoQyxFQUNBaUMsR0FBQUosR0FBQXJELEVBQUEwRCxRQUFBcEMsR0FDQXFDLEdBQUFOLEdBQUEvQixJQUFBQyxFQVNBLElBUEFrQyxHQUNBRCxHQUNBTixFQUFBNUIsRUFBQUMsSUFDQW9DLElBQ0F0QyxFQUFBQyxFQUFBQyxFQUFBLHlCQUFBQyxHQUdBNkIsR0FBQS9CLEdBQUFDLElBQ0EyQixFQUFBNUIsRUFBQUMsS0FBQThCLEdBQUEvQixFQUNBLE1BQUFBLEVBdlZBWixFQUFBZ0IsZUFBQSxTQUFBck8sR0FDQWpULEtBQUExQixLQUFBLGlCQUNBMEIsS0FBQWtoQixPQUFBak8sRUFBQWlPLE9BQ0FsaEIsS0FBQW1oQixTQUFBbE8sRUFBQWtPLFNBQ0FuaEIsS0FBQStLLFNBQUFrSSxFQUFBbEksU0FDQWtJLEVBQUFtTyxTQUNBcGhCLEtBQUFvaEIsUUFBQW5PLEVBQUFtTyxRQUNBcGhCLEtBQUF3akIsa0JBQUEsSUFFQXhqQixLQUFBb2hCLFFBNkNBLFNBQUE5YyxHQUNBLE9BQUF1YyxFQUFBQyxFQUFBeGMsRUFBQTRjLFFBQUEsU0FDQTVjLEVBQUF5RyxTQUFBLElBQ0E4VixFQUFBQyxFQUFBeGMsRUFBQTZjLFVBQUEsS0FoREFzQyxDQUFBempCLE1BQ0FBLEtBQUF3akIsa0JBQUEsR0FFQSxJQUFBbkMsRUFBQXBPLEVBQUFvTyxvQkFBQUosRUFDQSxHQUFBOWEsTUFBQXVkLGtCQUNBdmQsTUFBQXVkLGtCQUFBMWpCLEtBQUFxaEIsT0FDRyxDQUVILElBQUEvZSxFQUFBLElBQUE2RCxNQUNBLEdBQUE3RCxFQUFBcWhCLE1BQUEsQ0FDQSxJQUFBL2dCLEVBQUFOLEVBQUFxaEIsTUFHQUMsRUFBQW5ELEVBQUFZLEdBQ0EzTSxFQUFBOVIsRUFBQTRFLFFBQUEsS0FBQW9jLEdBQ0EsR0FBQWxQLEdBQUEsR0FHQSxJQUFBbVAsRUFBQWpoQixFQUFBNEUsUUFBQSxLQUFBa04sRUFBQSxHQUNBOVIsSUFBQWtoQixVQUFBRCxFQUFBLEdBR0E3akIsS0FBQTJqQixNQUFBL2dCLEtBTUFnZCxFQUFBbUUsU0FBQXpELEVBQUFnQixlQUFBbmIsT0E2Q0FtYSxFQUFBVyxPQVlBWCxFQUFBQyxLQU1BRCxFQUFBMEQsTUFBQSxTQUFBOUMsRUFBQUMsRUFBQUMsR0FDQUYsR0FBQUMsR0FBQUYsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQSxLQUFBZCxFQUFBMEQsUUFNQTFELEVBQUEyRCxTQUFBLFNBQUEvQyxFQUFBQyxFQUFBQyxHQUNBRixHQUFBQyxHQUNBRixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLEtBQUFkLEVBQUEyRCxXQU9BM0QsRUFBQTRELFVBQUEsU0FBQWhELEVBQUFDLEVBQUFDLEdBQ0FHLEVBQUFMLEVBQUFDLEdBQUEsSUFDQUYsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQSxZQUFBZCxFQUFBNEQsWUFJQTVELEVBQUE2RCxnQkFBQSxTQUFBakQsRUFBQUMsRUFBQUMsR0FDQUcsRUFBQUwsRUFBQUMsR0FBQSxJQUNBRixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLGtCQUFBZCxFQUFBNkQsa0JBdUhBN0QsRUFBQThELGFBQUEsU0FBQWxELEVBQUFDLEVBQUFDLEdBQ0FHLEVBQUFMLEVBQUFDLEdBQUEsSUFDQUYsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQSxlQUFBZCxFQUFBOEQsZUFJQTlELEVBQUErRCxtQkFDQSxTQUFBQSxFQUFBbkQsRUFBQUMsRUFBQUMsR0FDQUcsRUFBQUwsRUFBQUMsR0FBQSxJQUNBRixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLHFCQUFBaUQsSUFRQS9ELEVBQUFnRSxZQUFBLFNBQUFwRCxFQUFBQyxFQUFBQyxHQUNBRixJQUFBQyxHQUNBRixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBLE1BQUFkLEVBQUFnRSxjQU9BaEUsRUFBQWlFLGVBQUEsU0FBQXJELEVBQUFDLEVBQUFDLEdBQ0FGLElBQUFDLEdBQ0FGLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUEsTUFBQWQsRUFBQWlFLGlCQStFQWpFLEVBQUFrRSxPQUFBLFNBQUF0QixFQUFBdmhCLEVBQUF5ZixHQUNBNEIsR0FBQSxFQUFBRSxFQUFBdmhCLEVBQUF5ZixJQUlBZCxFQUFBbUUsYUFBQSxTQUFBdkIsRUFBQXZoQixFQUFBeWYsR0FDQTRCLEdBQUEsRUFBQUUsRUFBQXZoQixFQUFBeWYsSUFHQWQsRUFBQW9FLFFBQUEsU0FBQXBpQixHQUFnQyxHQUFBQSxFQUFBLE1BQUFBLEdBRWhDLElBQUFvZ0IsRUFBQWprQixPQUFBMFcsTUFBQSxTQUFBRyxHQUNBLElBQUFILEtBQ0EsUUFBQTdWLEtBQUFnVyxFQUNBdUssRUFBQTNoQixLQUFBb1gsRUFBQWhXLElBQUE2VixFQUFBN1IsS0FBQWhFLEdBRUEsT0FBQTZWLG1EQ3RlQSxJQUFBMEssRUFBQXBoQixPQUFBa0IsVUFBQUMsZUFDQXNhLEVBQUF6YixPQUFBa0IsVUFBQTRRLFNBQ0E3UixFQUFBRCxPQUFBQyxlQUNBaW1CLEVBQUFsbUIsT0FBQW1tQix5QkFFQTliLEVBQUEsU0FBQStiLEdBQ0EseUJBQUF6a0IsTUFBQTBJLFFBQ0ExSSxNQUFBMEksUUFBQStiLEdBR0EsbUJBQUEzSyxFQUFBaGMsS0FBQTJtQixJQUdBQyxFQUFBLFNBQUF4UCxHQUNBLElBQUFBLEdBQUEsb0JBQUE0RSxFQUFBaGMsS0FBQW9YLEdBQ0EsU0FHQSxJQVNBaFcsRUFUQXlsQixFQUFBbEYsRUFBQTNoQixLQUFBb1gsRUFBQSxlQUNBMFAsRUFBQTFQLEVBQUEvVSxhQUFBK1UsRUFBQS9VLFlBQUFaLFdBQUFrZ0IsRUFBQTNoQixLQUFBb1gsRUFBQS9VLFlBQUFaLFVBQUEsaUJBRUEsR0FBQTJWLEVBQUEvVSxjQUFBd2tCLElBQUFDLEVBQ0EsU0FNQSxJQUFBMWxCLEtBQUFnVyxHQUVBLGdCQUFBaFcsR0FBQXVnQixFQUFBM2hCLEtBQUFvWCxFQUFBaFcsSUFJQWtkLEVBQUEsU0FBQXBSLEVBQUE2SCxHQUNBdlUsR0FBQSxjQUFBdVUsRUFBQTNVLEtBQ0FJLEVBQUEwTSxFQUFBNkgsRUFBQTNVLE1BQ0FLLFlBQUEsRUFDQXNtQixjQUFBLEVBQ0FqbUIsTUFBQWlVLEVBQUFpUyxTQUNBQyxVQUFBLElBR0EvWixFQUFBNkgsRUFBQTNVLE1BQUEyVSxFQUFBaVMsVUFLQUUsRUFBQSxTQUFBOVAsRUFBQWhYLEdBQ0EsaUJBQUFBLEVBQUEsQ0FDQSxJQUFBdWhCLEVBQUEzaEIsS0FBQW9YLEVBQUFoWCxHQUNBLE9BQ0csR0FBQXFtQixFQUdILE9BQUFBLEVBQUFyUCxFQUFBaFgsR0FBQVUsTUFJQSxPQUFBc1csRUFBQWhYLElBR0FSLEVBQUFELFFBQUEsU0FBQXduQixJQUNBLElBQUFwUyxFQUFBM1UsRUFBQWduQixFQUFBQyxFQUFBQyxFQUFBQyxFQUNBcmEsRUFBQWhDLFVBQUEsR0FDQXJMLEVBQUEsRUFDQThDLEVBQUF1SSxVQUFBdkksT0FDQTZrQixHQUFBLEVBYUEsSUFWQSxrQkFBQXRhLElBQ0FzYSxFQUFBdGEsRUFDQUEsRUFBQWhDLFVBQUEsT0FFQXJMLEVBQUEsSUFFQSxNQUFBcU4sR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsS0FDQUEsTUFHT3JOLEVBQUE4QyxJQUFZOUMsRUFHbkIsVUFGQWtWLEVBQUE3SixVQUFBckwsSUFJQSxJQUFBTyxLQUFBMlUsRUFDQXFTLEVBQUFGLEVBQUFoYSxFQUFBOU0sR0FJQThNLEtBSEFtYSxFQUFBSCxFQUFBblMsRUFBQTNVLE1BS0FvbkIsR0FBQUgsSUFBQVQsRUFBQVMsS0FBQUMsRUFBQTFjLEVBQUF5YyxNQUNBQyxHQUNBQSxHQUFBLEVBQ0FDLEVBQUFILEdBQUF4YyxFQUFBd2MsU0FFQUcsRUFBQUgsR0FBQVIsRUFBQVEsUUFJQTlJLEVBQUFwUixHQUEyQjlNLE9BQUE0bUIsU0FBQUcsRUFBQUssRUFBQUQsRUFBQUYsV0FHckIsSUFBQUEsR0FDTi9JLEVBQUFwUixHQUEyQjlNLE9BQUE0bUIsU0FBQUssS0FRM0IsT0FBQW5hLHFCQ25IQSxTQUFBWSxHQUFBLElBQUEyWixPQUFBLElBQUEzWixNQUNBLG9CQUFBMUgsWUFDQTZILE9BQ0EwQyxFQUFBbkMsU0FBQS9NLFVBQUFrUCxNQWlCQSxTQUFBK1csRUFBQWpVLEVBQUFrVSxHQUNBN2xCLEtBQUE4bEIsSUFBQW5VLEVBQ0EzUixLQUFBK2xCLFNBQUFGLEVBZkFob0IsRUFBQXFHLFdBQUEsV0FDQSxXQUFBMGhCLEVBQUEvVyxFQUFBM1EsS0FBQWdHLFdBQUF5aEIsRUFBQXZjLFdBQUE3QixlQUVBMUosRUFBQTBHLFlBQUEsV0FDQSxXQUFBcWhCLEVBQUEvVyxFQUFBM1EsS0FBQXFHLFlBQUFvaEIsRUFBQXZjLFdBQUE1RSxnQkFFQTNHLEVBQUEwSixhQUNBMUosRUFBQTJHLGNBQUEsU0FBQTZKLEdBQ0FBLEdBQ0FBLEVBQUEyWCxTQVFBSixFQUFBam1CLFVBQUFzbUIsTUFBQUwsRUFBQWptQixVQUFBdW1CLElBQUEsYUFDQU4sRUFBQWptQixVQUFBcW1CLE1BQUEsV0FDQWhtQixLQUFBK2xCLFNBQUE3bkIsS0FBQXluQixFQUFBM2xCLEtBQUE4bEIsTUFJQWpvQixFQUFBc29CLE9BQUEsU0FBQTNWLEVBQUE0VixHQUNBN2UsYUFBQWlKLEVBQUE2VixnQkFDQTdWLEVBQUE4VixhQUFBRixHQUdBdm9CLEVBQUEwb0IsU0FBQSxTQUFBL1YsR0FDQWpKLGFBQUFpSixFQUFBNlYsZ0JBQ0E3VixFQUFBOFYsY0FBQSxHQUdBem9CLEVBQUEyb0IsYUFBQTNvQixFQUFBOEUsT0FBQSxTQUFBNk4sR0FDQWpKLGFBQUFpSixFQUFBNlYsZ0JBRUEsSUFBQUQsRUFBQTVWLEVBQUE4VixhQUNBRixHQUFBLElBQ0E1VixFQUFBNlYsZUFBQW5pQixXQUFBLFdBQ0FzTSxFQUFBaVcsWUFDQWpXLEVBQUFpVyxjQUNLTCxLQUtMem9CLEVBQVEsSUFJUkUsRUFBQTJaLGFBQUEsb0JBQUFsVCxXQUFBa1QsbUJBQ0EsSUFBQXhMLEtBQUF3TCxjQUNBeFgsV0FBQXdYLGFBQ0EzWixFQUFBNm9CLGVBQUEsb0JBQUFwaUIsV0FBQW9pQixxQkFDQSxJQUFBMWEsS0FBQTBhLGdCQUNBMW1CLFdBQUEwbUIsbURDOURBLFNBQUExYSxFQUFBMEIsSUFBQSxTQUFBMUIsRUFBQW1CLEdBQ0EsYUFFQSxJQUFBbkIsRUFBQXdMLGFBQUEsQ0FJQSxJQUlBbVAsRUFKQUMsRUFBQSxFQUNBQyxLQUNBQyxHQUFBLEVBQ0FDLEVBQUEvYSxFQUFBaUcsU0FvSkErVSxFQUFBdm9CLE9BQUE0akIsZ0JBQUE1akIsT0FBQTRqQixlQUFBclcsR0FDQWdiLE9BQUE5aUIsV0FBQThpQixFQUFBaGIsRUFHVSx3QkFBQXVFLFNBQUFyUyxLQUFBOE4sRUFBQTBCLFNBcEZWaVosRUFBQSxTQUFBcE4sR0FDQTdMLEVBQUFpQixTQUFBLFdBQTBDc1ksRUFBQTFOLE1BSTFDLFdBR0EsR0FBQXZOLEVBQUFrYixjQUFBbGIsRUFBQW1iLGNBQUEsQ0FDQSxJQUFBQyxHQUFBLEVBQ0FDLEVBQUFyYixFQUFBc2IsVUFNQSxPQUxBdGIsRUFBQXNiLFVBQUEsV0FDQUYsR0FBQSxHQUVBcGIsRUFBQWtiLFlBQUEsUUFDQWxiLEVBQUFzYixVQUFBRCxFQUNBRCxHQXdFS0csR0FwRUwsV0FLQSxJQUFBQyxFQUFBLGdCQUFBcE8sS0FBQXFPLFNBQUEsSUFDQUMsRUFBQSxTQUFBQyxHQUNBQSxFQUFBdFcsU0FBQXJGLEdBQ0EsaUJBQUEyYixFQUFBemEsTUFDQSxJQUFBeWEsRUFBQXphLEtBQUExRixRQUFBZ2dCLElBQ0FQLEdBQUFVLEVBQUF6YSxLQUFBbU0sTUFBQW1PLEVBQUEzbUIsVUFJQW1MLEVBQUFpUixpQkFDQWpSLEVBQUFpUixpQkFBQSxVQUFBeUssR0FBQSxHQUVBMWIsRUFBQTRiLFlBQUEsWUFBQUYsR0FHQWYsRUFBQSxTQUFBcE4sR0FDQXZOLEVBQUFrYixZQUFBTSxFQUFBak8sRUFBQSxNQWlEQXNPLEdBRUs3YixFQUFBOGIsZUEvQ0wsV0FDQSxJQUFBQyxFQUFBLElBQUFELGVBQ0FDLEVBQUFDLE1BQUFWLFVBQUEsU0FBQUssR0FFQVYsRUFEQVUsRUFBQXphLE9BSUF5WixFQUFBLFNBQUFwTixHQUNBd08sRUFBQUUsTUFBQWYsWUFBQTNOLElBeUNBMk8sR0FFS25CLEdBQUEsdUJBQUFBLEVBQUFuUyxjQUFBLFVBdkNMLFdBQ0EsSUFBQXVULEVBQUFwQixFQUFBcUIsZ0JBQ0F6QixFQUFBLFNBQUFwTixHQUdBLElBQUE4TyxFQUFBdEIsRUFBQW5TLGNBQUEsVUFDQXlULEVBQUFDLG1CQUFBLFdBQ0FyQixFQUFBMU4sR0FDQThPLEVBQUFDLG1CQUFBLEtBQ0FILEVBQUExVCxZQUFBNFQsR0FDQUEsRUFBQSxNQUVBRixFQUFBL1QsWUFBQWlVLElBNkJBRSxHQXhCQTVCLEVBQUEsU0FBQXBOLEdBQ0FyVixXQUFBK2lCLEVBQUEsRUFBQTFOLElBOEJBeU4sRUFBQXhQLGFBMUtBLFNBQUEwQixHQUVBLG1CQUFBQSxJQUNBQSxFQUFBLElBQUF4TSxTQUFBLEdBQUF3TSxJQUlBLElBREEsSUFBQXRLLEVBQUEsSUFBQXhPLE1BQUFnSixVQUFBdkksT0FBQSxHQUNBOUMsRUFBQSxFQUFxQkEsRUFBQTZRLEVBQUEvTixPQUFpQjlDLElBQ3RDNlEsRUFBQTdRLEdBQUFxTCxVQUFBckwsRUFBQSxHQUdBLElBQUF5cUIsR0FBa0J0UCxXQUFBdEssUUFHbEIsT0FGQWlZLEVBQUFELEdBQUE0QixFQUNBN0IsRUFBQUMsR0FDQUEsS0E2SkFJLEVBQUFOLGlCQTFKQSxTQUFBQSxFQUFBbk4sVUFDQXNOLEVBQUF0TixHQXlCQSxTQUFBME4sRUFBQTFOLEdBR0EsR0FBQXVOLEVBR0E1aUIsV0FBQStpQixFQUFBLEVBQUExTixPQUNTLENBQ1QsSUFBQWlQLEVBQUEzQixFQUFBdE4sR0FDQSxHQUFBaVAsRUFBQSxDQUNBMUIsR0FBQSxFQUNBLEtBakNBLFNBQUEwQixHQUNBLElBQUF0UCxFQUFBc1AsRUFBQXRQLFNBQ0F0SyxFQUFBNFosRUFBQTVaLEtBQ0EsT0FBQUEsRUFBQS9OLFFBQ0EsT0FDQXFZLElBQ0EsTUFDQSxPQUNBQSxFQUFBdEssRUFBQSxJQUNBLE1BQ0EsT0FDQXNLLEVBQUF0SyxFQUFBLEdBQUFBLEVBQUEsSUFDQSxNQUNBLE9BQ0FzSyxFQUFBdEssRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxNQUNBLFFBQ0FzSyxFQUFBckssTUFBQTFCLEVBQUF5QixJQWlCQUwsQ0FBQWlhLEdBQ2lCLFFBQ2pCOUIsRUFBQW5OLEdBQ0F1TixHQUFBLE1BdkVBLENBeUxDLG9CQUFBeGlCLFVBQUEsSUFBQTBILEVBQUFoTSxLQUFBZ00sRUFBQTFILDJEQzNLRHhHLEVBQUFELFFBSkEsU0FBQXlYLEdBQ0EsY0FBQUEsR0FBQSxpQkFBQUEsaUNDVEEsSUFBQUgsRUFBV3hYLEVBQVEsSUFDbkI4cUIsRUFBQSxtQkFBQTNwQixRQUFBLGlCQUFBQSxPQUFBLE9BRUFvYixFQUFBemIsT0FBQWtCLFVBQUE0USxTQUNBekksRUFBQTFILE1BQUFULFVBQUFtSSxPQUNBNGdCLEVBQUFqcUIsT0FBQUMsZUFtQkFpcUIsRUFBQUQsR0FiQSxXQUNBLElBQUFwVCxLQUNBLElBR0EsUUFBQXNULEtBRkFGLEVBQUFwVCxFQUFBLEtBQWdDM1csWUFBQSxFQUFBSyxNQUFBc1csSUFFaENBLEVBQ0EsU0FFQSxPQUFBQSxFQUFBMU4sSUFBQTBOLEVBQ0UsTUFBQXJVLEdBQ0YsVUFHQTRuQixHQUVBbnFCLEVBQUEsU0FBQWUsRUFBQW5CLEVBQUFVLEVBQUE4cEIsTUFDQXhxQixLQUFBbUIsSUFwQkEsU0FBQXFTLEdBQ0EseUJBQUFBLEdBQUEsc0JBQUFvSSxFQUFBaGMsS0FBQTRULEdBbUJBNk8sQ0FBQW1JLFdBR0FILEVBQ0FELEVBQUFqcEIsRUFBQW5CLEdBQ0EybUIsY0FBQSxFQUNBdG1CLFlBQUEsRUFDQUssUUFDQW1tQixVQUFBLElBR0ExbEIsRUFBQW5CLEdBQUFVLElBSUErcEIsRUFBQSxTQUFBdHBCLEVBQUFrSyxHQUNBLElBQUFxZixFQUFBNWYsVUFBQXZJLE9BQUEsRUFBQXVJLFVBQUEsTUFDQThSLEVBQUEvRixFQUFBeEwsR0FDQThlLElBQ0F2TixFQUFBcFQsRUFBQTVKLEtBQUFnZCxFQUFBemMsT0FBQXdxQixzQkFBQXRmLEtBRUEsUUFBQTVMLEVBQUEsRUFBZ0JBLEVBQUFtZCxFQUFBcmEsT0FBa0I5QyxHQUFBLEVBQ2xDVyxFQUFBZSxFQUFBeWIsRUFBQW5kLEdBQUE0TCxFQUFBdVIsRUFBQW5kLElBQUFpckIsRUFBQTlOLEVBQUFuZCxNQUlBZ3JCLEVBQUFKLHdCQUVBN3FCLEVBQUFELFFBQUFrckIsZ0NDdkRBLElBQUFHLEVBQVN2ckIsRUFBUSxJQUVqQndyQixFQUFBLFNBQUF4bkIsR0FDQSxNQUFBQSxHQW1CQThtQixFQUFBLG1CQUFBM3BCLFFBQUEsaUJBQUFBLE9BQUEsT0FFQWhCLEVBQUFELFFBQUEsU0FBQXVyQixHQUNBRixFQUFBRyx1QkFBQUQsR0FFQSxJQUFBOVQsS0FHQSxJQUFBbVQsRUFBQSxDQUNBLElBQUFTLEVBQUFJLFFBQUFGLEdBQ0EsVUFBQXBnQixVQUFBLGtGQUdBLE9BN0JBLFNBQUFzTSxFQUFBaVUsR0FDQSxRQUFBeHJCLEVBQUEsRUFBZ0JBLEVBQUF3ckIsRUFBQTFvQixTQUFvQjlDLEVBQUEsQ0FDcEMsSUFBQXlyQixFQUFBRCxFQUFBeHJCLEdBQ0EsY0FBQW1yQixFQUFBTyxLQUFBRCxHQUNBLFVBQUF4Z0IsVUFBQSxrREFHQSxJQUFBMUosRUFBQTRwQixFQUFBUSxJQUFBRixFQUFBLEtBQ0F4cUIsRUFBQWtxQixFQUFBUSxJQUFBRixFQUFBLEtBQ0FHLEVBQUFULEVBQUFVLGNBQUF0cUIsR0FDQTRwQixFQUFBVywwQkFBQXZVLEVBQUFxVSxFQUFBM3FCLElBa0JBOHFCLENBQUF4VSxFQUFBOFQsR0FDQTlULEVBYUEsSUFEQSxJQUFBeVUsRUFBQWIsRUFBQWMsWUFBQVosS0FDQSxDQUNBLElBQUExbkIsRUFBQXduQixFQUFBZSxhQUFBRixHQUNBLFFBQUFyb0IsRUFDQSxPQUFBNFQsRUFHQSxJQUFBNFUsRUFBQWhCLEVBQUFpQixjQUFBem9CLEdBQ0EsY0FBQXduQixFQUFBTyxLQUFBUyxHQUFBLENBQ0EsSUFBQXZvQixFQUFBLElBQUFxSCxVQUFBLGtEQUNBLE9BQUFrZ0IsRUFBQWtCLGNBQUFMLEVBQUFaLEVBQUF4bkIsSUFHQSxJQUNBLElBQUFyQyxFQUFBNHBCLEVBQUFRLElBQUFRLEVBQUEsS0FDQWxyQixFQUFBa3FCLEVBQUFRLElBQUFRLEVBQUEsS0FDQVAsRUFBQVQsRUFBQVUsY0FBQXRxQixHQUNBNHBCLEVBQUFXLDBCQUFBdlUsRUFBQXFVLEVBQUEzcUIsR0FDRyxNQUFBaUMsR0FDSCxPQUFBaW9CLEVBQUFrQixjQUFBTCxFQUFBWixFQUFBbG9CLHNCQ3BFQW5ELEVBQUFELFFBQUEsU0FBQW1CLEdBQ0EsY0FBQUEsR0FBQSxtQkFBQUEsR0FBQSxpQkFBQUEsaUNDNEJBLElBRUFxckIsRUFBQTVyQixPQUFBbW1CLHlCQUNBLFdBQWlCLE9BQUFubUIsT0FBQW1tQix5QkFBQXhiLFVBQUEsVUFBQXhLLElBQWpCLEdBQ0EsV0FBZ0IsVUFBQW9LLFdBRWhCeWYsRUFBQSxtQkFBQTNwQixRQUFBLGlCQUFBQSxPQUFBd3JCLFNBRUFDLEVBQUE5ckIsT0FBQTRqQixnQkFBQSxTQUFBemEsR0FBc0QsT0FBQUEsRUFBQXpILFdBUXREcXFCLE9BaEJBcmQsRUFrQkFzZCxFQUFBLG9CQUFBeEksZ0JBbEJBOVUsRUFrQkFvZCxFQUFBdEksWUFFQXlJLEdBQ0FDLFlBQUF2cUIsTUFDQXdxQixrQkFBQSxvQkFBQXpLLGlCQXRCQWhULEVBc0JBZ1QsWUFDQTBLLDJCQUFBLG9CQUFBMUssaUJBdkJBaFQsRUF1QkFnVCxZQUFBeGdCLFVBQ0FtckIsNkJBQUFyQyxFQUFBOEIsS0FBQXpyQixPQUFBd3JCLGtCQXhCQW5kLEVBeUJBNGQscUJBQUEzcUIsTUFBQVQsVUFDQXFyQix5QkFBQTVxQixNQUFBVCxVQUFBNHBCLFFBQ0EwQix5QkFBQTdxQixNQUFBVCxVQUFBeVYsUUFDQThWLHNCQUFBOXFCLE1BQUFULFVBQUF3VixLQUNBZ1csd0JBQUEvcUIsTUFBQVQsVUFBQXlyQixPQUNBQywwQ0E5QkFsZSxFQStCQW1lLHlCQS9CQW5lLEVBZ0NBb2Usa0NBaENBcGUsRUFpQ0FxZSwwQkFqQ0FyZSxFQWtDQXNlLGtDQWxDQXRlLEVBbUNBdWUsbUNBbkNBdmUsRUFvQ0F3ZSw2QkFBQW5CLEdBQUEvQixHQUFBM3BCLE9BQUE4c0IsY0FBQXBCLEVBQUExckIsT0FBQThzQixzQkFwQ0F6ZSxFQXFDQTBlLGNBQUEsb0JBQUFDLGFBckNBM2UsRUFxQ0EyZSxRQUNBQyxjQUFBM1UsUUFDQTRVLHVCQUFBNVUsUUFBQXpYLFVBQ0Fzc0IsZUFBQSxvQkFBQTdMLGNBeENBalQsRUF3Q0FpVCxTQUNBOEwsd0JBQUEsb0JBQUE5TCxjQXpDQWpULEVBeUNBaVQsU0FBQXpnQixVQUNBd3NCLFdBQUFqTyxLQUNBa08sb0JBQUFsTyxLQUFBdmUsVUFDQTBzQixnQkFBQUMsVUFDQUMseUJBQUFDLG1CQUNBQyxnQkFBQUMsVUFDQUMseUJBQUE1YixtQkFDQTZiLFlBQUF6bUIsTUFDQTBtQixxQkFBQTFtQixNQUFBeEcsVUFDQW10QixXQUFBbmdCLEtBQ0FvZ0IsZ0JBQUFDLFVBQ0FDLHlCQUFBRCxVQUFBcnRCLFVBQ0F1dEIsbUJBQUEsb0JBQUFuTCxrQkFyREE1VSxFQXFEQTRVLGFBQ0FvTCw0QkFBQSxvQkFBQXBMLGtCQXREQTVVLEVBc0RBNFUsYUFBQXBpQixVQUNBeXRCLG1CQUFBLG9CQUFBcEwsa0JBdkRBN1UsRUF1REE2VSxhQUNBcUwsNEJBQUEsb0JBQUFyTCxrQkF4REE3VSxFQXdEQTZVLGFBQUFyaUIsVUFDQTJ0QixlQUFBNWdCLFNBQ0E2Z0Isd0JBQUE3Z0IsU0FBQS9NLFVBQ0E2dEIscUJBM0RBcmdCLEVBNERBc2dCLDZCQTVEQXRnQixFQTZEQXVnQiw4QkE3REF2Z0IsRUE4REF3Z0IsZ0JBQUEsb0JBQUFDLGVBOURBemdCLEVBOERBeWdCLFVBQ0FDLHlCQUFBLG9CQUFBRCxlQS9EQXpnQixFQStEQXlnQixVQUFBanVCLFVBQ0FtdUIsaUJBQUEsb0JBQUFDLGdCQWhFQTVnQixFQWdFQTRnQixXQUNBQywwQkFBQSxvQkFBQUQsZ0JBakVBNWdCLEVBaUVBeWdCLFVBQUFqdUIsVUFDQXN1QixpQkFBQSxvQkFBQUMsZ0JBbEVBL2dCLEVBa0VBK2dCLFdBQ0FDLDBCQUFBLG9CQUFBRCxnQkFuRUEvZ0IsRUFtRUErZ0IsV0FBQXZ1QixVQUNBeXVCLGVBQUFDLFNBQ0FDLFlBQUFDLE1BQ0FDLHdCQUFBL0YsRUFBQThCLE9BQUF6ckIsT0FBQXdyQixtQkF0RUFuZCxFQXVFQXNoQixXQUFBemQsS0FDQTBkLGdCQUFBMWQsS0FBQTJkLE1BQ0FDLFVBQUEsb0JBQUFDLFNBekVBMWhCLEVBeUVBMGhCLElBQ0FDLDJCQUFBLG9CQUFBRCxLQUFBcEcsRUFBQThCLEdBQUEsSUFBQXNFLEtBQUEvdkIsT0FBQXdyQixrQkExRUFuZCxFQTJFQTRoQixtQkFBQSxvQkFBQUYsU0EzRUExaEIsRUEyRUEwaEIsSUFBQWx2QixVQUNBcXZCLFdBQUE1VixLQUNBNlYsYUFBQUMsT0FDQUMsc0JBQUFELE9BQUF2dkIsVUFDQXl2QixhQUFBM3dCLE9BQ0E0d0Isc0JBQUE1d0IsT0FBQWtCLFVBQ0EydkIsd0JBQUE3d0IsT0FBQWtCLFVBQUE0USxTQUNBZ2YsdUJBQUE5d0IsT0FBQWtCLFVBQUE2dkIsUUFDQUMsaUJBQUFDLFdBQ0FDLGVBQUFDLFNBQ0FDLGNBQUEsb0JBQUFDLGFBckZBM2lCLEVBcUZBMmlCLFFBQ0FDLHVCQUFBLG9CQUFBRCxhQXRGQTNpQixFQXNGQTJpQixRQUFBbndCLFVBQ0Fxd0Isd0JBQUEsb0JBQUFGLGFBdkZBM2lCLEVBdUZBMmlCLFFBQUFud0IsVUFBQXNFLEtBQ0Fnc0Isa0JBQUEsb0JBQUFILGFBeEZBM2lCLEVBd0ZBMmlCLFFBQUE1ZCxJQUNBZ2UscUJBQUEsb0JBQUFKLGFBekZBM2lCLEVBeUZBMmlCLFFBQUFLLE9BQ0FDLHNCQUFBLG9CQUFBTixhQTFGQTNpQixFQTBGQTJpQixRQUFBTyxRQUNBQyxZQUFBLG9CQUFBQyxXQTNGQXBqQixFQTJGQW9qQixNQUNBQyxpQkFBQUMsV0FDQUMsMEJBQUFELFdBQUE5d0IsVUFDQWd4QixxQkFBQUMsZUFDQUMsOEJBQUFELGVBQUFqeEIsVUFDQW14QixjQUFBLG9CQUFBQyxhQWhHQTVqQixFQWdHQTRqQixRQUNBQyxhQUFBQyxPQUNBQyxzQkFBQUQsT0FBQXR4QixVQUNBd3hCLFVBQUEsb0JBQUFDLFNBbkdBamtCLEVBbUdBaWtCLElBQ0FDLDJCQUFBLG9CQUFBRCxLQUFBM0ksRUFBQThCLEdBQUEsSUFBQTZHLEtBQUF0eUIsT0FBQXdyQixrQkFwR0FuZCxFQXFHQW1rQixtQkFBQSxvQkFBQUYsU0FyR0Fqa0IsRUFxR0Fpa0IsSUFBQXp4QixVQUNBNHhCLHdCQUFBLG9CQUFBQyx1QkF0R0Fya0IsRUFzR0Fxa0Isa0JBQ0FDLGlDQUFBLG9CQUFBRCx1QkF2R0Fya0IsRUF1R0Fxa0Isa0JBQUE3eEIsVUFDQSt4QixhQUFBQyxPQUNBQyw4QkFBQW5KLEVBQUE4QixFQUFBLEdBQUF6ckIsT0FBQXdyQixrQkF6R0FuZCxFQTBHQTBrQixzQkFBQUYsT0FBQWh5QixVQUNBbXlCLGFBQUFySixFQUFBM3BCLFlBM0dBcU8sRUE0R0E0a0Isc0JBQUF0SixFQUFBM3BCLE9BQUFhLGVBNUdBd04sRUE2R0E2a0Isa0JBQUFDLFlBQ0FDLDJCQUFBRCxZQUFBdHlCLFVBQ0F3eUIscUJBQUE5SCxFQUNBK0gsaUJBQUEzSCxFQUNBNEgsMEJBQUE1SCxJQUFBOXFCLGVBakhBd04sRUFrSEFtbEIsZ0JBQUF0cEIsVUFDQXVwQix5QkFBQXZwQixVQUFBckosVUFDQTZ5QixpQkFBQSxvQkFBQXZRLGdCQXBIQTlVLEVBb0hBOFUsV0FDQXdRLDBCQUFBLG9CQUFBeFEsZ0JBckhBOVUsRUFxSEE4VSxXQUFBdGlCLFVBQ0EreUIsd0JBQUEsb0JBQUFDLHVCQXRIQXhsQixFQXNIQXdsQixrQkFDQUMsaUNBQUEsb0JBQUFELHVCQXZIQXhsQixFQXVIQXdsQixrQkFBQWh6QixVQUNBa3pCLGtCQUFBLG9CQUFBQyxpQkF4SEEzbEIsRUF3SEEybEIsWUFDQUMsMkJBQUEsb0JBQUFELGlCQXpIQTNsQixFQXlIQTJsQixZQUFBbnpCLFVBQ0FxekIsa0JBQUEsb0JBQUFDLGlCQTFIQTlsQixFQTBIQThsQixZQUNBQywyQkFBQSxvQkFBQUQsaUJBM0hBOWxCLEVBMkhBOGxCLFlBQUF0ekIsVUFDQXd6QixlQUFBQyxTQUNBQyx3QkFBQUQsU0FBQXp6QixVQUNBMnpCLGNBQUEsb0JBQUFDLGFBOUhBcG1CLEVBOEhBb21CLFFBQ0FDLHVCQUFBLG9CQUFBRCxhQS9IQXBtQixFQStIQW9tQixRQUFBNXpCLFVBQ0E4ekIsY0FBQSxvQkFBQUMsYUFoSUF2bUIsRUFnSUF1bUIsUUFDQUMsdUJBQUEsb0JBQUFELGFBaklBdm1CLEVBaUlBdW1CLFFBQUEvekIsV0FHQTdCLEVBQUFELFFBQUEsU0FBQVMsRUFBQXMxQixHQUNBLEdBQUF4cUIsVUFBQXZJLE9BQUEscUJBQUEreUIsRUFDQSxVQUFBNXFCLFVBQUEsNkNBR0EsSUFBQTFKLEVBQUEsS0FBQWhCLEVBQ0EsS0FBQWdCLEtBQUFvckIsR0FDQSxVQUFBdUgsWUFBQSxhQUFBM3pCLEVBQUEsb0JBSUEsWUFBQW9zQixFQUFBcHJCLEtBQUFzMEIsRUFDQSxVQUFBNXFCLFVBQUEsYUFBQTFLLEVBQUEsd0RBRUEsT0FBQW9zQixFQUFBcHJCLG1CQy9LQXhCLEVBQUFELFFBQUFxeEIsT0FBQVgsT0FBQSxTQUFBM3RCLEdBQ0EsT0FBQUEscUJDREEsSUFBQWl6QixFQUFBM0UsT0FBQVgsT0FBQSxTQUFBM3RCLEdBQTJDLE9BQUFBLE1BRTNDOUMsRUFBQUQsUUFBQXF4QixPQUFBYixVQUFBLFNBQUF6bUIsR0FBa0QsdUJBQUFBLElBQUFpc0IsRUFBQWpzQixRQUFBa3NCLEtBQUFsc0IsS0FBQWtzQixvQkNGbERoMkIsRUFBQUQsUUFBQSxTQUFBazJCLEdBQ0EsT0FBQUEsR0FBQSx1QkNEQWoyQixFQUFBRCxRQUFBLFNBQUFrMkIsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixFQUFBQyxFQUNBLE9BQUE1YSxLQUFBOGEsTUFBQUQsR0FBQSxFQUFBQSxJQUFBRCxrQ0NBQSxJQUFBcGEsRUFBcUJqYyxFQUFRLElBRTdCRyxFQUFBRCxRQUFBLFdBQ0EseUJBQUFZLE9BQUEwMUIsWUFBQTExQixPQUFBMDFCLFlBQUF2YSxpQ0NMZSxTQUFBd2EsRUFBQXZiLEdBQ2YsSUFBQXBELEVBQ0EzVyxFQUFBK1osRUFBQS9aLE9BYUEsTUFYQSxtQkFBQUEsRUFDQUEsRUFBQTBELFdBQ0FpVCxFQUFBM1csRUFBQTBELFlBRUFpVCxFQUFBM1csRUFBQSxjQUNBQSxFQUFBMEQsV0FBQWlULEdBR0FBLEVBQUEsZUFHQUEsRUFmQTlYLEVBQUFVLEVBQUErUixFQUFBLHNCQUFBZ2tCLG1DQ0FBLFNBQUE1YyxFQUFBOUosR0FDQWpQLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBMEI5Q25CLEVBQUF3SyxRQXpCQSxXQUNBLHVCQUFBZ3NCLGlCQUFBLENBQ0EsSUFBQUMsRUFBQXJpQixTQUFBMEUsZUFBQSxJQUNBNGQsS0FDQUMsRUFBQSxFQU1BLE9BTEEsSUFBQUgsaUJBQUEsV0FDQSxLQUFBRSxFQUFBMXpCLFFBQ0EwekIsRUFBQUUsT0FBQUYsS0FFU0csUUFBQUosR0FBbUJLLGVBQUEsSUFDNUIsU0FBQTdpQixHQUNBeWlCLEVBQUFqeEIsS0FBQXdPLEdBQ0F3aUIsRUFBQXBuQixLQUFBc25CLEVBQUEsRUFBQUEsR0FHQSxnQkFBQWhkLEVBQ0FBLE9BRUEsSUFBQTlKLEVBQ0FBLEVBQUFpQixTQUdBekssZ0ZDeEJBLFNBQUE4SCxHQUFBLFNBQUFDLElBQ0EsSUFBQUMsRUFhQSxPQVhBQSxFQURBLG9CQUFBQyxPQUNBQSxZQUVBLElBQUFILEVBQ0FBLEVBR0FoTSxNQUVBb00sUUFBQUYsRUFBQUUsYUFDQUYsSUFBQUUsU0FDQUMsWUFBQUgsRUFBQUcsYUFBQSxTQUFBekUsR0FBb0UsT0FBQUEsR0FDcEVzRSxFQUtPLFNBQUFLLEVBQUFDLEdBQ1AsT0FBQVAsSUFBQUksWUFBQUcsR0FwQkE3TyxFQUFBVSxFQUFBK1IsRUFBQSxzQkFBQTdELG9EQ0NBOU4sT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQTQxQixFQUFjajNCLEVBQVEsR0FDdEJrM0IsRUFBQSxXQUNBLFNBQUFBLEVBQUFucEIsR0FDQTFMLEtBQUEwTCxVQUNBMUwsS0FBQXlDLEtBQUEsU0FDQXpDLEtBQUE0QyxJQUFBLEtBQ0E1QyxLQUFBakMsRUFBQSxFQXVDQSxPQXJDQTgyQixFQUFBbDFCLFVBQUE2QixPQUFBLFNBQUFvQixHQUNBNUMsS0FBQTRDLE1BQ0E1QyxLQUFBMEwsUUFBQTFMLEtBQUFqQyxHQUFBb0YsS0FBQW5ELE9BRUE2MEIsRUFBQWwxQixVQUFBbUMsTUFBQSxXQUNBLElBQUE0SixFQUFBMUwsS0FBQTBMLFFBQ0ExTCxLQUFBakMsRUFBQTJOLEVBQUE3SyxRQUNBNkssRUFBQTFMLEtBQUFqQyxHQUFBcUUsUUFBQXBDLE1BRUFBLEtBQUFqQyxFQUFBLEVBQ0FpQyxLQUFBNEMsSUFBQSxNQUVBaXlCLEVBQUFsMUIsVUFBQXlCLEdBQUEsU0FBQW5DLEdBQ0EsSUFBQThCLEVBQUFmLEtBQUE0QyxJQUNBN0IsR0FFQUEsRUFBQUssR0FBQW5DLElBRUE0MUIsRUFBQWwxQixVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxJQUFBdkIsRUFBQWYsS0FBQTRDLElBQ0E3QixHQUVBQSxFQUFBRyxHQUFBb0IsSUFFQXV5QixFQUFBbDFCLFVBQUEwQixHQUFBLFdBQ0EsSUFBQU4sRUFBQWYsS0FBQTRDLElBQ0EsR0FBQTdCLEVBQUEsQ0FFQSxJQUFBMkssRUFBQTFMLEtBQUEwTCxRQUNBQSxFQUFBMUwsS0FBQWpDLEdBQUFxRSxRQUFBcEMsUUFDQUEsS0FBQWpDLEVBQUEyTixFQUFBN0ssT0FDQTZLLEVBQUExTCxLQUFBakMsR0FBQW9GLEtBQUFuRCxNQUdBZSxFQUFBTSxPQUdBd3pCLEVBNUNBLEdBMkZBaDNCLEVBQUF3SyxRQVBBLFdBRUEsSUFEQSxJQUFBcUQsS0FDQXZDLEVBQUEsRUFBb0JBLEVBQUFDLFVBQUF2SSxPQUF1QnNJLElBQzNDdUMsRUFBQXZDLEdBQUFDLFVBQUFELEdBRUEsV0FBQXlyQixFQUFBaHVCLE9BQUEsSUFBQWl1QixFQUFBbnBCLG1DQzNGQWpOLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUE0MUIsRUFBY2ozQixFQUFRLEdBQ3RCOEMsS0FDQXEwQixFQUFBLFdBQ0EsU0FBQUEsRUFBQS8yQixFQUFBOEIsR0FDQUcsS0FBQWpDLElBQ0FpQyxLQUFBSCxJQUNBQSxFQUFBd0QsSUFBQXRGLEdBQUFpQyxLQWNBLE9BWkE4MEIsRUFBQW4xQixVQUFBeUIsR0FBQSxTQUFBbkMsR0FDQSxJQUFBWSxFQUFBRyxLQUFBSCxFQUNBQSxFQUFBK0MsTUFBQW5DLEdBRUFaLEVBQUEwRCxHQUFBdEUsRUFBQWUsS0FBQWpDLElBRUErMkIsRUFBQW4xQixVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQXRDLEtBQUFILEVBQUFxQixHQUFBb0IsSUFFQXd5QixFQUFBbjFCLFVBQUEwQixHQUFBLFdBQ0FyQixLQUFBSCxFQUFBazFCLEtBQUEvMEIsS0FBQWpDLEVBQUFpQyxPQUVBODBCLEVBbEJBLEdBb0JBajNCLEVBQUFpM0Isd0JBQ0EsSUFrRUFFLEVBbEVBQyxFQUFBLFdBQ0EsU0FBQUEsRUFBQXZ5QixFQUFBZ0osR0FDQTFMLEtBQUF5QyxLQUFBLGdCQUNBekMsS0FBQTBDLE1BQ0ExQyxLQUFBazFCLE9BQUF4cEIsRUFDQTFMLEtBQUE0QyxJQUFBbkMsRUFDQVQsS0FBQXFELE9BQ0FyRCxLQUFBMkQsR0FBQSxFQUNBM0QsS0FBQXdELFFBdURBLE9BckRBeXhCLEVBQUF0MUIsVUFBQTZCLE9BQUEsU0FBQW9CLEdBQ0E1QyxLQUFBNEMsTUFJQSxJQUhBLElBQUE5QyxFQUFBRSxLQUFBazFCLE9BQ0ExMUIsRUFBQVEsS0FBQTJELEdBQUE3RCxFQUFBZSxPQUNBMkMsRUFBQXhELEtBQUF3RCxLQUFBLElBQUFwRCxNQUFBWixHQUNBekIsRUFBQSxFQUF1QkEsRUFBQXlCLEVBQU96QixJQUM5QnlGLEVBQUF6RixHQUFBMEMsRUFDQVgsRUFBQS9CLEdBQUFvRixLQUFBLElBQUEyeEIsRUFBQS8yQixFQUFBaUMsT0FFQUEsS0FBQTBDLElBQUFTLEtBQUFuRCxPQUVBaTFCLEVBQUF0MUIsVUFBQW1DLE1BQUEsV0FDQSxJQUFBaEMsRUFBQUUsS0FBQWsxQixPQUNBMTFCLEVBQUFNLEVBQUFlLE9BQ0F3QyxFQUFBckQsS0FBQXFELElBQ0FyRCxLQUFBMEMsSUFBQU4sUUFBQXBDLE1BQ0EsUUFBQWpDLEVBQUEsRUFBdUJBLEVBQUF5QixFQUFPekIsSUFDOUIrQixFQUFBL0IsR0FBQXFFLFFBQUFpQixFQUFBdEYsSUFFQWlDLEtBQUE0QyxJQUFBbkMsRUFDQVQsS0FBQXdELFFBQ0F4RCxLQUFBcUQsUUFFQTR4QixFQUFBdDFCLFVBQUF5QixHQUFBLFNBQUFuQyxHQUNBLElBQUEyRCxFQUFBNUMsS0FBQTRDLElBQ0FBLElBQUFuQyxJQUVBVCxLQUFBMkQsR0FBQSxHQUVBZixFQUFBeEIsSUFBQW5DLEdBQUE2SSxPQUFBOUgsS0FBQXdELFNBRUF5eEIsRUFBQXQxQixVQUFBdUIsR0FBQSxTQUFBb0IsR0FDQSxJQUFBTSxFQUFBNUMsS0FBQTRDLElBQ0FBLElBQUFuQyxHQUVBbUMsRUFBQTFCLEdBQUFvQixJQUVBMnlCLEVBQUF0MUIsVUFBQTBCLEdBQUEsV0FDQSxJQUFBdUIsRUFBQTVDLEtBQUE0QyxJQUNBQSxJQUFBbkMsR0FFQW1DLEVBQUF2QixNQUVBNHpCLEVBQUF0MUIsVUFBQTRELEdBQUEsU0FBQXRFLEVBQUFsQixHQUNBLElBQUE2RixFQUFBNUQsS0FBQXdELEtBQUF6RixHQUNBaUMsS0FBQTJELEdBQUEsR0FBQUMsSUFBQW5ELEdBQ0FULEtBQUEyRCxLQUVBM0QsS0FBQXdELEtBQUF6RixHQUFBa0IsR0FFQWcyQixFQUFBdDFCLFVBQUFvMUIsS0FBQSxTQUFBaDNCLEVBQUFDLEdBQ0FnQyxLQUFBazFCLE9BQUFuM0IsR0FBQXFFLFFBQUFwRSxJQUVBaTNCLEVBL0RBLEdBaUVBcDNCLEVBQUFvM0Isd0JBMEVBRCxFQUFBLFdBRUEsSUFEQSxJQUFBdHBCLEtBQ0F2QyxFQUFBLEVBQW9CQSxFQUFBQyxVQUFBdkksT0FBdUJzSSxJQUMzQ3VDLEVBQUF2QyxHQUFBQyxVQUFBRCxHQUVBLGdCQUFBZ3NCLEdBQ0EsV0FBQVAsRUFBQWh1QixPQUFBLElBQUFxdUIsRUFBQUUsRUFBQXpwQixNQUdBN04sRUFBQXdLLFFBQUEyc0IsbUJDektBLElBQUFuYyxFQUNBLG9CQUFBMU0sT0FDQTBNLEVBQUExTSxPQUNDLG9CQUFBN0gsS0FDRHVVLEVBQUF2VSxNQUVBSyxRQUFBeXdCLEtBQUEsdUVBQ0F2YyxFQUFBN1ksTUFHQSxJQUFBcTFCLEVBQWMxM0IsRUFBUSxJQUN0QjIzQixFQUFrQjMzQixFQUFRLElBQzFCNDNCLEVBQWU1M0IsRUFBUSxJQUN2QjYzQixFQUFtQjczQixFQUFRLElBQzNCODNCLEVBQVk5M0IsRUFBUSxJQU1wQixTQUFBK0MsS0FNQSxJQUFBZzFCLEVBQUE3M0IsRUFBQUMsRUFBQUQsUUFBQSxTQUFBODNCLEVBQUFDLEdBRUEseUJBQUFBLEVBQ0EsSUFBQS8zQixFQUFBZzRCLFFBQUEsTUFBQUYsR0FBQXp3QixJQUFBMHdCLEdBSUEsR0FBQXhzQixVQUFBdkksT0FDQSxJQUFBaEQsRUFBQWc0QixRQUFBLE1BQUFGLEdBR0EsSUFBQTkzQixFQUFBZzRCLFFBQUFGLEVBQUFDLElBR0EvM0IsRUFBQWc0QixVQU1BSCxFQUFBSSxPQUFBLFdBQ0EsTUFBQWpkLEVBQUFrZCxnQkFDQWxkLEVBQUFtZCxVQUFBLFNBQUFuZCxFQUFBbWQsU0FBQUMsVUFDQXBkLEVBQUFxZCxlQUNBLFdBQUFILGVBRUEsSUFBUyxXQUFBRyxjQUFBLHFCQUFpRCxNQUFBajFCLElBQzFELElBQVMsV0FBQWkxQixjQUFBLHNCQUFrRCxNQUFBajFCLElBQzNELElBQVMsV0FBQWkxQixjQUFBLHNCQUFrRCxNQUFBajFCLElBQzNELElBQVMsV0FBQWkxQixjQUFBLGtCQUE4QyxNQUFBajFCLElBRXZELE1BQUFrRixNQUFBLDBEQVdBLElBQUFnd0IsRUFBQSxHQUFBQSxLQUNBLFNBQUFyMkIsR0FBaUIsT0FBQUEsRUFBQXEyQixRQUNqQixTQUFBcjJCLEdBQWlCLE9BQUFBLEVBQUE4SyxRQUFBLG9CQVVqQixTQUFBd3JCLEVBQUE5Z0IsR0FDQSxJQUFBaWdCLEVBQUFqZ0IsR0FBQSxPQUFBQSxFQUNBLElBQUErZ0IsS0FDQSxRQUFBLzJCLEtBQUFnVyxFQUNBZ2hCLEVBQUFELEVBQUEvMkIsRUFBQWdXLEVBQUFoVyxJQUVBLE9BQUErMkIsRUFBQTlrQixLQUFBLEtBWUEsU0FBQStrQixFQUFBRCxFQUFBLzJCLEVBQUE0RyxHQUNBLFNBQUFBLEVBQ0EsR0FBQTlGLE1BQUEwSSxRQUFBNUMsR0FDQUEsRUFBQWtQLFFBQUEsU0FBQXhSLEdBQ0EweUIsRUFBQUQsRUFBQS8yQixFQUFBc0UsVUFFSyxHQUFBMnhCLEVBQUFydkIsR0FDTCxRQUFBcXdCLEtBQUFyd0IsRUFDQW93QixFQUFBRCxFQUFBLzJCLEVBQUEsSUFBQWkzQixFQUFBLElBQUFyd0IsRUFBQXF3QixTQUdBRixFQUFBL3lCLEtBQUF5TixtQkFBQXpSLEdBQ0EsSUFBQXlSLG1CQUFBN0ssU0FFRyxPQUFBQSxHQUNIbXdCLEVBQUEveUIsS0FBQXlOLG1CQUFBelIsSUFrQkEsU0FBQWszQixFQUFBQyxHQU1BLElBTEEsSUFFQUMsRUFDQUMsRUFIQXJoQixLQUNBK2dCLEVBQUFJLEVBQUF6WixNQUFBLEtBSUFqZixFQUFBLEVBQUF1USxFQUFBK25CLEVBQUF4MUIsT0FBcUM5QyxFQUFBdVEsSUFBU3ZRLEdBRzlDLElBREE0NEIsR0FEQUQsRUFBQUwsRUFBQXQ0QixJQUNBeUosUUFBQSxNQUVBOE4sRUFBQWtYLG1CQUFBa0ssSUFBQSxHQUVBcGhCLEVBQUFrWCxtQkFBQWtLLEVBQUFyZCxNQUFBLEVBQUFzZCxLQUNBbkssbUJBQUFrSyxFQUFBcmQsTUFBQXNkLEVBQUEsSUFJQSxPQUFBcmhCLEVBNEZBLFNBQUFzaEIsRUFBQUMsR0FHQSw0QkFBQTVjLEtBQUE0YyxHQWlEQSxTQUFBQyxFQUFBQyxHQUNBLzJCLEtBQUErMkIsTUFDQS8yQixLQUFBZzNCLElBQUFoM0IsS0FBQSsyQixJQUFBQyxJQUVBaDNCLEtBQUFpTixLQUFBLFFBQUFqTixLQUFBKzJCLElBQUFwQixTQUFBLEtBQUEzMUIsS0FBQWczQixJQUFBQyxjQUFBLFNBQUFqM0IsS0FBQWczQixJQUFBQyxvQkFBQSxJQUFBajNCLEtBQUFnM0IsSUFBQUMsYUFDQWozQixLQUFBZzNCLElBQUFFLGFBQ0EsS0FDQWwzQixLQUFBbTNCLFdBQUFuM0IsS0FBQSsyQixJQUFBQyxJQUFBRyxXQUNBLElBQUFDLEVBQUFwM0IsS0FBQWczQixJQUFBSSxPQUVBLE9BQUFBLElBQ0FBLEVBQUEsS0FFQXAzQixLQUFBcTNCLHFCQUFBRCxHQUNBcDNCLEtBQUFzM0IsT0FBQXQzQixLQUFBdTNCLFFBaEdBLFNBQUFkLEdBUUEsSUFQQSxJQUVBdmYsRUFDQXNnQixFQUNBQyxFQUNBdnhCLEVBTEF3eEIsRUFBQWpCLEVBQUF6WixNQUFBLFNBQ0EyYSxLQU1BNTVCLEVBQUEsRUFBQXVRLEVBQUFvcEIsRUFBQTcyQixPQUFxQzlDLEVBQUF1USxJQUFTdlEsR0FHOUMsS0FEQW1aLEdBREFzZ0IsRUFBQUUsRUFBQTM1QixJQUNBeUosUUFBQSxRQUlBaXdCLEVBQUFELEVBQUFuZSxNQUFBLEVBQUFuQyxHQUFBcUcsY0FDQXJYLEVBQUFpd0IsRUFBQXFCLEVBQUFuZSxNQUFBbkMsRUFBQSxJQUNBeWdCLEVBQUFGLEdBQUF2eEIsR0FHQSxPQUFBeXhCLEVBNkVBQyxDQUFBNTNCLEtBQUFnM0IsSUFBQWEseUJBSUE3M0IsS0FBQXMzQixPQUFBLGdCQUFBdDNCLEtBQUFnM0IsSUFBQWMsa0JBQUEsZ0JBQ0E5M0IsS0FBQSszQixxQkFBQS8zQixLQUFBczNCLFFBRUEsT0FBQXQzQixLQUFBaU4sTUFBQThwQixFQUFBaUIsY0FDQWg0QixLQUFBOGMsS0FBQTljLEtBQUFnM0IsSUFBQWlCLFNBRUFqNEIsS0FBQThjLEtBQUEsUUFBQTljLEtBQUErMkIsSUFBQXBCLE9BQ0EzMUIsS0FBQWs0QixXQUFBbDRCLEtBQUFpTixLQUFBak4sS0FBQWlOLEtBQUFqTixLQUFBZzNCLElBQUFpQixVQUNBLEtBaUVBLFNBQUFwQyxFQUFBRixFQUFBQyxHQUNBLElBQUF0eEIsRUFBQXRFLEtBQ0FBLEtBQUFtNEIsT0FBQW40QixLQUFBbTRCLFdBQ0FuNEIsS0FBQTIxQixTQUNBMzFCLEtBQUE0MUIsTUFDQTUxQixLQUFBczNCLFVBQ0F0M0IsS0FBQW80QixXQUNBcDRCLEtBQUErRCxHQUFBLGlCQUNBLElBMEJBczBCLEVBMUJBLzFCLEVBQUEsS0FDQWcyQixFQUFBLEtBRUEsSUFDQUEsRUFBQSxJQUFBeEIsRUFBQXh5QixHQUNLLE1BQUFyRCxHQWdCTCxPQWZBcUIsRUFBQSxJQUFBNkQsTUFBQSwyQ0FDQXdvQixPQUFBLEVBQ0Fyc0IsRUFBQWkyQixTQUFBdDNCLEVBRUFxRCxFQUFBMHlCLEtBRUExMEIsRUFBQWsyQixpQkFBQSxJQUFBbDBCLEVBQUEweUIsSUFBQUMsYUFBQTN5QixFQUFBMHlCLElBQUFFLGFBQUE1eUIsRUFBQTB5QixJQUFBaUIsU0FFQTMxQixFQUFBODBCLE9BQUE5eUIsRUFBQTB5QixJQUFBSSxPQUFBOXlCLEVBQUEweUIsSUFBQUksT0FBQSxLQUNBOTBCLEVBQUFtMkIsV0FBQW4yQixFQUFBODBCLFNBRUE5MEIsRUFBQWsyQixZQUFBLEtBQ0FsMkIsRUFBQTgwQixPQUFBLE1BR0E5eUIsRUFBQTRVLFNBQUE1VyxHQUdBZ0MsRUFBQWlMLEtBQUEsV0FBQStvQixHQUdBLElBQ0FoMEIsRUFBQW8wQixjQUFBSixLQUNBRCxFQUFBLElBQUFseUIsTUFBQW15QixFQUFBbkIsWUFBQSwrQkFFSyxNQUFBd0IsR0FDTE4sRUFBQU0sRUFJQU4sR0FDQUEsRUFBQUUsU0FBQWoyQixFQUNBKzFCLEVBQUFKLFNBQUFLLEVBQ0FELEVBQUFqQixPQUFBa0IsRUFBQWxCLE9BQ0E5eUIsRUFBQTRVLFNBQUFtZixFQUFBQyxJQUVBaDBCLEVBQUE0VSxTQUFBLEtBQUFvZixLQW1hQSxTQUFBTSxFQUFBaEQsRUFBQTFvQixFQUFBNEUsR0FDQSxJQUFBaWxCLEVBQUFyQixFQUFBLFNBQUFFLEdBSUEsTUFIQSxtQkFBQTFvQixJQUFBNEUsRUFBQTVFLElBQUEsTUFDQUEsR0FBQTZwQixFQUFBOEIsS0FBQTNyQixHQUNBNEUsR0FBQWlsQixFQUFBN3hCLElBQUE0TSxHQUNBaWxCLEVBaHVCQXJCLEVBQUFvRCxnQkFBQTFDLEVBa0NBVixFQUFBYyxjQVNBZCxFQUFBcUQsT0FDQTVRLEtBQUEsWUFDQTZRLEtBQUEsbUJBQ0FDLElBQUEsV0FDQUMsV0FBQSxvQ0FDQUMsS0FBQSxvQ0FDQUMsWUFBQSxxQ0FZQTFELEVBQUFVLFdBQ0FpRCxvQ0FBQWpELEVBQ0FrRCxtQkFBQXRvQixLQUFBQyxXQVlBeWtCLEVBQUEvRyxPQUNBMEssb0NBQUE3QyxFQUNBOEMsbUJBQUF0b0IsS0FBQTJkLE9BNEhBNkcsRUFBQXNCLEVBQUFuM0IsV0FhQW0zQixFQUFBbjNCLFVBQUF1NEIsV0FBQSxTQUFBekIsR0FDQSxJQUFBOUgsRUFBQStHLEVBQUEvRyxNQUFBM3VCLEtBQUF5QyxNQUNBLE9BQUF6QyxLQUFBKzJCLElBQUF3QyxRQUNBdjVCLEtBQUErMkIsSUFBQXdDLFFBQUF2NUIsS0FBQXkyQixLQUVBOUgsR0FBQWlJLEVBQUE1MkIsS0FBQXlDLFFBQ0Frc0IsRUFBQStHLEVBQUEvRyxNQUFBLHFCQUVBQSxHQUFBOEgsTUFBQTUxQixRQUFBNDFCLGFBQUFoNEIsUUFDQWt3QixFQUFBOEgsR0FDQSxPQVVBSyxFQUFBbjNCLFVBQUE2NUIsUUFBQSxXQUNBLElBQUF6QyxFQUFBLzJCLEtBQUErMkIsSUFDQXBCLEVBQUFvQixFQUFBcEIsT0FDQUMsRUFBQW1CLEVBQUFuQixJQUVBNkQsRUFBQSxVQUFBOUQsRUFBQSxJQUFBQyxFQUFBLEtBQUE1MUIsS0FBQW8zQixPQUFBLElBQ0E5MEIsRUFBQSxJQUFBNkQsTUFBQXN6QixHQUtBLE9BSkFuM0IsRUFBQTgwQixPQUFBcDNCLEtBQUFvM0IsT0FDQTkwQixFQUFBcXpCLFNBQ0FyekIsRUFBQXN6QixNQUVBdHpCLEdBT0FvekIsRUFBQW9CLFdBcUVBekIsRUFBQVEsRUFBQWwyQixXQUNBMjFCLEVBQUFPLEVBQUFsMkIsV0F3QkFrMkIsRUFBQWwyQixVQUFBOEMsS0FBQSxTQUFBQSxHQUVBLE9BREF6QyxLQUFBMDVCLElBQUEsZUFBQWhFLEVBQUFxRCxNQUFBdDJCLE9BQ0F6QyxNQXVCQTYxQixFQUFBbDJCLFVBQUFnNkIsT0FBQSxTQUFBbDNCLEdBRUEsT0FEQXpDLEtBQUEwNUIsSUFBQSxTQUFBaEUsRUFBQXFELE1BQUF0MkIsT0FDQXpDLE1BYUE2MUIsRUFBQWwyQixVQUFBaTZCLEtBQUEsU0FBQUMsRUFBQUMsRUFBQTdtQixHQUNBLElBQUE3SixVQUFBdkksU0FBQWk1QixFQUFBLElBQ0EsaUJBQUFBLEdBQUEsT0FBQUEsSUFDQTdtQixFQUFBNm1CLEVBQ0FBLEVBQUEsSUFFQTdtQixJQUNBQSxHQUNBeFEsS0FBQSxtQkFBQWtPLEtBQUEsaUJBV0EsT0FBQTNRLEtBQUErNUIsTUFBQUYsRUFBQUMsRUFBQTdtQixFQVBBLFNBQUErbUIsR0FDQSxzQkFBQXJwQixLQUNBLE9BQUFBLEtBQUFxcEIsR0FFQSxVQUFBN3pCLE1BQUEsb0RBb0JBMHZCLEVBQUFsMkIsVUFBQXM2QixNQUFBLFNBQUEvekIsR0FHQSxNQUZBLGlCQUFBQSxNQUFBa3dCLEVBQUFsd0IsSUFDQUEsR0FBQWxHLEtBQUFtNEIsT0FBQTcwQixLQUFBNEMsR0FDQWxHLE1Bb0JBNjFCLEVBQUFsMkIsVUFBQXU2QixPQUFBLFNBQUF6QyxFQUFBMEMsRUFBQWxuQixHQUNBLEdBQUFrbkIsRUFBQSxDQUNBLEdBQUFuNkIsS0FBQW82QixNQUNBLE1BQUFqMEIsTUFBQSw4Q0FHQW5HLEtBQUFxNkIsZUFBQUMsT0FBQTdDLEVBQUEwQyxFQUFBbG5CLEdBQUFrbkIsRUFBQTc3QixNQUVBLE9BQUEwQixNQUdBNjFCLEVBQUFsMkIsVUFBQTA2QixhQUFBLFdBSUEsT0FIQXI2QixLQUFBdTZCLFlBQ0F2NkIsS0FBQXU2QixVQUFBLElBQUExaEIsRUFBQTJoQixVQUVBeDZCLEtBQUF1NkIsV0FZQTFFLEVBQUFsMkIsVUFBQXVaLFNBQUEsU0FBQTVXLEVBQUFnMkIsR0FDQSxHQUFBdDRCLEtBQUF5NkIsYUFBQW40QixFQUFBZzJCLEdBQ0EsT0FBQXQ0QixLQUFBMDZCLFNBR0EsSUFBQTVvQixFQUFBOVIsS0FBQTI2QixVQUNBMzZCLEtBQUF1SCxlQUVBakYsSUFDQXRDLEtBQUE0NkIsY0FBQXQ0QixFQUFBdTRCLFFBQUE3NkIsS0FBQTg2QixTQUFBLEdBQ0E5NkIsS0FBQXVQLEtBQUEsUUFBQWpOLElBR0F3UCxFQUFBeFAsRUFBQWcyQixJQVNBekMsRUFBQWwyQixVQUFBbzdCLGlCQUFBLFdBQ0EsSUFBQXo0QixFQUFBLElBQUE2RCxNQUFBLGdLQUNBN0QsRUFBQTA0QixhQUFBLEVBRUExNEIsRUFBQTgwQixPQUFBcDNCLEtBQUFvM0IsT0FDQTkwQixFQUFBcXpCLE9BQUEzMUIsS0FBQTIxQixPQUNBcnpCLEVBQUFzekIsSUFBQTUxQixLQUFBNDFCLElBRUE1MUIsS0FBQWtaLFNBQUE1VyxJQUlBdXpCLEVBQUFsMkIsVUFBQTBnQixPQUFBd1YsRUFBQWwyQixVQUFBczdCLEdBQUFwRixFQUFBbDJCLFVBQUF1N0IsTUFBQSxXQUVBLE9BREF2MkIsUUFBQXl3QixLQUFBLDBEQUNBcDFCLE1BSUE2MUIsRUFBQWwyQixVQUFBdzdCLEtBQUF0RixFQUFBbDJCLFVBQUF5N0IsTUFBQSxXQUNBLE1BQUFqMUIsTUFBQSxnRUFXQTB2QixFQUFBbDJCLFVBQUEwN0IsUUFBQSxTQUFBL2xCLEdBRUEsT0FBQUEsR0FBQSxpQkFBQUEsSUFBQWxWLE1BQUEwSSxRQUFBd00sSUFBQSxvQkFBQTdXLE9BQUFrQixVQUFBNFEsU0FBQXJTLEtBQUFvWCxJQVlBdWdCLEVBQUFsMkIsVUFBQXVGLElBQUEsU0FBQTRNLEdBWUEsT0FYQTlSLEtBQUFzN0IsWUFDQTMyQixRQUFBeXdCLEtBQUEseUVBRUFwMUIsS0FBQXM3QixZQUFBLEVBR0F0N0IsS0FBQTI2QixVQUFBN29CLEdBQUFwUixFQUdBVixLQUFBdTdCLHVCQUVBdjdCLEtBQUF3N0IsUUFHQTNGLEVBQUFsMkIsVUFBQTY3QixLQUFBLFdBQ0EsSUFBQWwzQixFQUFBdEUsS0FDQWczQixFQUFBaDNCLEtBQUFnM0IsSUFBQXRCLEVBQUFJLFNBQ0E1b0IsRUFBQWxOLEtBQUF1NkIsV0FBQXY2QixLQUFBbzZCLE1BRUFwNkIsS0FBQXk3QixlQUdBekUsRUFBQTFPLG1CQUFBLFdBQ0EsSUFBQW9ULEVBQUExRSxFQUFBMEUsV0FJQSxHQUhBQSxHQUFBLEdBQUFwM0IsRUFBQXEzQix1QkFDQXAwQixhQUFBakQsRUFBQXEzQix1QkFFQSxHQUFBRCxFQUFBLENBTUEsSUFBQXRFLEVBQ0EsSUFBU0EsRUFBQUosRUFBQUksT0FBc0IsTUFBQW4yQixHQUFXbTJCLEVBQUEsRUFFMUMsSUFBQUEsRUFBQSxDQUNBLEdBQUE5eUIsRUFBQXMzQixVQUFBdDNCLEVBQUF1M0IsU0FBQSxPQUNBLE9BQUF2M0IsRUFBQXkyQixtQkFFQXoyQixFQUFBaUwsS0FBQSxTQUlBLElBQUF1c0IsRUFBQSxTQUFBQyxFQUFBOTZCLEdBQ0FBLEVBQUErNkIsTUFBQSxJQUNBLzZCLEVBQUFnN0IsUUFBQWg3QixFQUFBaTdCLE9BQUFqN0IsRUFBQSs2QixNQUFBLEtBRUEvNkIsRUFBQTg2QixZQUNBejNCLEVBQUFpTCxLQUFBLFdBQUF0TyxJQUVBLEdBQUFqQixLQUFBbThCLGFBQUEsWUFDQSxJQUNBbkYsRUFBQW9GLFdBQUFOLEVBQUF2OEIsS0FBQSxpQkFDQXkzQixFQUFBcUYsU0FDQXJGLEVBQUFxRixPQUFBRCxXQUFBTixFQUFBdjhCLEtBQUEsZ0JBRUssTUFBQTBCLElBUUwsSUFDQWpCLEtBQUFzOEIsVUFBQXQ4QixLQUFBdThCLFNBQ0F2RixFQUFBcnhCLEtBQUEzRixLQUFBMjFCLE9BQUEzMUIsS0FBQTQxQixLQUFBLEVBQUE1MUIsS0FBQXM4QixTQUFBdDhCLEtBQUF1OEIsVUFFQXZGLEVBQUFyeEIsS0FBQTNGLEtBQUEyMUIsT0FBQTMxQixLQUFBNDFCLEtBQUEsR0FFRyxNQUFBdHpCLEdBRUgsT0FBQXRDLEtBQUFrWixTQUFBNVcsR0FPQSxHQUhBdEMsS0FBQXc4QixtQkFBQXhGLEVBQUF5RixpQkFBQSxJQUdBejhCLEtBQUF1NkIsV0FBQSxPQUFBdjZCLEtBQUEyMUIsUUFBQSxRQUFBMzFCLEtBQUEyMUIsUUFBQSxpQkFBQXpvQixJQUFBbE4sS0FBQXE3QixRQUFBbnVCLEdBQUEsQ0FFQSxJQUFBd3ZCLEVBQUExOEIsS0FBQW80QixRQUFBLGdCQUNBaEMsRUFBQXAyQixLQUFBMjhCLGFBQUFqSCxFQUFBVSxVQUFBc0csSUFBQTFmLE1BQUEsS0FBNEYsUUFDNUZvWixHQUFBUSxFQUFBOEYsS0FDQXRHLEVBQUFWLEVBQUFVLFVBQUEscUJBRUFBLElBQUFscEIsRUFBQWtwQixFQUFBbHBCLElBSUEsUUFBQXVxQixLQUFBejNCLEtBQUFzM0IsT0FDQSxNQUFBdDNCLEtBQUFzM0IsT0FBQUcsSUFFQXozQixLQUFBczNCLE9BQUExM0IsZUFBQTYzQixJQUNBVCxFQUFBNEYsaUJBQUFuRixFQUFBejNCLEtBQUFzM0IsT0FBQUcsSUFhQSxPQVZBejNCLEtBQUFnNEIsZ0JBQ0FoQixFQUFBQyxhQUFBajNCLEtBQUFnNEIsZUFJQWg0QixLQUFBdVAsS0FBQSxVQUFBdlAsTUFJQWczQixFQUFBNkIsVUFBQSxJQUFBM3JCLElBQUEsTUFDQWxOLE1BR0EwMUIsRUFBQXdGLE1BQUEsV0FDQSxXQUFBekYsSUFHQSwrQ0FBQXJnQixRQUFBLFNBQUF1Z0IsR0FDQUYsRUFBQTkxQixVQUFBZzJCLEVBQUFwWSxlQUFBLFNBQUFxWSxFQUFBOWpCLEdBQ0EsSUFBQWlsQixFQUFBLElBQUFyQixFQUFBRyxRQUFBRixFQUFBQyxHQUtBLE9BSkE1MUIsS0FBQTY4QixhQUFBOUYsR0FDQWpsQixHQUNBaWxCLEVBQUE3eEIsSUFBQTRNLEdBRUFpbEIsS0FJQXRCLEVBQUE5MUIsVUFBQWk1QixJQUFBbkQsRUFBQTkxQixVQUFBLE9BWUErMUIsRUFBQTkyQixJQUFBLFNBQUFnM0IsRUFBQTFvQixFQUFBNEUsR0FDQSxJQUFBaWxCLEVBQUFyQixFQUFBLE1BQUFFLEdBSUEsTUFIQSxtQkFBQTFvQixJQUFBNEUsRUFBQTVFLElBQUEsTUFDQUEsR0FBQTZwQixFQUFBa0QsTUFBQS9zQixHQUNBNEUsR0FBQWlsQixFQUFBN3hCLElBQUE0TSxHQUNBaWxCLEdBYUFyQixFQUFBaGpCLEtBQUEsU0FBQWtqQixFQUFBMW9CLEVBQUE0RSxHQUNBLElBQUFpbEIsRUFBQXJCLEVBQUEsT0FBQUUsR0FJQSxNQUhBLG1CQUFBMW9CLElBQUE0RSxFQUFBNUUsSUFBQSxNQUNBQSxHQUFBNnBCLEVBQUFrRCxNQUFBL3NCLEdBQ0E0RSxHQUFBaWxCLEVBQUE3eEIsSUFBQTRNLEdBQ0FpbEIsR0FhQXJCLEVBQUF6aUIsUUFBQSxTQUFBMmlCLEVBQUExb0IsRUFBQTRFLEdBQ0EsSUFBQWlsQixFQUFBckIsRUFBQSxVQUFBRSxHQUlBLE1BSEEsbUJBQUExb0IsSUFBQTRFLEVBQUE1RSxJQUFBLE1BQ0FBLEdBQUE2cEIsRUFBQThCLEtBQUEzckIsR0FDQTRFLEdBQUFpbEIsRUFBQTd4QixJQUFBNE0sR0FDQWlsQixHQXFCQXJCLEVBQUEsSUFBQWtELEVBQ0FsRCxFQUFBLE9BQUFrRCxFQVlBbEQsRUFBQW9ILE1BQUEsU0FBQWxILEVBQUExb0IsRUFBQTRFLEdBQ0EsSUFBQWlsQixFQUFBckIsRUFBQSxRQUFBRSxHQUlBLE1BSEEsbUJBQUExb0IsSUFBQTRFLEVBQUE1RSxJQUFBLE1BQ0FBLEdBQUE2cEIsRUFBQThCLEtBQUEzckIsR0FDQTRFLEdBQUFpbEIsRUFBQTd4QixJQUFBNE0sR0FDQWlsQixHQWFBckIsRUFBQXFILEtBQUEsU0FBQW5ILEVBQUExb0IsRUFBQTRFLEdBQ0EsSUFBQWlsQixFQUFBckIsRUFBQSxPQUFBRSxHQUlBLE1BSEEsbUJBQUExb0IsSUFBQTRFLEVBQUE1RSxJQUFBLE1BQ0FBLEdBQUE2cEIsRUFBQThCLEtBQUEzckIsR0FDQTRFLEdBQUFpbEIsRUFBQTd4QixJQUFBNE0sR0FDQWlsQixHQWFBckIsRUFBQXNILElBQUEsU0FBQXBILEVBQUExb0IsRUFBQTRFLEdBQ0EsSUFBQWlsQixFQUFBckIsRUFBQSxNQUFBRSxHQUlBLE1BSEEsbUJBQUExb0IsSUFBQTRFLEVBQUE1RSxJQUFBLE1BQ0FBLEdBQUE2cEIsRUFBQThCLEtBQUEzckIsR0FDQTRFLEdBQUFpbEIsRUFBQTd4QixJQUFBNE0sR0FDQWlsQixpQ0NwNUJBdDRCLE9BQUFDLGVBQUFiLEVBQUEsY0FDQW1CLE9BQUEsSUFFQW5CLEVBQUF3SyxRQStCQSxXQUNBLElBQUE0MEIsRUFBQTd6QixVQUFBdkksT0FBQSxRQUFBc00sSUFBQS9ELFVBQUEsR0FBQUEsVUFBQSxNQUNBOHpCLEVBQUFELEVBQUFDLFdBQ0E1OUIsRUFBQTI5QixFQUFBMzlCLElBQ0E2OUIsRUFBQUYsRUFBQUcsT0FDQUEsT0FBQWp3QixJQUFBZ3dCLEtBRUFFLEVBQUEsbUJBQUFELEVBRUEsR0FBQUYsR0FBQTU5QixFQUNBLFVBQUE2RyxNQUFBLDZDQUdBN0csRUFDQTQ5QixFQUFBSSxFQUFBaCtCLEdBQ0c0OUIsSUFDSEEsRUFBQUssR0FHQSxnQkFBQWp0QixFQUFBdFIsR0FDQSxJQUFBc1IsRUFDQSxPQUFBdFIsR0FPQSxJQUpBLElBQUF3K0IsRUFBQU4sRUFBQWwrQixHQUNBeStCLEdBQUEsRUFDQUMsRUFBQXB0QixFQUFBelAsT0FFQTQ4QixJQUFBQyxFQUFBLElBQ0EsSUFBQUMsRUFBQXZrQixLQUFBOGEsT0FBQXdKLEVBQUFELEdBQUEsRUFBQUEsR0FDQUcsRUFBQUosRUFBQWx0QixFQUFBcXRCLElBRUEsR0FBQUMsRUFBQSxFQUNBSCxFQUFBRSxNQUNPLFFBQUFDLEVBQUEsQ0FDUCxHQUFBUixFQUFBLENBQ0EsSUFBQXRtQixFQUFBeEcsRUFBQStJLE1BQUEsR0FFQSxPQURBdkMsRUFBQTZtQixHQUFBTixFQUFBRCxFQUFBOXNCLEVBQUFxdEIsR0FBQTMrQixLQUNBOFgsRUFFQSxPQUFBeEcsRUFBQStJLE1BQUEsRUFBQXNrQixHQUFBNzFCLFFBQUE5SSxJQUFBOEksT0FBQXdJLEVBQUErSSxNQUFBc2tCLElBR0FELEVBQUFDLEdBSUEsT0FBQXJ0QixFQUFBK0ksTUFBQSxFQUFBcWtCLEdBQUE1MUIsUUFBQTlJLElBQUE4SSxPQUFBd0ksRUFBQStJLE1BQUFxa0IsTUE3RUEsSUFBQUgsRUFBQSxTQUFBMzhCLEdBQ0EsZ0JBQUFQLEdBQ0EsT0FBQU8sRUFBQVAsR0FDQSxFQUVBTyxHQUFBUCxFQUNBLEVBRUEsSUFJQWk5QixFQUFBLFNBQUFoK0IsR0FDQSxnQkFBQXNCLEdBQ0EsSUFBQWdILEVBQUF0SSxFQUFBc0IsR0FFQSxnQkFBQVAsR0FDQSxJQUFBa2YsRUFBQWpnQixFQUFBZSxHQUVBLE9BQUF1SCxFQUFBMlgsR0FDQSxFQUVBM1gsR0FBQTJYLEVBQ0EsRUFFQSxtQ0NWQSxJQW5CQSxJQUFBc2UsRUFBWWxnQyxFQUFRLElBQ3BCbWdDLEVBQW1CbmdDLEVBQVEsSUFFM0JvZ0MsR0FDQUMsU0FBQSxTQUNBQyxNQUFBLFFBQ0FDLFFBQUEsT0FHQWpyQixHQUNBa3JCLE9BQUEsRUFDQUMsV0FBQSxJQUNBQyxZQUFBLEtBQ0FDLEtBQUEsU0FBQTc3QixFQUFBd0ssR0FDQSxPQUFBNHdCLEVBQUFFLEVBQUF0N0IsSUFBQXdLLEtBSUFreEIsRUFBQSxHQUNBcGdDLEVBQUEsRUFBZUEsRUFBQWtWLEVBQUFrckIsT0FBb0JwZ0MsSUFDbkNvZ0MsR0FBQWxyQixFQUFBbXJCLFdBR0EsU0FBQTdJLEVBQUFqZ0IsR0FDQSx1QkFBQUEsT0FBQWxWLE1BQUEwSSxRQUFBd00sR0FHQSxTQUFBaXBCLEVBQUFDLEdBQ0EseUJBQUFBLEVBQ0FBLEVBQUFqdUIsV0FBQTNGLFFBQUEsU0FBOEMsTUFDM0MsaUJBQUE0ekIsR0FBQSxpQkFBQUEsZ0JBQUF2TixPQUlILEdBQUF1TixFQUhBeHRCLEtBQUFDLFVBQUF1dEIsR0FlQSxTQUFBQyxFQUFBbi9CLEVBQUEyTixHQUNBLE9BQUFreEIsRUFBQTcrQixFQUFBLEtBVkEsU0FBQTJOLEdBQ0EsT0FBQUEsRUFBQStQLE1BQUEvSixFQUFBb3JCLGFBQUExMEIsSUFBQSxTQUFBNnRCLEVBQUF0Z0IsR0FDQSxXQUFBQSxFQUNBc2dCLEVBRUEyRyxFQUFBM0csSUFDR2ptQixLQUFBMEIsRUFBQW9yQixhQUlISyxDQUFBenhCLEdBQUFnRyxFQUFBb3JCLFlBR0EsU0FBQU0sRUFBQXIvQixFQUFBay9CLEdBQ0EsT0FBQXZyQixFQUFBcXJCLEtBQUEsZUFBQWgvQixFQUFBLEtBQUFpL0IsRUFBQUMsSUFBQXZyQixFQUFBb3JCLFlBR0EsU0FBQU8sRUFBQXQvQixFQUFBay9CLEdBQ0EsT0FBQXZyQixFQUFBcXJCLEtBQUEsYUFBQWgvQixFQUFBLEtBQUFpL0IsRUFBQUMsSUFBQXZyQixFQUFBb3JCLFlBMEVBdmdDLEVBQUFELFFBdkVBLFNBQUFnaEMsRUFBQUMsRUFBQUMsR0FDQSxJQUVBQyxFQUNBN3BCLEVBSEFsSSxFQUFBLEdBQ0FneUIsR0FBQSxFQUdBQyxFQUFBLEdBRUEsR0FBQTkrQixNQUFBMEksUUFBQWcyQixJQUFBMStCLE1BQUEwSSxRQUFBaTJCLEdBQUEsQ0FDQSxRQUFBaGhDLEVBQUEsRUFBbUJBLEVBQUErZ0MsRUFBQWorQixPQUFpQjlDLElBQ3BDQSxFQUFBZ2hDLEVBQUFsK0IsUUFDQW0rQixFQUFBSCxFQUFBQyxFQUFBL2dDLEdBQUFnaEMsRUFBQWhoQyxLQUNBa2hDLFVBQ0FDLEdBQUFULEVBQUExZ0MsRUFBQWloQyxFQUFBL3hCLE1BQ0FneUIsR0FBQSxJQUdBQyxHQUFBUCxFQUFBNWdDLEVBQUErZ0MsRUFBQS9nQyxJQUNBa2hDLEdBQUEsR0FHQSxHQUFBRixFQUFBbCtCLE9BQUFpK0IsRUFBQWorQixPQUFBLENBQ0EsS0FBWTlDLEVBQUFnaEMsRUFBQWwrQixPQUFrQjlDLElBQzlCbWhDLEdBQUFOLEVBQUE3Z0MsRUFBQWdoQyxFQUFBaGhDLElBRUFraEMsR0FBQSxFQUVBQSxJQUNBaHlCLEVBQUEsSUFBQWdHLEVBQUFvckIsWUFBQWEsRUFBQSxVQUVHLEdBQUEzSixFQUFBdUosSUFBQXZKLEVBQUF3SixHQUFBLENBQ0g1cEIsRUFBQTFXLE9BQUEwVyxLQUFBMnBCLEdBQ0EsSUFDQXgvQixFQURBNi9CLEVBQUFyQixLQUFrQ2lCLEdBR2xDLElBREE1cEIsRUFBQXlOLE9BQ0E3a0IsRUFBQSxFQUFtQkEsRUFBQW9YLEVBQUF0VSxPQUFpQjlDLElBQ3BDdUIsRUFBQTZWLEVBQUFwWCxHQUNBZ2hDLEVBQUFuL0IsZUFBQU4sS0FDQTAvQixFQUFBSCxFQUFBQyxFQUFBeC9CLEdBQUF5L0IsRUFBQXovQixLQUNBMi9CLFVBQ0FDLEdBQUFULEVBQUFuL0IsRUFBQTAvQixFQUFBL3hCLE1BQ0FneUIsR0FBQSxVQUVBRSxFQUFBNy9CLEtBRUE0L0IsR0FBQVAsRUFBQXIvQixFQUFBdy9CLEVBQUF4L0IsSUFDQTIvQixHQUFBLEdBSUEsSUFBQUcsRUFBQTNnQyxPQUFBMFcsS0FBQWdxQixHQUNBLElBQUFwaEMsRUFBQSxFQUFtQkEsRUFBQXFoQyxFQUFBditCLE9BQXNCOUMsSUFDekNtaEMsR0FBQU4sRUFBQVEsRUFBQXJoQyxHQUFBZ2hDLEVBQUFLLEVBQUFyaEMsS0FDQWtoQyxHQUFBLEVBR0FBLElBQ0FoeUIsRUFBQSxJQUFlZ0csRUFBQW9yQixZQUFBYSxFQUFBLFVBR1pKLElBQUFDLElBQ0g5eEIsRUFBQWdHLEVBQUFxckIsS0FBQSxXQUFBQyxFQUFBTyxHQUFBLE9BQUFQLEVBQUFRLElBQ0FFLEdBQUEsR0FHQSxPQUNBQSxVQUNBaHlCLHVDQ3hIQSxJQUFBb3lCLEVBQWExaEMsRUFBUSxJQUNyQjJoQyxFQUFXM2hDLEVBQVEsSUFNbkI0aEMsRUFBQUYsRUFBQSxjQU1BdmhDLEVBQUFELFFBTUEsU0FBQThELEVBQUE2OUIsR0FDQSxLQUFBeC9CLGdCQUFBMkIsR0FBQSxXQUFBQSxFQUFBNjlCLEdBQ0FBLEVBQUFwL0IsTUFBQTBJLFFBQUEwMkIsU0FDQUEsRUFBQUYsRUFBQUUsRUFBQSxTQUFBbDlCLEdBQXdDLE9BQUFBLEVBQUFxaEIsUUFDeEMsT0FBQTZiLEVBQUEzK0IsT0FBQSxPQUFBMitCLEVBQUEsR0FDQSxJQUFBQyxFQUFBLElBQUFGLEdBQ0FuZSxRQUFBb2UsRUFBQTcxQixJQUFBLFNBQUFySCxHQUF3QyxPQUFBQSxFQUFBOGUsVUFBcUI3UCxLQUFBLE1BQzdEaXVCLFNBQUFFLE9BQUEsU0FBQUMsRUFBQXI5QixHQUFnRCxPQUFBcTlCLEVBQUE3M0IsT0FBQXhGLEVBQUFrOUIsUUFBQWw5QixVQUloRG05QixFQUFBRyxpQkFBQSxtQkFDQSxPQUFBSixFQUFBNzFCLElBQUEsU0FBQXJILEdBQXNDLE9BQUFBLEVBQUFxaEIsUUFBbUJwUyxLQUFBLFVBR3pEa3VCLEVBQUFJLGlCQUFBLGlCQUFBN2dDLEdBQ0EsT0FBQUEsR0FBQThJLE9BQUEyM0IsRUFBQTliLE9BQUFwUyxLQUFBLFVBR0EsT0FBQWt1QixpQ0MxQ0EsSUFBQUssRUFBYW5pQyxFQUFRLElBRXJCaWMsRUFBcUJqYyxFQUFRLElBQzdCb2lDLEVBQWtCcGlDLEVBQVEsSUFDMUJxaUMsRUFBV3JpQyxFQUFRLElBRW5COGIsRUFBQXNtQixJQUVBRCxFQUFBcm1CLEdBQ0FzbUIsY0FDQW5tQixpQkFDQW9tQixTQUdBbGlDLEVBQUFELFFBQUE0YixrRUNoQkE5YixFQUFBa0IsRUFBQXVSLEdBQUEsU0FBQXBFLEVBQUFsTyxHQUFBLElBR0ErYSxFQUhBb25CLEVBQUF0aUMsRUFBQSxJQU1Ba2IsRUFEQSxvQkFBQXZVLEtBQ0FBLEtBQ0Msb0JBQUE2SCxPQUNEQSxZQUNDLElBQUFILEVBQ0RBLEVBRUFsTyxFQUtBLElBQUEyWCxFQUFhaFgsT0FBQXdoQyxFQUFBLEVBQUF4aEMsQ0FBUW9hLEdBQ056SSxFQUFBLG1EQ2xCZnRTLEVBQUFELFFBQUEsU0FBQXFpQyxHQUNBLElBQUFBLEVBQUFsd0IsZ0JBQUEsQ0FDQSxJQUFBbFMsRUFBQVcsT0FBQVksT0FBQTZnQyxHQUVBcGlDLEVBQUFrUCxXQUFBbFAsRUFBQWtQLGFBQ0F2TyxPQUFBQyxlQUFBWixFQUFBLFVBQ0FhLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFkLEVBQUFFLEtBR0FTLE9BQUFDLGVBQUFaLEVBQUEsTUFDQWEsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWQsRUFBQUMsS0FHQVUsT0FBQUMsZUFBQVosRUFBQSxXQUNBYSxZQUFBLElBRUFiLEVBQUFrUyxnQkFBQSxFQUVBLE9BQUFsUyxpQ0NyQkFXLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDbkIsRUFBQXdMLE1BQUFqSixNQUFBMEksUUFJQWpMLEVBQUF1UCxVQUhBLFNBQUF0TixHQUNBLHVCQUFBQSxHQUFBLGlCQUFBQSxpQ0NIQXJCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBOEM5Q25CLEVBQUFzaUMsWUFDQXZyQixjQTlDQSxTQUFBaUssR0FDQSxPQUFBNU0sU0FBQTJDLGNBQUFpSyxJQThDQXVoQixnQkE1Q0EsU0FBQUMsRUFBQUMsR0FDQSxPQUFBcnVCLFNBQUFtdUIsZ0JBQUFDLEVBQUFDLElBNENBM3BCLGVBMUNBLFNBQUExSixHQUNBLE9BQUFnRixTQUFBMEUsZUFBQTFKLElBMENBc3pCLGNBeENBLFNBQUF0ekIsR0FDQSxPQUFBZ0YsU0FBQXN1QixjQUFBdHpCLElBd0NBa0gsYUF0Q0EsU0FBQUssRUFBQWdzQixFQUFBQyxHQUNBanNCLEVBQUFMLGFBQUFxc0IsRUFBQUMsSUFzQ0Foc0IsWUFwQ0EsU0FBQTZKLEVBQUFvaUIsR0FDQXBpQixFQUFBN0osWUFBQWlzQixJQW9DQXRzQixZQWxDQSxTQUFBa0ssRUFBQW9pQixHQUNBcGlCLEVBQUFsSyxZQUFBc3NCLElBa0NBbHNCLFdBaENBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUE5SixZQWdDQU4sWUE5QkEsU0FBQW9LLEdBQ0EsT0FBQUEsRUFBQXBLLGFBOEJBMkssUUE1QkEsU0FBQXRILEdBQ0EsT0FBQUEsRUFBQXNILFNBNEJBOGhCLGVBMUJBLFNBQUFyaUIsRUFBQXJSLEdBQ0FxUixFQUFBc2lCLFlBQUEzekIsR0EwQkFtUyxlQXhCQSxTQUFBZCxHQUNBLE9BQUFBLEVBQUFzaUIsYUF3QkFuaUIsVUF0QkEsU0FBQUgsR0FDQSxXQUFBQSxFQUFBdWlCLFVBc0JBMWhCLE9BcEJBLFNBQUFiLEdBQ0EsV0FBQUEsRUFBQXVpQixVQW9CQXhoQixVQWxCQSxTQUFBZixHQUNBLFdBQUFBLEVBQUF1aUIsV0FtQkFoakMsRUFBQXdLLFFBQUF4SyxFQUFBc2lDLDRCQ2pEQSxTQUFBOUssRUFBQS9mLEdBQ0EsR0FBQUEsRUFBQSxPQVdBLFNBQUFBLEdBQ0EsUUFBQWhXLEtBQUErMUIsRUFBQTExQixVQUNBMlYsRUFBQWhXLEdBQUErMUIsRUFBQTExQixVQUFBTCxHQUVBLE9BQUFnVyxFQWZBd3JCLENBQUF4ckIsR0FWQXhYLEVBQUFELFFBQUF3M0IsRUFxQ0FBLEVBQUExMUIsVUFBQW9FLEdBQ0FzeEIsRUFBQTExQixVQUFBc2QsaUJBQUEsU0FBQTBLLEVBQUE3VixHQUlBLE9BSEE5UixLQUFBK2dDLFdBQUEvZ0MsS0FBQStnQyxnQkFDQS9nQyxLQUFBK2dDLFdBQUEsSUFBQXBaLEdBQUEzbkIsS0FBQStnQyxXQUFBLElBQUFwWixRQUNBcmtCLEtBQUF3TyxHQUNBOVIsTUFhQXExQixFQUFBMTFCLFVBQUF5UCxLQUFBLFNBQUF1WSxFQUFBN1YsR0FDQSxTQUFBL04sSUFDQS9ELEtBQUFxUCxJQUFBc1ksRUFBQTVqQixHQUNBK04sRUFBQWpELE1BQUE3TyxLQUFBb0osV0FLQSxPQUZBckYsRUFBQStOLEtBQ0E5UixLQUFBK0QsR0FBQTRqQixFQUFBNWpCLEdBQ0EvRCxNQWFBcTFCLEVBQUExMUIsVUFBQTBQLElBQ0FnbUIsRUFBQTExQixVQUFBeUksZUFDQWl0QixFQUFBMTFCLFVBQUEyUCxtQkFDQStsQixFQUFBMTFCLFVBQUFxaEMsb0JBQUEsU0FBQXJaLEVBQUE3VixHQUlBLEdBSEE5UixLQUFBK2dDLFdBQUEvZ0MsS0FBQStnQyxlQUdBLEdBQUEzM0IsVUFBQXZJLE9BRUEsT0FEQWIsS0FBQStnQyxjQUNBL2dDLEtBSUEsSUFVQWloQyxFQVZBQyxFQUFBbGhDLEtBQUErZ0MsV0FBQSxJQUFBcFosR0FDQSxJQUFBdVosRUFBQSxPQUFBbGhDLEtBR0EsTUFBQW9KLFVBQUF2SSxPQUVBLGNBREFiLEtBQUErZ0MsV0FBQSxJQUFBcFosR0FDQTNuQixLQUtBLFFBQUFqQyxFQUFBLEVBQWlCQSxFQUFBbWpDLEVBQUFyZ0MsT0FBc0I5QyxJQUV2QyxJQURBa2pDLEVBQUFDLEVBQUFuakMsTUFDQStULEdBQUFtdkIsRUFBQW52QixPQUFBLENBQ0FvdkIsRUFBQXo1QixPQUFBMUosRUFBQSxHQUNBLE1BR0EsT0FBQWlDLE1BV0FxMUIsRUFBQTExQixVQUFBNFAsS0FBQSxTQUFBb1ksR0FDQTNuQixLQUFBK2dDLFdBQUEvZ0MsS0FBQStnQyxlQUNBLElBQUFueUIsS0FBQXlLLE1BQUFuYixLQUFBa0wsVUFBQSxHQUNBODNCLEVBQUFsaEMsS0FBQStnQyxXQUFBLElBQUFwWixHQUVBLEdBQUF1WixFQUVBLFFBQUFuakMsRUFBQSxFQUFBdVEsR0FEQTR5QixJQUFBN25CLE1BQUEsSUFDQXhZLE9BQTJDOUMsRUFBQXVRLElBQVN2USxFQUNwRG1qQyxFQUFBbmpDLEdBQUE4USxNQUFBN08sS0FBQTRPLEdBSUEsT0FBQTVPLE1BV0FxMUIsRUFBQTExQixVQUFBK1AsVUFBQSxTQUFBaVksR0FFQSxPQURBM25CLEtBQUErZ0MsV0FBQS9nQyxLQUFBK2dDLGVBQ0EvZ0MsS0FBQStnQyxXQUFBLElBQUFwWixRQVdBME4sRUFBQTExQixVQUFBdzhCLGFBQUEsU0FBQXhVLEdBQ0EsUUFBQTNuQixLQUFBMFAsVUFBQWlZLEdBQUE5bUIsc0NDNUpBLElBQUEwMEIsRUFBZTUzQixFQUFRLElBY3ZCLFNBQUEyM0IsRUFBQWhnQixHQUNBLEdBQUFBLEVBQUEsT0FXQSxTQUFBQSxHQUNBLFFBQUFoVyxLQUFBZzJCLEVBQUEzMUIsVUFDQTJWLEVBQUFoVyxHQUFBZzJCLEVBQUEzMUIsVUFBQUwsR0FFQSxPQUFBZ1csRUFmQXdyQixDQUFBeHJCLEdBVEF4WCxFQUFBRCxRQUFBeTNCLEVBa0NBQSxFQUFBMzFCLFVBQUE0SCxhQUFBLFdBS0EsT0FKQUEsYUFBQXZILEtBQUFtaEMsUUFDQTU1QixhQUFBdkgsS0FBQTI3Qiw4QkFDQTM3QixLQUFBbWhDLGNBQ0FuaEMsS0FBQTI3QixzQkFDQTM3QixNQVlBczFCLEVBQUEzMUIsVUFBQWd2QixNQUFBLFNBQUE3YyxHQUVBLE9BREE5UixLQUFBdTVCLFFBQUF6bkIsRUFDQTlSLE1BcUJBczFCLEVBQUEzMUIsVUFBQXMzQixhQUFBLFNBQUEvd0IsR0FFQSxPQURBbEcsS0FBQWc0QixjQUFBOXhCLEVBQ0FsRyxNQVlBczFCLEVBQUEzMUIsVUFBQXkyQixVQUFBLFNBQUF0a0IsR0FFQSxPQURBOVIsS0FBQTI4QixZQUFBN3FCLEVBQ0E5UixNQWdCQXMxQixFQUFBMzFCLFVBQUEwTyxRQUFBLFNBQUE0RSxHQUNBLElBQUFBLEdBQUEsaUJBQUFBLEVBR0EsT0FGQWpULEtBQUFvaEMsU0FBQW51QixFQUNBalQsS0FBQXFoQyxpQkFBQSxFQUNBcmhDLEtBR0EsUUFBQXNoQyxLQUFBcnVCLEVBQ0EsT0FBQXF1QixHQUNBLGVBQ0F0aEMsS0FBQW9oQyxTQUFBbnVCLEVBQUFzdUIsU0FDQSxNQUNBLGVBQ0F2aEMsS0FBQXFoQyxpQkFBQXB1QixFQUFBZ2xCLFNBQ0EsTUFDQSxRQUNBdHpCLFFBQUF5d0IsS0FBQSx5QkFBQWtNLEdBR0EsT0FBQXRoQyxNQWNBczFCLEVBQUEzMUIsVUFBQTZoQyxNQUFBLFNBQUFDLEVBQUEzdkIsR0FPQSxPQUxBLElBQUExSSxVQUFBdkksU0FBQSxJQUFBNGdDLE1BQUEsR0FDQUEsR0FBQSxJQUFBQSxFQUFBLEdBQ0F6aEMsS0FBQTQ2QixZQUFBNkcsRUFDQXpoQyxLQUFBODZCLFNBQUEsRUFDQTk2QixLQUFBMGhDLGVBQUE1dkIsRUFDQTlSLE1BR0EsSUFBQTJoQyxHQUNBLGFBQ0EsWUFDQSxZQUNBLG1CQVdBck0sRUFBQTMxQixVQUFBODZCLGFBQUEsU0FBQW40QixFQUFBZzJCLEdBQ0EsSUFBQXQ0QixLQUFBNDZCLGFBQUE1NkIsS0FBQTg2QixZQUFBOTZCLEtBQUE0NkIsWUFDQSxTQUVBLEdBQUE1NkIsS0FBQTBoQyxlQUNBLElBQ0EsSUFBQUUsRUFBQTVoQyxLQUFBMGhDLGVBQUFwL0IsRUFBQWcyQixHQUNBLFFBQUFzSixFQUFBLFNBQ0EsUUFBQUEsRUFBQSxTQUVLLE1BQUEzZ0MsR0FDTDBELFFBQUFoRCxNQUFBVixHQUdBLEdBQUFxM0IsS0FBQWxCLFFBQUFrQixFQUFBbEIsUUFBQSxVQUFBa0IsRUFBQWxCLE9BQUEsU0FDQSxHQUFBOTBCLEVBQUEsQ0FDQSxHQUFBQSxFQUFBdS9CLE9BQUFGLEVBQUFuNkIsUUFBQWxGLEVBQUF1L0IsTUFBQSxTQUVBLEdBQUF2L0IsRUFBQStMLFNBQUEsZ0JBQUEvTCxFQUFBdS9CLEtBQUEsU0FDQSxHQUFBdi9CLEVBQUEwNEIsWUFBQSxTQUVBLFVBVUExRixFQUFBMzFCLFVBQUErNkIsT0FBQSxXQWFBLE9BWEExNkIsS0FBQXVILGVBR0F2SCxLQUFBKzJCLE1BQ0EvMkIsS0FBQSsyQixJQUFBLEtBQ0EvMkIsS0FBQSsyQixJQUFBLzJCLEtBQUEwMUIsV0FHQTExQixLQUFBNjdCLFVBQUEsRUFDQTc3QixLQUFBNDdCLFVBQUEsRUFFQTU3QixLQUFBdzdCLFFBV0FsRyxFQUFBMzFCLFVBQUFzRSxLQUFBLFNBQUFvc0IsRUFBQUYsR0FDQSxJQUFBbndCLEtBQUE4aEMsbUJBQUEsQ0FDQSxJQUFBeDlCLEVBQUF0RSxLQUNBQSxLQUFBczdCLFlBQ0EzMkIsUUFBQXl3QixLQUFBLGtJQUVBcDFCLEtBQUE4aEMsbUJBQUEsSUFBQWhTLFFBQUEsU0FBQWlTLEVBQUFDLEdBQ0ExOUIsRUFBQVksSUFBQSxTQUFBNUMsRUFBQWcyQixHQUNBaDJCLEVBQUEwL0IsRUFBQTEvQixHQUNBeS9CLEVBQUF6SixPQUlBLE9BQUF0NEIsS0FBQThoQyxtQkFBQTc5QixLQUFBb3NCLEVBQUFGLElBR0FtRixFQUFBMzFCLFVBQUEsZUFBQXNoQyxHQUNBLE9BQUFqaEMsS0FBQWlFLFVBQUFrSixFQUFBOHpCLElBT0EzTCxFQUFBMzFCLFVBQUFzaUMsSUFBQSxTQUFBbndCLEdBRUEsT0FEQUEsRUFBQTlSLE1BQ0FBLE1BR0FzMUIsRUFBQTMxQixVQUFBNGdCLEdBQUEsU0FBQTBnQixHQUNBLHNCQUFBQSxFQUFBLE1BQUE5NkIsTUFBQSxxQkFFQSxPQURBbkcsS0FBQWtpQyxZQUFBakIsRUFDQWpoQyxNQUdBczFCLEVBQUEzMUIsVUFBQSs0QixjQUFBLFNBQUFKLEdBQ0EsUUFBQUEsSUFJQXQ0QixLQUFBa2lDLFlBQ0FsaUMsS0FBQWtpQyxZQUFBNUosR0FHQUEsRUFBQWxCLFFBQUEsS0FBQWtCLEVBQUFsQixPQUFBLE1BWUE5QixFQUFBMzFCLFVBQUFmLElBQUEsU0FBQTY0QixHQUNBLE9BQUF6M0IsS0FBQW80QixRQUFBWCxFQUFBbGEsZ0JBZUErWCxFQUFBMzFCLFVBQUF3aUMsVUFBQTdNLEVBQUEzMUIsVUFBQWYsSUF1QkEwMkIsRUFBQTMxQixVQUFBKzVCLElBQUEsU0FBQWpDLEVBQUF2eEIsR0FDQSxHQUFBcXZCLEVBQUFrQyxHQUFBLENBQ0EsUUFBQW40QixLQUFBbTRCLEVBQ0F6M0IsS0FBQTA1QixJQUFBcDZCLEVBQUFtNEIsRUFBQW40QixJQUVBLE9BQUFVLEtBSUEsT0FGQUEsS0FBQW80QixRQUFBWCxFQUFBbGEsZUFBQXJYLEVBQ0FsRyxLQUFBczNCLE9BQUFHLEdBQUF2eEIsRUFDQWxHLE1BZUFzMUIsRUFBQTMxQixVQUFBeWlDLE1BQUEsU0FBQTNLLEdBR0EsY0FGQXozQixLQUFBbzRCLFFBQUFYLEVBQUFsYSxzQkFDQXZkLEtBQUFzM0IsT0FBQUcsR0FDQXozQixNQXNCQXMxQixFQUFBMzFCLFVBQUE4M0IsTUFBQSxTQUFBbjVCLEVBQUE0SCxHQUVBLFVBQUE1SCxRQUFBNk8sSUFBQTdPLEVBQ0EsVUFBQTZILE1BQUEsMkNBT0EsR0FKQW5HLEtBQUFvNkIsT0FDQXoxQixRQUFBaEQsTUFBQSxtR0FHQTR6QixFQUFBajNCLEdBQUEsQ0FDQSxRQUFBZ0IsS0FBQWhCLEVBQ0EwQixLQUFBeTNCLE1BQUFuNEIsRUFBQWhCLEVBQUFnQixJQUVBLE9BQUFVLEtBR0EsR0FBQUksTUFBQTBJLFFBQUE1QyxHQUFBLENBQ0EsUUFBQW5JLEtBQUFtSSxFQUNBbEcsS0FBQXkzQixNQUFBbjVCLEVBQUE0SCxFQUFBbkksSUFFQSxPQUFBaUMsS0FJQSxVQUFBa0csUUFBQWlILElBQUFqSCxFQUNBLFVBQUFDLE1BQUEsMENBTUEsTUFKQSxrQkFBQUQsSUFDQUEsRUFBQSxHQUFBQSxHQUVBbEcsS0FBQXE2QixlQUFBQyxPQUFBaDhCLEVBQUE0SCxHQUNBbEcsTUFTQXMxQixFQUFBMzFCLFVBQUEwaUMsTUFBQSxXQUNBLE9BQUFyaUMsS0FBQTY3QixTQUNBNzdCLE1BRUFBLEtBQUE2N0IsVUFBQSxFQUNBNzdCLEtBQUFnM0IsS0FBQWgzQixLQUFBZzNCLElBQUFxTCxRQUNBcmlDLEtBQUErMkIsS0FBQS8yQixLQUFBKzJCLElBQUFzTCxRQUNBcmlDLEtBQUF1SCxlQUNBdkgsS0FBQXVQLEtBQUEsU0FDQXZQLE9BR0FzMUIsRUFBQTMxQixVQUFBbzZCLE1BQUEsU0FBQUYsRUFBQUMsRUFBQTdtQixFQUFBcXZCLEdBQ0EsT0FBQXJ2QixFQUFBeFEsTUFDQSxZQUNBekMsS0FBQTA1QixJQUFBLHlCQUFBNEksRUFBQXpJLEVBQUEsSUFBQUMsSUFDQSxNQUVBLFdBQ0E5NUIsS0FBQXM4QixTQUFBekMsRUFDQTc1QixLQUFBdThCLFNBQUF6QyxFQUNBLE1BRUEsYUFDQTk1QixLQUFBMDVCLElBQUEsMEJBQUFHLEdBR0EsT0FBQTc1QixNQWNBczFCLEVBQUEzMUIsVUFBQTg4QixnQkFBQSxTQUFBMTRCLEdBSUEsWUFGQW9KLEdBQUFwSixPQUFBLEdBQ0EvRCxLQUFBdzhCLGlCQUFBejRCLEVBQ0EvRCxNQVdBczFCLEVBQUEzMUIsVUFBQTRpQyxVQUFBLFNBQUEvaUMsR0FFQSxPQURBUSxLQUFBd2lDLGNBQUFoakMsRUFDQVEsTUFVQXMxQixFQUFBMzFCLFVBQUE4aUMsZ0JBQUEsU0FBQWpqQyxHQUNBLG9CQUFBQSxFQUNBLE1BQUF3SixVQUFBLG9CQUdBLE9BREFoSixLQUFBMGlDLGlCQUFBbGpDLEVBQ0FRLE1BWUFzMUIsRUFBQTMxQixVQUFBZ2pDLE9BQUEsV0FDQSxPQUNBaE4sT0FBQTMxQixLQUFBMjFCLE9BQ0FDLElBQUE1MUIsS0FBQTQxQixJQUNBMW9CLEtBQUFsTixLQUFBbzZCLE1BQ0E3QyxRQUFBdjNCLEtBQUFvNEIsVUE0Q0E5QyxFQUFBMzFCLFVBQUFrNUIsS0FBQSxTQUFBM3JCLEdBQ0EsSUFBQTAxQixFQUFBck4sRUFBQXJvQixHQUNBekssRUFBQXpDLEtBQUFvNEIsUUFBQSxnQkFNQSxHQUpBcDRCLEtBQUF1NkIsV0FDQTUxQixRQUFBaEQsTUFBQSxnSEFHQWloQyxJQUFBNWlDLEtBQUFvNkIsTUFDQWg2QixNQUFBMEksUUFBQW9FLEdBQ0FsTixLQUFBbzZCLFNBQ0twNkIsS0FBQXE3QixRQUFBbnVCLEtBQ0xsTixLQUFBbzZCLGVBRUcsR0FBQWx0QixHQUFBbE4sS0FBQW82QixPQUFBcDZCLEtBQUFxN0IsUUFBQXI3QixLQUFBbzZCLE9BQ0gsTUFBQWowQixNQUFBLGdDQUlBLEdBQUF5OEIsR0FBQXJOLEVBQUF2MUIsS0FBQW82QixPQUNBLFFBQUE5NkIsS0FBQTROLEVBQ0FsTixLQUFBbzZCLE1BQUE5NkIsR0FBQTROLEVBQUE1TixPQUVHLGlCQUFBNE4sR0FFSHpLLEdBQUF6QyxLQUFBeUMsS0FBQSxRQUNBQSxFQUFBekMsS0FBQW80QixRQUFBLGdCQUVBcDRCLEtBQUFvNkIsTUFEQSxxQ0FBQTMzQixFQUNBekMsS0FBQW82QixNQUNBcDZCLEtBQUFvNkIsTUFBQSxJQUFBbHRCLEVBQ0FBLEdBRUFsTixLQUFBbzZCLE9BQUEsSUFBQWx0QixHQUdBbE4sS0FBQW82QixNQUFBbHRCLEVBR0EsT0FBQTAxQixHQUFBNWlDLEtBQUFxN0IsUUFBQW51QixHQUNBbE4sTUFJQXlDLEdBQUF6QyxLQUFBeUMsS0FBQSxRQUNBekMsT0ErQkFzMUIsRUFBQTMxQixVQUFBa2pDLFVBQUEsU0FBQWpnQixHQUdBLE9BREE1aUIsS0FBQThpQyxXQUFBLElBQUFsZ0IsS0FDQTVpQixNQVFBczFCLEVBQUEzMUIsVUFBQTQ3QixxQkFBQSxXQUNBLElBQUF0QixFQUFBajZCLEtBQUFtNEIsT0FBQTVtQixLQUFBLEtBTUEsR0FMQTBvQixJQUNBajZCLEtBQUE0MUIsTUFBQTUxQixLQUFBNDFCLElBQUFwdUIsUUFBQSxpQkFBQXl5QixHQUVBajZCLEtBQUFtNEIsT0FBQXQzQixPQUFBLEVBRUFiLEtBQUE4aUMsTUFBQSxDQUNBLElBQUE1ckIsRUFBQWxYLEtBQUE0MUIsSUFBQXB1QixRQUFBLEtBQ0EsR0FBQTBQLEdBQUEsR0FDQSxJQUFBNnJCLEVBQUEvaUMsS0FBQTQxQixJQUFBOVIsVUFBQTVNLEVBQUEsR0FBQThGLE1BQUEsS0FDQSxtQkFBQWhkLEtBQUE4aUMsTUFDQUMsRUFBQW5nQixLQUFBNWlCLEtBQUE4aUMsT0FFQUMsRUFBQW5nQixPQUVBNWlCLEtBQUE0MUIsSUFBQTUxQixLQUFBNDFCLElBQUE5UixVQUFBLEVBQUE1TSxHQUFBLElBQUE2ckIsRUFBQXh4QixLQUFBLFFBTUErakIsRUFBQTMxQixVQUFBcWpDLG1CQUFBLFdBQXVEcitCLFFBQUFrRCxNQUFBLGdCQVF2RHl0QixFQUFBMzFCLFVBQUFzakMsY0FBQSxTQUFBQyxFQUFBNzBCLEVBQUE4MEIsR0FDQSxJQUFBbmpDLEtBQUE2N0IsU0FBQSxDQUdBLElBQUF2NUIsRUFBQSxJQUFBNkQsTUFBQSs4QixFQUFBNzBCLEVBQUEsZUFDQS9MLEVBQUErTCxVQUNBL0wsRUFBQXUvQixLQUFBLGVBQ0F2L0IsRUFBQTZnQyxRQUNBbmpDLEtBQUE0N0IsVUFBQSxFQUNBNTdCLEtBQUFxaUMsUUFDQXJpQyxLQUFBa1osU0FBQTVXLEtBR0FnekIsRUFBQTMxQixVQUFBODdCLGFBQUEsV0FDQSxJQUFBbjNCLEVBQUF0RSxLQUdBQSxLQUFBb2hDLFdBQUFwaEMsS0FBQW1oQyxTQUNBbmhDLEtBQUFtaEMsT0FBQWo5QixXQUFBLFdBQ0FJLEVBQUEyK0IsY0FBQSxjQUFBMytCLEVBQUE4OEIsU0FBQSxVQUNLcGhDLEtBQUFvaEMsV0FHTHBoQyxLQUFBcWhDLG1CQUFBcmhDLEtBQUEyN0Isd0JBQ0EzN0IsS0FBQTI3QixzQkFBQXozQixXQUFBLFdBQ0FJLEVBQUEyK0IsY0FBQSx1QkFBQTMrQixFQUFBKzhCLGlCQUFBLGNBQ0tyaEMsS0FBQXFoQyxrREM3cUJMLElBQUErQixFQUFZemxDLEVBQVEsSUFjcEIsU0FBQTYzQixFQUFBbGdCLEdBQ0EsR0FBQUEsRUFBQSxPQVdBLFNBQUFBLEdBQ0EsUUFBQWhXLEtBQUFrMkIsRUFBQTcxQixVQUNBMlYsRUFBQWhXLEdBQUFrMkIsRUFBQTcxQixVQUFBTCxHQUVBLE9BQUFnVyxFQWZBd3JCLENBQUF4ckIsR0FUQXhYLEVBQUFELFFBQUEyM0IsRUFtQ0FBLEVBQUE3MUIsVUFBQWYsSUFBQSxTQUFBNjRCLEdBQ0EsT0FBQXozQixLQUFBczNCLE9BQUFHLEVBQUFsYSxnQkFlQWlZLEVBQUE3MUIsVUFBQW80QixxQkFBQSxTQUFBVCxHQUtBLElBQUErTCxFQUFBL0wsRUFBQSxvQkFDQXQzQixLQUFBeUMsS0FBQTJnQyxFQUFBM2dDLEtBQUE0Z0MsR0FHQSxJQUFBQyxFQUFBRixFQUFBRSxPQUFBRCxHQUNBLFFBQUEvakMsS0FBQWdrQyxFQUFBdGpDLEtBQUFWLEdBQUFna0MsRUFBQWhrQyxHQUVBVSxLQUFBdWpDLFNBR0EsSUFDQWpNLEVBQUFyaEIsT0FDQWpXLEtBQUF1akMsTUFBQUgsRUFBQUksV0FBQWxNLEVBQUFyaEIsT0FFSyxNQUFBM1QsTUEwQkxrekIsRUFBQTcxQixVQUFBMDNCLHFCQUFBLFNBQUFELEdBQ0EsSUFBQTMwQixFQUFBMjBCLEVBQUEsTUFHQXAzQixLQUFBbzNCLE9BQUFwM0IsS0FBQXk0QixXQUFBckIsRUFDQXAzQixLQUFBeWpDLFdBQUFoaEMsRUFHQXpDLEtBQUEwakMsS0FBQSxHQUFBamhDLEVBQ0F6QyxLQUFBdWdCLEdBQUEsR0FBQTlkLEVBQ0F6QyxLQUFBMmpDLFNBQUEsR0FBQWxoQyxFQUNBekMsS0FBQTRqQyxZQUFBLEdBQUFuaEMsRUFDQXpDLEtBQUE2akMsWUFBQSxHQUFBcGhDLEVBQ0F6QyxLQUFBMkIsT0FBQSxHQUFBYyxHQUFBLEdBQUFBLElBQ0F6QyxLQUFBdzVCLFVBSUF4NUIsS0FBQThqQyxRQUFBLEtBQUExTSxFQUNBcDNCLEtBQUErakMsU0FBQSxLQUFBM00sRUFDQXAzQixLQUFBZ2tDLFVBQUEsS0FBQTVNLEVBQ0FwM0IsS0FBQWlrQyxXQUFBLEtBQUE3TSxFQUNBcDNCLEtBQUFra0MsYUFBQSxLQUFBOU0sRUFDQXAzQixLQUFBbWtDLGNBQUEsS0FBQS9NLEVBQ0FwM0IsS0FBQW9rQyxVQUFBLEtBQUFoTixFQUNBcDNCLEtBQUFxa0MsU0FBQSxLQUFBak4sRUFDQXAzQixLQUFBc2tDLG9CQUFBLEtBQUFsTixpQ0M1SEF2NUIsRUFBQTRFLEtBQUEsU0FBQWcwQixHQUNBLE9BQUFBLEVBQUF6WixNQUFBLFNBQXVCeVgsU0FXdkI1MkIsRUFBQXlsQyxPQUFBLFNBQUE3TSxHQUNBLE9BQUFBLEVBQUF6WixNQUFBLFNBQXVCMGlCLE9BQUEsU0FBQXBxQixFQUFBbWhCLEdBQ3ZCLElBQUFwakIsRUFBQW9qQixFQUFBelosTUFBQSxTQUNBMWQsRUFBQStULEVBQUFvaEIsUUFDQXZ1QixFQUFBbU4sRUFBQW9oQixRQUdBLE9BREFuMUIsR0FBQTRHLElBQUFvUCxFQUFBaFcsR0FBQTRHLEdBQ0FvUCxRQVlBelgsRUFBQTJsQyxXQUFBLFNBQUEvTSxHQUNBLE9BQUFBLEVBQUF6WixNQUFBLFNBQUEwaUIsT0FBQSxTQUFBcHFCLEVBQUFtaEIsR0FDQSxJQUFBcGpCLEVBQUFvakIsRUFBQXpaLE1BQUEsU0FDQTRZLEVBQUF2aUIsRUFBQSxHQUFBZ0csTUFBQSxNQUdBLE9BREEvRCxFQURBakMsRUFBQSxHQUFBMkosTUFBQSxZQUFBM0QsTUFBQSxPQUNBdWMsRUFDQXRnQixRQVlBelgsRUFBQTBtQyxZQUFBLFNBQUFqTixFQUFBa04sR0FVQSxjQVRBbE4sRUFBQSx1QkFDQUEsRUFBQSx5QkFDQUEsRUFBQSw0QkFDQUEsRUFBQSxLQUVBa04sV0FDQWxOLEVBQUEscUJBQ0FBLEVBQUEsUUFFQUEsa0JDckVBLFNBQUE3QixJQUNBejFCLEtBQUF5a0MsY0FHQSw4R0FDQSxnRUFBQXJ2QixRQUFBLFNBQUF0RCxHQUVBMmpCLEVBQUE5MUIsVUFBQW1TLEdBQUEsV0FFQSxPQURBOVIsS0FBQXlrQyxVQUFBbmhDLE1BQXlCd08sS0FBQTFJLHNCQUN6QnBKLFFBSUF5MUIsRUFBQTkxQixVQUFBazlCLGFBQUEsU0FBQTlGLEdBQ0EvMkIsS0FBQXlrQyxVQUFBcnZCLFFBQUEsU0FBQXN2QixHQUNBM04sRUFBQTJOLEVBQUE1eUIsSUFBQWpELE1BQUFrb0IsRUFBQTJOLEVBQUF0N0IsY0FJQXRMLEVBQUFELFFBQUE0M0Isb0JDbkJBLFNBQUF6cEIsRUFBQTBCLEdBcUJBLElBQUFpM0IsRUFBQSxXQUNBOW1DLEVBQUE0YSxPQUFBLFNBQUF6WCxHQUNBLElBQUE0akMsRUFBQTVqQyxHQUFBLENBRUEsSUFEQSxJQUFBNmpDLEtBQ0E5bUMsRUFBQSxFQUFtQkEsRUFBQXFMLFVBQUF2SSxPQUFzQjlDLElBQ3pDOG1DLEVBQUF2aEMsS0FBQXdkLEVBQUExWCxVQUFBckwsS0FFQSxPQUFBOG1DLEVBQUF0ekIsS0FBQSxLQUdBeFQsRUFBQSxFQW1CQSxJQW5CQSxJQUNBNlEsRUFBQXhGLFVBQ0FrRixFQUFBTSxFQUFBL04sT0FDQTQxQixFQUFBOUUsT0FBQTN3QixHQUFBNEosUUFBQSs1QixFQUFBLFNBQUEvOEIsR0FDQSxVQUFBQSxFQUFBLFVBQ0EsR0FBQTdKLEdBQUF1USxFQUFBLE9BQUExRyxFQUNBLE9BQUFBLEdBQ0EsZ0JBQUErcEIsT0FBQS9pQixFQUFBN1EsTUFDQSxnQkFBQW14QixPQUFBdGdCLEVBQUE3USxNQUNBLFNBQ0EsSUFDQSxPQUFBaVQsS0FBQUMsVUFBQXJDLEVBQUE3USxNQUNTLE1BQUE2cUIsR0FDVCxtQkFFQSxRQUNBLE9BQUFoaEIsS0FHQUEsRUFBQWdILEVBQUE3USxHQUF1QkEsRUFBQXVRLEVBQVMxRyxFQUFBZ0gsSUFBQTdRLEdBQ2hDK21DLEVBQUFsOUIsS0FBQTJ0QixFQUFBM3RCLEdBQ0E2dUIsR0FBQSxJQUFBN3VCLEVBRUE2dUIsR0FBQSxJQUFBM1YsRUFBQWxaLEdBR0EsT0FBQTZ1QixHQU9BNTRCLEVBQUFvUyxVQUFBLFNBQUE2QixFQUFBMm5CLEdBRUEsR0FBQXNMLEVBQUEvNEIsRUFBQTBCLFNBQ0Esa0JBQ0EsT0FBQTdQLEVBQUFvUyxVQUFBNkIsRUFBQTJuQixHQUFBNXFCLE1BQUE3TyxLQUFBb0osWUFJQSxRQUFBc0UsRUFBQXMzQixjQUNBLE9BQUFsekIsRUFHQSxJQUFBbXpCLEdBQUEsRUFlQSxPQWRBLFdBQ0EsSUFBQUEsRUFBQSxDQUNBLEdBQUF2M0IsRUFBQXczQixpQkFDQSxVQUFBLytCLE1BQUFzekIsR0FDTy9yQixFQUFBeTNCLGlCQUNQeGdDLFFBQUFrRCxNQUFBNHhCLEdBRUE5MEIsUUFBQWhELE1BQUE4M0IsR0FFQXdMLEdBQUEsRUFFQSxPQUFBbnpCLEVBQUFqRCxNQUFBN08sS0FBQW9KLGFBT0EsSUFDQWc4QixFQURBQyxLQTZCQSxTQUFBdmtCLEVBQUF4TCxFQUFBZ3dCLEdBRUEsSUFBQUMsR0FDQUMsUUFDQUMsUUFBQUMsR0FrQkEsT0FmQXQ4QixVQUFBdkksUUFBQSxJQUFBMGtDLEVBQUFJLE1BQUF2OEIsVUFBQSxJQUNBQSxVQUFBdkksUUFBQSxJQUFBMGtDLEVBQUFLLE9BQUF4OEIsVUFBQSxJQUNBeThCLEVBQUFQLEdBRUFDLEVBQUFPLFdBQUFSLEVBQ0dBLEdBRUh6bkMsRUFBQWtvQyxRQUFBUixFQUFBRCxHQUdBUCxFQUFBUSxFQUFBTyxjQUFBUCxFQUFBTyxZQUFBLEdBQ0FmLEVBQUFRLEVBQUFJLFNBQUFKLEVBQUFJLE1BQUEsR0FDQVosRUFBQVEsRUFBQUssVUFBQUwsRUFBQUssUUFBQSxHQUNBYixFQUFBUSxFQUFBUyxpQkFBQVQsRUFBQVMsZUFBQSxHQUNBVCxFQUFBSyxTQUFBTCxFQUFBRSxRQUFBUSxHQUNBQyxFQUFBWCxFQUFBandCLEVBQUFpd0IsRUFBQUksT0FvQ0EsU0FBQU0sRUFBQXhQLEVBQUEwUCxHQUNBLElBQUFyeUIsRUFBQWdOLEVBQUE5TixPQUFBbXpCLEdBRUEsT0FBQXJ5QixFQUNBLEtBQUFnTixFQUFBOGtCLE9BQUE5eEIsR0FBQSxPQUFBMmlCLEVBQ0EsS0FBQTNWLEVBQUE4a0IsT0FBQTl4QixHQUFBLE9BRUEyaUIsRUFLQSxTQUFBaVAsRUFBQWpQLEVBQUEwUCxHQUNBLE9BQUExUCxFQWVBLFNBQUF5UCxFQUFBWCxFQUFBdm1DLEVBQUFvbkMsR0FHQSxHQUFBYixFQUFBUyxlQUNBaG5DLEdBQ0EyaEIsRUFBQTNoQixFQUFBOGhCLFVBRUE5aEIsRUFBQThoQixVQUFBampCLEVBQUFpakIsV0FFQTloQixFQUFBdUIsYUFBQXZCLEVBQUF1QixZQUFBWixZQUFBWCxHQUFBLENBQ0EsSUFBQXFuQyxFQUFBcm5DLEVBQUE4aEIsUUFBQXNsQixFQUFBYixHQUlBLE9BSEFYLEVBQUF5QixLQUNBQSxFQUFBSCxFQUFBWCxFQUFBYyxFQUFBRCxJQUVBQyxFQUlBLElBQUFqNUIsRUErRkEsU0FBQW00QixFQUFBdm1DLEdBQ0EsR0FBQStsQyxFQUFBL2xDLEdBQ0EsT0FBQXVtQyxFQUFBRSxRQUFBLHlCQUNBLEdBQUFiLEVBQUE1bEMsR0FBQSxDQUNBLElBQUFzbkMsRUFBQSxJQUFBdDFCLEtBQUFDLFVBQUFqUyxHQUFBNEwsUUFBQSxhQUNBQSxRQUFBLFlBQ0FBLFFBQUEsZ0JBQ0EsT0FBQTI2QixFQUFBRSxRQUFBYSxFQUFBLFVBRUEsR0FBQUMsRUFBQXZuQyxHQUNBLE9BQUF1bUMsRUFBQUUsUUFBQSxHQUFBem1DLEVBQUEsVUFDQSxHQUFBNm1DLEVBQUE3bUMsR0FDQSxPQUFBdW1DLEVBQUFFLFFBQUEsR0FBQXptQyxFQUFBLFdBRUEsR0FBQThsQyxFQUFBOWxDLEdBQ0EsT0FBQXVtQyxFQUFBRSxRQUFBLGVBOUdBZSxDQUFBakIsRUFBQXZtQyxHQUNBLEdBQUFvTyxFQUNBLE9BQUFBLEVBSUEsSUFBQStILEVBQUExVyxPQUFBMFcsS0FBQW5XLEdBQ0F5bkMsRUFwQ0EsU0FBQXA5QixHQUNBLElBQUFxOUIsS0FNQSxPQUpBcjlCLEVBQUErTCxRQUFBLFNBQUFsUCxFQUFBd08sR0FDQWd5QixFQUFBeGdDLElBQUEsSUFHQXdnQyxFQTZCQUMsQ0FBQXh4QixHQVFBLEdBTkFvd0IsRUFBQU8sYUFDQTN3QixFQUFBMVcsT0FBQW1vQyxvQkFBQTVuQyxJQUtBc2tCLEVBQUF0a0IsS0FDQW1XLEVBQUEzTixRQUFBLGVBQUEyTixFQUFBM04sUUFBQSxtQkFDQSxPQUFBcS9CLEVBQUE3bkMsR0FJQSxPQUFBbVcsRUFBQXRVLE9BQUEsQ0FDQSxHQUFBOGYsRUFBQTNoQixHQUFBLENBQ0EsSUFBQVYsRUFBQVUsRUFBQVYsS0FBQSxLQUFBVSxFQUFBVixLQUFBLEdBQ0EsT0FBQWluQyxFQUFBRSxRQUFBLFlBQUFubkMsRUFBQSxlQUVBLEdBQUFxakIsRUFBQTNpQixHQUNBLE9BQUF1bUMsRUFBQUUsUUFBQXhVLE9BQUF0eEIsVUFBQTRRLFNBQUFyUyxLQUFBYyxHQUFBLFVBRUEsR0FBQTBpQixFQUFBMWlCLEdBQ0EsT0FBQXVtQyxFQUFBRSxRQUFBdm5CLEtBQUF2ZSxVQUFBNFEsU0FBQXJTLEtBQUFjLEdBQUEsUUFFQSxHQUFBc2tCLEVBQUF0a0IsR0FDQSxPQUFBNm5DLEVBQUE3bkMsR0FJQSxJQTJDQThuQyxFQTNDQXJ6QixFQUFBLEdBQUFwSyxHQUFBLEVBQUEwOUIsR0FBQSxJQUE0QyxNQUc1Q2orQixFQUFBOUosS0FDQXFLLEdBQUEsRUFDQTA5QixHQUFBLFVBSUFwbUIsRUFBQTNoQixNQUVBeVUsRUFBQSxjQURBelUsRUFBQVYsS0FBQSxLQUFBVSxFQUFBVixLQUFBLElBQ0EsS0FrQkEsT0FkQXFqQixFQUFBM2lCLEtBQ0F5VSxFQUFBLElBQUF3ZCxPQUFBdHhCLFVBQUE0USxTQUFBclMsS0FBQWMsSUFJQTBpQixFQUFBMWlCLEtBQ0F5VSxFQUFBLElBQUF5SyxLQUFBdmUsVUFBQXFuQyxZQUFBOW9DLEtBQUFjLElBSUFza0IsRUFBQXRrQixLQUNBeVUsRUFBQSxJQUFBb3pCLEVBQUE3bkMsSUFHQSxJQUFBbVcsRUFBQXRVLFFBQUF3SSxHQUFBLEdBQUFySyxFQUFBNkIsT0FJQXVsQyxFQUFBLEVBQ0F6a0IsRUFBQTNpQixHQUNBdW1DLEVBQUFFLFFBQUF4VSxPQUFBdHhCLFVBQUE0USxTQUFBclMsS0FBQWMsR0FBQSxVQUVBdW1DLEVBQUFFLFFBQUEsdUJBSUFGLEVBQUFDLEtBQUFsaUMsS0FBQXRFLEdBSUE4bkMsRUFEQXo5QixFQXNDQSxTQUFBazhCLEVBQUF2bUMsRUFBQW9uQyxFQUFBSyxFQUFBdHhCLEdBRUEsSUFEQSxJQUFBMnhCLEtBQ0Evb0MsRUFBQSxFQUFBQyxFQUFBZ0IsRUFBQTZCLE9BQW1DOUMsRUFBQUMsSUFBT0QsRUFDMUM2QixFQUFBWixFQUFBMnlCLE9BQUE1ekIsSUFDQStvQyxFQUFBeGpDLEtBQUEyakMsRUFBQTFCLEVBQUF2bUMsRUFBQW9uQyxFQUFBSyxFQUNBOVUsT0FBQTV6QixJQUFBLElBRUErb0MsRUFBQXhqQyxLQUFBLElBU0EsT0FOQTZSLEVBQUFDLFFBQUEsU0FBQTlWLEdBQ0FBLEVBQUFzaEIsTUFBQSxVQUNBa21CLEVBQUF4akMsS0FBQTJqQyxFQUFBMUIsRUFBQXZtQyxFQUFBb25DLEVBQUFLLEVBQ0FubkMsR0FBQSxNQUdBd25DLEVBckRBSSxDQUFBM0IsRUFBQXZtQyxFQUFBb25DLEVBQUFLLEVBQUF0eEIsR0FFQUEsRUFBQXhMLElBQUEsU0FBQXJLLEdBQ0EsT0FBQTJuQyxFQUFBMUIsRUFBQXZtQyxFQUFBb25DLEVBQUFLLEVBQUFubkMsRUFBQStKLEtBSUFrOEIsRUFBQUMsS0FBQTJCLE1BNkdBLFNBQUFMLEVBQUFyekIsRUFBQXN6QixHQVFBLEdBTkFELEVBQUFwSCxPQUFBLFNBQUEwSCxFQUFBMXNCLEdBR0EsT0FGQTJzQixFQUNBM3NCLEVBQUFsVCxRQUFBLFVBQUE2L0IsRUFDQUQsRUFBQTFzQixFQUFBOVAsUUFBQSxzQkFBQS9KLE9BQUEsR0FDRyxHQUVILEdBQ0EsT0FBQWttQyxFQUFBLElBQ0EsS0FBQXR6QixFQUFBLEdBQUFBLEVBQUEsT0FDQSxJQUNBcXpCLEVBQUF2MUIsS0FBQSxTQUNBLElBQ0F3MUIsRUFBQSxHQUdBLE9BQUFBLEVBQUEsR0FBQXR6QixFQUFBLElBQUFxekIsRUFBQXYxQixLQUFBLFVBQUF3MUIsRUFBQSxHQTVIQU8sQ0FBQVIsRUFBQXJ6QixFQUFBc3pCLElBeEJBQSxFQUFBLEdBQUF0ekIsRUFBQXN6QixFQUFBLEdBK0NBLFNBQUFGLEVBQUE3bkMsR0FDQSxVQUFBbUgsTUFBQXhHLFVBQUE0USxTQUFBclMsS0FBQWMsR0FBQSxJQXdCQSxTQUFBaW9DLEVBQUExQixFQUFBdm1DLEVBQUFvbkMsRUFBQUssRUFBQW5uQyxFQUFBK0osR0FDQSxJQUFBL0ssRUFBQW00QixFQUFBOFEsRUFzQ0EsSUFyQ0FBLEVBQUE5b0MsT0FBQW1tQix5QkFBQTVsQixFQUFBTSxLQUF5RE4sUUFBQU0sS0FDekRWLElBRUE2M0IsRUFEQThRLEVBQUE3TixJQUNBNkwsRUFBQUUsUUFBQSw2QkFFQUYsRUFBQUUsUUFBQSxzQkFHQThCLEVBQUE3TixNQUNBakQsRUFBQThPLEVBQUFFLFFBQUEsdUJBR0E3bEMsRUFBQTZtQyxFQUFBbm5DLEtBQ0FoQixFQUFBLElBQUFnQixFQUFBLEtBRUFtM0IsSUFDQThPLEVBQUFDLEtBQUFoK0IsUUFBQSsvQixFQUFBdm9DLE9BQUEsR0FFQXkzQixFQURBcU8sRUFBQXNCLEdBQ0FGLEVBQUFYLEVBQUFnQyxFQUFBdm9DLE1BQUEsTUFFQWtuQyxFQUFBWCxFQUFBZ0MsRUFBQXZvQyxNQUFBb25DLEVBQUEsSUFFQTUrQixRQUFBLFdBRUFpdkIsRUFEQXB0QixFQUNBb3RCLEVBQUF6WixNQUFBLE1BQUFyVCxJQUFBLFNBQUE2dEIsR0FDQSxXQUFBQSxJQUNXam1CLEtBQUEsTUFBQWkyQixPQUFBLEdBRVgsS0FBQS9RLEVBQUF6WixNQUFBLE1BQUFyVCxJQUFBLFNBQUE2dEIsR0FDQSxZQUFBQSxJQUNXam1CLEtBQUEsT0FJWGtsQixFQUFBOE8sRUFBQUUsUUFBQSx5QkFHQVYsRUFBQXptQyxHQUFBLENBQ0EsR0FBQStLLEdBQUEvSixFQUFBc2hCLE1BQUEsU0FDQSxPQUFBNlYsR0FFQW40QixFQUFBMFMsS0FBQUMsVUFBQSxHQUFBM1IsSUFDQXNoQixNQUFBLGlDQUNBdGlCLElBQUFrcEMsT0FBQSxFQUFBbHBDLEVBQUF1QyxPQUFBLEdBQ0F2QyxFQUFBaW5DLEVBQUFFLFFBQUFubkMsRUFBQSxVQUVBQSxJQUFBc00sUUFBQSxZQUNBQSxRQUFBLFlBQ0FBLFFBQUEsZ0JBQ0F0TSxFQUFBaW5DLEVBQUFFLFFBQUFubkMsRUFBQSxXQUlBLE9BQUFBLEVBQUEsS0FBQW00QixFQTJCQSxTQUFBM3RCLEVBQUEyK0IsR0FDQSxPQUFBcm5DLE1BQUEwSSxRQUFBMitCLEdBSUEsU0FBQTVCLEVBQUFuaEMsR0FDQSx3QkFBQUEsRUFJQSxTQUFBb2dDLEVBQUFwZ0MsR0FDQSxjQUFBQSxFQVNBLFNBQUE2aEMsRUFBQTdoQyxHQUNBLHVCQUFBQSxFQUlBLFNBQUFrZ0MsRUFBQWxnQyxHQUNBLHVCQUFBQSxFQVNBLFNBQUFxZ0MsRUFBQXJnQyxHQUNBLGdCQUFBQSxFQUlBLFNBQUFpZCxFQUFBK2xCLEdBQ0EsT0FBQW5TLEVBQUFtUyxJQUFBLG9CQUFBQyxFQUFBRCxHQUlBLFNBQUFuUyxFQUFBN3dCLEdBQ0EsdUJBQUFBLEdBQUEsT0FBQUEsRUFJQSxTQUFBZ2QsRUFBQXJqQixHQUNBLE9BQUFrM0IsRUFBQWwzQixJQUFBLGtCQUFBc3BDLEVBQUF0cEMsR0FJQSxTQUFBaWxCLEVBQUFyaUIsR0FDQSxPQUFBczBCLEVBQUF0MEIsS0FDQSxtQkFBQTBtQyxFQUFBMW1DLGlCQUFBa0YsT0FJQSxTQUFBd2EsRUFBQWpjLEdBQ0EseUJBQUFBLEVBZ0JBLFNBQUFpakMsRUFBQW5wQyxHQUNBLE9BQUFDLE9BQUFrQixVQUFBNFEsU0FBQXJTLEtBQUFNLEdBSUEsU0FBQW9wQyxFQUFBcG9DLEdBQ0EsT0FBQUEsRUFBQSxPQUFBQSxFQUFBK1EsU0FBQSxJQUFBL1EsRUFBQStRLFNBQUEsSUFwYkExUyxFQUFBZ3FDLFNBQUEsU0FBQW5PLEdBSUEsR0FIQXFMLEVBQUFLLEtBQ0FBLEVBQUExM0IsRUFBQXNCLElBQUE4NEIsWUFBQSxJQUNBcE8sSUFBQXFPLGVBQ0ExQyxFQUFBM0wsR0FDQSxPQUFBekksT0FBQSxNQUFBeUksRUFBQSxXQUFBemYsS0FBQW1yQixHQUFBLENBQ0EsSUFBQTRDLEVBQUF0NkIsRUFBQXM2QixJQUNBM0MsRUFBQTNMLEdBQUEsV0FDQSxJQUFBRCxFQUFBNTdCLEVBQUE0YSxPQUFBNUosTUFBQWhSLEVBQUF1TCxXQUNBekUsUUFBQWhELE1BQUEsWUFBQSszQixFQUFBc08sRUFBQXZPLFNBR0E0TCxFQUFBM0wsR0FBQSxhQUdBLE9BQUEyTCxFQUFBM0wsSUFvQ0E3N0IsRUFBQWlqQixVQUlBQSxFQUFBOGtCLFFBQ0FxQyxNQUFBLE1BQ0FDLFFBQUEsTUFDQUMsV0FBQSxNQUNBQyxTQUFBLE1BQ0FDLE9BQUEsT0FDQUMsTUFBQSxPQUNBQyxPQUFBLE9BQ0FDLE1BQUEsT0FDQUMsTUFBQSxPQUNBQyxPQUFBLE9BQ0FDLFNBQUEsT0FDQUMsS0FBQSxPQUNBQyxRQUFBLFFBSUEvbkIsRUFBQTlOLFFBQ0E4MUIsUUFBQSxPQUNBL1UsT0FBQSxTQUNBZ1YsUUFBQSxTQUNBNTdCLFVBQUEsT0FDQTY3QixLQUFBLE9BQ0FoUCxPQUFBLFFBQ0FpUCxLQUFBLFVBRUFDLE9BQUEsT0FrUkFyckMsRUFBQWlMLFVBS0FqTCxFQUFBZ29DLFlBS0Fob0MsRUFBQWluQyxTQUtBam5DLEVBQUFzckMsa0JBSEEsU0FBQXprQyxHQUNBLGFBQUFBLEdBT0E3RyxFQUFBMG9DLFdBS0Exb0MsRUFBQSttQyxXQUtBL21DLEVBQUF1ckMsU0FIQSxTQUFBMWtDLEdBQ0EsdUJBQUFBLEdBT0E3RyxFQUFBa25DLGNBS0FsbkMsRUFBQThqQixXQUtBOWpCLEVBQUEwM0IsV0FLQTEzQixFQUFBNmpCLFNBTUE3akIsRUFBQXlsQixVQUtBemxCLEVBQUE4aUIsYUFVQTlpQixFQUFBdWtCLFlBUkEsU0FBQTFkLEdBQ0EsY0FBQUEsR0FDQSxrQkFBQUEsR0FDQSxpQkFBQUEsR0FDQSxpQkFBQUEsR0FDQSxpQkFBQUEsUUFDQSxJQUFBQSxHQUlBN0csRUFBQTRoQixTQUFtQjloQixFQUFRLElBWTNCLElBQUEwckMsR0FBQSxzREFDQSxtQkE2Q0EsU0FBQXpwQyxFQUFBMFYsRUFBQTJHLEdBQ0EsT0FBQXhkLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQW9YLEVBQUEyRyxHQWpDQXBlLEVBQUErRyxJQUFBLFdBQ0FELFFBQUFDLElBQUEsVUFYQSxXQUNBLElBQUF2RyxFQUFBLElBQUE2ZixLQUNBL0YsR0FBQXl2QixFQUFBdnBDLEVBQUFpckMsWUFDQTFCLEVBQUF2cEMsRUFBQWtyQyxjQUNBM0IsRUFBQXZwQyxFQUFBbXJDLGVBQUFqNEIsS0FBQSxLQUNBLE9BQUFsVCxFQUFBb3JDLFVBQUFKLEVBQUFockMsRUFBQXFyQyxZQUFBdnhCLEdBQUE1RyxLQUFBLEtBTUFvNEIsR0FBQTlyQyxFQUFBNGEsT0FBQTVKLE1BQUFoUixFQUFBdUwsYUFpQkF2TCxFQUFBa21CLFNBQW1CcG1CLEVBQVEsSUFFM0JFLEVBQUFrb0MsUUFBQSxTQUFBNkQsRUFBQXJ4QixHQUVBLElBQUFBLElBQUFnZCxFQUFBaGQsR0FBQSxPQUFBcXhCLEVBSUEsSUFGQSxJQUFBejBCLEVBQUExVyxPQUFBMFcsS0FBQW9ELEdBQ0F4YSxFQUFBb1gsRUFBQXRVLE9BQ0E5QyxLQUNBNnJDLEVBQUF6MEIsRUFBQXBYLElBQUF3YSxFQUFBcEQsRUFBQXBYLElBRUEsT0FBQTZyQyx5Q0Nwa0JBOXJDLEVBQUFELFFBQUEsU0FBQTZHLEdBQ0EsT0FBQUEsR0FBQSxpQkFBQUEsR0FDQSxtQkFBQUEsRUFBQTZnQixNQUNBLG1CQUFBN2dCLEVBQUFtbEMsTUFDQSxtQkFBQW5sQyxFQUFBb2xDLDBCQ0pBLG1CQUFBcnJDLE9BQUFZLE9BRUF2QixFQUFBRCxRQUFBLFNBQUFtSyxFQUFBK2hDLEdBQ0EvaEMsRUFBQWdpQyxPQUFBRCxFQUNBL2hDLEVBQUFySSxVQUFBbEIsT0FBQVksT0FBQTBxQyxFQUFBcHFDLFdBQ0FZLGFBQ0F2QixNQUFBZ0osRUFDQXJKLFlBQUEsRUFDQXdtQixVQUFBLEVBQ0FGLGNBQUEsTUFNQW5uQixFQUFBRCxRQUFBLFNBQUFtSyxFQUFBK2hDLEdBQ0EvaEMsRUFBQWdpQyxPQUFBRCxFQUNBLElBQUFFLEVBQUEsYUFDQUEsRUFBQXRxQyxVQUFBb3FDLEVBQUFwcUMsVUFDQXFJLEVBQUFySSxVQUFBLElBQUFzcUMsRUFDQWppQyxFQUFBckksVUFBQVksWUFBQXlILGtDQ3BCQSxTQUFBMEYsR0FDQSxJQUFBdzhCLEVBQXlCdnNDLEVBQVEsSUFDakN3c0MsRUFBaUJ4c0MsRUFBUSxJQUN6QnlzQyxFQUFnQnpzQyxFQUFRLElBQ3hCMHNDLEVBQWMxc0MsRUFBUSxJQUN0QjJzQyxFQUFvQjNzQyxFQUFRLElBQzVCNHNDLEVBQUE5ckMsT0FBQXNxQixpQkFDQXloQixFQUFBLFVBQUE5OEIsRUFBQSs4QixXQUFBLFVBQUF4d0IsS0FBQXZNLEVBQUFzQixJQUFBMDdCLE1BRUEsU0FBQUMsRUFBQTEzQixHQUVBalQsS0FBQTRxQyxRQUFBMzNCLFFBQUE5RixJQUFBOEYsRUFBQTIzQixRQUFBMzNCLEVBQUEyM0IsUUFBQU4sRUFJQUUsSUFDQUwsRUFBQTNCLEtBQUE3aUMsS0FBQSxTQUdBLElBQUFxTixFQUFBLFdBQ0EsSUFBQXF6QixLQVlBLE9BVkE1bkMsT0FBQTBXLEtBQUFnMUIsR0FBQS8wQixRQUFBLFNBQUE5VixHQUNBNnFDLEVBQUE3cUMsR0FBQXVyQyxRQUFBLElBQUE1WixPQUFBaVosRUFBQUMsRUFBQTdxQyxHQUFBMG1CLE9BQUEsS0FFQXFnQixFQUFBL21DLElBQ0FWLElBQUEsV0FDQSxPQUFBa3NDLEVBQUE1c0MsS0FBQThCLFVBQUErcUMsUUFBQWpqQyxPQUFBeEksUUFLQSttQyxFQWJBLEdBZ0JBMkUsRUFBQVQsRUFBQSxhQUEyQ3YzQixHQUUzQyxTQUFBODNCLEVBQUFDLEdBQ0EsSUFBQUUsRUFBQSxXQUNBLE9BYUEsV0FFQSxJQUFBcjhCLEVBQUF4RixVQUNBOGhDLEVBQUF0OEIsRUFBQS9OLE9BQ0E0MUIsRUFBQSxJQUFBeVUsR0FBQXZaLE9BQUF2b0IsVUFBQSxJQUVBLEdBQUE4aEMsRUFBQSxFQUVBLFFBQUF0cUMsRUFBQSxFQUFpQkEsRUFBQXNxQyxFQUFhdHFDLElBQzlCNjFCLEdBQUEsSUFBQTduQixFQUFBaE8sR0FJQSxJQUFBWixLQUFBNHFDLFVBQUFuVSxFQUNBLE9BQUFBLEVBR0EsSUFBQTBVLEVBQUFuckMsS0FBQStxQyxRQUNBaHRDLEVBQUFvdEMsRUFBQXRxQyxPQUtBdXFDLEVBQUFqQixFQUFBa0IsSUFBQTFsQyxNQUNBNmtDLElBQUEsSUFBQVcsRUFBQTNqQyxRQUFBLGNBQUEyakMsRUFBQTNqQyxRQUFBLFVBQ0EyaUMsRUFBQWtCLElBQUExbEMsS0FBQSxJQUdBLEtBQUE1SCxLQUFBLENBQ0EsSUFBQThqQyxFQUFBc0ksRUFBQWdCLEVBQUFwdEMsSUFLQTA0QixFQUFBb0wsRUFBQWw4QixLQUFBOHdCLEVBQUE3ckIsUUFBQWkzQixFQUFBZ0osUUFBQWhKLEVBQUFsOEIsTUFBQWs4QixFQUFBN2IsTUFNQSxPQUZBbWtCLEVBQUFrQixJQUFBMWxDLEtBQUF5bEMsRUFFQTNVLEdBckRBNW5CLE1BQUFvOEIsRUFBQTdoQyxZQVVBLE9BUEE2aEMsRUFBQUYsVUFDQUUsRUFBQUwsUUFBQTVxQyxLQUFBNHFDLFFBSUFLLEVBQUE5cUMsVUFBQTZxQyxFQUVBQyxFQTREQVYsRUFBQUksRUFBQWhyQyxVQWRBLFdBQ0EsSUFBQTBtQyxLQVVBLE9BUkE1bkMsT0FBQTBXLEtBQUFuQyxHQUFBb0MsUUFBQSxTQUFBOVcsR0FDQStuQyxFQUFBL25DLElBQ0FNLElBQUEsV0FDQSxPQUFBa3NDLEVBQUE1c0MsS0FBQThCLE1BQUExQixRQUtBK25DLEVBR0FpRixJQUVBeHRDLEVBQUFELFFBQUEsSUFBQThzQyxFQUNBN3NDLEVBQUFELFFBQUFtVixPQUFBbTNCLEVBQ0Fyc0MsRUFBQUQsUUFBQTB0QyxTQUFBbEIsRUFDQXZzQyxFQUFBRCxRQUFBMnRDLFdBQUFwQixFQUNBdHNDLEVBQUFELFFBQUF5c0MsZ0VDakhBLElBQUFtQixFQUFBLHNCQUVBM3RDLEVBQUFELFFBQUEsU0FBQTQ0QixHQUNBLG9CQUFBQSxFQUNBLFVBQUF6dEIsVUFBQSxxQkFHQSxPQUFBeXRCLEVBQUE3ckIsUUFBQTZnQyxFQUFBLHdDQ1RBLFNBQUEzdEMsR0E2REFXLE9BQUFDLGVBQUFaLEVBQUEsV0FDQWEsWUFBQSxFQUNBQyxJQTdEQSxXQUNBLElBQUFvVSxHQUNBMDRCLFdBQ0FDLE9BQUEsS0FDQTFELE1BQUEsTUFDQW9ELEtBQUEsTUFDQW5ELFFBQUEsTUFDQUMsV0FBQSxNQUNBQyxTQUFBLE1BQ0F3RCxRQUFBLE1BQ0FDLGVBQUEsT0FFQWpHLFFBQ0EyQyxPQUFBLE9BQ0FLLEtBQUEsT0FDQUYsT0FBQSxPQUNBRyxRQUFBLE9BQ0FMLE1BQUEsT0FDQUcsU0FBQSxPQUNBRixNQUFBLE9BQ0FKLE9BQUEsT0FDQXlELE1BQUEsUUFFQUMsVUFDQUMsU0FBQSxPQUNBQyxPQUFBLE9BQ0FDLFNBQUEsT0FDQUMsVUFBQSxPQUNBQyxRQUFBLE9BQ0FDLFdBQUEsT0FDQUMsUUFBQSxPQUNBQyxTQUFBLFNBeUJBLE9BcEJBdjVCLEVBQUE0eUIsT0FBQTBDLEtBQUF0MUIsRUFBQTR5QixPQUFBa0csS0FFQXJ0QyxPQUFBMFcsS0FBQW5DLEdBQUFvQyxRQUFBLFNBQUFvM0IsR0FDQSxJQUFBQyxFQUFBejVCLEVBQUF3NUIsR0FFQS90QyxPQUFBMFcsS0FBQXMzQixHQUFBcjNCLFFBQUEsU0FBQXMzQixHQUNBLElBQUE1NEIsRUFBQTI0QixFQUFBQyxHQUVBMTVCLEVBQUEwNUIsR0FBQUQsRUFBQUMsSUFDQS9tQyxLQUFBLEtBQUFtTyxFQUFBLE9BQ0FrUyxNQUFBLEtBQUFsUyxFQUFBLFVBSUFyVixPQUFBQyxlQUFBc1UsRUFBQXc1QixHQUNBeHRDLE1BQUF5dEMsRUFDQTl0QyxZQUFBLE1BSUFxVSx3REN6REEsSUFBQTI1QixFQUFnQmh2QyxFQUFRLEdBQVJBLEdBRWhCRyxFQUFBRCxRQUFBLFNBQUE0NEIsR0FDQSx1QkFBQUEsSUFBQTdyQixRQUFBK2hDLEVBQUEsSUFBQWxXLGlDQ0hBMzRCLEVBQUFELFFBQUEsV0FDQSxtSENEQSxJQUFBOHVDLEVBQWdCaHZDLEVBQVEsSUFDeEIrcEMsRUFBQSxJQUFBelcsT0FBQTBiLElBQUF0N0IsUUFDQXZULEVBQUFELFFBQUE2cEMsRUFBQXp0QixLQUFBMWEsS0FBQW1vQyxpQ0NGQTVwQyxFQUFBRCxRQUFBLFdBQ0Esb0hDRkEsU0FBQTZQLEdBQ0EsSUFBQXVCLEVBQUF2QixFQUFBdUIsS0FFQTI5QixFQUFBMzlCLEVBQUF6SCxRQUFBLE1BQ0FxbEMsRUFBQSxTQUFBQyxHQUNBQSxFQUFBLEtBQUFBLEVBQ0EsSUFBQW5XLEVBQUExbkIsRUFBQXpILFFBQUFzbEMsR0FDQSxXQUFBblcsS0FBQSxJQUFBaVcsR0FBQWpXLEVBQUFpVyxJQUdBOXVDLEVBQUFELFFBQ0EsZ0JBQUE2UCxFQUFBc0IsT0FJQTY5QixFQUFBLGFBQ0FBLEVBQUEsY0FDQUEsRUFBQSxxQkFJQUEsRUFBQSxVQUNBQSxFQUFBLFdBQ0FBLEVBQUEsZUFDQUEsRUFBQSxvQkFJQW4vQixFQUFBcS9CLFNBQUFyL0IsRUFBQXEvQixPQUFBQyxTQUlBLFVBQUF0L0IsRUFBQSs4QixVQUlBLGNBQUEvOEIsRUFBQXNCLEtBSUEsU0FBQXRCLEVBQUFzQixJQUFBMDdCLFFBSUEsaURBQUF6d0IsS0FBQXZNLEVBQUFzQixJQUFBMDdCOzs7OztFQ3BDQSxJQUFBemhCLEVBQUF4cUIsT0FBQXdxQixzQkFDQXJwQixFQUFBbkIsT0FBQWtCLFVBQUFDLGVBQ0FxdEMsRUFBQXh1QyxPQUFBa0IsVUFBQXV0QyxxQkFzREFwdkMsRUFBQUQsUUE1Q0EsV0FDQSxJQUNBLElBQUFZLE9BQUE4YixPQUNBLFNBTUEsSUFBQTR5QixFQUFBLElBQUF4YixPQUFBLE9BRUEsR0FEQXdiLEVBQUEsUUFDQSxNQUFBMXVDLE9BQUFtb0Msb0JBQUF1RyxHQUFBLEdBQ0EsU0FLQSxJQURBLElBQUFDLEtBQ0FydkMsRUFBQSxFQUFpQkEsRUFBQSxHQUFRQSxJQUN6QnF2QyxFQUFBLElBQUF6YixPQUFBMGIsYUFBQXR2QyxNQUtBLGtCQUhBVSxPQUFBbW9DLG9CQUFBd0csR0FBQXpqQyxJQUFBLFNBQUFuSyxHQUNBLE9BQUE0dEMsRUFBQTV0QyxLQUVBK1IsS0FBQSxJQUNBLFNBSUEsSUFBQSs3QixLQUlBLE1BSEEsdUJBQUF0d0IsTUFBQSxJQUFBNUgsUUFBQSxTQUFBbTRCLEdBQ0FELEVBQUFDLE9BR0EseUJBREE5dUMsT0FBQTBXLEtBQUExVyxPQUFBOGIsVUFBa0MreUIsSUFBQS83QixLQUFBLElBTWhDLE1BQUFqUCxHQUVGLFVBSUFrckMsR0FBQS91QyxPQUFBOGIsT0FBQSxTQUFBblAsRUFBQWlHLEdBS0EsSUFKQSxJQUFBM0ksRUFFQStrQyxFQURBQyxFQXREQSxTQUFBeG5DLEdBQ0EsVUFBQUEsUUFBQWlILElBQUFqSCxFQUNBLFVBQUE4QyxVQUFBLHlEQUdBLE9BQUF2SyxPQUFBeUgsR0FpREF5bkMsQ0FBQXZpQyxHQUdBdEwsRUFBQSxFQUFnQkEsRUFBQXNKLFVBQUF2SSxPQUFzQmYsSUFBQSxDQUd0QyxRQUFBUixLQUZBb0osRUFBQWpLLE9BQUEySyxVQUFBdEosSUFHQUYsRUFBQTFCLEtBQUF3SyxFQUFBcEosS0FDQW91QyxFQUFBcHVDLEdBQUFvSixFQUFBcEosSUFJQSxHQUFBMnBCLEVBQUEsQ0FDQXdrQixFQUFBeGtCLEVBQUF2Z0IsR0FDQSxRQUFBM0ssRUFBQSxFQUFrQkEsRUFBQTB2QyxFQUFBNXNDLE9BQW9COUMsSUFDdENrdkMsRUFBQS91QyxLQUFBd0ssRUFBQStrQyxFQUFBMXZDLE1BQ0EydkMsRUFBQUQsRUFBQTF2QyxJQUFBMkssRUFBQStrQyxFQUFBMXZDLE1BTUEsT0FBQTJ2QyxvQkN2RkE1dkMsRUFBQUQsUUFBaUJGLEVBQVEsa0NDQ3pCRyxFQUFBRCxRQUFBK3ZDLEVBQ0FBLEVBQUFDLFFBQXNCbHdDLEVBQVEsSUFFOUIsSUFBQW13QyxFQUFBRixFQUFBLGVBV0EsU0FBQUEsRUFBQXR2QyxFQUFBK1QsRUFBQTA3QixFQUFBRixHQUNBLElBQUFHLEVBQ0FDLEVBc0ZBLE9BbkZBNTdCLEVBQUE2N0IsRUFBQTlrQyxVQUFBLEVBQUFqRCxNQUFBZ29DLEdBQUFDLEVBQUFDLElBQ0FOLEVBQUFHLEVBQUE5a0MsVUFBQSxLQUF5Q2dsQyxHQUFBQyxJQUN6Q1IsRUFBQUssRUFBQTlrQyxVQUFBLEVBQUExSSxFQUFBMnRDLE1BQ0EvdkMsRUFBQTR2QyxFQUFBOWtDLFVBQUEsRUFBQWlKLElBQUFsTSxNQUFBLFFBQUFrTSxFQUFBMVMsVUFBQWl1QyxZQUFBdHZDLEtBQUFnd0MsR0FBQUgsRUFBQUMsRUFBQUMsS0FHQUosRUFBQTU3QixJQUFBbE0sUUFDQTBuQyxJQUFBbnRDLElBQUFtdEMsRUFBQUQsRUFBQUMsUUFBQWgxQixPQUdBbTFCLEVBQUEsU0FBQTVzQixFQUFBbXRCLEdBQ0EsSUFBQXpvQyxFQUNBMmhDLEVBQ0ErRyxFQUNBendDLEVBQ0F5UyxFQUNBMEssRUFHQSxLQUFBbGIsZ0JBQUFndUMsR0FBQSxXQUFBQSxFQUFBNXNCLEVBQUFtdEIsR0ErQkEsV0E1QkF2dUMsS0FBQU8sWUFBQWpDLEtBQ0FHLE9BQUFDLGVBQUFzQixLQUFBTyxZQUFBLFFBQ0E1QixZQUFBLEVBQ0FzbUIsY0FBQSxFQUNBam1CLE1BQUFWLEVBQ0E2bUIsVUFBQSxJQUlBLGlCQUFBL0QsT0FBb0RBLFlBQ3BEQSxXQUdBcW1CLEVBQUF6bkMsS0FBQTR0QyxZQUFBYSxNQUFBcDFCLE1BQUEsR0FBQXExQixVQUFBL2tDLElBQUEsU0FBQTNLLEdBQTRFLE9BQUFBLEVBQUErdUMsY0FDNUV6cUMsS0FBQThkLEdBQ0FxbUIsRUFBQWtILFlBQ0F6ekIsRUFBQXpjLE9BQUE4YixPQUFBMUwsTUFBQXBRLE9BQUFncEMsR0FHQTNoQyxFQUFBOUYsS0FDQXd1QyxLQUNBL3ZDLE9BQUEwVyxLQUFBeTRCLEVBQUFDLFNBQUF6NEIsUUFBQSxTQUFBOVYsR0FDQWt2QyxFQUFBbHZDLEdBQUEsU0FBQTRiLEVBQUEwekIsR0FDQWhCLEVBQUFDLFFBQUF2dUMsR0FBQXBCLEtBQUE0SCxFQUFBb1YsRUFBQTB6QixFQUFBSixNQUtBendDLEVBQUFpQyxLQUFBNHRDLFlBQUFhLE1BQUE1dEMsT0FBQSxFQUFtRDlDLEdBQUEsRUFBUUEsS0FDM0R5UyxFQUFBeFEsS0FBQTR0QyxZQUFBYSxNQUFBMXdDLElBQ0E4dkMsVUFBQW50QyxHQUNBOFAsRUFBQXE5QixRQUFBM3ZDLEtBQUE4QixLQUFBa2IsRUFBQXF6QixFQUFBQyxLQU1BN3VDLFVBQUFsQixPQUFBWSxPQUFBZ1QsRUFBQTFTLFdBQ0FxdUMsRUFBQXJ1QyxVQUFBWSxZQUFBeXRDLEVBR0FBLEVBQUFydUMsVUFBQXJCLE9BR0EwdkMsRUFBQXJ1QyxVQUFBaXVDLGFBQ0FhLE1BQUFSLEtBQUE1N0IsRUFBQTFTLFVBQUFpdUMsWUFBQWEsTUFBQXAxQixNQUFBLEdBQ0F3MEIsVUFDQXZ2QyxPQUNBK1QsU0FDQTA3QixjQUVBQyxFQUFBcnVDLFVBQUFpdUMsWUFBQWEsTUFBQUUsUUFBQVgsRUFBQXJ1QyxVQUFBaXVDLGFBR0FJLEVBQUFydUMsVUFBQTRRLFNBQUEsV0FDQSxJQUFBa0YsRUFBQXpWLEtBQUE0dEMsWUFBQWEsTUFBQXp1QyxLQUFBNHRDLFlBQUFhLE1BQUE1dEMsT0FBQSxHQUFBdkMsS0FHQSxPQUZBMEIsS0FBQTZoQyxPQUFBcHNCLEdBQUEsSUFBQXpWLEtBQUE2aEMsTUFDQTdoQyxLQUFBb2hCLFVBQUEzTCxHQUFBLEtBQUF6VixLQUFBb2hCLFNBQ0EzTCxHQUdBdTRCLEVBTUEsU0FBQUUsRUFBQXQvQixFQUFBc0ksRUFBQTIzQixFQUFBL2tDLEVBQUFnbEMsR0FDQSxJQUVBL3dDLEVBQ0FxVixFQUVBbE4sRUFMQTZvQyxHQUFBLEVBQ0FDLEdBQUEsRUFHQTFnQyxFQUFBNEksRUFBQXRJLEVBQUEvTixPQUFBcVcsRUFBQXRJLEVBQUEvTixPQUdBLElBQUE5QyxFQUFBLEVBQWVBLEdBQUF1USxFQUFVdlEsSUFBQSxDQUV6QixHQURBbUksRUFBQTBJLEVBQUE3USxJQUNBLElBQUFneEMsRUFDQSxJQUFBMzdCLEVBQUEsRUFBdUJBLEVBQUEwN0IsRUFBQWp1QyxPQUF3QnVTLElBQy9DMDdCLEVBQUExN0IsR0FBQWxOLEtBQUE2b0MsRUFBQWh4QyxJQUdBLElBQUFpeEMsR0FBQWxsQyxFQUFBNUQsS0FDQThvQyxFQUFBanhDLEdBSUEsUUFBQWl4QyxJQUFBLElBQUFELEtBQUFDLEVBQUEsVUFBQWxCLEVBQUFtQixNQUNBLFdBQUFELEVBQUFwZ0MsRUFBQW9nQyxHQUFBSCxFQUdBLFNBQUFSLEVBQUFydkMsR0FDQSx5QkFBQUEsT0FBQW1ILFFBQUFuSCxFQUFBVyxVQUFBaXVDLFlBR0EsU0FBQVUsRUFBQXR2QyxHQUNBLHVCQUFBQSxFQUdBLFNBQUFtdkMsRUFBQW52QyxHQUNBLHlCQUFBQSxRQUFBbUgsT0FBQW5ILEVBQUFXLFVBQUFpdUMsYUFHQSxTQUFBUSxFQUFBcHZDLEdBQ0EsT0FBQUEsR0FBQSxpQkFBQUEsRUFHQSxTQUFBMEIsS0FoSkFvdEMsRUFBQW1CLE1BQUFyQixFQUFBRSxHQUE4QjFzQixRQUFBLDBCQUFBeWdCLEtBQUEsd0NDSjlCaGtDLEVBQUFxeEMsY0FBQSxTQUFBbkIsRUFBQVEsRUFBQVYsR0FDQSxJQUFBenNCLEVBQ0F5c0IsRUFBQWgxQixLQUFBazFCLEVBQUFRLEVBQUFWLEdBRUF6c0IsRUFBQXBoQixLQUFBb2hCLFFBQ0Eyc0IsRUFBQW51QyxlQUFBLGNBQUF3aEIsR0FBQSxhQUFBMnNCLEVBQUE1c0IsU0FBQSxLQUNBNHNCLEVBQUFudUMsZUFBQSxjQUFBd2hCLEdBQUEsY0FBQTJzQixFQUFBb0IsU0FBQSxLQUNBbnZDLEtBQUFvaEIsV0FHQXZqQixFQUFBZ2IsS0FBQSxTQUFBazFCLEVBQUFRLEVBQUFDLEdBQ0EsSUFDQTNNLEVBSUFsZSxFQUxBN2QsRUFBQTlGLEtBRUE0dUMsR0FBa0JRLFlBQUFqcEMsTUFBQWtwQyxnQkFBQUMsVUFBQSxHQUNsQkMsRUFBQSxHQUNBQyxFQUFBcnBDLE1BQUFrcEMsZ0JBR0EsU0FBQUksSUFDQTlyQixFQUFBLEdBQUE3ZCxFQUFBeUssV0FDQXpLLEVBQUE2ZCxRQUFBcFMsS0FBQSxNQUlBZzlCLEdBQUEsaUJBQUFBLFVBQ0FBLEVBQUEzdUMsZUFBQSxnQkFDQSxpQkFBQTJ1QyxFQUFBYSxjQUNBN2dCLE1BQUFnZ0IsRUFBQWEsY0FDQWIsRUFBQWEsYUFBQSxJQUFBUixFQUFBUSxZQUFBYixFQUFBYSxhQUNBYixFQUFBM3VDLGVBQUEsY0FBQWd2QyxFQUFBVSxTQUFBZixFQUFBZSxVQUdBVixFQUFBVSxVQUFBdHZDLEtBQUE0dEMsWUFBQXY3QixTQUFBbE0sUUFHQTFILE9BQUEwVyxLQUFBNDRCLEdBQUEzNEIsUUFBQSxTQUFBOVYsR0FDQSxPQUFBQSxHQUNBLFdBQ0F1aUMsRUFBQWtNLEVBQUFsTSxXQUFBLEVBQ0EsTUFDQSxjQUNBME4sRUFBQXhCLEVBQUEzc0IsU0FBQSxHQUNBLE1BQ0EsUUFDQXRiLEVBQUF4RyxHQUFBeXVDLEVBQUF6dUMsTUFLQTZHLE1BQUFrcEMsZ0JBQUFULEVBQUFRLFlBQUEsR0FDQXpyQixHQUFBLElBQUF4ZCxPQUFBd2QsTUFBQTNHLE1BQUEsT0FDQXZWLE9BQUEsS0FDQWtjLEVBQUFnckIsUUFBQSxJQUNBeG9DLE1BQUFrcEMsZ0JBQUFHLEVBQ0F4dkMsS0FBQTJqQixRQUFBcFMsS0FBQSxNQUVBOVMsT0FBQUMsZUFBQXNCLEtBQUEsUUFDQWlsQixjQUFBLEVBQ0F0bUIsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQWlqQyxHQUVBbkksSUFBQSxTQUFBMTZCLEdBQ0E2aUMsRUFBQTdpQyxFQUNBeXdDLE9BSUFoeEMsT0FBQUMsZUFBQXNCLEtBQUEsV0FDQWlsQixjQUFBLEVBQ0F0bUIsWUFBQSxFQUNBQyxJQUFBLFdBQ0EsT0FBQTJ3QyxHQUVBN1YsSUFBQSxTQUFBMTZCLEdBQ0F1d0MsRUFBQXZ3QyxFQUNBeXdDLE9BS0FBLHVCQzNFQSxJQUFBQyxFQUFtQi94QyxFQUFRLElBQzNCZ3lDLEVBQWVoeUMsRUFBUSxJQThCdkJHLEVBQUFELFFBTkEsU0FBQXdMLEVBQUF1bUMsR0FDQSxPQUFBdm1DLEtBQUF4SSxPQUNBOHVDLEVBQUF0bUMsRUFBQXFtQyxFQUFBRSwwQkNuQ0EsU0FBQTl4QyxFQUFBa08sR0FRQSxJQUFBNmpDLEVBQW1CbHlDLEVBQVEsSUFHM0JteUMsRUFBQSxJQUdBQyxFQUFBLDRCQUdBQyxFQUFBLEVBQ0FDLEVBQUEsRUFHQUMsRUFBQSxJQUNBQyxFQUFBLGlCQUdBQyxFQUFBLHFCQUNBQyxFQUFBLGlCQUNBQyxFQUFBLG1CQUNBQyxFQUFBLGdCQUNBQyxFQUFBLGlCQUNBQyxFQUFBLG9CQUNBQyxFQUFBLDZCQUNBQyxFQUFBLGVBQ0FDLEVBQUEsa0JBQ0FDLEVBQUEsa0JBRUFDLEVBQUEsa0JBQ0FDLEVBQUEsZUFDQUMsRUFBQSxrQkFDQUMsRUFBQSxrQkFHQUMsRUFBQSx1QkFDQUMsRUFBQSxvQkFZQUMsRUFBQSxtREFDQUMsRUFBQSxRQVNBQyxFQUFBLDhCQUdBQyxFQUFBLG1CQUdBQyxLQUNBQSxFQTVCQSx5QkE0QkFBLEVBM0JBLHlCQTRCQUEsRUEzQkEsc0JBMkJBQSxFQTFCQSx1QkEyQkFBLEVBMUJBLHVCQTBCQUEsRUF6QkEsdUJBMEJBQSxFQXpCQSw4QkF5QkFBLEVBeEJBLHdCQXlCQUEsRUF4QkEseUJBd0JBLEVBQ0FBLEVBQUFwQixHQUFBb0IsRUFBQW5CLEdBQ0FtQixFQUFBTixHQUFBTSxFQUFBbEIsR0FDQWtCLEVBQUFMLEdBQUFLLEVBQUFqQixHQUNBaUIsRUFBQWhCLEdBQUFnQixFQUFBZixHQUNBZSxFQUFBYixHQUFBYSxFQUFBWixHQUNBWSxFQUFBWCxHQUFBVyxFQUFBVixHQUNBVSxFQUFBVCxHQUFBUyxFQUFBUixHQUNBUSxFQTVDQSxxQkE0Q0EsRUFHQSxJQUFBQyxHQUNBQyxVQUFBLEVBQ0FqeUMsUUFBQSxHQUlBa3lDLEVBQUFGLFNBQUE1ekMsVUFBQWdqQyxTQUNBaGpDLE9BQ0FzUCxFQUdBeWtDLEVBQUFILFNBQUEzekMsVUFBQStpQyxTQUNBL2lDLE9BQ0FxUCxFQUdBMGtDLEVBQUFDLEVBQUFILEdBQUFDLEdBQUEsaUJBQUE1bEMsTUFHQStsQyxFQUFBRCxFQUFBTCxTQUFBbnRDLGFBR0EwdEMsRUFBQUYsRUFBQUwsU0FBQXRsQyxpQkFHQThsQyxFQUFBSCxFQUFBTCxTQUFBenhDLGFBUUE2WSxFQUFBZzVCLEdBQ0FHLEtBQUFDLEtBQUE5bEMsU0FBQTZsQyxHQUNBRCxHQUFBRSxHQUFBdmxDLFNBQUEsY0FBQUEsR0FnQ0EsU0FBQXdsQyxFQUFBN29DLEVBQUF5ZixHQUlBLElBSEEsSUFBQTVSLEdBQUEsRUFDQXJXLEVBQUF3SSxFQUFBeEksU0FFQXFXLEVBQUFyVyxHQUNBLEdBQUFpb0IsRUFBQXpmLEVBQUE2TixLQUFBN04sR0FDQSxTQUdBLFNBK0JBLFNBQUE4b0MsRUFBQTF5QyxFQUFBeWIsR0FDQSxPQTlEQSxTQUFBN1IsRUFBQXVtQyxHQUtBLElBSkEsSUFBQTE0QixHQUFBLEVBQ0FyVyxFQUFBd0ksRUFBQXhJLE9BQ0E0VSxFQUFBclYsTUFBQVMsS0FFQXFXLEVBQUFyVyxHQUNBNFUsRUFBQXlCLEdBQUEwNEIsRUFBQXZtQyxFQUFBNk4sS0FBQTdOLEdBRUEsT0FBQW9NLEVBc0RBMjhCLENBQUFsM0IsRUFBQSxTQUFBNWIsR0FDQSxPQUFBQSxFQUFBRyxFQUFBSCxNQVdBLFNBQUF3eUMsRUFBQTl5QyxHQUNBLE9BQUFBLEtBQUFQLGdCQUFBTyxFQUFBLEtBVUEsU0FBQXF6QyxFQUFBcnpDLEdBR0EsSUFBQXlXLEdBQUEsRUFDQSxTQUFBelcsR0FBQSxtQkFBQUEsRUFBQXVSLFNBQ0EsSUFDQWtGLEtBQUF6VyxFQUFBLElBQ0ssTUFBQWlDLElBRUwsT0FBQXdVLEVBVUEsU0FBQTY4QixFQUFBM29DLEdBQ0EsSUFBQXVOLEdBQUEsRUFDQXpCLEVBQUFyVixNQUFBdUosRUFBQTRvQyxNQUtBLE9BSEE1b0MsRUFBQXlMLFFBQUEsU0FBQXBXLEVBQUFNLEdBQ0FtVyxJQUFBeUIsSUFBQTVYLEVBQUFOLEtBRUF5VyxFQVVBLFNBQUErOEIsRUFBQTlZLEdBQ0EsSUFBQXhpQixHQUFBLEVBQ0F6QixFQUFBclYsTUFBQXM1QixFQUFBNlksTUFLQSxPQUhBN1ksRUFBQXRrQixRQUFBLFNBQUFwVyxHQUNBeVcsSUFBQXlCLEdBQUFsWSxJQUVBeVcsRUFxQkEsSUFBQWc5QixFQUFBcnlDLE1BQUFULFVBQ0EreUMsRUFBQWowQyxPQUFBa0IsVUFHQWd6QyxFQUFBam1DLFNBQUEvTSxVQUFBNFEsU0FHQTNRLEVBQUE4eUMsRUFBQTl5QyxlQU9BK25DLEVBQUErSyxFQUFBbmlDLFNBR0FxaUMsRUFBQTNoQixPQUFBLElBQ0EwaEIsRUFBQXowQyxLQUFBMEIsR0FBQWdMLFFBOU9BLHNCQThPQSxRQUNBQSxRQUFBLHVFQUlBOUwsRUFBQStaLEVBQUEvWixPQUNBbWpCLEVBQUFwSixFQUFBb0osV0FDQWlyQixHQUFBd0YsRUFBQXhGLHFCQUNBemxDLEdBQUFnckMsRUFBQWhyQyxPQUdBb3JDLEdBQUFwMEMsT0FBQTRqQixlQUNBeXdCLEdBQUFyMEMsT0FBQTBXLEtBR0FpTCxHQUFBMnlCLEdBQUFsNkIsRUFBQSxZQUNBZ1csR0FBQWtrQixHQUFBbDZCLEVBQUEsT0FDQWlYLEdBQUFpakIsR0FBQWw2QixFQUFBLFdBQ0F1WSxHQUFBMmhCLEdBQUFsNkIsRUFBQSxPQUNBMGEsR0FBQXdmLEdBQUFsNkIsRUFBQSxXQUNBbTZCLEdBQUFELEdBQUF0MEMsT0FBQSxVQUdBdzBDLEdBQUFDLEdBQUE5eUIsSUFDQSt5QixHQUFBRCxHQUFBcmtCLElBQ0F1a0IsR0FBQUYsR0FBQXBqQixJQUNBdWpCLEdBQUFILEdBQUE5aEIsSUFDQWtpQixHQUFBSixHQUFBM2YsSUFHQWdnQixHQUFBejBDLElBQUFhLGVBQUF3TixFQUNBcW1DLEdBQUFELE1BQUEvakIsYUFBQXJpQixFQVNBLFNBQUFzbUMsR0FBQWxxQixHQUNBLElBQUFyUyxHQUFBLEVBQ0FyVyxFQUFBMG9CLElBQUExb0IsT0FBQSxFQUdBLElBREFiLEtBQUEwekMsVUFDQXg4QixFQUFBclcsR0FBQSxDQUNBLElBQUEyb0IsRUFBQUQsRUFBQXJTLEdBQ0FsWCxLQUFBMDVCLElBQUFsUSxFQUFBLEdBQUFBLEVBQUEsS0EyRkEsU0FBQW1xQixHQUFBcHFCLEdBQ0EsSUFBQXJTLEdBQUEsRUFDQXJXLEVBQUEwb0IsSUFBQTFvQixPQUFBLEVBR0EsSUFEQWIsS0FBQTB6QyxVQUNBeDhCLEVBQUFyVyxHQUFBLENBQ0EsSUFBQTJvQixFQUFBRCxFQUFBclMsR0FDQWxYLEtBQUEwNUIsSUFBQWxRLEVBQUEsR0FBQUEsRUFBQSxLQXlHQSxTQUFBb3FCLEdBQUFycUIsR0FDQSxJQUFBclMsR0FBQSxFQUNBclcsRUFBQTBvQixJQUFBMW9CLE9BQUEsRUFHQSxJQURBYixLQUFBMHpDLFVBQ0F4OEIsRUFBQXJXLEdBQUEsQ0FDQSxJQUFBMm9CLEVBQUFELEVBQUFyUyxHQUNBbFgsS0FBQTA1QixJQUFBbFEsRUFBQSxHQUFBQSxFQUFBLEtBd0ZBLFNBQUFxcUIsR0FBQXpvQixHQUNBLElBQUFsVSxHQUFBLEVBQ0FyVyxFQUFBdXFCLElBQUF2cUIsT0FBQSxFQUdBLElBREFiLEtBQUE4ekMsU0FBQSxJQUFBRixLQUNBMThCLEVBQUFyVyxHQUNBYixLQUFBdVksSUFBQTZTLEVBQUFsVSxJQTJDQSxTQUFBNjhCLEdBQUF4cUIsR0FDQXZwQixLQUFBOHpDLFNBQUEsSUFBQUgsR0FBQXBxQixHQXVGQSxTQUFBeXFCLEdBQUEzcUMsRUFBQS9KLEdBRUEsSUFEQSxJQUFBdUIsRUFBQXdJLEVBQUF4SSxPQUNBQSxLQUNBLEdBQUFvekMsR0FBQTVxQyxFQUFBeEksR0FBQSxHQUFBdkIsR0FDQSxPQUFBdUIsRUFHQSxTQVdBLFNBQUFxekMsR0FBQXowQyxFQUFBMDBDLEdBTUEsSUFIQSxJQUFBajlCLEVBQUEsRUFDQXJXLEdBSEFzekMsRUFBQUMsR0FBQUQsRUFBQTEwQyxJQUFBMDBDLEdBQUFFLEdBQUFGLElBR0F0ekMsT0FFQSxNQUFBcEIsR0FBQXlYLEVBQUFyVyxHQUNBcEIsSUFBQTYwQyxHQUFBSCxFQUFBajlCLE9BRUEsT0FBQUEsTUFBQXJXLEVBQUFwQixPQUFBME4sRUFXQSxTQUFBb25DLEdBQUE5MEMsRUFBQUgsR0FJQSxPQUFBTSxFQUFBMUIsS0FBQXVCLEVBQUFILElBQ0EsaUJBQUFHLEdBQUFILEtBQUFHLEdBQUEsT0Fxa0JBLFNBQUFULEdBQ0EsT0FBQTZ6QyxHQUFBcDBDLE9BQUFPLElBdGtCQXcxQyxDQUFBLzBDLEdBV0EsU0FBQWcxQyxHQUFBaDFDLEVBQUFILEdBQ0EsT0FBQUEsS0FBQWIsT0FBQWdCLEdBa0JBLFNBQUFpMUMsR0FBQTExQyxFQUFBd0wsRUFBQW1xQyxFQUFBQyxFQUFBanhCLEdBQ0EsT0FBQTNrQixJQUFBd0wsSUFHQSxNQUFBeEwsR0FBQSxNQUFBd0wsSUFBQStxQixHQUFBdjJCLEtBQUE2MUMsR0FBQXJxQyxHQUNBeEwsTUFBQXdMLEtBb0JBLFNBQUEvSyxFQUFBK0ssRUFBQXNxQyxFQUFBSCxFQUFBQyxFQUFBanhCLEdBQ0EsSUFBQW94QixFQUFBanNDLEdBQUFySixHQUNBdTFDLEVBQUFsc0MsR0FBQTBCLEdBQ0F5cUMsRUFBQTVFLEVBQ0E2RSxFQUFBN0UsRUFFQTBFLElBRUFFLEdBREFBLEVBQUFFLEdBQUExMUMsS0FDQTJ3QyxFQUFBUyxFQUFBb0UsR0FFQUQsSUFFQUUsR0FEQUEsRUFBQUMsR0FBQTNxQyxLQUNBNGxDLEVBQUFTLEVBQUFxRSxHQUVBLElBQUFFLEVBQUFILEdBQUFwRSxJQUFBd0IsRUFBQTV5QyxHQUNBNDFDLEVBQUFILEdBQUFyRSxJQUFBd0IsRUFBQTduQyxHQUNBOHFDLEVBQUFMLEdBQUFDLEVBRUEsR0FBQUksSUFBQUYsRUFFQSxPQURBenhCLE1BQUEsSUFBQW93QixJQUNBZ0IsR0FrakNBLFNBQUEvMUMsR0FDQSxPQUFBNjFDLEdBQUE3MUMsSUFDQXUyQyxHQUFBdjJDLEVBQUE2QixXQUFBMndDLEVBQUE3SixFQUFBenBDLEtBQUFjLElBcGpDQXcyQyxDQUFBLzFDLEdBQ0FnMkMsR0FBQWgyQyxFQUFBK0ssRUFBQXNxQyxFQUFBSCxFQUFBQyxFQUFBanhCLEdBeVNBLFNBQUFsa0IsRUFBQStLLEVBQUFrckMsRUFBQVosRUFBQUgsRUFBQUMsRUFBQWp4QixHQUNBLE9BQUEreEIsR0FDQSxLQUFBdkUsRUFDQSxHQUFBMXhDLEVBQUFrMkMsWUFBQW5yQyxFQUFBbXJDLFlBQ0FsMkMsRUFBQW0yQyxZQUFBcHJDLEVBQUFvckMsV0FDQSxTQUVBbjJDLElBQUE0Z0IsT0FDQTdWLElBQUE2VixPQUVBLEtBQUE2d0IsRUFDQSxRQUFBenhDLEVBQUFrMkMsWUFBQW5yQyxFQUFBbXJDLGFBQ0FiLEVBQUEsSUFBQTd5QixFQUFBeGlCLEdBQUEsSUFBQXdpQixFQUFBelgsS0FLQSxLQUFBOGxDLEVBQ0EsS0FBQUMsRUFJQSxPQUFBOXdDLElBQUErSyxFQUVBLEtBQUFnbUMsRUFDQSxPQUFBL3dDLEVBQUFuQixNQUFBa00sRUFBQWxNLE1BQUFtQixFQUFBMmhCLFNBQUE1VyxFQUFBNFcsUUFFQSxLQUFBd3ZCLEVBRUEsT0FBQW54QyxNQUFBK0ssTUFBQS9LLElBQUErSyxFQUVBLEtBQUFzbUMsRUFDQSxLQUFBRSxFQUlBLE9BQUF2eEMsR0FBQStLLEVBQUEsR0FFQSxLQUFBbW1DLEVBQ0EsSUFBQWtGLEVBQUF2RCxFQUVBLEtBQUF2QixFQUNBLElBQUErRSxFQUFBbEIsRUFBQTNFLEVBR0EsR0FGQTRGLE1BQUFyRCxHQUVBL3lDLEVBQUE4eUMsTUFBQS9uQyxFQUFBK25DLE9BQUF1RCxFQUNBLFNBR0EsSUFBQUMsRUFBQXB5QixFQUFBL2tCLElBQUFhLEdBQ0EsT0FBQXMyQyxFQUNBQSxHQUFBdnJDLEdBRUFvcUMsR0FBQTVFLEVBQ0Fyc0IsRUFBQStWLElBQUFqNkIsRUFBQStLLEdBR0FpckMsR0FBQUksRUFBQXAyQyxHQUFBbzJDLEVBQUFyckMsR0FBQXNxQyxFQUFBSCxFQUFBQyxFQUFBanhCLElBRUEsS0FBQXN0QixFQUNBLEdBQUF1QyxHQUNBLE9BQUFBLEdBQUF0MUMsS0FBQXVCLElBQUErekMsR0FBQXQxQyxLQUFBc00sR0FHQSxTQXhXQXdyQyxDQUFBdjJDLEVBQUErSyxFQUFBeXFDLEVBQUFILEVBQUFILEVBQUFDLEVBQUFqeEIsR0FFQSxLQUFBaXhCLEVBQUEzRSxHQUFBLENBQ0EsSUFBQWdHLEVBQUFiLEdBQUF4MUMsRUFBQTFCLEtBQUF1QixFQUFBLGVBQ0F5MkMsRUFBQWIsR0FBQXoxQyxFQUFBMUIsS0FBQXNNLEVBQUEsZUFFQSxHQUFBeXJDLEdBQUFDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBRixFQUFBeDJDLEVBQUFULFFBQUFTLEVBQ0EyMkMsRUFBQUYsRUFBQTFyQyxFQUFBeEwsUUFBQXdMLEVBR0EsT0FEQW1aLE1BQUEsSUFBQW93QixJQUNBZSxFQUFBcUIsRUFBQUMsRUFBQXpCLEVBQUFDLEVBQUFqeEIsSUFHQSxJQUFBMnhCLEVBQ0EsU0FHQSxPQURBM3hCLE1BQUEsSUFBQW93QixJQXdXQSxTQUFBdDBDLEVBQUErSyxFQUFBc3FDLEVBQUFILEVBQUFDLEVBQUFqeEIsR0FDQSxJQUFBbXlCLEVBQUFsQixFQUFBM0UsRUFDQW9HLEVBQUFsaEMsR0FBQTFWLEdBQ0E2MkMsRUFBQUQsRUFBQXgxQyxPQUVBMDFDLEVBREFwaEMsR0FBQTNLLEdBQ0EzSixPQUVBLEdBQUF5MUMsR0FBQUMsSUFBQVQsRUFDQSxTQUdBLElBREEsSUFBQTUrQixFQUFBby9CLEVBQ0FwL0IsS0FBQSxDQUNBLElBQUE1WCxFQUFBKzJDLEVBQUFuL0IsR0FDQSxLQUFBNCtCLEVBQUF4MkMsS0FBQWtMLEVBQUErcEMsR0FBQS9wQyxFQUFBbEwsSUFDQSxTQUlBLElBQUF5MkMsRUFBQXB5QixFQUFBL2tCLElBQUFhLEdBQ0EsR0FBQXMyQyxFQUNBLE9BQUFBLEdBQUF2ckMsRUFFQSxJQUFBaUwsR0FBQSxFQUNBa08sRUFBQStWLElBQUFqNkIsRUFBQStLLEdBR0EsSUFEQSxJQUFBZ3NDLEVBQUFWLElBQ0E1K0IsRUFBQW8vQixHQUFBLENBQ0FoM0MsRUFBQSsyQyxFQUFBbi9CLEdBQ0EsSUFBQXUvQixFQUFBaDNDLEVBQUFILEdBQ0FvM0MsRUFBQWxzQyxFQUFBbEwsR0FFQSxHQUFBcTFDLEVBQ0EsSUFBQWdDLEVBQUFiLEVBQ0FuQixFQUFBK0IsRUFBQUQsRUFBQW4zQyxFQUFBa0wsRUFBQS9LLEVBQUFra0IsR0FDQWd4QixFQUFBOEIsRUFBQUMsRUFBQXAzQyxFQUFBRyxFQUFBK0ssRUFBQW1aLEdBR0EsVUFBQXhXLElBQUF3cEMsRUFDQUYsSUFBQUMsR0FBQTVCLEVBQUEyQixFQUFBQyxFQUFBL0IsRUFBQUMsRUFBQWp4QixHQUNBZ3pCLEdBQ0EsQ0FDQWxoQyxHQUFBLEVBQ0EsTUFFQStnQyxNQUFBLGVBQUFsM0MsR0FFQSxHQUFBbVcsSUFBQStnQyxFQUFBLENBQ0EsSUFBQUksRUFBQW4zQyxFQUFBYyxZQUNBczJDLEVBQUFyc0MsRUFBQWpLLFlBR0FxMkMsR0FBQUMsR0FDQSxnQkFBQXAzQyxHQUFBLGdCQUFBK0ssS0FDQSxtQkFBQW9zQyxtQkFDQSxtQkFBQUMscUJBQ0FwaEMsR0FBQSxHQUlBLE9BREFrTyxFQUFBLE9BQUFsa0IsR0FDQWdXLEVBbGFBcWhDLENBQUFyM0MsRUFBQStLLEVBQUFzcUMsRUFBQUgsRUFBQUMsRUFBQWp4QixHQTFEQW96QixDQUFBLzNDLEVBQUF3TCxFQUFBa3FDLEdBQUFDLEVBQUFDLEVBQUFqeEIsSUFtTUEsU0FBQXF6QixHQUFBMTNDLEdBQ0EsZ0JBQUFHLEdBQ0EsYUFBQUEsT0FBQTBOLEVBQUExTixFQUFBSCxJQXdCQSxTQUFBKzBDLEdBQUFyMUMsR0FDQSxPQUFBOEosR0FBQTlKLEtBQUE2d0MsRUFBQTd3QyxHQXFDQSxTQUFBeTJDLEdBQUFwc0MsRUFBQW1CLEVBQUFzcUMsRUFBQUgsRUFBQUMsRUFBQWp4QixHQUNBLElBQUFteUIsRUFBQWxCLEVBQUEzRSxFQUNBZ0gsRUFBQTV0QyxFQUFBeEksT0FDQTAxQyxFQUFBL3JDLEVBQUEzSixPQUVBLEdBQUFvMkMsR0FBQVYsS0FBQVQsR0FBQVMsRUFBQVUsR0FDQSxTQUdBLElBQUFsQixFQUFBcHlCLEVBQUEva0IsSUFBQXlLLEdBQ0EsR0FBQTBzQyxFQUNBLE9BQUFBLEdBQUF2ckMsRUFFQSxJQUFBME0sR0FBQSxFQUNBekIsR0FBQSxFQUNBK3ZCLEVBQUFvUCxFQUFBNUUsRUFBQSxJQUFBNkQsUUFBQTFtQyxFQUtBLElBSEF3VyxFQUFBK1YsSUFBQXJ3QixFQUFBbUIsS0FHQTBNLEVBQUErL0IsR0FBQSxDQUNBLElBQUFDLEVBQUE3dEMsRUFBQTZOLEdBQ0F3L0IsRUFBQWxzQyxFQUFBME0sR0FFQSxHQUFBeTlCLEVBQ0EsSUFBQWdDLEVBQUFiLEVBQ0FuQixFQUFBK0IsRUFBQVEsRUFBQWhnQyxFQUFBMU0sRUFBQW5CLEVBQUFzYSxHQUNBZ3hCLEVBQUF1QyxFQUFBUixFQUFBeC9CLEVBQUE3TixFQUFBbUIsRUFBQW1aLEdBRUEsUUFBQXhXLElBQUF3cEMsRUFBQSxDQUNBLEdBQUFBLEVBQ0EsU0FFQWxoQyxHQUFBLEVBQ0EsTUFHQSxHQUFBK3ZCLEdBQ0EsSUFBQTBNLEVBQUExbkMsRUFBQSxTQUFBa3NDLEVBQUFTLEdBQ0EsSUFBQTNSLEVBQUF2L0IsSUFBQWt4QyxLQUNBRCxJQUFBUixHQUFBNUIsRUFBQW9DLEVBQUFSLEVBQUEvQixFQUFBQyxFQUFBanhCLElBQ0EsT0FBQTZoQixFQUFBanRCLElBQUE0K0IsS0FFVyxDQUNYMWhDLEdBQUEsRUFDQSxZQUVLLEdBQ0x5aEMsSUFBQVIsSUFDQTVCLEVBQUFvQyxFQUFBUixFQUFBL0IsRUFBQUMsRUFBQWp4QixHQUNBLENBQ0FsTyxHQUFBLEVBQ0EsT0FJQSxPQURBa08sRUFBQSxPQUFBdGEsR0FDQW9NLEVBaHZCQWcrQixHQUFBOXpDLFVBQUErekMsTUFuRUEsV0FDQTF6QyxLQUFBOHpDLFNBQUFkLE1BQUEsVUFtRUFTLEdBQUE5ekMsVUFBQSxPQXREQSxTQUFBTCxHQUNBLE9BQUFVLEtBQUFpRyxJQUFBM0csV0FBQVUsS0FBQTh6QyxTQUFBeDBDLElBc0RBbTBDLEdBQUE5ekMsVUFBQWYsSUExQ0EsU0FBQVUsR0FDQSxJQUFBNE4sRUFBQWxOLEtBQUE4ekMsU0FDQSxHQUFBZCxHQUFBLENBQ0EsSUFBQXY5QixFQUFBdkksRUFBQTVOLEdBQ0EsT0FBQW1XLElBQUFzNkIsT0FBQTVpQyxFQUFBc0ksRUFFQSxPQUFBN1YsRUFBQTFCLEtBQUFnUCxFQUFBNU4sR0FBQTROLEVBQUE1TixRQUFBNk4sR0FxQ0FzbUMsR0FBQTl6QyxVQUFBc0csSUF6QkEsU0FBQTNHLEdBQ0EsSUFBQTROLEVBQUFsTixLQUFBOHpDLFNBQ0EsT0FBQWQsUUFBQTdsQyxJQUFBRCxFQUFBNU4sR0FBQU0sRUFBQTFCLEtBQUFnUCxFQUFBNU4sSUF3QkFtMEMsR0FBQTl6QyxVQUFBKzVCLElBWEEsU0FBQXA2QixFQUFBTixHQUdBLE9BRkFnQixLQUFBOHpDLFNBQ0F4MEMsR0FBQTB6QyxTQUFBN2xDLElBQUFuTyxFQUFBK3dDLEVBQUEvd0MsRUFDQWdCLE1Bb0hBMnpDLEdBQUFoMEMsVUFBQSt6QyxNQWpGQSxXQUNBMXpDLEtBQUE4ekMsYUFpRkFILEdBQUFoMEMsVUFBQSxPQXJFQSxTQUFBTCxHQUNBLElBQUE0TixFQUFBbE4sS0FBQTh6QyxTQUNBNThCLEVBQUE4OEIsR0FBQTltQyxFQUFBNU4sR0FFQSxRQUFBNFgsRUFBQSxJQUlBQSxHQURBaEssRUFBQXJNLE9BQUEsRUFFQXFNLEVBQUFpNkIsTUFFQTEvQixHQUFBdkosS0FBQWdQLEVBQUFnSyxFQUFBLEdBRUEsS0F5REF5OEIsR0FBQWgwQyxVQUFBZixJQTdDQSxTQUFBVSxHQUNBLElBQUE0TixFQUFBbE4sS0FBQTh6QyxTQUNBNThCLEVBQUE4OEIsR0FBQTltQyxFQUFBNU4sR0FFQSxPQUFBNFgsRUFBQSxPQUFBL0osRUFBQUQsRUFBQWdLLEdBQUEsSUEwQ0F5OEIsR0FBQWgwQyxVQUFBc0csSUE5QkEsU0FBQTNHLEdBQ0EsT0FBQTAwQyxHQUFBaDBDLEtBQUE4ekMsU0FBQXgwQyxJQUFBLEdBOEJBcTBDLEdBQUFoMEMsVUFBQSs1QixJQWpCQSxTQUFBcDZCLEVBQUFOLEdBQ0EsSUFBQWtPLEVBQUFsTixLQUFBOHpDLFNBQ0E1OEIsRUFBQTg4QixHQUFBOW1DLEVBQUE1TixHQU9BLE9BTEE0WCxFQUFBLEVBQ0FoSyxFQUFBNUosTUFBQWhFLEVBQUFOLElBRUFrTyxFQUFBZ0ssR0FBQSxHQUFBbFksRUFFQWdCLE1Ba0dBNHpDLEdBQUFqMEMsVUFBQSt6QyxNQS9EQSxXQUNBMXpDLEtBQUE4ekMsVUFDQXBOLEtBQUEsSUFBQStNLEdBQ0E5cEMsSUFBQSxJQUFBa2xCLElBQUE4a0IsSUFDQTNaLE9BQUEsSUFBQXlaLEtBNERBRyxHQUFBajBDLFVBQUEsT0EvQ0EsU0FBQUwsR0FDQSxPQUFBODNDLEdBQUFwM0MsS0FBQVYsR0FBQSxPQUFBQSxJQStDQXMwQyxHQUFBajBDLFVBQUFmLElBbkNBLFNBQUFVLEdBQ0EsT0FBQTgzQyxHQUFBcDNDLEtBQUFWLEdBQUFWLElBQUFVLElBbUNBczBDLEdBQUFqMEMsVUFBQXNHLElBdkJBLFNBQUEzRyxHQUNBLE9BQUE4M0MsR0FBQXAzQyxLQUFBVixHQUFBMkcsSUFBQTNHLElBdUJBczBDLEdBQUFqMEMsVUFBQSs1QixJQVZBLFNBQUFwNkIsRUFBQU4sR0FFQSxPQURBbzRDLEdBQUFwM0MsS0FBQVYsR0FBQW82QixJQUFBcDZCLEVBQUFOLEdBQ0FnQixNQXlEQTZ6QyxHQUFBbDBDLFVBQUE0WSxJQUFBczdCLEdBQUFsMEMsVUFBQTJELEtBbkJBLFNBQUF0RSxHQUVBLE9BREFnQixLQUFBOHpDLFNBQUFwYSxJQUFBMTZCLEVBQUErd0MsR0FDQS92QyxNQWtCQTZ6QyxHQUFBbDBDLFVBQUFzRyxJQU5BLFNBQUFqSCxHQUNBLE9BQUFnQixLQUFBOHpDLFNBQUE3dEMsSUFBQWpILElBd0ZBKzBDLEdBQUFwMEMsVUFBQSt6QyxNQS9EQSxXQUNBMXpDLEtBQUE4ekMsU0FBQSxJQUFBSCxJQStEQUksR0FBQXAwQyxVQUFBLE9BbkRBLFNBQUFMLEdBQ0EsT0FBQVUsS0FBQTh6QyxTQUFBLE9BQUF4MEMsSUFtREF5MEMsR0FBQXAwQyxVQUFBZixJQXZDQSxTQUFBVSxHQUNBLE9BQUFVLEtBQUE4ekMsU0FBQWwxQyxJQUFBVSxJQXVDQXkwQyxHQUFBcDBDLFVBQUFzRyxJQTNCQSxTQUFBM0csR0FDQSxPQUFBVSxLQUFBOHpDLFNBQUE3dEMsSUFBQTNHLElBMkJBeTBDLEdBQUFwMEMsVUFBQSs1QixJQWRBLFNBQUFwNkIsRUFBQU4sR0FDQSxJQUFBcTRDLEVBQUFyM0MsS0FBQTh6QyxTQUtBLE9BSkF1RCxhQUFBMUQsSUFBQTBELEVBQUF2RCxTQUFBanpDLFFBQUFpdkMsSUFDQXVILEVBQUFyM0MsS0FBQTh6QyxTQUFBLElBQUFGLEdBQUF5RCxFQUFBdkQsV0FFQXVELEVBQUEzZCxJQUFBcDZCLEVBQUFOLEdBQ0FnQixNQTRrQkEsSUFBQXMzQyxHQUFBTixHQUFBLFVBVUEsU0FBQUksR0FBQXp0QyxFQUFBckssR0FDQSxJQUFBNE4sRUFBQXZELEVBQUFtcUMsU0FDQSxPQTZLQSxTQUFBOTBDLEdBQ0EsSUFBQXlELFNBQUF6RCxFQUNBLGdCQUFBeUQsR0FBQSxVQUFBQSxHQUFBLFVBQUFBLEdBQUEsV0FBQUEsRUFDQSxjQUFBekQsRUFDQSxPQUFBQSxFQWpMQXU0QyxDQUFBajRDLEdBQ0E0TixFQUFBLGlCQUFBNU4sRUFBQSxpQkFDQTROLEVBQUF2RCxJQTRCQSxTQUFBb3BDLEdBQUF0ekMsRUFBQUgsR0FDQSxJQUFBTixFQUFBUyxFQUFBSCxHQUNBLE9BMGZBLFNBQUFOLEdBQ0EsSUFBQXUyQixHQUFBdjJCLEdBQ0EsU0FHQSxPQURBMmhCLEdBQUEzaEIsSUFBQXF6QyxFQUFBcnpDLEdBQUE0ekMsRUFBQXRCLEdBQ0FyM0IsS0FBQWk1QixHQUFBbDBDLElBL2ZBdzRDLENBQUF4NEMsVUFBQW1PLEVBcUJBLFNBQUFnb0MsR0FBQW4yQyxHQUNBLE9BQUEyb0MsRUFBQXpwQyxLQUFBYyxHQW1FQSxTQUFBeTRDLEdBQUFoNEMsR0FDQSxJQUFBb0IsRUFBQXBCLElBQUFvQixZQUFBc00sRUFDQSxPQUFBb29DLEdBQUExMEMsS0FDQWlJLEdBQUFySixJQUFBbWxDLEdBQUFubEMsSUFBQThpQixHQUFBOWlCLElBanlDQSxTQUFBRCxFQUFBb3dDLEdBSUEsSUFIQSxJQUFBMTRCLEdBQUEsRUFDQXpCLEVBQUFyVixNQUFBWixLQUVBMFgsRUFBQTFYLEdBQ0FpVyxFQUFBeUIsR0FBQTA0QixFQUFBMTRCLEdBRUEsT0FBQXpCLEVBMnhDQWlpQyxDQUFBNzJDLEVBQUE4d0IsUUFFQSxLQVdBLFNBQUFnbUIsR0FBQTM0QyxFQUFBNkIsR0FFQSxTQURBQSxFQUFBLE1BQUFBLEVBQUFzdkMsRUFBQXR2QyxLQUVBLGlCQUFBN0IsR0FBQXV5QyxFQUFBdDNCLEtBQUFqYixLQUNBQSxHQUFBLEdBQUFBLEVBQUEsTUFBQUEsRUFBQTZCLEVBV0EsU0FBQXV6QyxHQUFBcDFDLEVBQUFTLEdBQ0EsR0FBQXFKLEdBQUE5SixHQUNBLFNBRUEsSUFBQXlELFNBQUF6RCxFQUNBLGtCQUFBeUQsR0FBQSxVQUFBQSxHQUFBLFdBQUFBLEdBQ0EsTUFBQXpELElBQUFvcUMsR0FBQXBxQyxNQUdBcXlDLEVBQUFwM0IsS0FBQWpiLEtBQUFveUMsRUFBQW4zQixLQUFBamIsSUFDQSxNQUFBUyxHQUFBVCxLQUFBUCxPQUFBZ0IsSUF1Q0EsU0FBQW00QyxHQUFBNTRDLEdBQ0EsT0FBQUEsT0FBQXUyQixHQUFBdjJCLEdBWUEsU0FBQTY0QyxHQUFBdjRDLEVBQUF3NEMsR0FDQSxnQkFBQXI0QyxHQUNBLGFBQUFBLElBR0FBLEVBQUFILEtBQUF3NEMsU0FDQTNxQyxJQUFBMnFDLEdBQUF4NEMsS0FBQWIsT0FBQWdCLE1BV0EsU0FBQTYwQyxHQUFBdDFDLEdBQ0Esb0JBQUFBLEdBQUFvcUMsR0FBQXBxQyxHQUNBLE9BQUFBLEVBRUEsSUFBQXlXLEVBQUF6VyxFQUFBLEdBQ0EsV0FBQXlXLEdBQUEsRUFBQXpXLElBQUFreEMsRUFBQSxLQUFBejZCLEVBVUEsU0FBQXk5QixHQUFBeHlCLEdBQ0EsU0FBQUEsRUFBQSxDQUNBLElBQ0EsT0FBQWl5QixFQUFBejBDLEtBQUF3aUIsR0FDSyxNQUFBemYsSUFDTCxJQUNBLE9BQUF5ZixFQUFBLEdBQ0ssTUFBQXpmLEtBRUwsU0FtQ0EsU0FBQWd6QyxHQUFBajFDLEVBQUF3TCxHQUNBLE9BQUF4TCxJQUFBd0wsR0FBQXhMLE1BQUF3TCxLQXFCQSxTQUFBK1gsR0FBQXZqQixHQUVBLE9BcUZBLFNBQUFBLEdBQ0EsT0FBQTYxQyxHQUFBNzFDLElBQUErNEMsR0FBQS80QyxHQXRGQWc1QyxDQUFBaDVDLElBQUFZLEVBQUExQixLQUFBYyxFQUFBLGFBQ0FrdUMsR0FBQWh2QyxLQUFBYyxFQUFBLFdBQUEyb0MsRUFBQXpwQyxLQUFBYyxJQUFBb3hDLElBalFBaHdCLElBQUErMEIsR0FBQSxJQUFBLzBCLEdBQUEsSUFBQUQsWUFBQSxNQUFBZ3hCLEdBQ0F0aUIsSUFBQXNtQixHQUFBLElBQUF0bUIsS0FBQThoQixHQUNBN2dCLElBOTJDQSxvQkE4MkNBcWxCLEdBQUFybEIsR0FBQU8sWUFDQWUsSUFBQStqQixHQUFBLElBQUEvakIsS0FBQTJmLEdBQ0F4ZCxJQTMyQ0Esb0JBMjJDQTRoQixHQUFBLElBQUE1aEIsT0FDQTRoQixHQUFBLFNBQUFuMkMsR0FDQSxJQUFBeVcsRUFBQWt5QixFQUFBenBDLEtBQUFjLEdBQ0FpNUMsRUFBQXhpQyxHQUFBbzdCLEVBQUE3eEMsRUFBQXVCLGlCQUFBNE0sRUFDQStxQyxFQUFBRCxFQUFBL0UsR0FBQStFLFFBQUE5cUMsRUFFQSxHQUFBK3FDLEVBQ0EsT0FBQUEsR0FDQSxLQUFBakYsR0FBQSxPQUFBOUIsRUFDQSxLQUFBZ0MsR0FBQSxPQUFBeEMsRUFDQSxLQUFBeUMsR0FBQSxNQTEzQ0EsbUJBMjNDQSxLQUFBQyxHQUFBLE9BQUF0QyxFQUNBLEtBQUF1QyxHQUFBLE1BdjNDQSxtQkEwM0NBLE9BQUE3OUIsSUEwUUEsSUFBQTNNLEdBQUExSSxNQUFBMEksUUEyQkEsU0FBQWl2QyxHQUFBLzRDLEdBQ0EsYUFBQUEsR0FBQXUyQyxHQUFBK0IsR0FBQXQ0QyxNQUFBMmhCLEdBQUEzaEIsR0FrREEsU0FBQTJoQixHQUFBM2hCLEdBSUEsSUFBQTAyQyxFQUFBbmdCLEdBQUF2MkIsR0FBQTJvQyxFQUFBenBDLEtBQUFjLEdBQUEsR0FDQSxPQUFBMDJDLEdBQUFqRixHQUFBaUYsR0FBQWhGLEVBOEJBLFNBQUE2RSxHQUFBdjJDLEdBQ0EsdUJBQUFBLEdBQ0FBLEdBQUEsR0FBQUEsRUFBQSxNQUFBQSxHQUFBbXhDLEVBNEJBLFNBQUE1YSxHQUFBdjJCLEdBQ0EsSUFBQXlELFNBQUF6RCxFQUNBLFFBQUFBLElBQUEsVUFBQXlELEdBQUEsWUFBQUEsR0EyQkEsU0FBQW95QyxHQUFBNzFDLEdBQ0EsUUFBQUEsR0FBQSxpQkFBQUEsRUErQ0EsU0FBQTRsQyxHQUFBNWxDLEdBQ0EsdUJBQUFBLElBQ0E4SixHQUFBOUosSUFBQTYxQyxHQUFBNzFDLElBQUEyb0MsRUFBQXpwQyxLQUFBYyxJQUFBZ3lDLEVBcUJBLFNBQUE1SCxHQUFBcHFDLEdBQ0EsdUJBQUFBLEdBQ0E2MUMsR0FBQTcxQyxJQUFBMm9DLEVBQUF6cEMsS0FBQWMsSUFBQWl5QyxFQWtIQSxTQUFBOTdCLEdBQUExVixHQUNBLElBQUEwNEMsRUFyZ0JBLFNBQUFuNUMsR0FDQSxJQUFBaTVDLEVBQUFqNUMsS0FBQXVCLFlBR0EsT0FBQXZCLEtBRkEsbUJBQUFpNUMsS0FBQXQ0QyxXQUFBK3lDLEdBbWdCQTBGLENBQUEzNEMsR0FDQSxJQUFBMDRDLElBQUFKLEdBQUF0NEMsR0FDQSxPQXJpQ0EsU0FBQUEsR0FDQSxPQUFBcXpDLEdBQUFyMEMsT0FBQWdCLElBb2lDQTQ0QyxDQUFBNTRDLEdBRUEsSUFBQTY0QyxFQUFBYixHQUFBaDRDLEdBQ0E4NEMsSUFBQUQsRUFDQTdpQyxFQUFBNmlDLE1BQ0F6M0MsRUFBQTRVLEVBQUE1VSxPQUVBLFFBQUF2QixLQUFBRyxHQUNBODBDLEdBQUE5MEMsRUFBQUgsSUFDQWk1QyxJQUFBLFVBQUFqNUMsR0FBQXE0QyxHQUFBcjRDLEVBQUF1QixLQUNBczNDLEdBQUEsZUFBQTc0QyxHQUNBbVcsRUFBQW5TLEtBQUFoRSxHQUdBLE9BQUFtVyxFQTJCQSxJQUFBK2lDLEdBei9CQSxTQUFBQyxHQUNBLGdCQUFBaDVDLEdBQ0EsSUFBQWkyQyxFQUFBUCxHQUFBMTFDLEdBQ0EsT0FBQWkyQyxHQUFBL0UsRUFDQTJCLEVBQUE3eUMsR0FFQWkyQyxHQUFBM0UsRUE3ekJBLFNBQUFyWCxHQUNBLElBQUF4aUIsR0FBQSxFQUNBekIsRUFBQXJWLE1BQUFzNUIsRUFBQTZZLE1BS0EsT0FIQTdZLEVBQUF0a0IsUUFBQSxTQUFBcFcsR0FDQXlXLElBQUF5QixJQUFBbFksT0FFQXlXLEVBdXpCQWlqQyxDQUFBajVDLEdBRUEweUMsRUFBQTF5QyxFQUFBZzVDLEVBQUFoNUMsS0FnL0JBazVDLENBQUF4akMsSUFrQkEsU0FBQXlqQyxHQUFBNTVDLEdBQ0EsT0FBQUEsRUE2QkFsQixFQUFBRCxRQXZwQ0EsU0FBQW1CLEdBR0EseUJBQUFBLEVBQ0FBLEVBRUEsTUFBQUEsRUFDQTQ1QyxHQUVBLGlCQUFBNTVDLEVBQ0E4SixHQUFBOUosR0E0Q0EsU0FBQW0xQyxFQUFBMkQsR0FDQSxPQUFBMUQsR0FBQUQsSUFBQXlELEdBQUFFLEdBQ0FELEdBQUF2RCxHQUFBSCxHQUFBMkQsR0FFQSxTQUFBcjRDLEdBQ0EsSUFBQWczQyxFQWk4QkEsU0FBQWgzQyxFQUFBMDBDLEVBQUF0RixHQUNBLElBQUFwNUIsRUFBQSxNQUFBaFcsT0FBQTBOLEVBQUErbUMsR0FBQXowQyxFQUFBMDBDLEdBQ0EsWUFBQWhuQyxJQUFBc0ksRUFBQW81QixFQUFBcDVCLEVBbjhCQTdXLENBQUFhLEVBQUEwMEMsR0FDQSxZQUFBaG5DLElBQUFzcEMsT0FBQXFCLEVBKzlCQSxTQUFBcjRDLEVBQUEwMEMsR0FDQSxhQUFBMTBDLEdBcmtCQSxTQUFBQSxFQUFBMDBDLEVBQUEwRSxHQU9BLElBSkEsSUFBQXBqQyxFQUNBeUIsR0FBQSxFQUNBclcsR0FKQXN6QyxFQUFBQyxHQUFBRCxFQUFBMTBDLElBQUEwMEMsR0FBQUUsR0FBQUYsSUFJQXR6QyxTQUVBcVcsRUFBQXJXLEdBQUEsQ0FDQSxJQUFBdkIsRUFBQWcxQyxHQUFBSCxFQUFBajlCLElBQ0EsS0FBQXpCLEVBQUEsTUFBQWhXLEdBQUFvNUMsRUFBQXA1QyxFQUFBSCxJQUNBLE1BRUFHLElBQUFILEdBRUEsT0FBQW1XLE1BR0E1VSxFQUFBcEIsSUFBQW9CLE9BQUEsSUFDQTAwQyxHQUFBMTBDLElBQUE4MkMsR0FBQXI0QyxFQUFBdUIsS0FDQWlJLEdBQUFySixJQUFBbWxDLEdBQUFubEMsSUFBQThpQixHQUFBOWlCLElBa2pCQXE1QyxDQUFBcjVDLEVBQUEwMEMsRUFBQU0sSUEvOUJBc0UsQ0FBQXQ1QyxFQUFBMDBDLEdBQ0FPLEdBQUFvRCxFQUFBckIsT0FBQXRwQyxFQUFBNmlDLEVBQUFDLElBbkRBK0ksQ0FBQWg2QyxFQUFBLEdBQUFBLEVBQUEsSUF5QkEsU0FBQXFTLEdBQ0EsSUFBQTRuQyxFQW1XQSxTQUFBeDVDLEdBSUEsSUFIQSxJQUFBZ1csRUFBQStpQyxHQUFBLzRDLEdBQ0FvQixFQUFBNFUsRUFBQTVVLE9BRUFBLEtBQ0E0VSxFQUFBNVUsR0FBQSxHQUFBKzJDLEdBQUFuaUMsRUFBQTVVLEdBQUEsSUFFQSxPQUFBNFUsRUExV0F5akMsQ0FBQTduQyxHQUNBLFVBQUE0bkMsRUFBQXA0QyxRQUFBbzRDLEVBQUEsTUFDQXBCLEdBQUFvQixFQUFBLE1BQUFBLEVBQUEsT0FFQSxTQUFBeDVDLEdBQ0EsT0FBQUEsSUFBQTRSLEdBN0ZBLFNBQUE1UixFQUFBNFIsRUFBQTRuQyxFQUFBdEUsR0FDQSxJQUFBejlCLEVBQUEraEMsRUFBQXA0QyxPQUNBQSxFQUFBcVcsRUFDQWlpQyxHQUFBeEUsRUFFQSxTQUFBbDFDLEVBQ0EsT0FBQW9CLEVBR0EsSUFEQXBCLEVBQUFoQixPQUFBZ0IsR0FDQXlYLEtBQUEsQ0FDQSxJQUFBaEssRUFBQStyQyxFQUFBL2hDLEdBQ0EsR0FBQWlpQyxHQUFBanNDLEVBQUEsR0FDQUEsRUFBQSxLQUFBek4sRUFBQXlOLEVBQUEsTUFDQUEsRUFBQSxLQUFBek4sR0FFQSxTQUdBLE9BQUF5WCxFQUFBclcsR0FBQSxDQUVBLElBQUF2QixHQURBNE4sRUFBQStyQyxFQUFBL2hDLElBQ0EsR0FDQXUvQixFQUFBaDNDLEVBQUFILEdBQ0F3NEMsRUFBQTVxQyxFQUFBLEdBRUEsR0FBQWlzQyxHQUFBanNDLEVBQUEsSUFDQSxRQUFBQyxJQUFBc3BDLEtBQUFuM0MsS0FBQUcsR0FDQSxhQUVLLENBQ0wsSUFBQWtrQixFQUFBLElBQUFvd0IsR0FDQSxHQUFBWSxFQUNBLElBQUFsL0IsRUFBQWsvQixFQUFBOEIsRUFBQXFCLEVBQUF4NEMsRUFBQUcsRUFBQTRSLEVBQUFzUyxHQUVBLFVBQUF4VyxJQUFBc0ksRUFDQWkvQixHQUFBb0QsRUFBQXJCLEVBQUE5QixFQUFBM0UsRUFBQUMsRUFBQXRzQixHQUNBbE8sR0FFQSxVQUlBLFNBb0RBMmpDLENBQUEzNUMsRUFBQTRSLEVBQUE0bkMsSUE5QkFJLENBQUFyNkMsR0F1b0NBLFNBQUFtMUMsR0FDQSxPQUFBQyxHQUFBRCxHQUFBNkMsR0FBQTFDLEdBQUFILElBOWpDQSxTQUFBQSxHQUNBLGdCQUFBMTBDLEdBQ0EsT0FBQXkwQyxHQUFBejBDLEVBQUEwMEMsSUE0akNBbUYsQ0FBQW5GLEdBdG9DQXowQyxDQUFBVixnREN0K0JBLFNBQUFsQixFQUFBa08sR0FRQSxJQUFBdXRDLEVBQW1CNTdDLEVBQVEsSUFHM0I2N0MsRUFBQSxzQkFHQXpKLEVBQUEsNEJBR0FVLEVBQUEsb0JBQ0FDLEVBQUEsNkJBR0ErSSxFQUFBLHNFQVNBQyxFQUFBLFdBR0FwSSxFQUFBLDhCQUdBRyxHQUNBQyxVQUFBLEVBQ0FqeUMsUUFBQSxHQUlBa3lDLEVBQUFGLFNBQUE1ekMsVUFBQWdqQyxTQUNBaGpDLE9BQ0FzUCxFQUdBeWtDLEVBQUFILFNBQUEzekMsVUFBQStpQyxTQUNBL2lDLE9BQ0FxUCxFQUdBMGtDLEVBQUFDLEVBQUFILEdBQUFDLEdBQUEsaUJBQUE1bEMsTUFHQStsQyxFQUFBRCxFQUFBTCxTQUFBbnRDLGFBR0EwdEMsRUFBQUYsRUFBQUwsU0FBQXRsQyxpQkFHQThsQyxFQUFBSCxFQUFBTCxTQUFBenhDLGFBUUE2WSxFQUFBZzVCLEdBQ0FHLEtBQUFDLEtBQUE5bEMsU0FBQTZsQyxHQUNBRCxHQUFBRSxHQUFBdmxDLFNBQUEsY0FBQUEsR0FTQSxTQUFBb2xDLEVBQUE5eUMsR0FDQSxPQUFBQSxLQUFBUCxnQkFBQU8sRUFBQSxLQXVCQSxJQUFBeXpDLEVBQUFyeUMsTUFBQVQsVUFDQSt5QyxFQUFBajBDLE9BQUFrQixVQUdBZ3pDLEVBQUFqbUMsU0FBQS9NLFVBQUE0USxTQUdBM1EsRUFBQTh5QyxFQUFBOXlDLGVBT0ErbkMsRUFBQStLLEVBQUFuaUMsU0FHQXFpQyxFQUFBM2hCLE9BQUEsSUFDQTBoQixFQUFBejBDLEtBQUEwQixHQUFBZ0wsUUEvRkEsc0JBK0ZBLFFBQ0FBLFFBQUEsdUVBSUFuRCxFQUFBZ3JDLEVBQUFockMsT0FHQW9uQixFQUFBa2tCLEVBQUFsNkIsRUFBQSxPQUNBbTZCLEVBQUFELEVBQUF0MEMsT0FBQSxVQVNBLFNBQUFnMUMsRUFBQWxxQixHQUNBLElBQUFyUyxHQUFBLEVBQ0FyVyxFQUFBMG9CLElBQUExb0IsT0FBQSxFQUdBLElBREFiLEtBQUEwekMsVUFDQXg4QixFQUFBclcsR0FBQSxDQUNBLElBQUEyb0IsRUFBQUQsRUFBQXJTLEdBQ0FsWCxLQUFBMDVCLElBQUFsUSxFQUFBLEdBQUFBLEVBQUEsS0EyRkEsU0FBQW1xQixFQUFBcHFCLEdBQ0EsSUFBQXJTLEdBQUEsRUFDQXJXLEVBQUEwb0IsSUFBQTFvQixPQUFBLEVBR0EsSUFEQWIsS0FBQTB6QyxVQUNBeDhCLEVBQUFyVyxHQUFBLENBQ0EsSUFBQTJvQixFQUFBRCxFQUFBclMsR0FDQWxYLEtBQUEwNUIsSUFBQWxRLEVBQUEsR0FBQUEsRUFBQSxLQXlHQSxTQUFBb3FCLEVBQUFycUIsR0FDQSxJQUFBclMsR0FBQSxFQUNBclcsRUFBQTBvQixJQUFBMW9CLE9BQUEsRUFHQSxJQURBYixLQUFBMHpDLFVBQ0F4OEIsRUFBQXJXLEdBQUEsQ0FDQSxJQUFBMm9CLEVBQUFELEVBQUFyUyxHQUNBbFgsS0FBQTA1QixJQUFBbFEsRUFBQSxHQUFBQSxFQUFBLEtBd0ZBLFNBQUF3cUIsRUFBQTNxQyxFQUFBL0osR0FFQSxJQURBLElBQUF1QixFQUFBd0ksRUFBQXhJLE9BQ0FBLEtBQ0EsR0FBQW96QyxFQUFBNXFDLEVBQUF4SSxHQUFBLEdBQUF2QixHQUNBLE9BQUF1QixFQUdBLFNBV0EsU0FBQXUyQyxFQUFBenRDLEVBQUFySyxHQUNBLElBQUE0TixFQUFBdkQsRUFBQW1xQyxTQUNBLE9BeUJBLFNBQUE5MEMsR0FDQSxJQUFBeUQsU0FBQXpELEVBQ0EsZ0JBQUF5RCxHQUFBLFVBQUFBLEdBQUEsVUFBQUEsR0FBQSxXQUFBQSxFQUNBLGNBQUF6RCxFQUNBLE9BQUFBLEVBN0JBdTRDLENBQUFqNEMsR0FDQTROLEVBQUEsaUJBQUE1TixFQUFBLGlCQUNBNE4sRUFBQXZELElBV0EsU0FBQW9wQyxFQUFBdHpDLEVBQUFILEdBQ0EsSUFBQU4sRUFBQVMsRUFBQUgsR0FDQSxPQW9PQSxTQUFBTixHQUNBLElBQUF1MkIsRUFBQXYyQixHQUNBLFNBR0EsT0E3REEsU0FBQUEsR0FJQSxJQUFBMDJDLEVBQUFuZ0IsRUFBQXYyQixHQUFBMm9DLEVBQUF6cEMsS0FBQWMsR0FBQSxHQUNBLE9BQUEwMkMsR0FBQWpGLEdBQUFpRixHQUFBaEYsRUF1REEvdkIsQ0FBQTNoQixJQTdtQkEsU0FBQUEsR0FHQSxJQUFBeVcsR0FBQSxFQUNBLFNBQUF6VyxHQUFBLG1CQUFBQSxFQUFBdVIsU0FDQSxJQUNBa0YsS0FBQXpXLEVBQUEsSUFDSyxNQUFBaUMsSUFFTCxPQUFBd1UsRUFvbUJBNDhCLENBQUFyekMsR0FBQTR6QyxFQUFBdEIsR0FDQXIzQixLQWxNQSxTQUFBeUcsR0FDQSxTQUFBQSxFQUFBLENBQ0EsSUFDQSxPQUFBaXlCLEVBQUF6MEMsS0FBQXdpQixHQUNLLE1BQUF6ZixJQUNMLElBQ0EsT0FBQXlmLEVBQUEsR0FDSyxNQUFBemYsS0FFTCxTQXlMQWl5QyxDQUFBbDBDLElBek9BdzRDLENBQUF4NEMsVUFBQW1PLEVBL1BBc21DLEVBQUE5ekMsVUFBQSt6QyxNQW5FQSxXQUNBMXpDLEtBQUE4ekMsU0FBQWQsSUFBQSxVQW1FQVMsRUFBQTl6QyxVQUFBLE9BdERBLFNBQUFMLEdBQ0EsT0FBQVUsS0FBQWlHLElBQUEzRyxXQUFBVSxLQUFBOHpDLFNBQUF4MEMsSUFzREFtMEMsRUFBQTl6QyxVQUFBZixJQTFDQSxTQUFBVSxHQUNBLElBQUE0TixFQUFBbE4sS0FBQTh6QyxTQUNBLEdBQUFkLEVBQUEsQ0FDQSxJQUFBdjlCLEVBQUF2SSxFQUFBNU4sR0FDQSxPQUFBbVcsSUFBQXM2QixPQUFBNWlDLEVBQUFzSSxFQUVBLE9BQUE3VixFQUFBMUIsS0FBQWdQLEVBQUE1TixHQUFBNE4sRUFBQTVOLFFBQUE2TixHQXFDQXNtQyxFQUFBOXpDLFVBQUFzRyxJQXpCQSxTQUFBM0csR0FDQSxJQUFBNE4sRUFBQWxOLEtBQUE4ekMsU0FDQSxPQUFBZCxPQUFBN2xDLElBQUFELEVBQUE1TixHQUFBTSxFQUFBMUIsS0FBQWdQLEVBQUE1TixJQXdCQW0wQyxFQUFBOXpDLFVBQUErNUIsSUFYQSxTQUFBcDZCLEVBQUFOLEdBR0EsT0FGQWdCLEtBQUE4ekMsU0FDQXgwQyxHQUFBMHpDLFFBQUE3bEMsSUFBQW5PLEVBQUErd0MsRUFBQS93QyxFQUNBZ0IsTUFvSEEyekMsRUFBQWgwQyxVQUFBK3pDLE1BakZBLFdBQ0ExekMsS0FBQTh6QyxhQWlGQUgsRUFBQWgwQyxVQUFBLE9BckVBLFNBQUFMLEdBQ0EsSUFBQTROLEVBQUFsTixLQUFBOHpDLFNBQ0E1OEIsRUFBQTg4QixFQUFBOW1DLEVBQUE1TixHQUVBLFFBQUE0WCxFQUFBLElBSUFBLEdBREFoSyxFQUFBck0sT0FBQSxFQUVBcU0sRUFBQWk2QixNQUVBMS9CLEVBQUF2SixLQUFBZ1AsRUFBQWdLLEVBQUEsR0FFQSxLQXlEQXk4QixFQUFBaDBDLFVBQUFmLElBN0NBLFNBQUFVLEdBQ0EsSUFBQTROLEVBQUFsTixLQUFBOHpDLFNBQ0E1OEIsRUFBQTg4QixFQUFBOW1DLEVBQUE1TixHQUVBLE9BQUE0WCxFQUFBLE9BQUEvSixFQUFBRCxFQUFBZ0ssR0FBQSxJQTBDQXk4QixFQUFBaDBDLFVBQUFzRyxJQTlCQSxTQUFBM0csR0FDQSxPQUFBMDBDLEVBQUFoMEMsS0FBQTh6QyxTQUFBeDBDLElBQUEsR0E4QkFxMEMsRUFBQWgwQyxVQUFBKzVCLElBakJBLFNBQUFwNkIsRUFBQU4sR0FDQSxJQUFBa08sRUFBQWxOLEtBQUE4ekMsU0FDQTU4QixFQUFBODhCLEVBQUE5bUMsRUFBQTVOLEdBT0EsT0FMQTRYLEVBQUEsRUFDQWhLLEVBQUE1SixNQUFBaEUsRUFBQU4sSUFFQWtPLEVBQUFnSyxHQUFBLEdBQUFsWSxFQUVBZ0IsTUFrR0E0ekMsRUFBQWowQyxVQUFBK3pDLE1BL0RBLFdBQ0ExekMsS0FBQTh6QyxVQUNBcE4sS0FBQSxJQUFBK00sRUFDQTlwQyxJQUFBLElBQUFrbEIsR0FBQThrQixHQUNBM1osT0FBQSxJQUFBeVosSUE0REFHLEVBQUFqMEMsVUFBQSxPQS9DQSxTQUFBTCxHQUNBLE9BQUE4M0MsRUFBQXAzQyxLQUFBVixHQUFBLE9BQUFBLElBK0NBczBDLEVBQUFqMEMsVUFBQWYsSUFuQ0EsU0FBQVUsR0FDQSxPQUFBODNDLEVBQUFwM0MsS0FBQVYsR0FBQVYsSUFBQVUsSUFtQ0FzMEMsRUFBQWowQyxVQUFBc0csSUF2QkEsU0FBQTNHLEdBQ0EsT0FBQTgzQyxFQUFBcDNDLEtBQUFWLEdBQUEyRyxJQUFBM0csSUF1QkFzMEMsRUFBQWowQyxVQUFBKzVCLElBVkEsU0FBQXA2QixFQUFBTixHQUVBLE9BREFvNEMsRUFBQXAzQyxLQUFBVixHQUFBbzZCLElBQUFwNkIsRUFBQU4sR0FDQWdCLE1BNkVBLElBQUE2dkMsRUFBQTc5QixFQUFBLFNBQUFnb0IsR0FDQSxJQUFBdmtCLEtBSUEsT0FvT0EsU0FBQXpXLEdBQ0EsYUFBQUEsRUFBQSxHQUFBdTZDLEVBQUF2NkMsR0F4T0F1UixDQUFBeXBCLEdBQUFwdkIsUUFBQTZ1QyxFQUFBLFNBQUE3NEIsRUFBQW1ULEVBQUE0bEIsRUFBQTNmLEdBQ0F2a0IsRUFBQW5TLEtBQUFxMkMsRUFBQTNmLEVBQUFwdkIsUUFBQTh1QyxFQUFBLE1BQUEzbEIsR0FBQW5ULEtBRUFuTCxJQWtFQSxTQUFBekQsRUFBQTBPLEVBQUFrNUIsR0FDQSxzQkFBQWw1QixHQUFBazVCLEdBQUEsbUJBQUFBLEVBQ0EsVUFBQTV3QyxVQUFBd3dDLEdBRUEsSUFBQUssRUFBQSxXQUNBLElBQUFqckMsRUFBQXhGLFVBQ0E5SixFQUFBczZDLElBQUEvcUMsTUFBQTdPLEtBQUE0TyxLQUFBLEdBQ0F5b0MsRUFBQXdDLEVBQUF4QyxNQUVBLEdBQUFBLEVBQUFweEMsSUFBQTNHLEdBQ0EsT0FBQSszQyxFQUFBejRDLElBQUFVLEdBRUEsSUFBQW1XLEVBQUFpTCxFQUFBN1IsTUFBQTdPLEtBQUE0TyxHQUVBLE9BREFpckMsRUFBQXhDLFFBQUEzZCxJQUFBcDZCLEVBQUFtVyxHQUNBQSxHQUdBLE9BREFva0MsRUFBQXhDLE1BQUEsSUFBQXJsQyxFQUFBOG5DLE9BQUFsRyxHQUNBaUcsRUFzQ0EsU0FBQTVGLEVBQUFqMUMsRUFBQXdMLEdBQ0EsT0FBQXhMLElBQUF3TCxHQUFBeEwsTUFBQXdMLEtBc0RBLFNBQUErcUIsRUFBQXYyQixHQUNBLElBQUF5RCxTQUFBekQsRUFDQSxRQUFBQSxJQUFBLFVBQUF5RCxHQUFBLFlBQUFBLEdBM0ZBdVAsRUFBQThuQyxNQUFBbEcsRUFpSkE5MUMsRUFBQUQsUUFBQWd5Qyw4Q0NydUJBLFNBQUEveEMsRUFBQWtPLEdBVUEsSUFBQWtrQyxFQUFBLElBR0FlLEVBQUEsa0JBR0FRLEdBQ0FDLFVBQUEsRUFDQWp5QyxRQUFBLEdBSUFreUMsRUFBQUYsU0FBQTV6QyxVQUFBZ2pDLFNBQ0FoakMsT0FDQXNQLEVBR0F5a0MsRUFBQUgsU0FBQTN6QyxVQUFBK2lDLFNBQ0EvaUMsT0FDQXFQLEVBR0Ewa0MsRUFBQUMsRUFBQUgsR0FBQUMsR0FBQSxpQkFBQTVsQyxNQUdBK2xDLEVBQUFELEVBQUFMLFNBQUFudEMsYUFHQTB0QyxFQUFBRixFQUFBTCxTQUFBdGxDLGlCQUdBOGxDLEVBQUFILEVBQUFMLFNBQUF6eEMsYUFRQTZZLEVBQUFnNUIsR0FDQUcsS0FBQUMsS0FBQTlsQyxTQUFBNmxDLEdBQ0FELEdBQUFFLEdBQUF2bEMsU0FBQSxjQUFBQSxHQVNBLFNBQUFvbEMsRUFBQTl5QyxHQUNBLE9BQUFBLEtBQUFQLGdCQUFBTyxFQUFBLEtBSUEsSUFPQTJvQyxFQVBBbHBDLE9BQUFrQixVQU9BNFEsU0FHQXpSLEVBQUErWixFQUFBL1osT0FHQXkwQyxFQUFBejBDLElBQUFhLGVBQUF3TixFQUNBNHNDLEVBQUF4RyxJQUFBaGpDLGNBQUFwRCxFQXlFQXJQLEVBQUFELFFBL0RBLFNBQUFtQixHQUVBLG9CQUFBQSxFQUNBLE9BQUFBLEVBRUEsR0FxREEsU0FBQUEsR0FDQSx1QkFBQUEsR0F2QkEsU0FBQUEsR0FDQSxRQUFBQSxHQUFBLGlCQUFBQSxFQXVCQTYxQyxDQUFBNzFDLElBQUEyb0MsRUFBQXpwQyxLQUFBYyxJQUFBaXlDLEVBdkRBN0gsQ0FBQXBxQyxHQUNBLE9BQUErNkMsSUFBQTc3QyxLQUFBYyxHQUFBLEdBRUEsSUFBQXlXLEVBQUF6VyxFQUFBLEdBQ0EsV0FBQXlXLEdBQUEsRUFBQXpXLElBQUFreEMsRUFBQSxLQUFBejZCLDhDQzFGQSxJQUFBdWtDLEVBQWdCcjhDLEVBQVEsSUFDeEJrYixFQUFXbGIsRUFBUSxJQUduQm15QyxFQUFBLElBR0FDLEVBQUEsNEJBR0FVLEVBQUEsb0JBQ0FDLEVBQUEsNkJBU0FZLEVBQUEsOEJBV0EsU0FBQTJJLEVBQUE1d0MsRUFBQXJLLEdBQ0EsUUFBQXFLLEVBQUF4SSxRQWlDQSxTQUFBd0ksRUFBQXJLLEVBQUFrN0MsR0FDQSxHQUFBbDdDLEtBQ0EsT0FrQ0EsU0FBQXFLLEVBQUE2d0MsRUFBQUMsR0FDQSxJQUFBdDVDLEVBQUF3SSxFQUFBeEksT0FDQXFXLEVBQUFnakMsR0FBQUMsRUFBQSxNQUVBLEtBQUFBLEVBQUFqakMsUUFBQXJXLEdBQUEsQ0FDQSxJQUFBMkosRUFBQW5CLEVBQUE2TixHQUNBLEdBQUExTSxLQUNBLE9BQUEwTSxFQUdBLFNBNUNBa2pDLENBQUEvd0MsRUFBQTZ3QyxHQUVBLElBQUFoakMsRUFBQWdqQyxFQUFBLEVBQ0FyNUMsRUFBQXdJLEVBQUF4SSxPQUVBLE9BQUFxVyxFQUFBclcsR0FDQSxHQUFBd0ksRUFBQTZOLEtBQUFsWSxFQUNBLE9BQUFrWSxFQUdBLFNBN0NBbWpDLENBQUFoeEMsRUFBQXJLLEVBQUEsTUFZQSxTQUFBczdDLEVBQUFqeEMsRUFBQXJLLEVBQUFrK0IsR0FJQSxJQUhBLElBQUFobUIsR0FBQSxFQUNBclcsRUFBQXdJLEVBQUF4SSxTQUVBcVcsRUFBQXJXLEdBQ0EsR0FBQXE4QixFQUFBbCtCLEVBQUFxSyxFQUFBNk4sSUFDQSxTQUdBLFNBbUNBLFNBQUFxakMsRUFBQWxELEVBQUEvM0MsR0FDQSxPQUFBKzNDLEVBQUFweEMsSUFBQTNHLEdBOERBLElBQUFtekMsRUFBQXJ5QyxNQUFBVCxVQUNBK3lDLEVBQUFqMEMsT0FBQWtCLFVBR0FnekMsRUFBQWptQyxTQUFBL00sVUFBQTRRLFNBR0EzUSxFQUFBOHlDLEVBQUE5eUMsZUFPQStuQyxFQUFBK0ssRUFBQW5pQyxTQUdBcWlDLEVBQUEzaEIsT0FBQSxJQUNBMGhCLEVBQUF6MEMsS0FBQTBCLEdBQUFnTCxRQXhKQSxzQkF3SkEsUUFDQUEsUUFBQSx1RUFJQW5ELEVBQUFnckMsRUFBQWhyQyxPQUdBb25CLEVBQUFra0IsRUFBQWw2QixFQUFBLE9BQ0FtNkIsRUFBQUQsRUFBQXQwQyxPQUFBLFVBU0EsU0FBQWcxQyxFQUFBbHFCLEdBQ0EsSUFBQXJTLEdBQUEsRUFDQXJXLEVBQUEwb0IsSUFBQTFvQixPQUFBLEVBR0EsSUFEQWIsS0FBQTB6QyxVQUNBeDhCLEVBQUFyVyxHQUFBLENBQ0EsSUFBQTJvQixFQUFBRCxFQUFBclMsR0FDQWxYLEtBQUEwNUIsSUFBQWxRLEVBQUEsR0FBQUEsRUFBQSxLQTJGQSxTQUFBbXFCLEVBQUFwcUIsR0FDQSxJQUFBclMsR0FBQSxFQUNBclcsRUFBQTBvQixJQUFBMW9CLE9BQUEsRUFHQSxJQURBYixLQUFBMHpDLFVBQ0F4OEIsRUFBQXJXLEdBQUEsQ0FDQSxJQUFBMm9CLEVBQUFELEVBQUFyUyxHQUNBbFgsS0FBQTA1QixJQUFBbFEsRUFBQSxHQUFBQSxFQUFBLEtBeUdBLFNBQUFvcUIsRUFBQXJxQixHQUNBLElBQUFyUyxHQUFBLEVBQ0FyVyxFQUFBMG9CLElBQUExb0IsT0FBQSxFQUdBLElBREFiLEtBQUEwekMsVUFDQXg4QixFQUFBclcsR0FBQSxDQUNBLElBQUEyb0IsRUFBQUQsRUFBQXJTLEdBQ0FsWCxLQUFBMDVCLElBQUFsUSxFQUFBLEdBQUFBLEVBQUEsS0F3RkEsU0FBQXFxQixFQUFBem9CLEdBQ0EsSUFBQWxVLEdBQUEsRUFDQXJXLEVBQUF1cUIsSUFBQXZxQixPQUFBLEVBR0EsSUFEQWIsS0FBQTh6QyxTQUFBLElBQUFGLElBQ0ExOEIsRUFBQXJXLEdBQ0FiLEtBQUF1WSxJQUFBNlMsRUFBQWxVLElBNENBLFNBQUE4OEIsRUFBQTNxQyxFQUFBL0osR0FFQSxJQURBLElBQUF1QixFQUFBd0ksRUFBQXhJLE9BQ0FBLEtBQ0EsR0FBQW96QyxFQUFBNXFDLEVBQUF4SSxHQUFBLEdBQUF2QixHQUNBLE9BQUF1QixFQUdBLFNBd0VBLFNBQUF1MkMsRUFBQXp0QyxFQUFBckssR0FDQSxJQUFBNE4sRUFBQXZELEVBQUFtcUMsU0FDQSxPQXlCQSxTQUFBOTBDLEdBQ0EsSUFBQXlELFNBQUF6RCxFQUNBLGdCQUFBeUQsR0FBQSxVQUFBQSxHQUFBLFVBQUFBLEdBQUEsV0FBQUEsRUFDQSxjQUFBekQsRUFDQSxPQUFBQSxFQTdCQXU0QyxDQUFBajRDLEdBQ0E0TixFQUFBLGlCQUFBNU4sRUFBQSxpQkFDQTROLEVBQUF2RCxJQVdBLFNBQUFvcEMsRUFBQXR6QyxFQUFBSCxHQUNBLElBQUFOLEVBQUFTLEVBQUFILEdBQ0EsT0FrSkEsU0FBQU4sR0FDQSxJQUFBdTJCLEVBQUF2MkIsR0FDQSxTQUdBLE9BN0RBLFNBQUFBLEdBSUEsSUFBQTAyQyxFQUFBbmdCLEVBQUF2MkIsR0FBQTJvQyxFQUFBenBDLEtBQUFjLEdBQUEsR0FDQSxPQUFBMDJDLEdBQUFqRixHQUFBaUYsR0FBQWhGLEVBdURBL3ZCLENBQUEzaEIsSUEzcEJBLFNBQUFBLEdBR0EsSUFBQXlXLEdBQUEsRUFDQSxTQUFBelcsR0FBQSxtQkFBQUEsRUFBQXVSLFNBQ0EsSUFDQWtGLEtBQUF6VyxFQUFBLElBQ0ssTUFBQWlDLElBRUwsT0FBQXdVLEVBa3BCQTQ4QixDQUFBcnpDLEdBQUE0ekMsRUFBQXRCLEdBQ0FyM0IsS0EvSEEsU0FBQXlHLEdBQ0EsU0FBQUEsRUFBQSxDQUNBLElBQ0EsT0FBQWl5QixFQUFBejBDLEtBQUF3aUIsR0FDSyxNQUFBemYsSUFDTCxJQUNBLE9BQUF5ZixFQUFBLEdBQ0ssTUFBQXpmLEtBRUwsU0FzSEFpeUMsQ0FBQWwwQyxJQXZKQXc0QyxDQUFBeDRDLFVBQUFtTyxFQW9FQSxTQUFBOG1DLEVBQUFqMUMsRUFBQXdMLEdBQ0EsT0FBQXhMLElBQUF3TCxHQUFBeEwsTUFBQXdMLEtBc0RBLFNBQUErcUIsRUFBQXYyQixHQUNBLElBQUF5RCxTQUFBekQsRUFDQSxRQUFBQSxJQUFBLFVBQUF5RCxHQUFBLFlBQUFBLEdBM2VBZ3hDLEVBQUE5ekMsVUFBQSt6QyxNQW5FQSxXQUNBMXpDLEtBQUE4ekMsU0FBQWQsSUFBQSxVQW1FQVMsRUFBQTl6QyxVQUFBLE9BdERBLFNBQUFMLEdBQ0EsT0FBQVUsS0FBQWlHLElBQUEzRyxXQUFBVSxLQUFBOHpDLFNBQUF4MEMsSUFzREFtMEMsRUFBQTl6QyxVQUFBZixJQTFDQSxTQUFBVSxHQUNBLElBQUE0TixFQUFBbE4sS0FBQTh6QyxTQUNBLEdBQUFkLEVBQUEsQ0FDQSxJQUFBdjlCLEVBQUF2SSxFQUFBNU4sR0FDQSxPQUFBbVcsSUFBQXM2QixPQUFBNWlDLEVBQUFzSSxFQUVBLE9BQUE3VixFQUFBMUIsS0FBQWdQLEVBQUE1TixHQUFBNE4sRUFBQTVOLFFBQUE2TixHQXFDQXNtQyxFQUFBOXpDLFVBQUFzRyxJQXpCQSxTQUFBM0csR0FDQSxJQUFBNE4sRUFBQWxOLEtBQUE4ekMsU0FDQSxPQUFBZCxPQUFBN2xDLElBQUFELEVBQUE1TixHQUFBTSxFQUFBMUIsS0FBQWdQLEVBQUE1TixJQXdCQW0wQyxFQUFBOXpDLFVBQUErNUIsSUFYQSxTQUFBcDZCLEVBQUFOLEdBR0EsT0FGQWdCLEtBQUE4ekMsU0FDQXgwQyxHQUFBMHpDLFFBQUE3bEMsSUFBQW5PLEVBQUErd0MsRUFBQS93QyxFQUNBZ0IsTUFvSEEyekMsRUFBQWgwQyxVQUFBK3pDLE1BakZBLFdBQ0ExekMsS0FBQTh6QyxhQWlGQUgsRUFBQWgwQyxVQUFBLE9BckVBLFNBQUFMLEdBQ0EsSUFBQTROLEVBQUFsTixLQUFBOHpDLFNBQ0E1OEIsRUFBQTg4QixFQUFBOW1DLEVBQUE1TixHQUVBLFFBQUE0WCxFQUFBLElBSUFBLEdBREFoSyxFQUFBck0sT0FBQSxFQUVBcU0sRUFBQWk2QixNQUVBMS9CLEVBQUF2SixLQUFBZ1AsRUFBQWdLLEVBQUEsR0FFQSxLQXlEQXk4QixFQUFBaDBDLFVBQUFmLElBN0NBLFNBQUFVLEdBQ0EsSUFBQTROLEVBQUFsTixLQUFBOHpDLFNBQ0E1OEIsRUFBQTg4QixFQUFBOW1DLEVBQUE1TixHQUVBLE9BQUE0WCxFQUFBLE9BQUEvSixFQUFBRCxFQUFBZ0ssR0FBQSxJQTBDQXk4QixFQUFBaDBDLFVBQUFzRyxJQTlCQSxTQUFBM0csR0FDQSxPQUFBMDBDLEVBQUFoMEMsS0FBQTh6QyxTQUFBeDBDLElBQUEsR0E4QkFxMEMsRUFBQWgwQyxVQUFBKzVCLElBakJBLFNBQUFwNkIsRUFBQU4sR0FDQSxJQUFBa08sRUFBQWxOLEtBQUE4ekMsU0FDQTU4QixFQUFBODhCLEVBQUE5bUMsRUFBQTVOLEdBT0EsT0FMQTRYLEVBQUEsRUFDQWhLLEVBQUE1SixNQUFBaEUsRUFBQU4sSUFFQWtPLEVBQUFnSyxHQUFBLEdBQUFsWSxFQUVBZ0IsTUFrR0E0ekMsRUFBQWowQyxVQUFBK3pDLE1BL0RBLFdBQ0ExekMsS0FBQTh6QyxVQUNBcE4sS0FBQSxJQUFBK00sRUFDQTlwQyxJQUFBLElBQUFrbEIsR0FBQThrQixHQUNBM1osT0FBQSxJQUFBeVosSUE0REFHLEVBQUFqMEMsVUFBQSxPQS9DQSxTQUFBTCxHQUNBLE9BQUE4M0MsRUFBQXAzQyxLQUFBVixHQUFBLE9BQUFBLElBK0NBczBDLEVBQUFqMEMsVUFBQWYsSUFuQ0EsU0FBQVUsR0FDQSxPQUFBODNDLEVBQUFwM0MsS0FBQVYsR0FBQVYsSUFBQVUsSUFtQ0FzMEMsRUFBQWowQyxVQUFBc0csSUF2QkEsU0FBQTNHLEdBQ0EsT0FBQTgzQyxFQUFBcDNDLEtBQUFWLEdBQUEyRyxJQUFBM0csSUF1QkFzMEMsRUFBQWowQyxVQUFBKzVCLElBVkEsU0FBQXA2QixFQUFBTixHQUVBLE9BREFvNEMsRUFBQXAzQyxLQUFBVixHQUFBbzZCLElBQUFwNkIsRUFBQU4sR0FDQWdCLE1BeURBNnpDLEVBQUFsMEMsVUFBQTRZLElBQUFzN0IsRUFBQWwwQyxVQUFBMkQsS0FuQkEsU0FBQXRFLEdBRUEsT0FEQWdCLEtBQUE4ekMsU0FBQXBhLElBQUExNkIsRUFBQSt3QyxHQUNBL3ZDLE1Ba0JBNnpDLEVBQUFsMEMsVUFBQXNHLElBTkEsU0FBQWpILEdBQ0EsT0FBQWdCLEtBQUE4ekMsU0FBQTd0QyxJQUFBakgsSUF5UUFsQixFQUFBRCxRQXZPQSxTQUFBd0wsRUFBQXVtQyxFQUFBMVMsR0FDQSxJQUFBaG1CLEdBQUEsRUFDQXNqQyxFQUFBUCxFQUNBcDVDLEVBQUF3SSxFQUFBeEksT0FDQTQ1QyxHQUFBLEVBQ0FobEMsS0FDQSt2QixFQUFBL3ZCLEVBRUEsR0FBQXluQixFQUNBdWQsR0FBQSxFQUNBRCxFQUFBRixPQUVBLEdBQUF6NUMsR0FBQWl2QyxFQUFBLENBQ0EsSUFBQXBXLEVBQUFrVyxFQUFBLEtBQUFvSyxFQUFBM3dDLEdBQ0EsR0FBQXF3QixFQUNBLE9BcGJBLFNBQUFBLEdBQ0EsSUFBQXhpQixHQUFBLEVBQ0F6QixFQUFBclYsTUFBQXM1QixFQUFBNlksTUFLQSxPQUhBN1ksRUFBQXRrQixRQUFBLFNBQUFwVyxHQUNBeVcsSUFBQXlCLEdBQUFsWSxJQUVBeVcsRUE2YUErOEIsQ0FBQTlZLEdBRUErZ0IsR0FBQSxFQUNBRCxFQUFBRCxFQUNBL1UsRUFBQSxJQUFBcU8sT0FHQXJPLEVBQUFvSyxLQUFBbjZCLEVBRUFpbEMsRUFDQSxPQUFBeGpDLEVBQUFyVyxHQUFBLENBQ0EsSUFBQTdCLEVBQUFxSyxFQUFBNk4sR0FDQXlqQyxFQUFBL0ssSUFBQTV3QyxLQUdBLEdBREFBLEVBQUFrK0IsR0FBQSxJQUFBbCtCLElBQUEsRUFDQXk3QyxHQUFBRSxLQUFBLENBRUEsSUFEQSxJQUFBQyxFQUFBcFYsRUFBQTNrQyxPQUNBKzVDLEtBQ0EsR0FBQXBWLEVBQUFvVixLQUFBRCxFQUNBLFNBQUFELEVBR0E5SyxHQUNBcEssRUFBQWxpQyxLQUFBcTNDLEdBRUFsbEMsRUFBQW5TLEtBQUF0RSxRQUVBdzdDLEVBQUFoVixFQUFBbVYsRUFBQXpkLEtBQ0FzSSxJQUFBL3ZCLEdBQ0ErdkIsRUFBQWxpQyxLQUFBcTNDLEdBRUFsbEMsRUFBQW5TLEtBQUF0RSxJQUdBLE9BQUF5VyxxQkMxbUJBLFNBQUEzWCxFQUFBa08sR0FVQSxJQUdBeWtDLEVBQUEsb0JBQ0FDLEVBQUEsNkJBU0FZLEVBQUEsOEJBR0FHLEdBQ0FDLFVBQUEsRUFDQWp5QyxRQUFBLEdBSUFreUMsRUFBQUYsU0FBQTV6QyxVQUFBZ2pDLFNBQ0FoakMsT0FDQXNQLEVBR0F5a0MsRUFBQUgsU0FBQTN6QyxVQUFBK2lDLFNBQ0EvaUMsT0FDQXFQLEVBR0Ewa0MsRUFBQUMsRUFBQUgsR0FBQUMsR0FBQSxpQkFBQTVsQyxNQUdBK2xDLEVBQUFELEVBQUFMLFNBQUFudEMsYUFHQTB0QyxFQUFBRixFQUFBTCxTQUFBdGxDLGlCQUdBOGxDLEVBQUFILEVBQUFMLFNBQUF6eEMsYUFRQTZZLEVBQUFnNUIsR0FDQUcsS0FBQUMsS0FBQTlsQyxTQUFBNmxDLEdBQ0FELEdBQUFFLEdBQUF2bEMsU0FBQSxjQUFBQSxHQVNBLFNBQUFvbEMsRUFBQTl5QyxHQUNBLE9BQUFBLEtBQUFQLGdCQUFBTyxFQUFBLEtBd0NBLElBQUEwekMsRUFBQWowQyxPQUFBa0IsVUFHQWd6QyxFQUFBam1DLFNBQUEvTSxVQUFBNFEsU0FHQTNRLEVBQUE4eUMsRUFBQTl5QyxlQU9BK25DLEVBQUErSyxFQUFBbmlDLFNBR0FxaUMsRUFBQTNoQixPQUFBLElBQ0EwaEIsRUFBQXowQyxLQUFBMEIsR0FBQWdMLFFBNUdBLHNCQTRHQSxRQUNBQSxRQUFBLHVFQUlBd21CLEVBcUJBLFNBQUEzeEIsRUFBQUgsR0FDQSxJQUFBTixFQUFBUyxFQUFBSCxHQUNBLE9BZ0dBLFNBQUFOLEdBQ0EsSUFBQXUyQixFQUFBdjJCLEdBQ0EsU0FHQSxPQTdEQSxTQUFBQSxHQUlBLElBQUEwMkMsRUFBQW5nQixFQUFBdjJCLEdBQUEyb0MsRUFBQXpwQyxLQUFBYyxHQUFBLEdBQ0EsT0FBQTAyQyxHQUFBakYsR0FBQWlGLEdBQUFoRixFQXVEQS92QixDQUFBM2hCLElBL0tBLFNBQUFBLEdBR0EsSUFBQXlXLEdBQUEsRUFDQSxTQUFBelcsR0FBQSxtQkFBQUEsRUFBQXVSLFNBQ0EsSUFDQWtGLEtBQUF6VyxFQUFBLElBQ0ssTUFBQWlDLElBRUwsT0FBQXdVLEVBc0tBNDhCLENBQUFyekMsR0FBQTR6QyxFQUFBdEIsR0FDQXIzQixLQTNGQSxTQUFBeUcsR0FDQSxTQUFBQSxFQUFBLENBQ0EsSUFDQSxPQUFBaXlCLEVBQUF6MEMsS0FBQXdpQixHQUNLLE1BQUF6ZixJQUNMLElBQ0EsT0FBQXlmLEVBQUEsR0FDSyxNQUFBemYsS0FFTCxTQWtGQWl5QyxDQUFBbDBDLElBckdBdzRDLENBQUF4NEMsVUFBQW1PLEVBdkJBNGxDLENBQUFsNkIsRUFBQSxPQVNBbWhDLEVBQUE1b0IsR0FBQSxFQTFDQSxTQUFBc0ksR0FDQSxJQUFBeGlCLEdBQUEsRUFDQXpCLEVBQUFyVixNQUFBczVCLEVBQUE2WSxNQUtBLE9BSEE3WSxFQUFBdGtCLFFBQUEsU0FBQXBXLEdBQ0F5VyxJQUFBeUIsR0FBQWxZLElBRUF5VyxFQW1DQSs4QixDQUFBLElBQUFwaEIsR0FBQSxXQXBJQSxJQW9JQSxTQUFBaEcsR0FDQSxXQUFBZ0csRUFBQWhHLElBb0lBLGFBOUNBLFNBQUFtSyxFQUFBdjJCLEdBQ0EsSUFBQXlELFNBQUF6RCxFQUNBLFFBQUFBLElBQUEsVUFBQXlELEdBQUEsWUFBQUEsR0FnREEzRSxFQUFBRCxRQUFBbThDLDhDQ3ZSQSxTQUFBbDhDLEVBQUFrTyxHQVVBLElBQUF5bEMsR0FDQUMsVUFBQSxFQUNBanlDLFFBQUEsR0FJQWt5QyxFQUFBRixTQUFBNXpDLFVBQUFnakMsU0FDQWhqQyxPQUNBc1AsRUFHQXlrQyxFQUFBSCxTQUFBM3pDLFVBQUEraUMsU0FDQS9pQyxPQUNBcVAsRUFHQTBrQyxFQUFBQyxFQUFBSCxHQUFBQyxHQUFBLGlCQUFBNWxDLE1BR0ErbEMsRUFBQUQsRUFBQUwsU0FBQW50QyxhQUdBMHRDLEVBQUFGLEVBQUFMLFNBQUF0bEMsaUJBR0E4bEMsRUFBQUgsRUFBQUwsU0FBQXp4QyxhQVFBNlksRUFBQWc1QixHQUNBRyxLQUFBQyxLQUFBOWxDLFNBQUE2bEMsR0FDQUQsR0FBQUUsR0FBQXZsQyxTQUFBLGNBQUFBLEdBU0EsU0FBQW9sQyxFQUFBOXlDLEdBQ0EsT0FBQUEsS0FBQVAsZ0JBQUFPLEVBQUEsS0FHQWxCLEVBQUFELFFBQUFnYiwwREN2REEsSUFBQTVTLEVBQUF4SCxPQUFBa0IsVUFBQUMsZUFDQXNhLEVBQUF6YixPQUFBa0IsVUFBQTRRLFNBQ0E4SSxFQUFBalosTUFBQVQsVUFBQTBaLE1BQ0F3aEMsRUFBYWw5QyxFQUFRLElBQ3JCbTlDLEVBQUFyOEMsT0FBQWtCLFVBQUF1dEMscUJBQ0E2TixHQUFBRCxFQUFBNThDLE1BQXlDcVMsU0FBQSxNQUFpQixZQUMxRHlxQyxFQUFBRixFQUFBNThDLEtBQUEsYUFBc0QsYUFDdEQrOEMsR0FDQSxXQUNBLGlCQUNBLFVBQ0EsaUJBQ0EsZ0JBQ0EsdUJBQ0EsZUFFQUMsRUFBQSxTQUFBMThDLEdBQ0EsSUFBQXdKLEVBQUF4SixFQUFBK0IsWUFDQSxPQUFBeUgsS0FBQXJJLFlBQUFuQixHQUVBMjhDLEdBQ0FDLG1CQUFBLEVBQ0FDLFVBQUEsRUFDQUMsV0FBQSxFQUNBQyxRQUFBLEVBQ0FDLGVBQUEsRUFDQUMsU0FBQSxFQUNBQyxjQUFBLEVBQ0FDLGFBQUEsRUFDQUMsY0FBQSxFQUNBQyxhQUFBLEVBQ0FDLGNBQUEsRUFDQUMsY0FBQSxFQUNBQyxTQUFBLEVBQ0FDLGFBQUEsRUFDQUMsWUFBQSxFQUNBQyxVQUFBLEVBQ0FDLFVBQUEsRUFDQUMsT0FBQSxFQUNBQyxrQkFBQSxFQUNBQyxvQkFBQSxFQUNBQyxTQUFBLEdBRUFDLEVBQUEsV0FFQSx1QkFBQXR3QyxPQUFxQyxTQUNyQyxRQUFBdXdDLEtBQUF2d0MsT0FDQSxJQUNBLElBQUFndkMsRUFBQSxJQUFBdUIsSUFBQXoyQyxFQUFBL0gsS0FBQWlPLE9BQUF1d0MsSUFBQSxPQUFBdndDLE9BQUF1d0MsSUFBQSxpQkFBQXZ3QyxPQUFBdXdDLEdBQ0EsSUFDQXhCLEVBQUEvdUMsT0FBQXV3QyxJQUNLLE1BQUF6N0MsR0FDTCxVQUdHLE1BQUFBLEdBQ0gsU0FHQSxTQWhCQSxHQThCQTA3QyxFQUFBLFNBQUFsOUMsR0FDQSxJQUFBODFCLEVBQUEsT0FBQTkxQixHQUFBLGlCQUFBQSxFQUNBa2hCLEVBQUEsc0JBQUF6RyxFQUFBaGMsS0FBQXVCLEdBQ0E4aUIsRUFBQXM0QixFQUFBcDdDLEdBQ0FtbEMsRUFBQXJQLEdBQUEsb0JBQUFyYixFQUFBaGMsS0FBQXVCLEdBQ0FtOUMsS0FFQSxJQUFBcm5CLElBQUE1VSxJQUFBNEIsRUFDQSxVQUFBdlosVUFBQSxzQ0FHQSxJQUFBNnpDLEVBQUE3QixHQUFBcjZCLEVBQ0EsR0FBQWlrQixHQUFBbmxDLEVBQUFvQixPQUFBLElBQUFvRixFQUFBL0gsS0FBQXVCLEVBQUEsR0FDQSxRQUFBMUIsRUFBQSxFQUFpQkEsRUFBQTBCLEVBQUFvQixTQUFtQjlDLEVBQ3BDNitDLEVBQUF0NUMsS0FBQXF1QixPQUFBNXpCLElBSUEsR0FBQXdrQixHQUFBOWlCLEVBQUFvQixPQUFBLEVBQ0EsUUFBQXVTLEVBQUEsRUFBaUJBLEVBQUEzVCxFQUFBb0IsU0FBbUJ1UyxFQUNwQ3dwQyxFQUFBdDVDLEtBQUFxdUIsT0FBQXZlLFNBR0EsUUFBQTlVLEtBQUFtQixFQUNBbzlDLEdBQUEsY0FBQXYrQyxJQUFBMkgsRUFBQS9ILEtBQUF1QixFQUFBbkIsSUFDQXMrQyxFQUFBdDVDLEtBQUFxdUIsT0FBQXJ6QixJQUtBLEdBQUF5OEMsRUFHQSxJQUZBLElBQUErQixFQTNDQSxTQUFBdCtDLEdBRUEsdUJBQUEyTixTQUFBc3dDLEVBQ0EsT0FBQXZCLEVBQUExOEMsR0FFQSxJQUNBLE9BQUEwOEMsRUFBQTE4QyxHQUNFLE1BQUF5QyxHQUNGLFVBbUNBODdDLENBQUF0OUMsR0FFQWk5QyxFQUFBLEVBQWlCQSxFQUFBekIsRUFBQXA2QyxTQUFzQjY3QyxFQUN2Q0ksR0FBQSxnQkFBQTdCLEVBQUF5QixLQUFBejJDLEVBQUEvSCxLQUFBdUIsRUFBQXc3QyxFQUFBeUIsS0FDQUUsRUFBQXQ1QyxLQUFBMjNDLEVBQUF5QixJQUlBLE9BQUFFLEdBR0FELEVBQUEzYyxLQUFBLFdBQ0EsR0FBQXZoQyxPQUFBMFcsTUFLQSxJQUpBLFdBRUEsWUFBQTFXLE9BQUEwVyxLQUFBL0wsWUFBQSxJQUFBdkksT0FGQSxDQUdHLEtBQ0gsQ0FDQSxJQUFBbThDLEVBQUF2K0MsT0FBQTBXLEtBQ0ExVyxPQUFBMFcsS0FBQSxTQUFBMVYsR0FDQSxPQUFBbzdDLEVBQUFwN0MsR0FDQXU5QyxFQUFBM2pDLEVBQUFuYixLQUFBdUIsSUFFQXU5QyxFQUFBdjlDLFVBS0FoQixPQUFBMFcsS0FBQXduQyxFQUVBLE9BQUFsK0MsT0FBQTBXLE1BQUF3bkMsR0FHQTcrQyxFQUFBRCxRQUFBOCtDLGdDQzFJQSxJQUFBemlDLEVBQUF6YixPQUFBa0IsVUFBQTRRLFNBRUF6UyxFQUFBRCxRQUFBLFNBQUFtQixHQUNBLElBQUF5M0IsRUFBQXZjLEVBQUFoYyxLQUFBYyxHQUNBNjdDLEVBQUEsdUJBQUFwa0IsRUFTQSxPQVJBb2tCLElBQ0FBLEVBQUEsbUJBQUFwa0IsR0FDQSxPQUFBejNCLEdBQ0EsaUJBQUFBLEdBQ0EsaUJBQUFBLEVBQUE2QixRQUNBN0IsRUFBQTZCLFFBQUEsR0FDQSxzQkFBQXFaLEVBQUFoYyxLQUFBYyxFQUFBaStDLFNBRUFwQyxpQ0NiQSxJQUFBcUMsRUFBYXYvQyxFQUFRLElBQ3JCNGMsRUFBYTVjLEVBQVEsSUFFckJ3L0MsRUFBQTVpQyxPQUE2QjJpQyxJQUM3QkUsUUFBQSxTQUFBcCtDLEdBQ0EsWUFBQUEsRUFDQSxTQUVBLElBQUFxK0MsRUFBQXI5QyxLQUFBczlDLFVBQUF0K0MsR0FDQSxHQUFBcStDLEVBQUEsRUFDQSxVQUFBNXNCLFdBQUEsc0JBRUEsSUFBQXZaLEVBQUFsWCxLQUFBdTlDLFNBQUFGLEdBQ0EsSUFBQXI5QyxLQUFBdzlDLGNBQUFILEVBQUFubUMsR0FDQSxVQUFBdVosV0FBQSx3Q0FFQSxPQUFBdlosWUFJQWltQyxFQUFBTSxtQkFFQTMvQyxFQUFBRCxRQUFBcy9DLGdDQ3RCQSxJQUFBTyxFQUFhLy9DLEVBQVEsSUFDckI0YyxFQUFhNWMsRUFBUSxJQUVyQnUvQyxFQUFBM2lDLE9BQTZCbWpDLElBRTdCQyxtQkFBQSxTQUFBLzFDLEVBQUEyWCxHQUNBLG9CQUFBM1gsb0JBQUEyWCxFQUNBLFVBQUF2VyxVQUFBLHVFQUVBLE9BQUFoSixLQUFBNDlDLFVBQUFoMkMsRUFBQTJYLE1BSUF6aEIsRUFBQUQsUUFBQXEvQyxnQ0NiQSxJQUFBajNDLEVBQVV0SSxFQUFRLElBQ2xCa2dELEVBQWtCbGdELEVBQVEsSUFFMUJtZ0QsRUFBbUJuZ0QsRUFBUSxJQUUzQm9nRCxFQUFBRCxFQUFBLGVBQ0FFLEVBQUFGLEVBQUEsaUJBQ0FHLEVBQUFILEVBQUEsV0FDQUksRUFBQUosRUFBQSxZQUNBSyxFQUFBTCxFQUFBLFlBQ0FNLEVBQUFOLEVBQUEsWUFDQU8sRUFBQVAsRUFBQSxlQUNBUSxFQUFBUixFQUFBLFlBRUFyMUIsSUFBQTQxQixFQUVBeHFCLEVBQWFsMkIsRUFBUSxJQUNyQjRnRCxFQUFnQjVnRCxFQUFRLElBQ3hCd3lDLEVBQUFpTyxFQUFBak8sa0JBQUEvMkIsS0FBQW9sQyxJQUFBLFFBRUFqa0MsRUFBYTVjLEVBQVEsSUFDckI4Z0QsRUFBVzlnRCxFQUFRLElBQ25CK2dELEVBQVUvZ0QsRUFBUSxJQUNsQnlrQixFQUFrQnprQixFQUFRLElBQzFCZ2hELEVBQUEvdUIsU0FDQXJ3QixFQUFXNUIsRUFBUSxJQUNuQmloRCxFQUFBci9DLEVBQUFyQixLQUFBd08sU0FBQXhPLEtBQUErL0MsRUFBQXQrQyxVQUFBMFosT0FDQXdsQyxFQUFBdC9DLEVBQUFyQixLQUFBd08sU0FBQXhPLEtBQUFnZ0QsRUFBQXYrQyxVQUFBMFosT0FDQXlsQyxFQUFBdi9DLEVBQUFyQixLQUFBd08sU0FBQXhPLEtBQUFvZ0QsRUFBQTMrQyxVQUFBc2EsS0FBQSxjQUNBOGtDLEVBQUF4L0MsRUFBQXJCLEtBQUF3TyxTQUFBeE8sS0FBQW9nRCxFQUFBMytDLFVBQUFzYSxLQUFBLGVBQ0Era0MsRUFBQXovQyxFQUFBckIsS0FBQXdPLFNBQUF4TyxLQUFBb2dELEVBQUEzK0MsVUFBQXMvQyxNQUVBQyxFQUFBLElBQUFaLEVBQUEsS0FEQSxhQUFBL3NDLEtBQUEsSUFDQSxTQUNBNHRDLEVBQUE1L0MsRUFBQXJCLEtBQUF3TyxTQUFBeE8sS0FBQW9nRCxFQUFBMytDLFVBQUFzYSxLQUFBaWxDLEdBRUFFLEVBQUE3L0MsRUFBQXJCLEtBQUF3TyxTQUFBeE8sS0FBQW9nRCxFQUFBMytDLFVBQUFzYSxLQURBLHNCQUVBb2xDLEVBQUE5L0MsRUFBQXJCLEtBQUF3TyxTQUFBeE8sS0FBQWdnRCxFQUFBditDLFVBQUFnYyxZQUVBekIsRUFBQTNhLEVBQUFyQixLQUFBd08sU0FBQXhPLEtBQUFPLE9BQUFrQixVQUFBNFEsVUFFQSt1QyxFQUFBbG1DLEtBQUE4YSxNQUNBcXJCLEVBQUFubUMsS0FBQW9tQyxJQUVBQyxFQUFBaGhELE9BQUFZLE9BQ0FxZ0QsRUFBQXZCLEVBQUF2NUIseUJBRUErNkIsRUFBQXhCLEVBQUF5QixhQUlBQyxHQUNBLHFCQUNBLG1CQUNBLGdCQUNBdHVDLEtBQUEsSUFDQXV1QyxFQUFBLElBQUE3dUIsT0FBQSxNQUFBNHVCLEVBQUEsU0FBQUEsRUFBQSxZQUNBajFDLEVBQUFyTCxFQUFBckIsS0FBQXdPLFNBQUF4TyxLQUFBZ2dELEVBQUF2K0MsVUFBQWlMLFNBS0FtMUMsRUFBVXBpRCxFQUFRLElBRWxCcWlELEVBQXVCcmlELEVBQVEsSUFHL0JzaUQsRUFBQTFsQyxPQUEwQndsQyxJQUcxQkcsS0FBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUF4eEMsRUFBQXhGLFVBQUF2SSxPQUFBLEVBQUF1SSxVQUFBLE1BQ0EsSUFBQXBKLEtBQUFxZ0QsV0FBQUYsR0FDQSxVQUFBcEMsRUFBQW9DLEVBQUEsc0JBRUEsT0FBQUEsRUFBQXR4QyxNQUFBdXhDLEVBQUF4eEMsSUFJQTB4QyxZQUFBekMsRUFNQTBDLFNBQUEsU0FBQUMsR0FDQSxJQUFBeGhELEVBQUFvakIsRUFBQW8rQixLQUFBM0MsRUFBQTJDLEVBQUFwQyxHQUNBLG9CQUFBcC9DLEVBQ0EsVUFBQSsrQyxFQUFBLDZDQUVBLG9CQUFBLytDLEVBQUEsQ0FDQSxHQUFBOC9DLEVBQUE5L0MsR0FDQSxPQUFBZ0IsS0FBQXVnRCxTQUFBNUIsRUFBQUUsRUFBQTcvQyxFQUFBLE9BQ0ksR0FBQSsvQyxFQUFBLy9DLEdBQ0osT0FBQWdCLEtBQUF1Z0QsU0FBQTVCLEVBQUFFLEVBQUE3L0MsRUFBQSxPQUNJLEdBQUFtZ0QsRUFBQW5nRCxJQUFBb2dELEVBQUFwZ0QsR0FDSixPQUFBeWhELElBRUEsSUFBQUMsRUF4Q0EsU0FBQTFoRCxHQUNBLE9BQUE0TCxFQUFBNUwsRUFBQThnRCxFQUFBLElBdUNBM3BCLENBQUFuM0IsR0FDQSxHQUFBMGhELElBQUExaEQsRUFDQSxPQUFBZ0IsS0FBQXVnRCxTQUFBRyxHQUlBLE9BQUF0QyxFQUFBcC9DLElBYUEyaEQsUUFBQSxTQUFBSCxHQUNBLElBQUFJLEVBQUE1Z0QsS0FBQTZnRCxTQUFBTCxHQUNBLE9BQUFJLEdBQUEsTUFBQUEsRUFBQSxNQUFBQSxHQU9BRSxPQUFBLFNBQUFOLEdBQ0EsSUFBQU8sRUFBQS9nRCxLQUFBZ2hELFFBQUFSLEdBQ0EsT0FBQU8sR0FBQSxJQUFBQSxFQUFBLElBQUFBLEdBSUFDLFFBQUEsU0FBQVIsR0FDQSxJQUFBenNCLEVBQUEvekIsS0FBQXVnRCxTQUFBQyxHQUNBLEdBQUEzc0IsRUFBQUUsSUFBQSxJQUFBQSxJQUFBd3FCLEVBQUF4cUIsR0FBNkQsU0FDN0QsSUFBQWt0QixFQUFBeEMsRUFBQTFxQixHQUFBdXJCLEVBQUFDLEVBQUF4ckIsSUFDQSxPQUFBMnFCLEVBQUF1QyxFQUFBLE1BSUFDLGFBQUEsU0FBQVYsR0FDQSxJQUFBenNCLEVBQUEvekIsS0FBQXVnRCxTQUFBQyxHQUNBLEdBQUEzc0IsRUFBQUUsT0FBQSxFQUFzQyxTQUN0QyxHQUFBQSxHQUFBLElBQXVCLFdBQ3ZCLElBQUEveUIsRUFBQXMrQyxFQUFBa0IsR0FDQSxPQUFBeC9DLEVBQUEsR0FBQSt5QixFQUF5Qi95QixFQUFBLEVBQ3pCK3lCLEVBQUEveUIsRUFBQSxHQUF5QkEsRUFDekJBLEVBQUEsS0FBb0JBLEVBQUEsRUFDcEJBLEdBSUFtZ0QsU0FBQSxTQUFBWCxHQUNBLG9CQUFBQSxFQUNBLFVBQUF6QyxFQUFBLDZDQUVBLE9BQUFHLEVBQUFzQyxJQUlBWSxTQUFBLFNBQUFwaUQsR0FFQSxPQURBZ0IsS0FBQXFwQix1QkFBQXJxQixHQUNBbS9DLEVBQUFuL0MsSUFJQTRxQixjQUFBLFNBQUE0MkIsR0FDQSxJQUFBbGhELEVBQUFVLEtBQUFzZ0QsWUFBQUUsRUFBQXRDLEdBQ0EsdUJBQUE1K0MsSUFBQVUsS0FBQW1oRCxTQUFBN2hELElBSUFpK0MsU0FBQSxTQUFBaUQsR0FDQSxJQUFBbHlDLEVBQUF0TyxLQUFBczlDLFVBQUFrRCxHQUNBLE9BQUFseUMsR0FBQSxFQUFpQixFQUNqQkEsRUFBQTZoQyxFQUErQkEsRUFDL0I3aEMsR0FJQSt5Qyw0QkFBQSxTQUFBYixHQUNBLHVCQUFBdG1DLEVBQUFzbUMsR0FDQSxVQUFBekMsRUFBQSxvQkFFQSxVQUFBeUMsRUFBMEIsU0FDMUIsSUFBQWhoRCxFQUFBUSxLQUFBdWdELFNBQUFDLEdBQ0EsT0FBQXhnRCxLQUFBNDlDLFVBQUE1OUMsS0FBQW1oRCxTQUFBM2hELEdBQUFnaEQsR0FBbURoaEQsT0FBbkQsR0FLQTZwQix1QkFBQTAyQixFQUFBdUIscUJBR0FoNEIsUUFBQTIwQixFQUFBbjFDLFNBQUEsU0FBQTAzQyxHQUNBLHlCQUFBdG1DLEVBQUFzbUMsSUFPQWUsY0FBQSxTQUFBZixHQUNBLHlCQUFBQSxPQUFBN2dELFdBSUE2aEQsYUFBQS9pRCxPQUFBZ2pELGtCQUNBLFNBQUFuc0MsR0FDQSxPQUFBOE0sRUFBQTlNLElBR0FxcUMsRUFBQXJxQyxJQUVBLFNBQUFBLEdBQWdDLFVBR2hDb3NDLFVBQUEsU0FBQWxCLEdBQ0Esb0JBQUFBLEdBQUEzc0IsRUFBQTJzQixLQUFBakMsRUFBQWlDLEdBQ0EsU0FFQSxJQUFBaEIsRUFBQUQsRUFBQWlCLEdBQ0EsT0FBQWxCLEVBQUFFLFFBSUFtQyxjQUFBLFNBQUFuQixHQUNBLHVCQUFBQSxHQUFBLGlCQUFBQSxHQUlBb0IsU0FBQSxTQUFBcEIsR0FDQSxJQUFBQSxHQUFBLGlCQUFBQSxFQUNBLFNBRUEsR0FBQS8zQixFQUFBLENBQ0EsSUFBQTlHLEVBQUE2K0IsRUFBQW5DLEVBQUF6OUIsT0FDQSxZQUFBZSxFQUNBLE9BQUFvK0IsRUFBQThCLFVBQUFsZ0MsR0FHQSxPQUFBcStCLEVBQUFRLElBT0FoRCxjQUFBLFNBQUE1MUMsRUFBQTJYLEdBQ0EsT0FBQTNYLElBQUEyWCxHQUFBc1UsRUFBQWpzQixJQUFBaXNCLEVBQUF0VSxJQVVBdWlDLEtBQUEsU0FBQTFCLEVBQUEyQixHQUVBLElBQUEvaEQsS0FBQTJoRCxjQUFBSSxHQUNBLFVBQUFoRSxFQUFBLGtEQU9BLE9BSEEvOUMsS0FBQW9oRCxTQUFBaEIsR0FHQTJCLElBWUFDLFVBQUEsU0FBQUMsRUFBQUYsR0FFQSxJQUFBL2hELEtBQUEyaEQsY0FBQUksR0FDQSxVQUFBaEUsRUFBQSxrREFJQSxJQUFBcjlCLEVBQUExZ0IsS0FBQThoRCxLQUFBRyxFQUFBRixHQUdBLFNBQUFyaEMsRUFBQSxDQUtBLElBQUExZ0IsS0FBQXFnRCxXQUFBMy9CLEdBQ0EsVUFBQXE5QixFQUFBZ0UsRUFBQSxxQkFJQSxPQUFBcmhDLElBU0FnSixJQUFBLFNBQUF1NEIsRUFBQUYsR0FFQSxjQUFBL2hELEtBQUF5cEIsS0FBQXc0QixHQUNBLFVBQUFsRSxFQUFBLDJDQUdBLElBQUEvOUMsS0FBQTJoRCxjQUFBSSxHQUNBLFVBQUFoRSxFQUFBLGtEQUdBLE9BQUFrRSxFQUFBRixJQUdBdDRCLEtBQUEsU0FBQTdoQixHQUNBLHVCQUFBQSxFQUNBLFNBRUFtNEMsRUFBQXQyQixLQUFBN2hCLElBSUFzNkMsbUJBQUEsU0FBQUQsRUFBQUUsR0FDQSxjQUFBbmlELEtBQUF5cEIsS0FBQXc0QixHQUNBLFVBQUFsRSxFQUFBLDJDQUVBLElBQUFxRSxFQUFBSCxFQUFBMWhELFlBQ0EsWUFBQTZoRCxFQUNBLE9BQUFELEVBRUEsY0FBQW5pRCxLQUFBeXBCLEtBQUEyNEIsR0FDQSxVQUFBckUsRUFBQSxrQ0FFQSxJQUFBc0UsRUFBQTU1QixHQUFBNDFCLEVBQUFpRSxRQUFBRixFQUFBL0QsRUFBQWlFLGNBQUEsRUFDQSxTQUFBRCxFQUNBLE9BQUFGLEVBRUEsR0FBQW5pRCxLQUFBdWhELGNBQUFjLEdBQ0EsT0FBQUEsRUFFQSxVQUFBdEUsRUFBQSx5QkFJQXdFLDJCQUFBLFNBQUFDLEdBQ0EsSUFBQXhpRCxLQUFBeWlELHFCQUFBRCxHQUNBLFVBQUF6RSxFQUFBLHNDQXdCQSxPQXJCQS85QyxLQUFBMGlELG9CQUFBRixJQUFBeGlELEtBQUEyaUQsaUJBQUFILElBQ0F2OEMsRUFBQXU4QyxFQUFBLGVBQ0FBLEVBQUEscUJBRUF2OEMsRUFBQXU4QyxFQUFBLGtCQUNBQSxFQUFBLHNCQUdBdjhDLEVBQUF1OEMsRUFBQSxhQUNBQSxFQUFBLG1CQUVBdjhDLEVBQUF1OEMsRUFBQSxhQUNBQSxFQUFBLG9CQUdBdjhDLEVBQUF1OEMsRUFBQSxvQkFDQUEsRUFBQSxzQkFFQXY4QyxFQUFBdThDLEVBQUEsc0JBQ0FBLEVBQUEsd0JBRUFBLEdBSUFweEIsSUFBQSxTQUFBNndCLEVBQUFGLEVBQUEzQixFQUFBd0MsR0FDQSxjQUFBNWlELEtBQUF5cEIsS0FBQXc0QixHQUNBLFVBQUFsRSxFQUFBLHVCQUVBLElBQUEvOUMsS0FBQTJoRCxjQUFBSSxHQUNBLFVBQUFoRSxFQUFBLDRCQUVBLGVBQUEvOUMsS0FBQXlwQixLQUFBbTVCLEdBQ0EsVUFBQTdFLEVBQUEsMkJBRUEsR0FBQTZFLEVBRUEsT0FEQVgsRUFBQUYsR0FBQTNCLEdBQ0EsRUFFQSxJQUNBNkIsRUFBQUYsR0FBQTNCLEVBQ0ksTUFBQW4vQyxHQUNKLFdBTUE0aEQsZUFBQSxTQUFBWixFQUFBRixHQUNBLGNBQUEvaEQsS0FBQXlwQixLQUFBdzRCLEdBQ0EsVUFBQWxFLEVBQUEsdUJBRUEsSUFBQS85QyxLQUFBMmhELGNBQUFJLEdBQ0EsVUFBQWhFLEVBQUEsNEJBRUEsT0FBQTkzQyxFQUFBZzhDLEVBQUFGLElBSUFlLFlBQUEsU0FBQWIsRUFBQUYsR0FDQSxjQUFBL2hELEtBQUF5cEIsS0FBQXc0QixHQUNBLFVBQUFsRSxFQUFBLHVCQUVBLElBQUEvOUMsS0FBQTJoRCxjQUFBSSxHQUNBLFVBQUFoRSxFQUFBLDRCQUVBLE9BQUFnRSxLQUFBRSxHQUlBYyxtQkFBQSxTQUFBZCxHQUNBLGNBQUFqaUQsS0FBQXlwQixLQUFBdzRCLEdBQ0EsU0FFQSxHQUFBeDVCLEdBQUEsaUJBQUE0MUIsRUFBQTJFLG1CQUFBLENBQ0EsSUFBQUMsRUFBQWpqRCxLQUFBMHBCLElBQUF1NEIsRUFBQW5qRCxPQUFBa2tELG9CQUNBLFlBQUFDLEVBQ0EsT0FBQWpqRCxLQUFBNmhELFVBQUFvQixHQUdBLE9BQUFqakQsS0FBQXNwQixRQUFBMjRCLElBSUFpQixPQUFBLFNBQUFqQixFQUFBRixHQUNBLElBQUEvaEQsS0FBQTJoRCxjQUFBSSxHQUNBLFVBQUFoRSxFQUFBLDRCQUVBLElBQUFvRixFQUFBdkUsRUFBQXgxQyxVQUFBLEdBQ0FzWCxFQUFBMWdCLEtBQUE4aEQsS0FBQUcsRUFBQUYsR0FDQSxPQUFBL2hELEtBQUFrZ0QsS0FBQXgvQixFQUFBdWhDLEVBQUFrQixJQUlBbjVCLFlBQUEsU0FBQTFVLEVBQUFxZ0IsR0FDQSxJQUFBbE4sRUFDQSxVQUFBd0osWUFBQSxzREFHQSxJQUFBbXhCLEVBQUF6dEIsRUFDQXZzQixVQUFBdkksT0FBQSxJQUNBdWlELEVBQUFwakQsS0FBQWdpRCxVQUFBMXNDLEVBQUErb0MsRUFBQS96QixXQUVBLElBQUFBLEVBQUF0cUIsS0FBQWtnRCxLQUFBa0QsRUFBQTl0QyxHQUNBLGNBQUF0VixLQUFBeXBCLEtBQUFhLEdBQ0EsVUFBQXl6QixFQUFBLGtDQUdBLE9BQUF6ekIsR0FJQSs0QixhQUFBLFNBQUEvNEIsRUFBQXRyQixHQUNBLElBQUF5VyxFQUFBelYsS0FBQWtqRCxPQUFBNTRCLEVBQUEsT0FBQWxoQixVQUFBdkksT0FBQSxNQUFBN0IsSUFDQSxjQUFBZ0IsS0FBQXlwQixLQUFBaFUsR0FDQSxVQUFBc29DLEVBQUEsdUNBRUEsT0FBQXRvQyxHQUlBNnRDLGlCQUFBLFNBQUFDLEdBQ0EsY0FBQXZqRCxLQUFBeXBCLEtBQUE4NUIsR0FDQSxVQUFBeEYsRUFBQSxvREFFQSxPQUFBLzlDLEtBQUE2aEQsVUFBQTdoRCxLQUFBMHBCLElBQUE2NUIsRUFBQSxVQUlBcDVCLGNBQUEsU0FBQW81QixHQUNBLGNBQUF2akQsS0FBQXlwQixLQUFBODVCLEdBQ0EsVUFBQXhGLEVBQUEsb0RBRUEsT0FBQS85QyxLQUFBMHBCLElBQUE2NUIsRUFBQSxVQUlBdDVCLGFBQUEsU0FBQUssR0FDQSxJQUFBN1UsRUFBQXpWLEtBQUFxakQsYUFBQS80QixHQUVBLFdBREF0cUIsS0FBQXNqRCxpQkFBQTd0QyxJQUNBQSxHQUlBMlUsY0FBQSxTQUFBRSxFQUFBazVCLEdBQ0EsY0FBQXhqRCxLQUFBeXBCLEtBQUFhLEdBQ0EsVUFBQXl6QixFQUFBLGtEQUVBLElBQUEvOUMsS0FBQXFnRCxXQUFBbUQsR0FDQSxVQUFBekYsRUFBQSx1RUFFQSxJQVFBMEYsRUFSQUMsRUFBQUYsRUFFQUcsRUFBQTNqRCxLQUFBZ2lELFVBQUExM0IsRUFBQSxVQUVBLFlBQUFxNUIsRUFDQSxPQUFBRCxJQUlBLElBQ0EsSUFBQUUsRUFBQTVqRCxLQUFBa2dELEtBQUF5RCxFQUFBcjVCLE1BQ0csTUFBQXJwQixHQVFILE1BSkF3aUQsRUFBQUMsSUFDQUEsRUFBQSxLQUdBemlELEVBS0EsR0FIQXdpRCxFQUFBQyxJQUNBQSxFQUFBLEtBRUEsV0FBQTFqRCxLQUFBeXBCLEtBQUFtNkIsR0FDQSxVQUFBN0YsRUFBQSwwQ0FHQSxPQUFBMEYsR0FJQUksdUJBQUEsU0FBQTdrRCxFQUFBNFksR0FDQSxlQUFBNVgsS0FBQXlwQixLQUFBN1IsR0FDQSxVQUFBbW1DLEVBQUEsK0NBRUEsT0FDQS8rQyxRQUNBNFksU0FLQWtzQyxXQUFBLFNBQUFDLEVBQUExQixHQUNBLGNBQUFyaUQsS0FBQXlwQixLQUFBczZCLEdBQ0EsVUFBQWhHLEVBQUEsdUJBRUEsY0FBQS85QyxLQUFBeXBCLEtBQUE0NEIsR0FDQSxVQUFBdEUsRUFBQSxzQkFFQSxJQUFBa0IsRUFBQWovQyxLQUFBMHBCLElBQUFxNkIsRUFBQSxRQUNBLEdBQUEvakQsS0FBQXFnRCxXQUFBcEIsR0FBQSxDQUNBLElBQUF4cEMsRUFBQXpWLEtBQUFrZ0QsS0FBQWpCLEVBQUE4RSxHQUFBMUIsSUFDQSxVQUFBNXNDLEdBQUEsV0FBQXpWLEtBQUF5cEIsS0FBQWhVLEdBQ0EsT0FBQUEsRUFFQSxVQUFBc29DLEVBQUEsaURBRUEsT0FBQWlCLEVBQUErRSxFQUFBMUIsSUFJQTJCLG1CQUFBLFNBQUFDLEVBQUFwakQsR0FDQSxJQUFBYixLQUFBMGhELFVBQUE3Z0QsTUFBQSxFQUNBLFVBQUFrOUMsRUFBQSxvREFFQSxJQUNBcUUsRUFEQTl6QyxFQUFBLElBQUF6TixFQUFBLEVBQUFBLEVBaUJBLEdBZkFiLEtBQUFzcEIsUUFBQTI2QixLQUVBN0IsRUFBQXBpRCxLQUFBMHBCLElBQUF1NkIsRUFBQSxlQU1BLFdBQUFqa0QsS0FBQXlwQixLQUFBMjRCLElBQUEzNUIsR0FBQTQxQixFQUFBaUUsU0FFQSxRQURBRixFQUFBcGlELEtBQUEwcEIsSUFBQTA0QixFQUFBL0QsRUFBQWlFLFlBRUFGLE9BQUEsU0FJQSxJQUFBQSxFQUNBLE9BQUFuRSxFQUFBM3ZDLEdBRUEsSUFBQXRPLEtBQUF1aEQsY0FBQWEsR0FDQSxVQUFBckUsRUFBQSwyQkFFQSxXQUFBcUUsRUFBQTl6QyxJQUdBNDFDLG1CQUFBLFNBQUFqQyxFQUFBRixFQUFBM0IsR0FDQSxjQUFBcGdELEtBQUF5cEIsS0FBQXc0QixHQUNBLFVBQUFsRSxFQUFBLDJDQUVBLElBQUEvOUMsS0FBQTJoRCxjQUFBSSxHQUNBLFVBQUFoRSxFQUFBLGtEQUVBLElBQUFvRyxFQUFBekUsRUFBQXVDLEVBQUFGLEdBQ0FxQyxFQUFBRCxHQUFBLG1CQUFBeEUsS0FBQXNDLEdBRUEsR0FEQWtDLE9BQUFoL0IsV0FBQWcvQixFQUFBbC9CLGdCQUNBbS9CLEVBQ0EsU0FFQSxJQUFBQyxHQUNBcC9CLGNBQUEsRUFDQXRtQixZQUFBLEVBQ0FLLE1BQUFvaEQsRUFDQWo3QixVQUFBLEdBR0EsT0FEQTFtQixPQUFBQyxlQUFBdWpELEVBQUFGLEVBQUFzQyxJQUNBLEdBSUF4NkIsMEJBQUEsU0FBQW80QixFQUFBRixFQUFBM0IsR0FDQSxjQUFBcGdELEtBQUF5cEIsS0FBQXc0QixHQUNBLFVBQUFsRSxFQUFBLDJDQUVBLElBQUEvOUMsS0FBQTJoRCxjQUFBSSxHQUNBLFVBQUFoRSxFQUFBLGtEQUVBLElBQUF1RyxFQUFBdGtELEtBQUFra0QsbUJBQUFqQyxFQUFBRixFQUFBM0IsR0FDQSxJQUFBa0UsRUFDQSxVQUFBdkcsRUFBQSxrQ0FFQSxPQUFBdUcsR0FJQUMsYUFBQSxTQUFBdlosRUFBQXdaLEdBQ0EsVUFBQXhaLEdBQUEsV0FBQWhyQyxLQUFBeXBCLEtBQUF1aEIsR0FDQSxVQUFBK1MsRUFBQSxxREFHQSxJQURBMzBDLFVBQUF2SSxPQUFBLEtBQUEyakQsR0FDQTNqRCxPQUFBLEVBQ0EsVUFBQW05QyxFQUFBLG1EQUdBLFVBQUFoVCxJQUFBeVUsRUFDQSxVQUFBekIsRUFBQSxtRUFHQSxPQUFBeUIsRUFBQXpVLElBSUF5WixtQkFBQSxTQUFBcEMsRUFBQW5yQyxFQUFBd3RDLEdBQ0EsY0FBQTFrRCxLQUFBeXBCLEtBQUE0NEIsR0FDQSxVQUFBdEUsRUFBQSxzQkFFQSxJQUFBLzlDLEtBQUEwaEQsVUFBQXhxQyxNQUFBLEdBQUFBLEVBQUFpNUIsRUFDQSxVQUFBNE4sRUFBQSxpRUFFQSxlQUFBLzlDLEtBQUF5cEIsS0FBQWk3QixHQUNBLFVBQUEzRyxFQUFBLCtDQUVBLElBQUEyRyxFQUNBLE9BQUF4dEMsRUFBQSxFQUdBLEdBQUFBLEVBQUEsR0FEQW1yQyxFQUFBeGhELE9BRUEsT0FBQXFXLEVBQUEsRUFHQSxJQUFBeXRDLEVBQUF0RixFQUFBZ0QsRUFBQW5yQyxHQUNBLEdBQUF5dEMsRUFBQSxPQUFBQSxFQUFBLE1BQ0EsT0FBQXp0QyxFQUFBLEVBR0EsSUFBQTB0QyxFQUFBdkYsRUFBQWdELEVBQUFuckMsRUFBQSxHQUNBLE9BQUEwdEMsRUFBQSxPQUFBQSxFQUFBLE1BQ0ExdEMsRUFBQSxFQUdBQSxFQUFBLFlBSUErb0MsRUFBQXFCLHFCQUVBeGpELEVBQUFELFFBQUFvaUQsZ0NDaHJCQSxJQUNBNW1DLEVBQUFqWixNQUFBVCxVQUFBMFosTUFDQWEsRUFBQXpiLE9BQUFrQixVQUFBNFEsU0FHQXpTLEVBQUFELFFBQUEsU0FBQWduRCxHQUNBLElBQUF6NUMsRUFBQXBMLEtBQ0Esc0JBQUFvTCxHQUpBLHNCQUlBOE8sRUFBQWhjLEtBQUFrTixHQUNBLFVBQUFwQyxVQVJBLGtEQVFBb0MsR0F5QkEsSUF2QkEsSUFFQTA1QyxFQUZBbDJDLEVBQUF5SyxFQUFBbmIsS0FBQWtMLFVBQUEsR0FxQkEyN0MsRUFBQTNyQyxLQUFBdFUsSUFBQSxFQUFBc0csRUFBQXZLLE9BQUErTixFQUFBL04sUUFDQW1rRCxLQUNBam5ELEVBQUEsRUFBbUJBLEVBQUFnbkQsRUFBaUJobkQsSUFDcENpbkQsRUFBQTFoRCxLQUFBLElBQUF2RixHQUtBLEdBRkErbUQsRUFBQXA0QyxTQUFBLDZCQUFBczRDLEVBQUF6ekMsS0FBQSxpREFBQTdFLENBeEJBLFdBQ0EsR0FBQTFNLGdCQUFBOGtELEVBQUEsQ0FDQSxJQUFBcnZDLEVBQUFySyxFQUFBeUQsTUFDQTdPLEtBQ0E0TyxFQUFBOUcsT0FBQXVSLEVBQUFuYixLQUFBa0wsYUFFQSxPQUFBM0ssT0FBQWdYLE9BQ0FBLEVBRUF6VixLQUVBLE9BQUFvTCxFQUFBeUQsTUFDQWcyQyxFQUNBajJDLEVBQUE5RyxPQUFBdVIsRUFBQW5iLEtBQUFrTCxlQWFBZ0MsRUFBQXpMLFVBQUEsQ0FDQSxJQUFBc2xELEVBQUEsYUFDQUEsRUFBQXRsRCxVQUFBeUwsRUFBQXpMLFVBQ0FtbEQsRUFBQW5sRCxVQUFBLElBQUFzbEQsRUFDQUEsRUFBQXRsRCxVQUFBLEtBR0EsT0FBQW1sRCxpQ0NoREFobkQsRUFBQUQsUUFBaUJGLEVBQVEsa0NDQXpCLElBQUE4cUIsRUFBQSxtQkFBQTNwQixRQUFBLGlCQUFBQSxPQUFBd3JCLFNBRUFsSSxFQUFrQnprQixFQUFRLElBQzFCdW5ELEVBQWlCdm5ELEVBQVEsSUFDekIrakIsRUFBYS9qQixFQUFRLElBQ3JCeXJDLEVBQWV6ckMsRUFBUSxJQW1DdkJHLEVBQUFELFFBQUEsU0FBQThLLEdBQ0EsR0FBQXlaLEVBQUF6WixHQUNBLE9BQUFBLEVBRUEsSUFTQXc4QyxFQVRBQyxFQUFBLFVBaUJBLEdBaEJBaDhDLFVBQUF2SSxPQUFBLElBQ0F1SSxVQUFBLEtBQUF1b0IsT0FDQXl6QixFQUFBLFNBQ0doOEMsVUFBQSxLQUFBOGxCLFNBQ0hrMkIsRUFBQSxXQUtBMzhCLElBQ0EzcEIsT0FBQSsrQyxZQUNBc0gsRUE1QkEsU0FBQWxELEVBQUFGLEdBQ0EsSUFBQXJoQyxFQUFBdWhDLEVBQUFGLEdBQ0EsVUFBQXJoQyxRQUFBLElBQUFBLEVBQUEsQ0FDQSxJQUFBd2tDLEVBQUF4a0MsR0FDQSxVQUFBMVgsVUFBQTBYLEVBQUEsMEJBQUFxaEMsRUFBQSxjQUFBRSxFQUFBLHNCQUVBLE9BQUF2aEMsR0FzQkFzaEMsQ0FBQXI1QyxFQUFBN0osT0FBQSsrQyxhQUNHelUsRUFBQXpnQyxLQUNIdzhDLEVBQUFybUQsT0FBQWEsVUFBQTZ2QixlQUdBLElBQUEyMUIsRUFBQSxDQUNBLElBQUExdkMsRUFBQTB2QyxFQUFBam5ELEtBQUF5SyxFQUFBeThDLEdBQ0EsR0FBQWhqQyxFQUFBM00sR0FDQSxPQUFBQSxFQUVBLFVBQUF6TSxVQUFBLGdEQUtBLE1BSEEsWUFBQW84QyxJQUFBMWpDLEVBQUEvWSxJQUFBeWdDLEVBQUF6Z0MsTUFDQXk4QyxFQUFBLFVBOURBLFNBQUFuRCxFQUFBbUQsR0FDQSxZQUFBbkQsR0FBQSxPQUFBQSxFQUNBLFVBQUFqNUMsVUFBQSx5QkFBQWk1QyxHQUVBLG9CQUFBbUQsR0FBQSxXQUFBQSxHQUFBLFdBQUFBLEVBQ0EsVUFBQXA4QyxVQUFBLHFDQUVBLElBQ0Eyc0IsRUFBQWxnQixFQUFBMVgsRUFEQXNuRCxFQUFBLFdBQUFELEdBQUEsNkNBRUEsSUFBQXJuRCxFQUFBLEVBQVlBLEVBQUFzbkQsRUFBQXhrRCxTQUF3QjlDLEVBRXBDLEdBREE0M0IsRUFBQXNzQixFQUFBb0QsRUFBQXRuRCxJQUNBbW5ELEVBQUF2dkIsS0FDQWxnQixFQUFBa2dCLEVBQUF6M0IsS0FBQStqRCxHQUNBNy9CLEVBQUEzTSxJQUNBLE9BQUFBLEVBSUEsVUFBQXpNLFVBQUEsb0JBOENBczhDLENBQUEzOEMsRUFBQSxZQUFBeThDLEVBQUEsU0FBQUEsa0NDdkVBLElBQUFHLEVBQUFybkMsS0FBQXZlLFVBQUE0bEQsT0FVQXJyQyxFQUFBemIsT0FBQWtCLFVBQUE0USxTQUVBNEosRUFBQSxtQkFBQXJiLFFBQUEsaUJBQUFBLE9BQUFDLFlBRUFqQixFQUFBRCxRQUFBLFNBQUFtQixHQUNBLHVCQUFBQSxHQUFBLE9BQUFBLElBQ0FtYixFQWZBLFNBQUFuYixHQUNBLElBRUEsT0FEQXVtRCxFQUFBcm5ELEtBQUFjLElBQ0EsRUFDRSxNQUFBaUMsR0FDRixVQVVBdWtELENBQUF4bUQsR0FMQSxrQkFLQWtiLEVBQUFoYyxLQUFBYyxtQ0NoQkEsSUFBQWtiLEVBQUF6YixPQUFBa0IsVUFBQTRRLFNBR0EsR0FGaUI1UyxFQUFRLEdBQVJBLEdBRWpCLENBQ0EsSUFBQThuRCxFQUFBM21ELE9BQUFhLFVBQUE0USxTQUNBbTFDLEVBQUEsaUJBUUE1bkQsRUFBQUQsUUFBQSxTQUFBbUIsR0FDQSxvQkFBQUEsRUFDQSxTQUVBLHVCQUFBa2IsRUFBQWhjLEtBQUFjLEdBQ0EsU0FFQSxJQUNBLE9BZkEsU0FBQUEsR0FDQSx1QkFBQUEsRUFBQXd3QixXQUdBazJCLEVBQUF6ckMsS0FBQXdyQyxFQUFBdm5ELEtBQUFjLElBV0EybUQsQ0FBQTNtRCxHQUNHLE1BQUFpQyxHQUNILGdCQUtBbkQsRUFBQUQsUUFBQSxTQUFBbUIsR0FFQSxPQUFTLGtDQ2hDVCxTQUFBZ04sR0FFQSxJQUFBNDVDLEVBQUE1NUMsRUFBQWxOLE9BQ0ErbUQsRUFBb0Jsb0QsRUFBUSxJQUU1QkcsRUFBQUQsUUFBQSxXQUNBLHlCQUFBK25ELElBQ0EsbUJBQUE5bUQsU0FDQSxpQkFBQThtRCxFQUFBLFNBQ0EsaUJBQUE5bUQsT0FBQSxRQUVBK21ELHdEQ1JBL25ELEVBQUFELFFBQUEsV0FDQSxzQkFBQWlCLFFBQUEsbUJBQUFMLE9BQUF3cUIsc0JBQTBGLFNBQzFGLG9CQUFBbnFCLE9BQUF3ckIsU0FBMkMsU0FFM0MsSUFBQWhWLEtBQ0F3d0MsRUFBQWhuRCxPQUFBLFFBQ0FpbkQsRUFBQXRuRCxPQUFBcW5ELEdBQ0Esb0JBQUFBLEVBQStCLFNBRS9CLHVCQUFBcm5ELE9BQUFrQixVQUFBNFEsU0FBQXJTLEtBQUE0bkQsR0FBaUUsU0FDakUsdUJBQUFybkQsT0FBQWtCLFVBQUE0USxTQUFBclMsS0FBQTZuRCxHQUFvRSxTQVlwRSxJQUFBRCxLQURBeHdDLEVBQUF3d0MsR0FEQSxHQUVBeHdDLEVBQW1CLFNBQ25CLHNCQUFBN1csT0FBQTBXLE1BQUEsSUFBQTFXLE9BQUEwVyxLQUFBRyxHQUFBelUsT0FBMEUsU0FFMUUsc0JBQUFwQyxPQUFBbW9DLHFCQUFBLElBQUFub0MsT0FBQW1vQyxvQkFBQXR4QixHQUFBelUsT0FBd0csU0FFeEcsSUFBQW1sRCxFQUFBdm5ELE9BQUF3cUIsc0JBQUEzVCxHQUNBLE9BQUEwd0MsRUFBQW5sRCxRQUFBbWxELEVBQUEsS0FBQUYsRUFBNEMsU0FFNUMsSUFBQXJuRCxPQUFBa0IsVUFBQXV0QyxxQkFBQWh2QyxLQUFBb1gsRUFBQXd3QyxHQUE2RCxTQUU3RCxzQkFBQXJuRCxPQUFBbW1CLHlCQUFBLENBQ0EsSUFBQXFoQyxFQUFBeG5ELE9BQUFtbUIseUJBQUF0UCxFQUFBd3dDLEdBQ0EsR0FkQSxLQWNBRyxFQUFBam5ELFFBQUEsSUFBQWluRCxFQUFBdG5ELFdBQXNFLFNBR3RFLHlCQ3hDQWIsRUFBQUQsUUFBQSxTQUFBbUIsR0FDQSxjQUFBQSxHQUFBLG1CQUFBQSxHQUFBLGlCQUFBQSxpQ0NDQSxJQUFBOCtDLEVBQW1CbmdELEVBQVEsSUFFM0J3Z0QsRUFBQUwsRUFBQSxZQUNBQyxFQUFBRCxFQUFBLGVBQ0FJLEVBQUFKLEVBQUEsWUFFQWpxQixFQUFhbDJCLEVBQVEsSUFDckI0Z0QsRUFBZ0I1Z0QsRUFBUSxJQUV4QjhnRCxFQUFXOWdELEVBQVEsSUFDbkIrZ0QsRUFBVS9nRCxFQUFRLElBRWxCMGlELEVBQWlCMWlELEVBQVEsSUFDekJrZ0QsRUFBa0JsZ0QsRUFBUSxJQUUxQnNJLEVBQVV0SSxFQUFRLElBR2xCb2lELEdBQ0FPLFlBQUF6QyxFQUVBZ0UsVUFBQSxTQUFBN2lELEdBQ0EsUUFBQUEsR0FFQXVoRCxTQUFBLFNBQUF2aEQsR0FDQSxPQUFBQSxHQUVBcytDLFVBQUEsU0FBQXQrQyxHQUNBLElBQUErMEIsRUFBQS96QixLQUFBdWdELFNBQUF2aEQsR0FDQSxPQUFBNjBCLEVBQUFFLEdBQXVCLEVBQ3ZCLElBQUFBLEdBQUF3cUIsRUFBQXhxQixHQUNBMHFCLEVBQUExcUIsR0FBQTNhLEtBQUE4YSxNQUFBOWEsS0FBQW9tQyxJQUFBenJCLElBRDJDQSxHQUczQ215QixRQUFBLFNBQUF0K0MsR0FDQSxPQUFBNUgsS0FBQXVnRCxTQUFBMzRDLElBQUEsR0FFQXUrQyxTQUFBLFNBQUF2K0MsR0FDQSxPQUFBNUgsS0FBQXVnRCxTQUFBMzRDLEtBQUEsR0FFQWk1QyxTQUFBLFNBQUE3aEQsR0FDQSxJQUFBKzBCLEVBQUEvekIsS0FBQXVnRCxTQUFBdmhELEdBQ0EsR0FBQTYwQixFQUFBRSxJQUFBLElBQUFBLElBQUF3cUIsRUFBQXhxQixHQUE2RCxTQUM3RCxJQUFBa3RCLEVBQUF4QyxFQUFBMXFCLEdBQUEzYSxLQUFBOGEsTUFBQTlhLEtBQUFvbUMsSUFBQXpyQixJQUNBLE9BQUEycUIsRUFBQXVDLEVBQUEsUUFFQUUsU0FBQSxTQUFBbmlELEdBQ0EsT0FBQWsvQyxFQUFBbC9DLElBRUFvaUQsU0FBQSxTQUFBcGlELEdBRUEsT0FEQWdCLEtBQUFzaEQscUJBQUF0aUQsR0FDQW0vQyxFQUFBbi9DLElBRUFzaUQscUJBQUEsU0FBQXRpRCxFQUFBb25ELEdBRUEsU0FBQXBuRCxFQUNBLFVBQUErK0MsRUFBQXFJLEdBQUEseUJBQUFwbkQsR0FFQSxPQUFBQSxHQUVBcWhELGFBQ0F6QyxVQUFBLFNBQUFoMkMsRUFBQTJYLEdBQ0EsT0FBQTNYLElBQUEyWCxFQUNBLElBQUEzWCxHQUFpQixFQUFBQSxHQUFBLEVBQUEyWCxFQUdqQnNVLEVBQUFqc0IsSUFBQWlzQixFQUFBdFUsSUFJQWtLLEtBQUEsU0FBQTdoQixHQUNBLGNBQUFBLEVBQ0EsWUFFQSxJQUFBQSxFQUNBLFlBRUEsbUJBQUFBLEdBQUEsaUJBQUFBLEVBQ0EsU0FFQSxpQkFBQUEsRUFDQSxTQUVBLGtCQUFBQSxFQUNBLFVBRUEsaUJBQUFBLEVBQ0EsY0FEQSxHQU1BNjZDLHFCQUFBLFNBQUFELEdBQ0EsY0FBQXhpRCxLQUFBeXBCLEtBQUErNEIsR0FDQSxTQUVBLElBQUE2RCxHQUNBQyxvQkFBQSxFQUNBQyxrQkFBQSxFQUNBQyxXQUFBLEVBQ0FDLFdBQUEsRUFDQUMsYUFBQSxFQUNBQyxnQkFBQSxHQUdBLFFBQUFybkQsS0FBQWtqRCxFQUNBLEdBQUF2OEMsRUFBQXU4QyxFQUFBbGpELEtBQUErbUQsRUFBQS9tRCxHQUNBLFNBSUEsSUFBQXNuRCxFQUFBM2dELEVBQUF1OEMsRUFBQSxhQUNBcUUsRUFBQTVnRCxFQUFBdThDLEVBQUEsWUFBQXY4QyxFQUFBdThDLEVBQUEsV0FDQSxHQUFBb0UsR0FBQUMsRUFDQSxVQUFBOUksRUFBQSxzRUFFQSxVQUlBK0kscUJBQUEsU0FBQXRFLEdBQ0EsWUFBQUEsRUFDQSxTQUdBLElBQUF4aUQsS0FBQXlpRCxxQkFBQUQsR0FDQSxVQUFBekUsRUFBQSxzQ0FHQSxTQUFBOTNDLEVBQUF1OEMsRUFBQSxhQUFBdjhDLEVBQUF1OEMsRUFBQSxhQVFBRyxpQkFBQSxTQUFBSCxHQUNBLFlBQUFBLEVBQ0EsU0FHQSxJQUFBeGlELEtBQUF5aUQscUJBQUFELEdBQ0EsVUFBQXpFLEVBQUEsc0NBR0EsU0FBQTkzQyxFQUFBdThDLEVBQUEsZUFBQXY4QyxFQUFBdThDLEVBQUEsa0JBUUFFLG9CQUFBLFNBQUFGLEdBQ0EsWUFBQUEsRUFDQSxTQUdBLElBQUF4aUQsS0FBQXlpRCxxQkFBQUQsR0FDQSxVQUFBekUsRUFBQSxzQ0FHQSxPQUFBLzlDLEtBQUE4bUQscUJBQUF0RSxLQUFBeGlELEtBQUEyaUQsaUJBQUFILElBUUF1RSx1QkFBQSxTQUFBdkUsR0FDQSxZQUFBQSxFQUNBLE9BQUFBLEVBR0EsSUFBQXhpRCxLQUFBeWlELHFCQUFBRCxHQUNBLFVBQUF6RSxFQUFBLHNDQUdBLEdBQUEvOUMsS0FBQTJpRCxpQkFBQUgsR0FDQSxPQUNBeGpELE1BQUF3akQsRUFBQSxhQUNBcjlCLFdBQUFxOUIsRUFBQSxnQkFDQTdqRCxhQUFBNmpELEVBQUEsa0JBQ0F2OUIsZUFBQXU5QixFQUFBLHFCQUVHLEdBQUF4aUQsS0FBQThtRCxxQkFBQXRFLEdBQ0gsT0FDQTVqRCxJQUFBNGpELEVBQUEsV0FDQTlvQixJQUFBOG9CLEVBQUEsV0FDQTdqRCxhQUFBNmpELEVBQUEsa0JBQ0F2OUIsZUFBQXU5QixFQUFBLHFCQUdBLFVBQUF6RSxFQUFBLHFGQUtBaUoscUJBQUEsU0FBQUMsR0FDQSxjQUFBam5ELEtBQUF5cEIsS0FBQXc5QixHQUNBLFVBQUFsSixFQUFBLDJDQUdBLElBQUF4VyxLQWFBLEdBWkF0aEMsRUFBQWdoRCxFQUFBLGdCQUNBMWYsRUFBQSxrQkFBQXZuQyxLQUFBNmhELFVBQUFvRixFQUFBdG9ELGFBRUFzSCxFQUFBZ2hELEVBQUEsa0JBQ0ExZixFQUFBLG9CQUFBdm5DLEtBQUE2aEQsVUFBQW9GLEVBQUFoaUMsZUFFQWhmLEVBQUFnaEQsRUFBQSxXQUNBMWYsRUFBQSxhQUFBMGYsRUFBQWpvRCxPQUVBaUgsRUFBQWdoRCxFQUFBLGNBQ0ExZixFQUFBLGdCQUFBdm5DLEtBQUE2aEQsVUFBQW9GLEVBQUE5aEMsV0FFQWxmLEVBQUFnaEQsRUFBQSxRQUNBLElBQUExb0QsRUFBQTBvRCxFQUFBcm9ELElBQ0EsWUFBQUwsSUFBQXlCLEtBQUFxZ0QsV0FBQTloRCxHQUNBLFVBQUF5SyxVQUFBLDZCQUVBdStCLEVBQUEsV0FBQWhwQyxFQUVBLEdBQUEwSCxFQUFBZ2hELEVBQUEsUUFDQSxJQUFBQyxFQUFBRCxFQUFBdnRCLElBQ0EsWUFBQXd0QixJQUFBbG5ELEtBQUFxZ0QsV0FBQTZHLEdBQ0EsVUFBQW5KLEVBQUEsNkJBRUF4VyxFQUFBLFdBQUEyZixFQUdBLElBQUFqaEQsRUFBQXNoQyxFQUFBLFlBQUF0aEMsRUFBQXNoQyxFQUFBLGNBQUF0aEMsRUFBQXNoQyxFQUFBLGNBQUF0aEMsRUFBQXNoQyxFQUFBLGlCQUNBLFVBQUF3VyxFQUFBLGdHQUVBLE9BQUF4VyxJQUlBenBDLEVBQUFELFFBQUFraUQsZ0NDL09BLElBQUE3bEMsRUFBQXpiLE9BQUFrQixVQUFBNFEsU0FFQTZSLEVBQWtCemtCLEVBQVEsSUFFMUJ1bkQsRUFBaUJ2bkQsRUFBUSxJQUd6QndwRCxFQUNBLFNBQUFsRixHQUNBLElBQUFtRixFQU9BLElBTEFBLEVBREFoK0MsVUFBQXZJLE9BQUEsRUFDQXVJLFVBQUEsR0FFQSxrQkFBQThRLEVBQUFoYyxLQUFBK2pELEdBQUF0d0IsT0FBQXpDLFVBR0F5QyxRQUFBeTFCLElBQUFsNEIsT0FBQSxDQUNBLElBQ0Fsd0IsRUFBQWpCLEVBREFzcEQsRUFBQUQsSUFBQXoxQixRQUFBLDZDQUVBLElBQUE1ekIsRUFBQSxFQUFjQSxFQUFBc3BELEVBQUF4bUQsU0FBb0I5QyxFQUNsQyxHQUFBbW5ELEVBQUFqRCxFQUFBb0YsRUFBQXRwRCxPQUNBaUIsRUFBQWlqRCxFQUFBb0YsRUFBQXRwRCxNQUNBcWtCLEVBQUFwakIsSUFDQSxPQUFBQSxFQUlBLFVBQUFnSyxVQUFBLG9CQUVBLFVBQUFBLFVBQUEsMkNBS0FsTCxFQUFBRCxRQUFBLFNBQUE4SyxHQUNBLE9BQUF5WixFQUFBelosR0FDQUEsRUFFQVMsVUFBQXZJLE9BQUEsRUFDQXNtRCxFQUFBeCtDLEVBQUFTLFVBQUEsSUFFQSs5QyxFQUFBeCtDLGtDQ3pDQSxJQUFBMUMsRUFBVXRJLEVBQVEsSUFDbEJxaEQsRUFBQS90QixPQUFBdHhCLFVBQUFzL0MsS0FDQXQ2QixFQUFBbG1CLE9BQUFtbUIseUJBZUExSyxFQUFBemIsT0FBQWtCLFVBQUE0USxTQUVBNEosRUFBQSxtQkFBQXJiLFFBQUEsaUJBQUFBLE9BQUFDLFlBRUFqQixFQUFBRCxRQUFBLFNBQUFtQixHQUNBLElBQUFBLEdBQUEsaUJBQUFBLEVBQ0EsU0FFQSxJQUFBbWIsRUFDQSxNQVJBLG9CQVFBRCxFQUFBaGMsS0FBQWMsR0FHQSxJQUFBaW5ELEVBQUF0aEMsRUFBQTNsQixFQUFBLGFBRUEsU0FEQWluRCxJQUFBaGdELEVBQUFnZ0QsRUFBQSxXQTFCQSxTQUFBam5ELEdBQ0EsSUFDQSxJQUFBNmlCLEVBQUE3aUIsRUFBQTZpQixVQUlBLE9BSEE3aUIsRUFBQTZpQixVQUFBLEVBRUFtOUIsRUFBQTlnRCxLQUFBYyxJQUNBLEVBQ0UsTUFBQWlDLEdBQ0YsU0FDRSxRQUNGakMsRUFBQTZpQixhQXFCQXlsQyxDQUFBdG9ELGtDQ25DQSxJQUFBK2dDLEVBQWtCcGlDLEVBQVEsSUFDMUJtaUMsRUFBYW5pQyxFQUFRLElBRXJCRyxFQUFBRCxRQUFBLFdBQ0EsSUFBQTRiLEVBQUFzbUIsSUFNQSxPQUxBRCxFQUFBcmhDLFFBQWlCMDFCLFlBQUExYSxJQUNqQjBhLFlBQUEsV0FDQSxPQUFBMTFCLE9BQUEwMUIsY0FBQTFhLEtBR0FBLG9CQ1hBLElBQUFoSixFQUFjOVMsRUFBUSxJQUV0QixpQkFBQThTLFFBQTRDM1MsRUFBQUMsRUFBUzBTLEVBQUEsTUFPckQsSUFBQXdDLEdBQWVzMEMsS0FBQSxFQUVmN3hDLGVBUEFBLEVBUUEzQixnQkFBQTVHLEdBRWF4UCxFQUFRLEVBQVJBLENBQXdEOFMsRUFBQXdDLEdBRXJFeEMsRUFBQSsyQyxTQUFBMXBELEVBQUFELFFBQUE0UyxFQUFBKzJDLDBCQ2pCQTFwRCxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUFvRCxJQUsvRTJGLE1BQWN4RixFQUFBQyxFQUFTLDI1Q0FBeTZDLG9CQ1NoOENELEVBQUFELFFBQUEsU0FBQThWLEdBRUEsSUFBQXFpQixFQUFBLG9CQUFBN3BCLGVBQUE2cEIsU0FFQSxJQUFBQSxFQUNBLFVBQUE3dkIsTUFBQSxvQ0FJQSxJQUFBd04sR0FBQSxpQkFBQUEsRUFDQSxPQUFBQSxFQUdBLElBQUE4ekMsRUFBQXp4QixFQUFBQyxTQUFBLEtBQUFELEVBQUEweEIsS0FDQUMsRUFBQUYsRUFBQXp4QixFQUFBNHhCLFNBQUFoOUMsUUFBQSxpQkEyREEsT0EvQkErSSxFQUFBL0ksUUFBQSwrREFBQWk5QyxFQUFBQyxHQUVBLElBV0FDLEVBWEFDLEVBQUFGLEVBQ0EzeEIsT0FDQXZyQixRQUFBLG9CQUFBcE0sRUFBQXlwRCxHQUF3QyxPQUFBQSxJQUN4Q3I5QyxRQUFBLG9CQUFBcE0sRUFBQXlwRCxHQUF3QyxPQUFBQSxJQUd4QywwREFBQWh1QyxLQUFBK3RDLEdBQ0FILEdBUUFFLEVBRkEsSUFBQUMsRUFBQXhnRCxRQUFBLE1BRUF3Z0QsRUFDRyxJQUFBQSxFQUFBeGdELFFBQUEsS0FFSGlnRCxFQUFBTyxFQUdBTCxFQUFBSyxFQUFBcDlDLFFBQUEsWUFJQSxPQUFBb0csS0FBQUMsVUFBQTgyQyxHQUFBLHlCQ2xGQSxJQUFBdDNDLEVBQWM5UyxFQUFRLEtBRXRCLGlCQUFBOFMsUUFBNEMzUyxFQUFBQyxFQUFTMFMsRUFBQSxNQU9yRCxJQUFBd0MsR0FBZXMwQyxLQUFBLEVBRWY3eEMsZUFQQUEsRUFRQTNCLGdCQUFBNUcsR0FFYXhQLEVBQVEsRUFBUkEsQ0FBOEQ4UyxFQUFBd0MsR0FFM0V4QyxFQUFBKzJDLFNBQUExcEQsRUFBQUQsUUFBQTRTLEVBQUErMkMsMEJDakJBMXBELEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQTBELElBS3JGMkYsTUFBY3hGLEVBQUFDLEVBQVMsZ0VBQThELHNCQ0pyRixJQUFBMFMsRUFBYzlTLEVBQVEsS0FFdEIsaUJBQUE4UyxRQUE0QzNTLEVBQUFDLEVBQVMwUyxFQUFBLE1BT3JELElBQUF3QyxHQUFlczBDLEtBQUEsRUFFZjd4QyxlQVBBQSxFQVFBM0IsZ0JBQUE1RyxHQUVheFAsRUFBUSxFQUFSQSxDQUE4RDhTLEVBQUF3QyxHQUUzRXhDLEVBQUErMkMsU0FBQTFwRCxFQUFBRCxRQUFBNFMsRUFBQSsyQywwQkNqQkExcEQsRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBMEQsSUFLckYyRixNQUFjeEYsRUFBQUMsRUFBUyxvbEJBQWtsQixzQkNKem1CLElBQUEwUyxFQUFjOVMsRUFBUSxLQUV0QixpQkFBQThTLFFBQTRDM1MsRUFBQUMsRUFBUzBTLEVBQUEsTUFPckQsSUFBQXdDLEdBQWVzMEMsS0FBQSxFQUVmN3hDLGVBUEFBLEVBUUEzQixnQkFBQTVHLEdBRWF4UCxFQUFRLEVBQVJBLENBQThEOFMsRUFBQXdDLEdBRTNFeEMsRUFBQSsyQyxTQUFBMXBELEVBQUFELFFBQUE0UyxFQUFBKzJDLDBCQ2pCQTFwRCxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUEwRCxJQUtyRjJGLE1BQWN4RixFQUFBQyxFQUFTLHFPQUFtTyx1RkNGMVBtcUQsRUFBd0JDLE1Bc0ZqQixTQUFBQyxFQUFBOXlDLEdBQ1AsV0FBQTdXLE9BQUEwVyxLQUFBRyxHQUFBelUsT0M3RE8sU0FBQXduRCxFQUFBQyxFQUFBQyxHQUNQLHNCQUFBRCxFQUNBLFVBQUFuaUQsTUFBQSw4REFFQSxvQkFBQW9pRCxHQUFBLE9BQUFBLEVBQ0EsVUFBQXBpRCxNQUFBLHlGQUdBLEdBQVFpaUQsRUFBYUcsR0FDckIsVUFBQXBpRCxNQUFBLDhHQUdBLElBQUFxaUQsRUFpRE8sU0FBQUQsR0FDUCxvQkFBQUEsR0FBQSxPQUFBQSxFQUNBLFVBQUFwaUQsTUFBQSwwRkFHQSxHQUFRaWlELEVBQWFHLEdBQ3JCLFVBQUFwaUQsTUFBQSwrR0FHQSxJQUFBc2lELEVEL0ZPLFNBQUFGLEdBQ1AsSUFBQUUsS0FDQSxRQUFBL3BDLEtBQUE2cEMsRUFDQUEsRUFBQTNvRCxlQUFBOGUsS0FDQStwQyxFQUFBL3BDLEdBQWtDZ3FDLEVBQUE5bkQsRUFBRXZCLFVBR3BDLE9BQUFvcEQsRUN3RnNCRSxDQUFlSixHQUVyQ24zQyxFRDNFTyxTQUFBQSxHQUNQLFFBQUF3M0MsS0FBQXgzQyxFQUNBQSxFQUFBeFIsZUFBQWdwRCxJQUNBeDNDLEVBQUF3M0MsSUFFQSxtQkFEQXgzQyxFQUFBdzNDLEdBQUF2OUMscUJBRUErRixFQUFBdzNDLEdBQThCbnFELE9BQUE4TixFQUFBLEVBQUE5TixDQUFLMlMsRUFBQXczQyxLQUduQyxPQUFBeDNDLEVDa0VrQnkzQyxDRHhGWCxTQUFBTixFQUFBRSxHQUNQLElBQUFyM0MsS0FDQSxRQUFBMDNDLEtBQUFQLEVBQ0FBLEVBQUEzb0QsZUFBQWtwRCxLQUNBMTNDLEVBQUEwM0MsR0FBQVAsRUFBQU8sR0FBQUwsRUFBQUssTUFDQTEzQyxFQUFBMDNDLElBQUEsaUJBQUExM0MsRUFBQTAzQyxLQUNBMTNDLEVBQUEwM0MsR0FBQUMsZUFBQUQsSUFJQSxPQUFBMTNDLEVDNkVxQjQzQyxDQUFXVCxFQUFBRSxJQVNoQyxPQUFZcjNDLFVBQUE3QyxJQVBaLFNBQUEwNkMsR0FDQSxPRGxFTyxTQUFBQSxFQUFBUixHQUNQLElBQUFTLEVBQUF6cUQsT0FBQTBXLEtBQUE4ekMsR0FBQW4vQyxPQUFBLFNBQUF4TCxHQUErRCxRQUFBbXFELEVBQUFucUQsS0FDL0Q2cUQsS0FDQUMsS0FDQUYsRUFBQTl6QyxRQUFBLFNBQUE5VyxHQUNBNnFELEVBQUE3cUQsSUFBeUI4QyxNQUFBRixPQUN6QmtvRCxFQUFBOXFELElBQ0FvRCxLQUFBLFNBQUFrRyxHQUFnQyxPQUFBdWhELEVBQUE3cUQsR0FBQThDLEdBQUFrQyxLQUFBc0UsSUFDaENqRyxNQUFBLFNBQUFXLEdBQW1DLE9BQUE2bUQsRUFBQTdxRCxHQUFBNEMsR0FBQW9DLEtBQUFoQixJQUNuQ1YsU0FBQSxnQkFHQSxJQUFBeW5ELEVBQUFILEVBQUF2L0MsSUFBQSxTQUFBckwsR0FDQSxPQUFlb3FELEVBQUE5bkQsRUFBRWdJLGVBQUFxZ0QsRUFBQTNxRCxJQUFBd0UsVUFBQXNtRCxFQUFBOXFELE1BdUJqQixPQXJCQTRxRCxFQUFBOXpDLFFBQUEsU0FBQTlXLEdBQ0EsSUFBQTZKLEVBQUFzZ0QsRUFBQW5xRCxHQUNBb0QsRUFBQSxTQUFBa0csR0FDQXNnRCxFQUFBLFdBQTJDLE9BQUEvL0MsRUFBQS9HLEdBQUF3RyxNQUUzQ2pHLEVBQUEsU0FBQVcsR0FDQTRsRCxFQUFBLFlBQ0F2akQsUUFBQWhELE9BQUFnRCxRQUFBQyxLQUFBdEMsR0FDQTZGLEVBQUFqSCxHQUFBb0IsTUFHQTZtRCxFQUFBN3FELEdBQUE4QyxHQUFBZ1UsUUFBQTFULEdBQ0F5bkQsRUFBQTdxRCxHQUFBNEMsR0FBQWtVLFFBQUF6VCxHQUNBeW5ELEVBQUE5cUQsR0FBQW9ELE9BQ0EwbkQsRUFBQTlxRCxHQUFBcUQsUUFHQXluRCxFQUFBOXFELEdBQUE4QyxHQUFBTSxFQUNBMG5ELEVBQUE5cUQsR0FBQTRDLEdBQUFTLElBRUF3bkQsRUFBQSxLQUNBLFdBQ0FFLEVBQUFqMEMsUUFBQSxTQUFBdFYsR0FBNEMsT0FBQUEsRUFBQXFDLGlCQzZCN0JtbkQsQ0FBYUwsRUFBQVIsSUFNaEJjLFFBSlosWUR6Qk8sU0FBQW40QyxHQUNQLFFBQUFzckMsS0FBQXRyQyxFQUNBQSxFQUFBeFIsZUFBQTg4QyxJQUNBdHJDLEVBQUFzckMsSUFDQXRyQyxFQUFBc3JDLEdBQUE2TSxTQUNBbjRDLEVBQUFzckMsR0FBQTZNLFdDcUJRQyxDQUFjcDRDLEdEN0JmLFNBQUFxM0MsR0FDUGhxRCxPQUFBMFcsS0FBQXN6QyxHQUFBcnpDLFFBQUEsU0FBQTlXLEdBQXNELE9BQUFtcUQsRUFBQW5xRCxHQUFBK0MsT0M2QjlDb29ELENBQWtCaEIsS0FsRTFCaUIsQ0FBQW5CLEdBQ0FVLEVBQUFYLEVBQUFFLEVBQUFwM0MsU0FZQSxNQVhBLG9CQUFBakYsU0FDQUEsT0FBQUMsUUFBQUQsT0FBQUMsWUFDQUQsT0FBQUMsUUFBQTY4QyxVQVNZQSxRQUFBNzNDLFFBQUFvM0MsRUFBQXAzQyxRQUFBN0MsSUFQWixXQUNBLElBQUFvN0MsRUFBQW5CLEVBQUFqNkMsSUFBQTA2QyxHQUNBLGtCQUNBVSxJQUNBbkIsRUFBQWUsYUF1Rk8sU0FBQWg3QyxFQUFBKzVDLEVBQUFDLEdBQ1AsSUFBQXFCLEVBQUF2QixFQUFBQyxFQUFBQyxHQUtBLE1BSkEsb0JBQUFwOEMsUUFDQUEsT0FBQTA5QyxxQ0FDQTE5QyxPQUFBMDlDLG9DQUFBRCxFQUFBWCxPQUVBVyxFQUFBcjdDLE1BRWUsV0N0R0EsV0MzQ1IsU0FBQXU3QyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxRQUNQLElBQUFGLElBQWdDQSxHQUFBLFFBQ2hDLElBQUFDLElBQW9DQSxHQUFBLFFBQ3BDLElBQUFDLElBQTZCQSxHQUFBLEdBQzdCLElBQUF6b0QsRUFBQSxLQUNBLE9BQVcwb0QsRUFBQSxPQUFNL3FELFFBQ2pCd0MsTUFBQSxTQUFBc0csR0FFQXpHLEVBREF3b0QsRUFDQSxTQUFBdmlDLEdBQ0EwaUMsRUFBQTFpQyxFQUFBdWlDLEdBQ0EvaEQsRUFBQXpHLEtBQUFpbUIsSUFJQSxTQUFBQSxHQUNBeGYsRUFBQXpHLEtBQUFpbUIsSUFHQW9pQyxFQUFBOXNDLGlCQUFBK3NDLEVBQUF0b0QsR0FDQTRvRCxRQUFBTCxFQUNBRSxhQUdBcG9ELEtBQUEsV0FDQWdvRCxFQUFBL29CLG9CQUFBZ3BCLEVBQUF0b0QsRUFBQXVvRCxNQW9CTyxTQUFBSSxFQUFBMWlDLEVBQUF1aUMsR0FDUCxHQUFBQSxFQUNBLHFCQUFBQSxFQUNBdmlDLEVBQUF1aUMsc0JBRUEsR0FlQSxTQUFBcDRDLEdBQ0EseUJBQUFBLEVBaEJBeTRDLENBQUFMLEdBQ0FBLEVBQUF2aUMsSUFDQUEsRUFBQXVpQyxxQkFHQSxxQkFBQUEsRUFNQSxVQUFBL2pELE1BQUEsNEVBaENBLFNBQUFxa0QsRUFBQUMsRUFBQW4xQyxHQUdBLElBRkEsSUFBQUgsRUFBQTFXLE9BQUEwVyxLQUFBczFDLEdBQ0FqckQsRUFBQTJWLEVBQUF0VSxPQUNBOUMsRUFBQSxFQUFtQkEsRUFBQXlCLEVBQU96QixJQUFBLENBQzFCLElBQUEyK0MsRUFBQXZuQyxFQUFBcFgsR0FDQSxvQkFBQTBzRCxFQUFBL04sSUFBQSxpQkFBQXBuQyxFQUFBb25DLElBQ0EsSUFBQThOLEVBQUFDLEVBQUEvTixHQUFBcG5DLEVBQUFvbkMsSUFDQSxjQUdBLEdBQUErTixFQUFBL04sS0FBQXBuQyxFQUFBb25DLEdBQ0EsU0FHQSxVQWFBOE4sQ0FBQU4sRUFBQXZpQyxJQUNBQSxFQUFBdWlDLGtCQ3REQSxJQUFJUSxFQUFpQixXQUNyQixTQUFBQyxFQUFBQyxHQUNBNXFELEtBQUE0cUQsUUF3QkEsT0F0QkFELEVBQUFockQsVUFBQWtyRCxPQUFBLFNBQUFDLEdBRUEsT0FBQTlxRCxNQUVBMnFELEVBQUFockQsVUFBQW9yRCxTQUFBLFdBQ0EsSUFBQW5vRCxFQUFrQm5FLE9BQUF1c0QsRUFBQSxNQUFBdnNELENBQU1pcUQsRUFBQTluRCxFQUFFcUksSUFBQWdKLFlBRTFCLE9BREFyUCxFQUFBbW1ELGVBQUEvb0QsS0FBQTRxRCxNQUNBaG9ELEdBRUErbkQsRUFBQWhyRCxVQUFBb3FELFFBQUEsV0FDQSxJQUFBbm5ELEVBQWtCbkUsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBTWlxRCxFQUFBOW5ELEVBQUVxSSxHQUFBZ0osV0FFMUIsT0FEQXJQLEVBQUFtbUQsZUFBQS9vRCxLQUFBNHFELE1BQ0Fob0QsR0FFQStuRCxFQUFBaHJELFVBQUFzckQsT0FBQSxTQUFBQyxFQUFBajRDLEVBQUFrNEMsR0FFQSxJQUFBMytDLE9BREEsSUFBQXlHLElBQWlDQSxNQUVqQ3pHLEVBQWlCczlDLEVBQVM3M0MsU0FBQWk1QyxFQUFBajRDLEVBQUFnM0MsV0FBQWgzQyxFQUFBaTNDLGdCQUMxQixJQUFBdG5ELEVBQWtCbkUsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBSytOLEdBRXZCLE9BREE1SixFQUFBbW1ELGVBQUEvb0QsS0FBQTRxRCxNQUNBaG9ELEdBRUErbkQsRUExQnFCLEdDQWpCUyxFQUFhLFdBQ2pCLFNBQUFDLEVBQUFULEdBQ0E1cUQsS0FBQTRxRCxRQXdCQSxPQXRCQVMsRUFBQTFyRCxVQUFBa3JELE9BQUEsU0FBQUMsR0FFQSxPQUFBOXFELE1BRUFxckQsRUFBQTFyRCxVQUFBb3JELFNBQUEsV0FDQSxJQUFBbm9ELEVBQWtCbkUsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBTWlxRCxFQUFBOW5ELEVBQUVxSSxJQUFBZ0osU0FBQTZLLFFBRTFCLE9BREFsYSxFQUFBbW1ELGVBQUEvb0QsS0FBQTRxRCxNQUNBaG9ELEdBRUF5b0QsRUFBQTFyRCxVQUFBb3FELFFBQUEsV0FDQSxJQUFBbm5ELEVBQWtCbkUsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBTWlxRCxFQUFBOW5ELEVBQUVxSSxHQUFBZ0osU0FBQTZLLE9BRTFCLE9BREFsYSxFQUFBbW1ELGVBQUEvb0QsS0FBQTRxRCxNQUNBaG9ELEdBRUF5b0QsRUFBQTFyRCxVQUFBc3JELE9BQUEsU0FBQUMsRUFBQWo0QyxFQUFBazRDLEdBRUEsSUFBQTMrQyxPQURBLElBQUF5RyxJQUFpQ0EsTUFFakN6RyxFQUFpQnM5QyxFQUFTNzNDLFNBQUE2SyxLQUFBb3VDLEVBQUFqNEMsRUFBQWczQyxXQUFBaDNDLEVBQUFpM0MsZ0JBQzFCLElBQUF0bkQsRUFBa0JuRSxPQUFBdXNELEVBQUEsTUFBQXZzRCxDQUFLK04sR0FFdkIsT0FEQTVKLEVBQUFtbUQsZUFBQS9vRCxLQUFBNHFELE1BQ0Fob0QsR0FFQXlvRCxFQTFCaUIsR0NjVixTQUFBQyxFQUFBQyxHQUNQLG9CQUFBQSxJQWxCQSxTQUFBajJDLEdBR0EsdUJBQUFrMkMsWUFDQWwyQyxhQUFBazJDLGFBQUFsMkMsYUFBQW0yQyxpQkFDQW4yQyxHQUNBLGlCQUFBQSxHQUNBLE9BQUFBLElBTkEsSUFPQUEsRUFBQXVyQixVQU5BLEtBTUF2ckIsRUFBQXVyQixXQUNBLGlCQUFBdnJCLEVBQUEySixTQVNBeXNDLENBQUFILEdBQ0EsVUFBQXBsRCxNQUFBLG1FQVlPLFNBQUF3bEQsRUFBQUMsR0FFUCxJQURBLElBQUF0ekIsRUFBQSxHQUNBdjZCLEVBQUE2dEQsRUFBQS9xRCxPQUFBLEVBQXNDOUMsR0FBQSxHQUN0QyxhQUFBNnRELEVBQUE3dEQsR0FBQTBFLEtBRDhDMUUsSUFJOUN1NkIsRUFBQXN6QixFQUFBN3RELEdBQUE0bkIsTUFBQSxJQUFBMlMsRUFFQSxPQUFBQSxFQUFBbkMsT0FFTyxTQUFBMDFCLEVBQUFqckQsRUFBQVAsR0FDUCxJQUFBRCxNQUFBMEksUUFBQWxJLEtBQUFSLE1BQUEwSSxRQUFBekksSUFBQU8sRUFBQUMsU0FBQVIsRUFBQVEsT0FDQSxTQUVBLFFBQUE5QyxFQUFBLEVBQW1CQSxFQUFBNkMsRUFBQUMsT0FBYzlDLElBQ2pDLEdBQUE2QyxFQUFBN0MsR0FBQTBFLE9BQUFwQyxFQUFBdEMsR0FBQTBFLE1BQUE3QixFQUFBN0MsR0FBQTRuQixRQUFBdGxCLEVBQUF0QyxHQUFBNG5CLE1BQ0EsU0FHQSxTQ2pEQSxJQUFJbW1DLEVBQVksV0FDaEIsU0FBQUMsRUFBQUgsRUFBQUksR0FDQWhzRCxLQUFBNHJELFlBQ0E1ckQsS0FBQWdzRCxnQkFDQWhzRCxLQUFBaXNELFdBQUFMLEVBQUE5aEQsT0FBQSxTQUFBdEssR0FBeUQsbUJBQUFBLEVBQUFpRCxPQXdCekQsT0FoQkFzcEQsRUFBQXBzRCxVQUFBdXNELGtCQUFBLFNBQUFDLEdBQ0EsSUFBQVAsRUFBQTVyRCxLQUFBZ3NELGNBQUFJLGFBQUFELEdBQ0EsSUFBQVAsRUFDQSxTQUVBLEdBQUE1ckQsS0FBQWlzRCxXQUFBcHJELE9BQUErcUQsRUFBQS9xRCxTQUNhZ3JELEVBQWdCN3JELEtBQUFpc0QsV0FBQUwsRUFBQXZ5QyxNQUFBLEVBQUFyWixLQUFBaXNELFdBQUFwckQsU0FDN0IsU0FFQSxRQUFBOUMsRUFBQWlDLEtBQUFpc0QsV0FBQXByRCxPQUE0QzlDLEVBQUE2dEQsRUFBQS9xRCxPQUFzQjlDLElBQ2xFLGFBQUE2dEQsRUFBQTd0RCxHQUFBMEUsS0FDQSxTQUdBLFVBRUFzcEQsRUE1QmdCLEdDSWhCLElBQUlNLEVBQWEsV0FDakIsU0FBQUMsRUFBQVYsRUFBQUksR0FDQWhzRCxLQUFBNHJELFlBQ0E1ckQsS0FBQWdzRCxnQkFpQkEsT0FmQU0sRUFBQTNzRCxVQUFBekIsS0FBQSxXQUNBLElBQUEwdEQsRUFBQTVyRCxLQUFBNHJELFVBQ0FkLEVBQXVCYSxFQUFZQyxHQUNuQ1csRUFBQSxJQUErQlQsRUFBWUYsRUFBQTVyRCxLQUFBZ3NELGVBQzNDUSxFQUFBeHNELEtBQUFnc0QsY0FBQTU1QyxXQUFBdzVDLEVBQUE5aEQsT0FBQSxTQUFBdEssR0FBbUYsbUJBQUFBLEVBQUFpRCxRQUNuRixZQUFBMEssSUFBQXEvQyxLQUdBLEtBQUExQixHQUNBMEIsR0FqQkEsU0FBQTdqRCxHQUNBLE9BQUF2SSxNQUFBVCxVQUFBMFosTUFBQW5iLEtBQUF5SyxHQWtCQThqRCxDQUFBRCxFQUFBRSxpQkFBQTVCLElBQ0FoaEQsT0FBQXlpRCxFQUFBTCxrQkFBQUssR0FDQXprRCxPQUFBMGtELEVBQUFHLFFBQUE3QixJQUFBMEIsUUFFQUYsRUFwQmlCLEdDTGpCTSxFQUE0QixXQVM1QixPQVJBQSxFQUFBbnVELE9BQUE4YixRQUFBLFNBQUF0YixHQUNBLFFBQUFhLEVBQUEvQixFQUFBLEVBQUF5QixFQUFBNEosVUFBQXZJLE9BQWdEOUMsRUFBQXlCLEVBQU96QixJQUV2RCxRQUFBOEIsS0FEQUMsRUFBQXNKLFVBQUFyTCxHQUNBVSxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE0QixFQUFBRCxLQUNBWixFQUFBWSxHQUFBQyxFQUFBRCxJQUVBLE9BQUFaLElBRUE0UCxNQUFBN08sS0FBQW9KLFlBc0JPLFNBQUF5akQsRUFBQWxuQyxHQUNQLE9BQ0FsakIsS0h0Qk8sU0FBQWcwQixHQUNQLE9BQUFBLEVBQUE1MUIsT0FBQSxVQUFBNDFCLEVBQUEsVUFBQUEsRUFBQSxJR3FCY3EyQixDQUFXbm5DLEdBQUEsa0JBQ3pCQSxTQzdCQSxJQUFJb25DLEVBQWEsV0FDakIsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQWpCLEVBQUFrQixFQUFBQyxFQUFBeEMsUUFDQSxJQUFBcUIsSUFBb0NBLE1BQ3BDanNELEtBQUFpdEQsZ0JBQ0FqdEQsS0FBQWt0RCxlQUNBbHRELEtBQUFpc0QsYUFDQWpzRCxLQUFBbXRELGlCQUNBbnRELEtBQUFvdEQsa0JBQ0FwdEQsS0FBQTRxRCxRQUNBNXFELEtBQUFxdEQsY0FBQSxTQUFBaDhDLEVBQUFzVSxHQUNBLFdBQUFxbkMsRUFBQTM3QyxFQUFBNDdDLGNBQUE1N0MsRUFBQTY3QyxhQUFBNzdDLEVBQUE0NkMsV0FBQW5rRCxPQUF5RytrRCxFQUFXbG5DLElBQUF0VSxFQUFBODdDLGVBQUE5N0MsRUFBQSs3QyxnQkFBQS83QyxFQUFBdTVDLFFBRXBINXFELEtBQUFzdEQsWURMTyxTQUFBMUIsR0FDUCxnQkFBQTJCLEVBQUE1bkMsR0FDQSxnQkFBQUEsRUFDQTRuQyxFQUVBQSxFQUFBNWpELElBQUEsU0FBQTJVLEdBQ0EsSUFBQUEsRUFDQSxPQUFBQSxFQUVBLElBQUFrdkMsRUFBQVgsRUFBQWxuQyxHQUNBNmEsRUFBQW9zQixLQUFxQ3R1QyxHQUFTcFIsS0FBQTAvQyxLQUFrQnR1QyxFQUFBcFIsTUFBY3VnRCxRQUFBbnZDLEVBQUFwUixNQUFBOU0sTUFBQTBJLFFBQUF3VixFQUFBcFIsS0FBQXVnRCxTQUU5RW52QyxFQUFBcFIsS0FBQXVnRCxRQURBN0IsRUFBQTlqRCxRQUFBMGxELFFBRUEsT0FBQVosS0FBOEJwc0IsR0FBWWxoQyxTQUFBNk4sSUFBQXF6QixFQUFBbGhDLElBQzFDa2hDLEVBQUFsaEMsSUFDQTBSLEtBQUFDLFVBQUF1dkIsRUFBQXR6QixLQUFBdWdELGNDVjJCQyxDQUFlMXRELEtBQUFpc0QsWUE4RDFDLE9BNURBZSxFQUFBcnRELFVBQUFndUQsVUFBQSxXQUNBLE9BQUEzdEQsS0FBQWlzRCxXQUFBcHJELE9BQ0EsT0FBQWIsS0FBQWl0RCxjQUFBdGpELElBQUEsU0FBQS9CLEdBQXdELE9BQUFBLEtBR3hELElBQUFnbUQsRUFBQSxJQUFzQ3ZCLEVBQWFyc0QsS0FBQWlzRCxXQUFBanNELEtBQUFtdEQsZ0JBQ25ELE9BQUFudEQsS0FBQWl0RCxjQUFBdGpELElBQUEsV0FBdUQsT0FBQWlrRCxFQUFBMXZELFVBR3ZEOHVELEVBQUFydEQsVUFBQW9yRCxTQUFBLFdBQ0EsSUFBQW5vRCxFQUFrQm5FLE9BQUF1c0QsRUFBQSxNQUFBdnNELENBQUt1QixLQUFBMnRELFlBQUEzaUQsWUFFdkIsT0FEQXBJLEVBQUFtbUQsZUFBQS9vRCxLQUFBNHFELE1BQ0Fob0QsR0FFQW9xRCxFQUFBcnRELFVBQUFvcUQsUUFBQSxXQUNBLElBQUFubkQsRUFBa0JuRSxPQUFBdXNELEVBQUEsTUFBQXZzRCxDQUFLdUIsS0FBQTJ0RCxZQUN2QjdqRCxPQUFBLFNBQUErYSxHQUFvQyxPQUFBQSxFQUFBaGtCLE9BQUEsSUFDcEM4SSxJQUFBLFNBQUFrYixHQUFpQyxPQUFBQSxFQUFBLEtBQ2pDN1osWUFFQSxPQURBcEksRUFBQW1tRCxlQUFBL29ELEtBQUE0cUQsTUFDQWhvRCxHQUVBbkUsT0FBQUMsZUFBQXN1RCxFQUFBcnRELFVBQUEsYUFDQWYsSUFBQSxXQUNBLE9BQUFvQixLQUFBaXNELFlBRUF0dEQsWUFBQSxFQUNBc21CLGNBQUEsSUFFQStuQyxFQUFBcnRELFVBQUFrckQsT0FBQSxTQUFBQyxHQUNBLG9CQUFBQSxFQUNBLFVBQUEza0QsTUFBQSwrRUFHQSxnQkFBQTJrRCxFQUNBLFdBQXVCSixFQUFpQjFxRCxLQUFBNHFELE9BRXhDLFlBQUFFLEVBQ0EsV0FBdUJNLEVBQWFwckQsS0FBQTRxRCxPQUVwQyxJQUFBZ0IsRUFBQSxVQUFBZCxLQUVBOXFELEtBQUFpc0QsV0FBQW5rRCxRQUFzQ3JGLEtBQUEsV0FBQWtqQixNQUFBbWxDLEVBQUEzMEIsU0FDdEMsV0FBQTYyQixFQUFBaHRELEtBQUFpdEQsY0FBQWp0RCxLQUFBa3RELGFBQUF0QixFQUFBNXJELEtBQUFtdEQsZUFBQW50RCxLQUFBb3RELGdCQUFBcHRELEtBQUE0cUQsUUFFQW9DLEVBQUFydEQsVUFBQXNyRCxPQUFBLFNBQUFDLEVBQUFqNEMsRUFBQWs0QyxHQUVBLFFBREEsSUFBQWw0QyxJQUFpQ0EsTUFDakMsaUJBQUFpNEMsRUFDQSxVQUFBL2tELE1BQUEsb0dBR0EsSUFBQTBuRCxFQUFBN3RELEtBQUFvdEQsZ0JBQUFud0MsaUJBQUFpdUMsRUFBQWxyRCxLQUFBaXNELFdBQUFoNUMsRUFBQWs0QyxHQUNBdm9ELEVBQWtCbkUsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBS292RCxHQUV2QixPQURBanJELEVBQUFtbUQsZUFBQS9vRCxLQUFBNHFELE1BQ0Fob0QsR0FFQW9xRCxFQUFBcnRELFVBQUE0cEQsUUFBQSxXQUNBdnBELEtBQUFrdEQsYUFBQTdoRCxtQkFBQSxPQUdBMmhELEVBMUVpQixHQ0xWLFNBQVNjLEVBQUsvZ0QsRUFBQUcsRUFBQUYsRUFBQUMsRUFBQXNLLEdBRXJCLE9BQVl4SyxNQUFBRyxPQUFBRixXQUNaQyxPQUFBc0ssTUFBQWpZLFNBRkE2TixJQUFBRCxPQUFBQyxFQUFBRCxFQUFBNU4sS0FJZSxJQUFBeXVELEVBQUEsRUNMUjFrRCxFQUFBakosTUFBQTBJLFFBQ0EsU0FBQXNFLEVBQUF0TixHQUNQLHVCQUFBQSxHQUFBLGlCQUFBQSxFQzJDTyxJQWlCUWt1RCxHQWhCZnA1QyxjQTlDQSxTQUFBaUssR0FDQSxPQUFBNU0sU0FBQTJDLGNBQUFpSyxJQThDQXVoQixnQkE1Q0EsU0FBQUMsRUFBQUMsR0FDQSxPQUFBcnVCLFNBQUFtdUIsZ0JBQUFDLEVBQUFDLElBNENBM3BCLGVBMUNBLFNBQUExSixHQUNBLE9BQUFnRixTQUFBMEUsZUFBQTFKLElBMENBc3pCLGNBeENBLFNBQUF0ekIsR0FDQSxPQUFBZ0YsU0FBQXN1QixjQUFBdHpCLElBd0NBa0gsYUF0Q0EsU0FBQUssRUFBQWdzQixFQUFBQyxHQUNBanNCLEVBQUFMLGFBQUFxc0IsRUFBQUMsSUFzQ0Foc0IsWUFwQ0EsU0FBQTZKLEVBQUFvaUIsR0FDQXBpQixFQUFBN0osWUFBQWlzQixJQW9DQXRzQixZQWxDQSxTQUFBa0ssRUFBQW9pQixHQUNBcGlCLEVBQUFsSyxZQUFBc3NCLElBa0NBbHNCLFdBaENBLFNBQUE4SixHQUNBLE9BQUFBLEVBQUE5SixZQWdDQU4sWUE5QkEsU0FBQW9LLEdBQ0EsT0FBQUEsRUFBQXBLLGFBOEJBMkssUUE1QkEsU0FBZ0J0SCxHQUNoQixPQUFBQSxFQUFBc0gsU0E0QkE4aEIsZUExQkEsU0FBQXJpQixFQUFBclIsR0FDQXFSLEVBQUFzaUIsWUFBQTN6QixHQTBCQW1TLGVBeEJBLFNBQUFkLEdBQ0EsT0FBQUEsRUFBQXNpQixhQXdCQW5pQixVQXRCQSxTQUFBSCxHQUNBLFdBQUFBLEVBQUF1aUIsVUFzQkExaEIsT0FwQkEsU0FBQWIsR0FDQSxXQUFBQSxFQUFBdWlCLFVBb0JBeGhCLFVBbEJBLFNBQUFmLEdBQ0EsV0FBQUEsRUFBQXVpQixXQ3hDQSxTQUFBb3RCLEVBQUFudUQsR0FBcUIsWUFBQXFOLElBQUFyTixFQUNyQixTQUFBb3VELEVBQUFwdUQsR0FBbUIsWUFBQXFOLElBQUFyTixFQUNuQixJQUFBcXVELEVBQWdCSixFQUFLLGNBQU81Z0QsVUFDNUIsU0FBQWloRCxFQUFBQyxFQUFBQyxHQUNBLE9BQUFELEVBQUEvdUQsTUFBQWd2RCxFQUFBaHZELEtBQUErdUQsRUFBQXRoRCxNQUFBdWhELEVBQUF2aEQsSUFLQSxTQUFBd2hELEVBQUF2aEQsRUFBQXdoRCxFQUFBQyxHQUNBLElBQUExd0QsRUFBbUJ1QixFQUFBb3ZELEVBQW5CL2tELEtBQ0EsSUFBQTVMLEVBQUF5d0QsRUFBc0J6d0QsR0FBQTB3RCxJQUFhMXdELEVBRW5DLE9BREEyd0QsRUFBQTFoRCxFQUFBalAsVUFHQW9QLEtBREE3TixFQUFBb3ZELEVBQUFwdkQsT0FFQXFLLEVBQUFySyxHQUFBdkIsR0FHQSxPQUFBNEwsRUFFQSxJQUFBZ2xELEdBQUEsbURBR08sU0FBU0MsRUFBSTN3RCxFQUFBc2dCLEdBQ3BCLElBQUF4Z0IsRUFBQXFWLEVBQUF5N0MsS0FDQXJ3QyxPQUFBclIsSUFBQW9SLElBQThDeXZDLEVBQzlDLElBQUFqd0QsRUFBQSxFQUFlQSxFQUFBNHdELEVBQUE5dEQsU0FBa0I5QyxFQUVqQyxJQURBOHdELEVBQUFGLEVBQUE1d0QsT0FDQXFWLEVBQUEsRUFBbUJBLEVBQUFuVixFQUFBNEMsU0FBb0J1UyxFQUFBLENBQ3ZDLElBQUEwN0MsRUFBQTd3RCxFQUFBbVYsR0FBQXU3QyxFQUFBNXdELFNBQ0FvUCxJQUFBMmhELEdBQ0FELEVBQUFGLEVBQUE1d0QsSUFBQXVGLEtBQUF3ckQsR0FTQSxTQUFBQyxFQUFBQyxFQUFBdC9DLEdBQ0Esa0JBQ0EsUUFBQUEsRUFBQSxDQUNBLElBQUF1L0MsRUFBQXp3QyxFQUFBaEssV0FBQXc2QyxHQUNBeHdDLEVBQUEvSixZQUFBdzZDLEVBQUFELEtBSUEsU0FBQUUsRUFBQTdoRCxFQUFBOGhELEdBQ0EsSUFBQXB4RCxFQUFBbVAsRUFBQUcsRUFBQUgsVUFDQUMsSUFBQUQsR0FDQWdoRCxFQUFBbndELEVBQUFtUCxFQUFBNGhELE9BQUFaLEVBQUFud0QsSUFBQXV0QyxRQUNBdnRDLEVBQUFzUCxHQUNBSCxFQUFBRyxFQUFBSCxNQUdBLElBQUFGLEVBQUFLLEVBQUFMLFNBQUFELEVBQUFNLEVBQUFOLElBQ0EsU0FBQUEsRUFDQWtoRCxFQUFBNWdELEVBQUFKLFFBQ0FJLEVBQUFKLEtBQUEsSUFFQUksRUFBQWtLLElBQUFpSCxFQUFBK2hCLGNBQUFsekIsRUFBQUosV0FFQSxRQUFBRSxJQUFBSixFQUFBLENBRUEsSUFBQXFpRCxFQUFBcmlELEVBQUF2RixRQUFBLEtBQ0E2bkQsRUFBQXRpRCxFQUFBdkYsUUFBQSxJQUFBNG5ELEdBQ0Exb0IsRUFBQTBvQixFQUFBLEVBQUFBLEVBQUFyaUQsRUFBQWxNLE9BQ0F5dUQsRUFBQUQsRUFBQSxFQUFBQSxFQUFBdGlELEVBQUFsTSxPQUNBNjBDLEdBQUEsSUFBQTBaLElBQUEsSUFBQUMsRUFBQXRpRCxFQUFBc00sTUFBQSxFQUFBRCxLQUFBb0csSUFBQWtuQixFQUFBNG9CLElBQUF2aUQsRUFDQXdLLEVBQUFsSyxFQUFBa0ssSUFBQTIyQyxFQUFBaGhELElBQUFnaEQsRUFBQW53RCxFQUFBbVAsRUFBQTlOLElBQUFvZixFQUFBNGhCLGdCQUFBcmlDLEVBQUEyM0MsR0FDQWwzQixFQUFBNUosY0FBQThnQyxHQUtBLElBSkFoUCxFQUFBNG9CLEdBQ0EvM0MsRUFBQWxDLGFBQUEsS0FBQXRJLEVBQUFzTSxNQUFBcXRCLEVBQUEsRUFBQTRvQixJQUNBRCxFQUFBLEdBQ0E5M0MsRUFBQWxDLGFBQUEsUUFBQXRJLEVBQUFzTSxNQUFBaTJDLEVBQUEsR0FBQTFrRCxRQUFBLFlBQ0E3TSxFQUFBLEVBQXVCQSxFQUFBOHdELEVBQUF4dkQsT0FBQXdCLFNBQXVCOUMsRUFDOUM4d0QsRUFBQXh2RCxPQUFBdEIsR0FBQW93RCxFQUFBOWdELEdBQ0EsR0FBZ0JoRSxFQUFRMkQsR0FDeEIsSUFBQWpQLEVBQUEsRUFBMkJBLEVBQUFpUCxFQUFBbk0sU0FBcUI5QyxFQUFBLENBQ2hELElBQUEyd0QsRUFBQTFoRCxFQUFBalAsR0FDQSxNQUFBMndELEdBQ0Fsd0MsRUFBQXBLLFlBQUFtRCxFQUFBMjNDLEVBQUFSLEVBQUFTLFNBSXFCL2hELEVBQVlDLEVBQUFKLE9BQ2pDdVIsRUFBQXBLLFlBQUFtRCxFQUFBaUgsRUFBQTdILGVBQUF0SixFQUFBSixPQUdBaWhELEVBREFud0QsRUFBQXNQLEVBQUFILEtBQUE0aEQsUUFFQS93RCxFQUFBc0IsUUFDQXRCLEVBQUFzQixPQUFBOHVELEVBQUE5Z0QsR0FDQXRQLEVBQUF3eEQsUUFDQUosRUFBQTdyRCxLQUFBK0osU0FJQUEsRUFBQWtLLElBQUFpSCxFQUFBN0gsZUFBQXRKLEVBQUFKLE1BRUEsT0FBQUksRUFBQWtLLElBRUEsU0FBQWk0QyxFQUFBQyxFQUFBbjdDLEVBQUFvN0MsRUFBQUMsRUFBQWxCLEVBQUFVLEdBQ0EsS0FBY1EsR0FBQWxCLElBQW9Ca0IsRUFBQSxDQUNsQyxJQUFBakIsRUFBQWdCLEVBQUFDLEdBQ0EsTUFBQWpCLEdBQ0Fsd0MsRUFBQXJLLGFBQUFzN0MsRUFBQVAsRUFBQVIsRUFBQVMsR0FBQTc2QyxJQUlBLFNBQUFzN0MsRUFBQXZpRCxHQUNBLElBQUF0UCxFQUFBcVYsRUFBQWxHLEVBQUFHLEVBQUFILEtBQ0EsUUFBQUMsSUFBQUQsRUFBQSxDQUdBLElBRkFnaEQsRUFBQW53RCxFQUFBbVAsRUFBQTRoRCxPQUFBWixFQUFBbndELElBQUE0ZSxVQUNBNWUsRUFBQXNQLEdBQ0F0UCxFQUFBLEVBQXVCQSxFQUFBOHdELEVBQUFseUMsUUFBQTliLFNBQXdCOUMsRUFDL0M4d0QsRUFBQWx5QyxRQUFBNWUsR0FBQXNQLEdBQ0EsUUFBQUYsSUFBQUUsRUFBQUwsU0FDQSxJQUFBb0csRUFBQSxFQUEyQkEsRUFBQS9GLEVBQUFMLFNBQUFuTSxTQUEyQnVTLEVBRXRELE9BREFyVixFQUFBc1AsRUFBQUwsU0FBQW9HLEtBQ0EsaUJBQUFyVixHQUNBNnhELEVBQUE3eEQsSUFNQSxTQUFBOHhELEVBQUFKLEVBQUFDLEVBQUFDLEVBQUFsQixHQUNBLEtBQWNrQixHQUFBbEIsSUFBb0JrQixFQUFBLENBQ2xDLElBQUFuN0IsT0FBQSxFQUFBOWtCLE9BQUEsRUFBQWtOLE9BQUEsRUFBQTh4QyxFQUFBZ0IsRUFBQUMsR0FDQSxTQUFBakIsRUFDQSxHQUFBUixFQUFBUSxFQUFBM2hELEtBQUEsQ0FJQSxJQUhBNmlELEVBQUFsQixHQUNBaC9DLEVBQUFtL0MsRUFBQXI1QyxPQUFBM1UsT0FBQSxFQUNBK2IsRUFBQW15QyxFQUFBTCxFQUFBbjNDLElBQUE3SCxHQUNBOGtCLEVBQUEsRUFBaUNBLEVBQUFxNkIsRUFBQXI1QyxPQUFBM1UsU0FBeUIyekIsRUFDMURxNkIsRUFBQXI1QyxPQUFBZ2YsR0FBQWs2QixFQUFBOXhDLEdBQ0FzeEMsRUFBQTE1QixFQUFBazZCLEVBQUF4aEQsT0FBQWdoRCxFQUFBMTVCLElBQUFzNkIsT0FBQVosRUFBQTE1QixJQUFBaGYsUUFDQWdmLEVBQUFrNkIsRUFBQTl4QyxHQUdBQSxTQUlBNEIsRUFBQS9KLFlBQUFnN0MsRUFBQWYsRUFBQW4zQyxNQXFGQSxTQUFBdTRDLEVBQUFyMUMsRUFBQXBOLEVBQUE4aEQsR0FDQSxJQUFBcHhELEVBQUErd0QsRUFDQVosRUFBQW53RCxFQUFBc1AsRUFBQUgsT0FBQWdoRCxFQUFBWSxFQUFBL3dELEVBQUErd0QsT0FBQVosRUFBQW53RCxFQUFBK3dELEVBQUFpQixXQUNBaHlELEVBQUEwYyxFQUFBcE4sR0FFQSxJQUFBa0ssRUFBQWxLLEVBQUFrSyxJQUFBa0QsRUFBQWxELElBQ0F5NEMsRUFBQXYxQyxFQUFBek4sU0FDQTBoRCxFQUFBcmhELEVBQUFMLFNBQ0EsR0FBQXlOLElBQUFwTixFQUFBLENBRUEsUUFBQUYsSUFBQUUsRUFBQUgsS0FBQSxDQUNBLElBQUFuUCxFQUFBLEVBQXVCQSxFQUFBOHdELEVBQUF0NUMsT0FBQTFVLFNBQXVCOUMsRUFDOUM4d0QsRUFBQXQ1QyxPQUFBeFgsR0FBQTBjLEVBQUFwTixHQUVBNmdELEVBREFud0QsRUFBQXNQLEVBQUFILEtBQUE0aEQsT0FDQVosRUFBQW53RCxJQUFBd1gsU0FDQXhYLEVBQUEwYyxFQUFBcE4sR0FFQTRnRCxFQUFBNWdELEVBQUFKLE1BQ0FpaEQsRUFBQThCLElBQUE5QixFQUFBUSxHQUNBc0IsSUFBQXRCLEdBbkdBLFNBQUFlLEVBQUFPLEVBQUFDLEVBQUFkLEdBWUEsSUFYQSxJQU9BZSxFQUNBQyxFQUNBQyxFQVRBQyxFQUFBLEVBQUFDLEVBQUEsRUFDQUMsRUFBQVAsRUFBQW52RCxPQUFBLEVBQ0EydkQsRUFBQVIsRUFBQSxHQUNBUyxFQUFBVCxFQUFBTyxHQUNBRyxFQUFBVCxFQUFBcHZELE9BQUEsRUFDQTh2RCxFQUFBVixFQUFBLEdBQ0FXLEVBQUFYLEVBQUFTLEdBS0FMLEdBQUFFLEdBQUFELEdBQUFJLEdBQ0EsTUFBQUYsRUFDQUEsRUFBQVIsSUFBQUssR0FFQSxNQUFBSSxFQUNBQSxFQUFBVCxJQUFBTyxHQUVBLE1BQUFJLEVBQ0FBLEVBQUFWLElBQUFLLEdBRUEsTUFBQU0sRUFDQUEsRUFBQVgsSUFBQVMsR0FFQXRDLEVBQUFvQyxFQUFBRyxJQUNBYixFQUFBVSxFQUFBRyxFQUFBeEIsR0FDQXFCLEVBQUFSLElBQUFLLEdBQ0FNLEVBQUFWLElBQUFLLElBRUFsQyxFQUFBcUMsRUFBQUcsSUFDQWQsRUFBQVcsRUFBQUcsRUFBQXpCLEdBQ0FzQixFQUFBVCxJQUFBTyxHQUNBSyxFQUFBWCxJQUFBUyxJQUVBdEMsRUFBQW9DLEVBQUFJLElBQ0FkLEVBQUFVLEVBQUFJLEVBQUF6QixHQUNBM3dDLEVBQUFySyxhQUFBczdDLEVBQUFlLEVBQUFqNUMsSUFBQWlILEVBQUF0SyxZQUFBdThDLEVBQUFsNUMsTUFDQWk1QyxFQUFBUixJQUFBSyxHQUNBTyxFQUFBWCxJQUFBUyxJQUVBdEMsRUFBQXFDLEVBQUFFLElBQ0FiLEVBQUFXLEVBQUFFLEVBQUF4QixHQUNBM3dDLEVBQUFySyxhQUFBczdDLEVBQUFnQixFQUFBbDVDLElBQUFpNUMsRUFBQWo1QyxLQUNBazVDLEVBQUFULElBQUFPLEdBQ0FJLEVBQUFWLElBQUFLLFVBR0FuakQsSUFBQStpRCxJQUNBQSxFQUFBM0IsRUFBQXlCLEVBQUFLLEVBQUFFLElBR0F0QyxFQURBa0MsRUFBQUQsRUFBQVMsRUFBQXJ4RCxPQUVBa2YsRUFBQXJLLGFBQUFzN0MsRUFBQVAsRUFBQXlCLEVBQUF4QixHQUFBcUIsRUFBQWo1QyxLQUNBbzVDLEVBQUFWLElBQUFLLE1BR0FGLEVBQUFKLEVBQUFHLElBQ0FwakQsTUFBQTRqRCxFQUFBNWpELElBQ0F5UixFQUFBckssYUFBQXM3QyxFQUFBUCxFQUFBeUIsRUFBQXhCLEdBQUFxQixFQUFBajVDLE1BR0F1NEMsRUFBQU0sRUFBQU8sRUFBQXhCLEdBQ0FhLEVBQUFHLFFBQUFoakQsRUFDQXFSLEVBQUFySyxhQUFBczdDLEVBQUFXLEVBQUE3NEMsSUFBQWk1QyxFQUFBajVDLE1BRUFvNUMsRUFBQVYsSUFBQUssTUFJQUQsR0FBQUUsR0FBQUQsR0FBQUksS0FDQUwsRUFBQUUsRUFFQWYsRUFBQUMsRUFEQSxNQUFBUSxFQUFBUyxFQUFBLFFBQUFULEVBQUFTLEVBQUEsR0FBQW41QyxJQUNBMDRDLEVBQUFLLEVBQUFJLEVBQUF2QixHQUdBVSxFQUFBSixFQUFBTyxFQUFBSyxFQUFBRSxJQXdCQU0sQ0FBQXQ1QyxFQUFBeTRDLEVBQUF0QixFQUFBUyxHQUVBakIsRUFBQVEsSUFDQVIsRUFBQXp6QyxFQUFBeE4sT0FDQXVSLEVBQUFtaUIsZUFBQXBwQixFQUFBLElBQ0FpNEMsRUFBQWo0QyxFQUFBLEtBQUFtM0MsRUFBQSxFQUFBQSxFQUFBN3RELE9BQUEsRUFBQXN1RCxJQUVBakIsRUFBQThCLEdBQ0FILEVBQUF0NEMsRUFBQXk0QyxFQUFBLEVBQUFBLEVBQUFudkQsT0FBQSxHQUVBcXRELEVBQUF6ekMsRUFBQXhOLE9BQ0F1UixFQUFBbWlCLGVBQUFwcEIsRUFBQSxJQUdBa0QsRUFBQXhOLE9BQUFJLEVBQUFKLE1BQ0F1UixFQUFBbWlCLGVBQUFwcEIsRUFBQWxLLEVBQUFKLE1BRUFpaEQsRUFBQVksSUFBQVosRUFBQW53RCxFQUFBK3dELEVBQUFnQyxZQUNBL3lELEVBQUEwYyxFQUFBcE4sSUFHQSxnQkFBQW9OLEVBQUFwTixHQUNBLElBQUF0UCxFQUFBd1osRUFBQWxGLEVBQ0E4OEMsS0FDQSxJQUFBcHhELEVBQUEsRUFBbUJBLEVBQUE4d0QsRUFBQW55QyxJQUFBN2IsU0FBb0I5QyxFQUN2Qzh3RCxFQUFBbnlDLElBQUEzZSxLQWdCQSxJQTlSQSxTQUFBc1AsR0FDQSxZQUFBRixJQUFBRSxFQUFBTixJQThRQWdrRCxDQUFBdDJDLEtBQ0FBLEVBbFBBLFNBQUFsRCxHQUNBLElBQUE1RixFQUFBNEYsRUFBQTVGLEdBQUEsSUFBQTRGLEVBQUE1RixHQUFBLEdBQ0F2VCxFQUFBbVosRUFBQXk1QyxVQUFBLElBQUF6NUMsRUFBQXk1QyxVQUFBaDBDLE1BQUEsS0FBQXpMLEtBQUEsUUFDQSxPQUFldzhDLEVBQUt2dkMsRUFBQUssUUFBQXRILEdBQUFnRyxjQUFBNUwsRUFBQXZULGFBQTRDK08sRUFBQW9LLEdBK09oRTA1QyxDQUFBeDJDLElBRUEyekMsRUFBQTN6QyxFQUFBcE4sR0FDQXlpRCxFQUFBcjFDLEVBQUFwTixFQUFBOGhELElBR0E1M0MsRUFBQWtELEVBQUFsRCxJQUNBbEYsRUFBQW1NLEVBQUFoSyxXQUFBK0MsR0FDQTIzQyxFQUFBN2hELEVBQUE4aEQsR0FDQSxPQUFBOThDLElBQ0FtTSxFQUFBckssYUFBQTlCLEVBQUFoRixFQUFBa0ssSUFBQWlILEVBQUF0SyxZQUFBcUQsSUFDQXM0QyxFQUFBeDlDLEdBQUFvSSxHQUFBLE9BR0ExYyxFQUFBLEVBQW1CQSxFQUFBb3hELEVBQUF0dUQsU0FBK0I5QyxFQUNsRG94RCxFQUFBcHhELEdBQUFtUCxLQUFBNGhELEtBQUFTLE9BQUFKLEVBQUFweEQsSUFFQSxJQUFBQSxFQUFBLEVBQW1CQSxFQUFBOHdELEVBQUE5eEIsS0FBQWw4QixTQUFxQjlDLEVBQ3hDOHdELEVBQUE5eEIsS0FBQWgvQixLQUNBLE9BQUFzUCx5REM1U0EsSUFBSTZqRCxFQUF3Qnp5RCxPQUFBOGIsUUFBQSxTQUFBdGIsR0FDNUIsUUFBQWEsRUFBQS9CLEVBQUEsRUFBQXlCLEVBQUE0SixVQUFBdkksT0FBNEM5QyxFQUFBeUIsRUFBT3pCLElBRW5ELFFBQUE4QixLQURBQyxFQUFBc0osVUFBQXJMLEdBQ0FVLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQTRCLEVBQUFELEtBQ0FaLEVBQUFZLEdBQUFDLEVBQUFELElBRUEsT0FBQVosR0FFQWt5RCxFQUFBLFVBQ0FDLEVBQUEsU0FDQUMsRUFBQSxVQUdBQyxFQUFBLCtCQU1BQyxFQUFBLGtCQUhBLE1BQUFILEVBQUEsTUFBQUEsRUFBQSxLQUdBLEtBRkEsTUFBQUEsRUFBQSxRQUFBQSxFQUFBLEtBRUEsS0FEQSxNQUFBQSxFQUFBLE1BQUFBLEVBQUEsS0FDQSxJQUtBSSxFQUFBLE1BQUFMLEVBQUEsS0FDQU0sRUFkQSxTQUFBTixFQUFBLElBY0EsS0FiQSxPQUFBQSxFQUFBLEtBYUEsS0FYQSxTQUFBQyxFQUFBRCxFQUFBQyxFQUFBLE1BQUFFLEVBQUFGLEVBQUFDLEVBQUFELEVBQUEsVUFXQSxzSEFBQUcsRUFDQUcsRUFBQSxJQUFBemdDLE9BQUEsSUFBQXNnQyxFQUFBLEtBS08sU0FBQUksRUFBQTdHLEdBQ1AsSUFBQS85QyxFQUFBKzlDLEVBQUEzMEIsT0FDQXk3QixFQUFBLElBQUEzZ0MsT0FBQXVnQyxFQUFBLEtBQ0E5YixFQUFBa2MsRUFBQTNTLEtBQUFseUMsR0FBQSxHQUNBeVQsRUFBQSxJQUFBeVEsT0FBQXdnQyxFQUFBLEtBQ0FqeEMsRUFBQXFCLFVBQUErdkMsRUFBQS92QyxVQUtBLElBSkEsSUFBQThxQyxLQUNBa0YsT0FBQTFrRCxFQUNBMmtELE9BQUEza0QsRUFDQStKLEdBQUEsRUFDQXNKLEVBQUFxQixVQUFBOVUsRUFBQWxNLFFBQUEsQ0FDQSxJQUFBK2YsRUFBQUosRUFBQXkrQixLQUFBbHlDLEdBQ0EsSUFBQTZULFFBQUF6VCxJQUFBMmtELEVBQ0EsVUFBQTNyRCxNQUFBLGlDQUVBLEdBQUF5YSxHQUFBOHdDLEVBQUF6M0MsS0FBQTJHLEVBQUEsS0FFQWt4QyxFQURBSixFQUFBelMsS0FBQXIrQixFQUFBLE9BRUExSixFQUFBc0osRUFBQXFCLGNBRUEsQ0FDQSxRQUFBMVUsSUFBQTJrRCxFQUFBLENBQ0FELEdBQ0FFLEdBQUFELEdBQ0FILEVBQUE1a0QsRUFBQStXLFVBQUE1TSxLQUVBLE1BRUF5MUMsRUFBQXJwRCxLQUFBc2QsRUFBQSxLQUdBLElBQUE5RixFQUFBNnhDLEVBQ0E3aUQsT0FBQSxTQUFBaEssR0FBOEIsT0FBQUEsRUFBQWt5RCxXQUFBLE9BQzlCcm9ELElBQUEsU0FBQTdKLEdBQTJCLE9BQUFBLEVBQUFna0IsVUFBQSxLQUMzQm11QyxFQUFBdEYsRUFBQTdpRCxPQUFBLFNBQUFoSyxHQUEyQyxPQUFBQSxFQUFBa3lELFdBQUEsT0FBNEJyb0QsSUFBQSxTQUFBN0osR0FBb0IsT0FBQUEsRUFBQWdrQixVQUFBLEtBQzNGLEdBQUFtdUMsRUFBQXB4RCxPQUFBLEVBQ0EsVUFBQXNGLE1BQUEsNENBRUEsSUFBQStyRCxFQUFBLElBQUFqaEMsT0FBQSxJQUFBa2dDLEVBQUEsSUFBQUMsRUFBQSxJQUFBRSxFQUFBLEtBQUFGLEVBQUEsSUFBQUMsRUFBQSxNQUNBeDhDLEVBQUE4M0MsRUFDQTdpRCxPQUFBLFNBQUFoSyxHQUE4QixPQUFBQSxFQUFBa3lELFdBQUEsT0FDOUJyb0QsSUFBQSxTQUFBN0osR0FBMkIsT0FBQW95RCxFQUFBalQsS0FBQW4vQyxHQUFBdVosTUFBQSxPQUMzQjFQLElBQUEsU0FBQXdvRCxHQUNBLElBQ0FDLEVBREFDLEVBQUFGLEVBQUEsR0FBQWx0RCxFQUFBa3RELEVBQUEsR0FBQWpzRCxFQUFBaXNELEVBQUEsR0FFQSxPQUFBQyxNQUNBQyxJQW9EQSxTQUFBcHRELEdBQ0EsT0FBQUEsR0FDQSxRQUNBLGNBQ0EsU0FDQSxtQkFDQSxTQUNBLGlCQUNBLFNBQ0EsaUJBQ0EsU0FDQSxtQkFDQSxTQUNBLGFBQ0EsUUFDQSxhQW5FQXF0RCxDQUFBcnRELEdBQUFpQixFQWdCQSxTQUFBdEMsR0FDQSxHQUFBQSxFQUFBb3VELFdBQUEsS0FDQSxPQUFBcHVELEVBQUF5VixNQUFBLE1BRUEsWUFBQXpWLEVBQ0EsU0FFQSxhQUFBQSxFQUNBLFNBRUEsSUFBQTVDLEVBQUEwdUIsV0FBQTlyQixHQUNBLEdBQUEycUIsTUFBQXZ0QixHQUNBLE9BQUE0QyxFQUVBLE9BQUE1QyxFQTlCQXV4RCxDQUFBcnNELE1BQ0Frc0QsSUFFQTF5QixPQUFBLFNBQUEzNUIsRUFBQXlzRCxHQUFzQyxPQUFTdEIsS0FBV25yRCxFQUFBeXNELFFBQzFEQyxFQUFBOUYsRUFDQTdpRCxPQUFBLFNBQUFoSyxHQUE4QixPQUFBQSxFQUFBa3lELFdBQUEsT0FDOUJyb0QsSUFBQSxTQUFBN0osR0FBMkIsT0EwQjNCLFNBQUFpTixHQUNBLG1CQUFBQSxHQUNBLGVBQUFBLEdBQ0EsU0FBQUEsR0FDQSxVQUFBQSxFQUNBLE9BQUFBLE9BQUFJLEdBRUEsR0FBQUosRUFBQWlsRCxXQUFBLGFBQ0EsSUFBQS9rRCxFQUFBRixFQUFBc00sTUFBQSxPQUNBLGtCQUFBcE0sR0FFQSxJQUFBd0QsRUFBQTFELEVBQUFzTSxNQUFBLE9BQ0EsU0FBQTVJLElBQ0FBLEVBQUEsTUFFQSxRQUFBQSxJQUNBQSxFQUFBLFFBRUEsbUJBQUFBLEdBNUMyQmlpRCxDQUFBNXlELEVBQUFna0IsVUFBQSxNQUMzQixPQUNBblMsR0FBQXNnRCxFQUFBLE9BQ0F2YyxNQUNBNTZCLFlBQ0FpRSxXQUFBbEssRUFDQWc5QyxlQUNBWSxXQXlEQSxTQUFBVixHQUFBWSxHQUNBLE9BQUFBLEVBQUF4OEIsUUFDQSxRQUNBLGNBQ0EsUUFDQSxvQkFDQSxRQUNBLGdCQUNBLFFBQ0EsaUJDM0pPLFNBQUF5OEIsR0FBQXR0QixHQUNQLGdCQUFBd2xCLEVBQUF4c0MsR0FDQSxJQUFBNnpDLEVBQUEsaUJBQUFySCxJQUEyRDZHLEVBQWE3RyxHQUFBcFYsRUFBQXljLEVBQUF6YyxJQUFBL2pDLEVBQUF3Z0QsRUFBQXhnRCxHQUFBbUosRUFBQXEzQyxFQUFBcjNDLFVBQUFpRSxFQUFBb3pDLEVBQUFwekMsV0FBQTh5QyxFQUFBTSxFQUFBTixhQUFBWSxFQUFBTixFQUFBTSxRQUN4RSxRQUFBdGxELElBQUEwa0QsRUFDQSxVQUFBMXJELE1BQUEsbUVBRUEsSUFBQW1ZLEVBQ0EsU0FFQSxHQUFBbzNCLEtBQUFuNEIsZ0JBQUErbkIsRUFBQW9RLElBQUFwM0IsR0FBQWYsY0FDQSxTQUVBLEdBQUE1TCxPQUFBMnpCLEVBQUEzekIsR0FBQTJNLEdBQ0EsU0FHQSxJQURBLElBQUF1MEMsRUFBQXZ0QixFQUFBMHJCLFVBQUExeUMsR0FBQXRCLE1BQUEsS0FDQWpmLEVBQUEsRUFBdUJBLEVBQUErYyxFQUFBamEsT0FBc0I5QyxJQUM3QyxRQUFBODBELEVBQUFyckQsUUFBQXNULEVBQUEvYyxJQUNBLFNBR0EsUUFBQXVCLEtBQUF5ZixFQUFBLENBQ0EsSUFBQXN6QyxFQUFBL3NCLEVBQUErc0IsS0FBQS96QyxFQUFBaGYsR0FDQUwsRUFBQThmLEVBQUF6ZixHQUFBLEdBQ0FzRSxFQUFBbWIsRUFBQXpmLEdBQUEsR0FDQSxRQUFBNk4sSUFBQWtsRCxFQUNBLFNBRUEsV0FBQXB6RCxFQUNBLFNBRUEsYUFBQUEsR0FBQW96RCxJQUFBenVELEVBQ0EsU0FFQSxhQUFBM0UsRUFBQSxDQUNBLG9CQUFBMkUsRUFDQSxVQUFBdUMsTUFBQSxtREFFQSxrQkFBQWxILElBQUFvekQsRUFBQUwsV0FBQXB1RCxHQUNBLFNBRUEsZ0JBQUEzRSxJQUFBb3pELEVBQUFTLFNBQUFsdkQsR0FDQSxTQUVBLGdCQUFBM0UsSUFBQSxJQUFBb3pELEVBQUE3cUQsUUFBQTVELEdBQ0EsU0FFQSxrQkFBQTNFLElBQUEsSUFBQW96RCxFQUFBcjFDLE1BQUEsS0FBQXhWLFFBQUE1RCxHQUNBLFNBRUEsWUFBQTNFLElBQUEsSUFBQW96RCxFQUFBcjFDLE1BQUEsS0FBQXhWLFFBQUE1RCxHQUNBLFVBSUEsSUFBQTdGLEVBQUEsRUFBdUJBLEVBQUEwMEQsRUFBQTV4RCxPQUFvQjlDLElBQUEsQ0FDM0MsSUFBQXEwRCxFQUFBSyxFQUFBMTBELEdBQUFtUCxHQUFBak8sRUFBQW16RCxFQUFBLEdBQUFBLEVBQUEsSUFDQSxnQkFBQW56RCxHQUFBaU8sSUFBQW80QixFQUFBeXRCLFNBQUF6MEMsR0FDQSxTQUVBLGFBQUFyZixJQUNBcW1DLEVBQUF5dEIsU0FBQXowQyxJQUFBLElBQUFnbkIsRUFBQXQ0QixTQUFBc1IsR0FBQXpkLFFBQ0EsU0FFQSxZQUFBNUIsUUFBQWtPLElBQUFtNEIsRUFBQWp6QixPQUFBaU0sR0FDQSxTQUVBLFFBQUFyZixFQUFBdUksUUFBQSxVQUNBLElBQUE4OUIsRUFBQWp6QixPQUFBaU0sR0FDQSxTQUVBLElBQUEwMEMsRUFBQTF0QixFQUFBdDRCLFNBQUFzNEIsRUFBQWp6QixPQUFBaU0sSUFDQSxtQkFBQXJmLEdBQUEsSUFBQSt6RCxFQUFBeHJELFFBQUE4VyxHQUNBLFNBRUEsa0JBQUFyZixHQUNBK3pELEVBQUF4ckQsUUFBQThXLEtBQUEwMEMsRUFBQW55RCxPQUFBLEVBQ0EsU0FFQSxpQkFBQTVCLEVBQUEsQ0FDQSxJQUNBZzBELEVBREEsNEJBQ0FoVSxLQUFBL3hDLEdBQUFtTSxNQUFBLEdBQ0FuQyxFQUFBODdDLEVBQUF4ckQsUUFBQThXLEdBQ0EyMEMsRUFBQSxLQUNBQSxFQUFBLFFBRUEsSUFBQUMsRUFBQUQsRUFBQSxHQUNBcmpDLFNBQUFxakMsRUFBQSxHQUFBQSxFQUFBLFNBQ0E5bEQsRUFDQW9MLEVBQUFxWCxTQUFBcWpDLEVBQUEsU0FDQSxHQUFBQyxHQUNBLE1BQUFELEVBQUEsSUFDQS83QyxFQUFBZzhDLElBQUEzNkMsRUFDQSxTQUVBLElBQUEyNkMsR0FDQUQsRUFBQSxLQUNBLE1BQUFBLEVBQUEsSUFBQS83QyxFQUFBcUIsRUFBQSxHQUNBLE1BQUEwNkMsRUFBQSxJQUFBLzdDLEVBQUFxQixHQUFBLEdBQ0EsU0FFQSxJQUFBMDZDLEVBQUEsSUFBQUMsR0FDQWg4QyxJQUFBZzhDLEVBQUEsRUFDQSxXQUtBLFVDN0dPLFNBQUFDLEdBQUE3MEMsR0FDUCxJQUFBQSxFQUFBdlIsSUFDQSxPQUNBOFIsUUFBQSxHQUNBbE4sR0FBQSxHQUNBcS9DLFVBQUEsSUFHQSxJQUFBamtELEVBQUF1UixFQUFBdlIsSUFDQXFpRCxFQUFBcmlELEVBQUF2RixRQUFBLEtBQ0E2bkQsRUFBQXRpRCxFQUFBdkYsUUFBQSxJQUFBNG5ELEdBQ0Exb0IsRUFBQTBvQixFQUFBLEVBQUFBLEVBQUFyaUQsRUFBQWxNLE9BQ0F5dUQsRUFBQUQsRUFBQSxFQUFBQSxFQUFBdGlELEVBQUFsTSxPQU1BLE9BQ0FnZSxTQU5BLElBQUF1d0MsSUFBQSxJQUFBQyxFQUNBdGlELEVBQUFzTSxNQUFBLEVBQUFELEtBQUFvRyxJQUFBa25CLEVBQUE0b0IsSUFDQXZpRCxFQUtBNEUsR0FKQSswQixFQUFBNG9CLEVBQUF2aUQsRUFBQXNNLE1BQUFxdEIsRUFBQSxFQUFBNG9CLFFBQUEsRUFLQTBCLFVBSkEzQixFQUFBLEVBQUF0aUQsRUFBQXNNLE1BQUFpMkMsRUFBQSxHQUFBMWtELFFBQUEsbUJDaEJPLFNBQUF3b0QsR0FBQUMsR0FDUCxJQUFBbEIsRUFBYWdCLEdBQWNFLEdBQUFyQyxVQUFBcnlDLE9BQUEsSUFBQXd6QyxFQUFBLEdBQUFBLEVBQzNCLElBQUFrQixFQUFBbm1ELEtBQ0EsT0FBQXlSLEVBRUEsSUFBQXl6QyxFQUFBaUIsRUFBQW5tRCxLQUFBb21ELEVBQUFsQixFQUFBeDNDLE1BQUFNLEVBQUFrM0MsRUFBQWwzQyxNQUNBbzRDLElBR0EzMEMsR0FBQSxJQUZBbGdCLE9BQUEwVyxLQUFBbStDLEdBQ0F4cEQsT0FBQSxTQUFBeXBELEdBQW1DLE9BQUFELEVBQUFDLEtBQ25DaGlELEtBQUEsTUFLQSxPQUhBMkosS0FBQTgxQyxZQUNBcnlDLEdBQUEsSUFBQXpELEVBQUE4MUMsV0FFQXJ5QyxLQUFBd1gsbUJDWElxOUIsSUFDSjlkLElBQUEsU0FBQTJkLEdBQTJCLE9BQVFGLEdBQWNFLEdBQUF4MEMsU0FDakRteUMsVUFBQSxTQUFBcUMsR0FBaUMsT0FBUUQsR0FBa0JDLElBQzNEMWhELEdBQUEsU0FBQTBoRCxHQUEwQixPQUFRRixHQUFjRSxHQUFBMWhELElBQUEsSUFDaEQzRSxTQUFBLFNBQUFxbUQsR0FBZ0MsT0FBQUEsRUFBQXJtRCxjQUNoQ3FGLE9BQUEsU0FBQWdoRCxHQUE4QixPQUFBQSxFQUFBbm1ELEtBQW1CdW1ELEdBQUEsSUFBWUosR0FDN0ROLFNBQUEsU0FBQU0sR0FBZ0MsT0FBQUEsRUFBQXBtRCxNQUFBLElBQ2hDb2xELEtBQUEsU0FBQWdCLEVBQUFoQixHQUNBLEdBQUFnQixFQUFBbm1ELEtBQUEsQ0FDQSxJQUFBaWxELEVBQUFrQixFQUFBbm1ELEtBQUFrbEQsRUFBQUQsRUFBQXQ5QyxhQUFBLElBQUF1OUMsS0FBMEVBLEVBQUEvd0QsRUFBQTh3RCxFQUFBajNDLGFBQUEsSUFBQTdaLEtBQWdEQSxFQUFBNEYsRUFBQWtyRCxFQUFBNzBDLGVBQUEsSUFBQXJXLEtBQW9EQSxFQUM5SyxHQUFBNE4sRUFBQXc5QyxHQUNBLE9BQUF4OUMsRUFBQXc5QyxHQUVBLEdBQUFuM0MsRUFBQW0zQyxHQUNBLE9BQUFuM0MsRUFBQW0zQyxHQUVBLE9BQUFBLEVBQUE3cUQsUUFBQSxVQUFBOFYsRUFBQSswQyxFQUFBaDVDLE1BQUEsSUFDQSxPQUFBaUUsRUFBQSswQyxFQUFBaDVDLE1BQUEsT0FLSXE2QyxHQUFVZCxHQUFjWSxJQW1CckIsSUFBSUcsR0MzQ0osU0FBQTFnRCxFQUFBMDVDLEdBQ1AsSUFBQWlILEVBQUFqSCxHQUE4QmlHLEdBQWEzL0MsR0EwQzNDLGdCQUFBNjNDLEVBQUF4c0MsR0FDQSxJQUFBQSxFQUNBLFNBRUEsSUFDQXUxQyxHQUFBdjFDLEdBQ0F3MUMsRUFGQSxpQkFBQWhKLElBQTRENkcsRUFBYTdHLEdBR3pFaUosRUFBQSxVQUNBQyxPQUFBN21ELEVBQ0E4bUQsRUFBQSxXQUdBLEdBRkFELEVBQUFGLEVBQUFqQyxhQUNBaUMsRUFBQWpDLGtCQUFBMWtELEVBQ0EsWUFBQTRtRCxHQUNBLFVBQUFBLEVBQUEsQ0FDQSxJQUFBRyxFQUFBLFlBQUFILEVBQUFqZ0MsSUFBQSxFQUNBKy9CLElBQ0FscUQsSUFBQSxTQUFBbkssR0FBdUMsT0F6RHZDLFNBQUEyMEQsRUFBQXJKLEVBQUFubEIsRUFBQXJuQixHQUNBLElBQUFBLEVBQ0EsU0FFQSxJQUFBOWUsRUFBQW8wRCxFQUFBOUksRUFBQXhzQyxHQUNBODFDLEVBQUE1MEQsRUFBQSxpQkFBQUEsT0FBQThlLE1BQ0EsT0FBQXFuQixFQUNBLE9BQUF5dUIsRUFFQSxJQUFBQyxFQUFBcGhELEVBQ0FqRyxTQUFBc1IsR0FDQXhVLE9BQUEsU0FBQTFMLEdBQWtDLHVCQUFBQSxJQUNsQ3VMLElBQUEsU0FBQXZMLEdBQStCLE9BQUErMUQsRUFBQXJKLEVBQUFubEIsRUFBQSxFQUFBdm5DLEtBQy9Cc2hDLE9BQUEsU0FBQTM1QixFQUFBeXNELEdBQTBDLE9BQUF6c0QsRUFBQStCLE9BQUEwcUQsUUFDMUMsT0FBQTRCLEVBQUF0c0QsT0FBQXVzRCxHQTJDdUNGLENBQUFMLEVBQUFJLEVBQUExMEQsS0FDdkNrZ0MsT0FBQSxTQUFBMzVCLEVBQUF5c0QsR0FBa0QsT0FBQXpzRCxFQUFBK0IsT0FBQTBxRCxZQUVsRCxDQUNBLElBQUE4QixFQUFBLGdCQUFBUCxFQUNBRixJQUNBbHFELElBQUEsU0FBQW5LLEdBQXVDLE9BL0N2QyxTQUFBc3JELEVBQUFwcEQsRUFBQTRjLEdBQ0EsSUFBQUEsUUFBQW5SLElBQUE4RixFQUFBWixPQUFBaU0sR0FDQSxTQUlBLElBRkEsSUFBQXUxQyxLQUNBYixFQUFBLy9DLEVBQUFqRyxTQUFBaUcsRUFBQVosT0FBQWlNLElBQ0F2Z0IsRUFBQWkxRCxFQUFBeHJELFFBQUE4VyxHQUFBLEVBQWdEdmdCLEVBQUFpMUQsRUFBQW55RCxPQUFxQjlDLElBQ3JFLG9CQUFBaTFELEVBQUFqMUQsR0FBQSxDQUdBLElBQUF5QixFQUFBbzBELEVBQUE5SSxFQUFBa0ksRUFBQWoxRCxJQVNBLEdBUkF5QixJQUNBLGlCQUFBQSxFQUNBcTBELEVBQUF2d0QsS0FBQTlELEdBR0FxMEQsRUFBQXZ3RCxLQUFBMHZELEVBQUFqMUQsS0FHQTJELEVBQ0EsTUFHQSxPQUFBbXlELEVBd0J1Q1UsQ0FBQVQsRUFBQVEsRUFBQTkwRCxLQUN2Q2tnQyxPQUFBLFNBQUEzNUIsRUFBQXlzRCxHQUFrRCxPQUFBenNELEVBQUErQixPQUFBMHFELFFBRWxEd0IsSUFDQUYsRUFBQUUsRUFBQSxHQUNBRCxFQUFBQyxFQUFBLEtBR0EsR0FDQUMsZUFDUzltRCxJQUFBNm1ELEdBQ1QsT0FBQUgsR0RqQzJCVyxDQUFvQmhCLEdBbEIvQyxTQUFBem1ELEVBQUFNLEdBQ0EsSUFBQUgsRUFBQUcsRUFBQUgsS0FDQTQ5QyxFQUFtQjRJLEdBQU9uMEQsS0FBQSxLQUFBd04sR0FDMUIsR0FBQUcsS0FBQTRFLEdBQUEsQ0FDQSxJQUFBdFMsT0FBQSxFQVVBLFFBQUFzckQsRUFSQXRyRCxFQURBWSxNQUFBMEksUUFBQW9FLEVBQUEwQixNQUNBMUIsRUFBQTRFLEdBQUFqRCxNQUFBLEtBQUEzQixFQUFBMEIsTUFFQTFCLEVBQUEwQixLQUNBMUIsRUFBQTRFLEdBQUE1VCxLQUFBLEtBQUFnUCxFQUFBMEIsTUFHQTFCLEVBQUE0RSxPQUVBdFMsRUFFQSxPQUFBc3JELEVBQUF6OUMsS0V2QkEsU0FBQW9uRCxHQUFBcEIsRUFBQXFCLEVBQUFyaUQsR0FDQXFpRCxJQUdBckIsRUFBQW5tRCxPQUNBbW1ELEVBQUFubUQsU0FFQW1tRCxFQUFBbm1ELEtBQW9CdW1ELEdBQUEsSUFDcEJoMUQsT0FBQUMsZUFBQTIwRCxFQUFBbm1ELEtBQTBDdW1ELEdBQUEsR0FDMUN6MEQsTUFBQXFULEtDM0JPLElDRUhzaUQsR0FBWSxXQUNoQixTQUFBQyxFQUFBQyxHQUNBNzBELEtBQUE2MEQsY0FvQ0EsT0FsQ0FELEVBQUFqMUQsVUFBQXpCLEtBQUEsU0FBQW1QLEdBQ0EsR2pCS08sU0FBQTZILEdBQ1AsWUFBQUEsRUFBQTJyQixTaUJOWWkwQixDQUFTOTBELEtBQUE2MEQsYUFDckIsT0FBQTcwRCxLQUFBKzBELFlBQUEsT0FBQTFuRCxVQUVBLFVBQUFBLEVBQ0EsT0FBQXJOLEtBQUFzK0IsU0FFQSxJQUFBNnpCLEVBQWlCZ0IsR0FBYzlsRCxHQUFBMm5ELEVBQUE3QyxFQUFBdHpDLFFBQUFvMkMsRUFBQTlDLEVBQUF4Z0QsR0FDL0J1akQsRUFBNkI5QixHQUFrQi9sRCxHQUcvQytrRCxJQUZBL2tELEVBQUFILFVBQ0FnTyxXQUNBdkosR0FBQXdqRCxPQUFBLElBQUEvQyxFQUFBNkMsRUFBQTdDLEVBS0EsTUFKQSxpQkFBQStDLEdBQ0FBLEVBQUFwdEIsZ0JBQUEvbkMsS0FBQTYwRCxZQUFBbGpELEdBQUFvMkIsZUFDQWl0QixFQUFBanRCLGdCQUFBL25DLEtBQUE2MEQsWUFBQWgyQyxRQUFBa3BCLGVBQ0FtdEIsRUFBQW50QixnQkFBQS9uQyxLQUFBNjBELFlBQUE3RCxVQUFBanBCLGNBRUExNkIsRUFFQXJOLEtBQUFzK0IsTUFBQWp4QixLQUVBdW5ELEVBQUFqMUQsVUFBQW8xRCxZQUFBLFNBQUEvbkQsR0FDQSxPQUFldk8sT0FBQTIyRCxFQUFBLE1BQUEzMkQsQ0FBTyxJQUFNZ3ZELFlBQWN6Z0QsT0FBQUcsRUFBQW5OLEtBQzFDNjBELGNBRUFELEVBQUFqMUQsVUFBQTIrQixLQUFBLFNBQUF0eEIsR0FDQSxJQUFBbWxELEVBQUFueUQsS0FBQTYwRCxZQUFBaDJDLEVBQUFzekMsRUFBQXR6QyxRQUFBbE4sRUFBQXdnRCxFQUFBeGdELEdBQUFxL0MsRUFBQW1CLEVBQUFuQixVQUNBaUUsRUFBQXRqRCxFQUFBLElBQUFBLEVBQUEsR0FDQTBqRCxFQUFBckUsRUFBQSxJQUFBQSxFQUFBaDBDLE1BQUEsS0FBQXpMLEtBQUEsUUFDQWxFLEVBQW9CNU8sT0FBQXFPLEVBQUEsRUFBQXJPLENBQUMsR0FBQW9nQixFQUFBdEIsY0FBQTAzQyxFQUFBSSxLQUFrRHJvRCxHQUd2RSxPQUZBSyxFQUFBSCxLQUFBRyxFQUFBSCxTQUNBRyxFQUFBSCxLQUFBdWdELFFBQUFwZ0QsRUFBQUgsS0FBQXVnRCxZQUNBcGdELEdBRUF1bkQsRUF0Q2dCLHVHQ1NEVSxJQVBYQyxHQUFBMzBELEVBQ0E0MEQsR0FBQTUwRCxFQUNBNjBELEdBQUE3MEQsRUFDQTgwRCxHQUFBOTBELEVBQ0ErMEQsR0FBQS8wRCxHQ21EV2cxRCxHQTdEZixXQUNBLFNBQUFDLEVBQUFDLEdBQ0E5MUQsS0FBQTgxRCxTQUNBOTFELEtBQUErMUQsV0FBQTVvRCxNQXdEQSxPQXREQTBvRCxFQUFBbDJELFVBQUErNUIsSUFBQSxTQUFBeWEsRUFBQTRWLEVBQUFqbEQsR0FHQSxJQUZBLElBQUEwdEQsRUFBQXh5RCxLQUFBKzFELEtBQ0FDLE9BQUE3b0QsSUFBQXJJLElBQUFxdkMsRUFBQXR6QyxPQUNBOUMsRUFBQSxFQUF1QkEsRUFBQWk0RCxFQUFVajRELElBQUEsQ0FDakMsSUFBQXlCLEVBQUFRLEtBQUE4MUQsT0FBQTNoQixFQUFBcDJDLElBQ0EyaUMsRUFBQTh4QixFQUFBLEdBQUFoekQsR0FDQWtoQyxJQUNBQSxRQUFBdnpCLE1BQ0FxbEQsRUFBQSxHQUFBaHpELEdBQUFraEMsR0FFQTh4QixFQUFBOXhCLEVBRUE4eEIsRUFBQSxHQUFBekksR0FFQThMLEVBQUFsMkQsVUFBQXMyRCxXQUFBLFNBQUE5aEIsRUFBQStoQixFQUFBcHhELEdBQ0EsT0FBQTlFLEtBQUFwQixJQUFBdTFDLEVBQUEraEIsRUFBQXB4RCxJQU1BK3dELEVBQUFsMkQsVUFBQWYsSUFBQSxTQUFBdTFDLEVBQUEraEIsRUFBQXB4RCxHQUdBLElBRkEsSUFBQTB0RCxFQUFBeHlELEtBQUErMUQsS0FDQUMsT0FBQTdvRCxJQUFBckksSUFBQXF2QyxFQUFBdHpDLE9BQ0E5QyxFQUFBLEVBQXVCQSxFQUFBaTRELEVBQVVqNEQsSUFBQSxDQUNqQyxJQUFBeUIsRUFBQVEsS0FBQTgxRCxPQUFBM2hCLEVBQUFwMkMsSUFDQTJpQyxFQUFBOHhCLEVBQUEsR0FBQWh6RCxHQUNBLElBQUFraEMsRUFBQSxDQUNBLElBQUF3MUIsRUFLQSxPQUpBeDFCLFFBQUF2ekIsTUFDQXFsRCxFQUFBLEdBQUFoekQsR0FBQWtoQyxFQU1BOHhCLEVBQUE5eEIsRUFLQSxPQUhBdzFCLElBQUExRCxFQUFBLEtBQ0FBLEVBQUEsR0FBQTBELEtBRUExRCxFQUFBLElBRUFxRCxFQUFBbDJELFVBQUF3MkQsT0FBQSxTQUFBaGlCLEdBRUEsSUFEQSxJQUFBcWUsRUFBQXh5RCxLQUFBKzFELEtBQ0FoNEQsRUFBQSxFQUF1QkEsRUFBQW8yQyxFQUFBdHpDLE9BQUEsRUFBcUI5QyxJQUFBLENBQzVDLElBQUEyaUMsRUFBQTh4QixFQUFBLEdBQUF4eUQsS0FBQTgxRCxPQUFBM2hCLEVBQUFwMkMsS0FDQSxJQUFBMmlDLEVBQ0EsT0FFQTh4QixFQUFBOXhCLFNBRUE4eEIsRUFBQSxHQUFBeHlELEtBQUE4MUQsT0FBQTNoQixJQUFBdHpDLE9BQUEsTUFFQWcxRCxFQTNEQSxHQ0VJTyxHQUFhLFdBQ2pCLFNBQUFDLElBQ0FyMkQsS0FBQXMyRCxjQUFBLElBQWlDVixHQUFVLFNBQUFodUQsR0FBZSxPQUFBQSxFQUFBK2QsUUFDMUQzbEIsS0FBQXUyRCxtQkFBQSxJQUFBMW5DLElBQ0E3dUIsS0FBQXcyRCxzQkEwRkEsT0F4RkFILEVBQUExMkQsVUFBQTgyRCxrQkFBQSxTQUFBNzlCLEdBQ0E1NEIsS0FBQTAyRCxlQUFBOTlCLEdBRUF5OUIsRUFBQTEyRCxVQUFBZzNELGNBQUEsU0FBQS9LLEVBQUExMkMsR0FDQWxWLEtBQUF1MkQsbUJBQUE3OEIsSUFBQXhrQixFQUFBMDJDLEdBQ0E1ckQsS0FBQXMyRCxjQUFBNThCLElBQUFreUIsRUFBQTEyQyxJQUVBbWhELEVBQUExMkQsVUFBQWkzRCxjQUFBLFNBQUFyL0MsR0FDQXZYLEtBQUF1MkQsbUJBQUFKLE9BQUE1K0MsR0FDQSxJQUFBcTBDLEVBQUE1ckQsS0FBQW9zRCxhQUFBNzBDLEdBQ0FxMEMsR0FDQTVyRCxLQUFBczJELGNBQUFILE9BQUF2SyxJQUdBeUssRUFBQTEyRCxVQUFBeVMsV0FBQSxTQUFBdzVDLEVBQUE5bUQsR0FDQSxPQUFBOUUsS0FBQXMyRCxjQUFBMTNELElBQUFndEQsT0FBQXorQyxFQUFBckksSUFFQXV4RCxFQUFBMTJELFVBQUFrM0QsZUFBQSxTQUFBdC9DLEdBQ0EsR0FBQXZYLEtBQUF1MkQsbUJBQUF0d0QsSUFBQXNSLEdBQ0EsT0FBQUEsRUFJQSxJQURBLElBQUFpN0MsRUFBQWo3QyxHQUNBdlgsS0FBQXUyRCxtQkFBQXR3RCxJQUFBdXNELElBQUEsQ0FFQSxLQURBQSxJQUFBaCtDLFlBRUEsT0FFQSxZQUFBZytDLEVBQUEzekMsUUFDQSxVQUFBMVksTUFBQSx3REFHQSxPQUFBcXNELEdBRUE2RCxFQUFBMTJELFVBQUF5c0QsYUFBQSxTQUFBNzBDLEdBQ0EsSUFBQXM5QyxFQUFBNzBELEtBQUE2MkQsZUFBQXQvQyxHQUNBLEdBQUFzOUMsRUFHQSxPQUFBNzBELEtBQUF1MkQsbUJBQUEzM0QsSUFBQWkyRCxJQUVBd0IsRUFBQTEyRCxVQUFBbTNELGFBQUEsV0FDQSxJQUFBeHlELEVBQUF0RSxLQUNBLE9BQ0FYLE9BQUEsU0FBQTAzRCxFQUFBMUQsR0FDQSxJQUFBOTdDLEVBQUE4N0MsRUFBQTk3QyxJQUFBNDZDLEVBQUFrQixFQUFBbm1ELEtBQ0EwK0MsUUFEQSxJQUFBdUcsS0FBK0VBLEdBQy9FMUUsUUFDQXJ0RCxNQUFBMEksUUFBQThpRCxJQUNBdG5ELEVBQUFxeUQsY0FBQS9LLEVBQUFyMEMsSUFHQWhDLE9BQUEsU0FBQXloRCxFQUFBM0QsR0FDQSxJQUFBNEQsRUFBQUQsRUFBQXovQyxJQUFBNDZDLEVBQUE2RSxFQUFBOXBELEtBQUFncUQsT0FBQSxJQUFBL0UsS0FBMkZBLEVBQzNGNTZDLEVBQUE4N0MsRUFBQTk3QyxJQUFBNjZDLEVBQUFpQixFQUFBbm1ELFlBQUEsSUFBQWtsRCxLQUErRUEsRUFDL0UrRSxFQUFBRCxFQUFBekosUUFDQTdCLEVBQUExK0MsRUFBQXVnRCxRQUNxQjVCLEVBQWdCc0wsRUFBQXZMLElBQ3JDeHJELE1BQUEwSSxRQUFBcXVELElBQ0E3eUQsRUFBQXN5RCxjQUFBSyxHQUdBNzJELE1BQUEwSSxRQUFBOGlELElBQ0F0bkQsRUFBQXF5RCxjQUFBL0ssRUFBQXIwQyxJQUdBb0YsUUFBQSxTQUFBMDJDLEdBQ0EvdUQsRUFBQWt5RCxtQkFBQWx6RCxLQUFBK3ZELElBRUE3OUMsT0FBQSxTQUFBNjlDLEVBQUFweUIsR0FDQTM4QixFQUFBa3lELG1CQUFBbHpELEtBQUErdkQsR0FDQXB5QixLQUVBbEUsS0FBQSxXQUVBLElBREEsSUFBQXk1QixFQUFBbHlELEVBQUFreUQsbUJBQ0F6NEQsRUFBQXk0RCxFQUFBMzFELE9BQUEsRUFBMkQ5QyxHQUFBLEVBQVFBLElBQUEsQ0FDbkUsSUFBQXNQLEVBQUFtcEQsRUFBQXo0RCxHQUNBNnRELE9BQUF6K0MsSUFBQUUsRUFBQUgsS0FDQUcsRUFBQUgsS0FBQWtxRCxlQUNBanFELE9BQ0FBLElBQUF5K0MsR0FDQXRuRCxFQUFBc3lELGNBQUFoTCxHQUVBdG5ELEVBQUFveUQsZUFBQUUsY0FBQXZwRCxFQUFBa0ssSUFBQXEwQyxHQUVBdG5ELEVBQUFreUQseUJBSUFILEVBOUZpQixHQytCRmdCLEdBakNmLFdBQ0EsU0FBQUMsSUFDQXQzRCxLQUFBdTNELFlBQ0F2M0QsS0FBQXczRCxhQUFBLEVBQ0F4M0QsS0FBQXkzRCxLQUFBLElBQUFybUMsSUEyQkEsT0F6QkFrbUMsRUFBQTMzRCxVQUFBNFksSUFBQSxTQUFBdFosR0FDQWUsS0FBQXkzRCxLQUFBbC9DLElBQUF0WixJQUVBcTRELEVBQUEzM0QsVUFBQXlWLFFBQUEsU0FBQXBVLEdBQ0FoQixLQUFBeTNELEtBQUFyaUQsUUFBQXBVLEdBQ0FoQixLQUFBMDNELFNBRUFKLEVBQUEzM0QsVUFBQXcyRCxPQUFBLFNBQUFsM0QsR0FDQWUsS0FBQXUzRCxTQUFBMTJELFNBQUFiLEtBQUF3M0QsYUFDQXgzRCxLQUFBdTNELFNBQUFqMEQsS0FBQXJFLEdBR0FlLEtBQUF1M0QsU0FBQXYzRCxLQUFBdzNELGNBQUF2NEQsRUFFQWUsS0FBQXczRCxnQkFFQUYsRUFBQTMzRCxVQUFBKzNELE1BQUEsV0FDQSxRQUFBMzVELEVBQUEsRUFBdUJBLEVBQUFpQyxLQUFBdTNELFNBQUExMkQsT0FBMEI5QyxJQUNqREEsRUFBQWlDLEtBQUF3M0QsY0FDQXgzRCxLQUFBeTNELEtBQUF0QixPQUFBbjJELEtBQUF1M0QsU0FBQXg1RCxJQUVBaUMsS0FBQXUzRCxTQUFBeDVELFFBQUFvUCxFQUVBbk4sS0FBQXczRCxhQUFBLEdBRUFGLEVBL0JBLEdDZ0NlSyxHQWhDZixXQUNBLFNBQUFDLElBQ0E1M0QsS0FBQTZrQixPQUNBN2tCLEtBQUE2M0QsU0EyQkEsT0F6QkFELEVBQUFqNEQsVUFBQTRZLElBQUEsU0FBQXRaLEVBQUE2NEQsR0FDQSxRQUFBLzVELEVBQUEsRUFBdUJBLEVBQUFpQyxLQUFBNmtCLElBQUFoa0IsT0FBcUI5QyxJQUM1QyxHQUFBaUMsS0FBQTYzRCxNQUFBOTVELEdBQUErNUQsRUFHQSxPQUZBOTNELEtBQUE2a0IsSUFBQXBkLE9BQUExSixFQUFBLEVBQUFrQixRQUNBZSxLQUFBNjNELE1BQUFwd0QsT0FBQTFKLEVBQUEsRUFBQSs1RCxHQUlBOTNELEtBQUE2a0IsSUFBQXZoQixLQUFBckUsR0FDQWUsS0FBQTYzRCxNQUFBdjBELEtBQUF3MEQsSUFFQUYsRUFBQWo0RCxVQUFBeVYsUUFBQSxTQUFBcFUsR0FDQSxRQUFBakQsRUFBQSxFQUF1QkEsRUFBQWlDLEtBQUE2a0IsSUFBQWhrQixPQUFxQjlDLElBQzVDaUQsRUFBQWhCLEtBQUE2a0IsSUFBQTltQixLQUFBaUMsS0FBQTZrQixNQUdBK3lDLEVBQUFqNEQsVUFBQXcyRCxPQUFBLFNBQUFsM0QsR0FDQSxRQUFBbEIsRUFBQSxFQUF1QkEsRUFBQWlDLEtBQUE2a0IsSUFBQWhrQixPQUFxQjlDLElBQzVDLEdBQUFpQyxLQUFBNmtCLElBQUE5bUIsS0FBQWtCLEVBR0EsT0FGQWUsS0FBQTZrQixJQUFBcGQsT0FBQTFKLEVBQUEsUUFDQWlDLEtBQUE2M0QsTUFBQXB3RCxPQUFBMUosRUFBQSxJQUtBNjVELEVBOUJBLEdDQUlHLEdBQXdCLFdBUzVCLE9BUklBLEdBQVF0NUQsT0FBQThiLFFBQUEsU0FBQXRiLEdBQ1osUUFBQWEsRUFBQS9CLEVBQUEsRUFBQXlCLEVBQUE0SixVQUFBdkksT0FBZ0Q5QyxFQUFBeUIsRUFBT3pCLElBRXZELFFBQUE4QixLQURBQyxFQUFBc0osVUFBQXJMLEdBQ0FVLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQTRCLEVBQUFELEtBQ0FaLEVBQUFZLEdBQUFDLEVBQUFELElBRUEsT0FBQVosSUFFbUI0UCxNQUFBN08sS0FBQW9KLFlBVVo0dUQsSUFDUCxPQUNBLFVBQ0EsaUJBQ0EsaUJBQ0EsVUFDQSxRQUNBLFFBQ0EsT0FDQSxhQUNBLGlCQUNBLGFBQ0EsYUFDQSxRQUNBLE9BQ0EsVUFDQSxhQUNBLFFBQ0EsU0FDQSxTQUNBLFVBQ0EsVUFDQSxTQUNBLFVBQ0EsYUFDQSxTQUNBLGVBQ0EsV0FXSUMsR0FBYyxXQUNsQixTQUFBQyxFQUFBQyxFQUFBbk0sR0FDQSxJQUFBbG1ELEVBQUE5RixLQUNBQSxLQUFBbTRELGVBQ0FuNEQsS0FBQWdzRCxnQkFDQWhzRCxLQUFBbzRELGlCQUFBLElBQW9DeEMsR0FBVSxTQUFBaHVELEdBQWUsT0FBQUEsRUFBQStkLFFBQzdEM2xCLEtBQUFxNEQsMEJBQUEsSUFBNkNoQixHQUM3Q3IzRCxLQUFBczRELDhCQUNBdDRELEtBQUFnc0QsY0FBQXlLLGtCQUFBejJELE1BQ0FBLEtBQUF1NEQsYUFBQSxJQUFBMXBDLElBQ0E3dUIsS0FBQXc0RCxrQkFBQSxJQUFBM3BDLElBQ0E3dUIsS0FBQXk0RCxxQkFBQSxJQUFBNXBDLElBQ0FzcEMsRUFBQWp3RCxhQUNBeEcsS0FBQSxTQUFBd1QsR0FDQXBQLEVBQUE4akMsU0FBQTEwQixJQUNBcFAsRUFBQThqQyxPQUFBMTBCLEVBQ0FwUCxFQUFBNHlELHNCQUNBNXlELEVBQUEweUQsa0JBQUFwakQsUUFBQSxTQUFBKzBDLEVBQUExbkQsR0FDQSxPQUFBcUQsRUFBQTZ5RCxpQkFBQWwyRCxFQUFBMG5ELEtBRUFya0QsRUFBQTB5RCxrQkFBQTlrQixTQUVBNXRDLEVBQUE4eUQsNEJBQ0E5eUQsRUFBQXV5RCwwQkFBQWpqRCxRQUFBLFNBQUF5UCxHQUNBL2UsRUFBQSt5RCx5QkFBQWgwQyxRQW9RQSxPQS9QQXF6QyxFQUFBdjRELFVBQUFzZCxpQkFBQSxTQUFBaXVDLEVBQUFVLEVBQUEzNEMsRUFBQWs0QyxHQUNBLElBQUEyTixFQUFzQnBRLEVBQUE5bkQsRUFBRTJILFFBQ3hCZ2tELEVBQUEsSUFBK0JULEVBQVlGLEVBQUE1ckQsS0FBQWdzRCxlQUMzQytNLEVBQUEvNEQsS0FBQWc1RCxlQUFBRixFQUFBdk0sRUFBQXJCLEVBQUFqNEMsR0FJQSxRQUhBOUYsSUFBQWcrQyxHQUNBLElBQUE2TSxHQUFBeHdELFFBQUEwakQsR0FDQUMsRUFFQW5yRCxLQUFBdTRELGFBQUF0eUQsSUFBQWlsRCxJQUNBbHJELEtBQUEyNEQsaUJBQUF6TixJQUFBajRDLEVBQUFrM0MsYUFHQSxDQUNBLElBQUE4TyxFQUFBLElBQTZCNU0sRUFBYVQsRUFBQTVyRCxLQUFBZ3NELGVBQzFDaHNELEtBQUE2NEQsMEJBQUEzTixFQUFBK04sRUFBQUYsSUFFQSxPQUFBRCxHQUVBWixFQUFBdjRELFVBQUFpM0QsY0FBQSxTQUFBN00sRUFBQTZCLFFBQ0F6K0MsSUFBQXkrQyxHQUNBNXJELEtBQUFvNEQsaUJBQUFqQyxPQUFBdkssR0FFQSxJQUFBc04sS0FDQWw1RCxLQUFBeTRELHFCQUFBcmpELFFBQUEsU0FBQXpMLEVBQUFsSCxHQUNBa0gsRUFBQTFELElBQUE4akQsSUFDQW1QLEVBQUE1MUQsTUFBQWIsRUFBQXNuRCxNQUdBLFFBQUFoc0QsRUFBQSxFQUF1QkEsRUFBQW03RCxFQUFBcjRELE9BQXFCOUMsSUFBQSxDQUM1QyxJQUFBNEwsRUFBQTNKLEtBQUF5NEQscUJBQUE3NUQsSUFBQXM2RCxFQUFBbjdELEdBQUEsSUFDQTRMLElBR0FBLEVBQUF3c0QsT0FBQStDLEVBQUFuN0QsR0FBQSxJQUNBLElBQUE0TCxFQUFBNG9DLEtBQ0F2eUMsS0FBQXk0RCxxQkFBQXRDLE9BQUErQyxFQUFBbjdELEdBQUEsSUFHQWlDLEtBQUF5NEQscUJBQUEvK0IsSUFBQXcvQixFQUFBbjdELEdBQUEsR0FBQTRMLE1BSUF1dUQsRUFBQXY0RCxVQUFBcTVELGVBQUEsU0FBQUYsRUFBQXZNLEVBQUFyQixFQUFBajRDLEdBQ0EsSUFBQWttRCxLQUNBMzVELEVBQUErc0QsRUFBQU4sV0FDQW5uRCxFQUFBdEYsRUFBQXFCLE9BQ0EsR0FDQXM0RCxFQUFBNzFELEtBQUF0RCxLQUFBbzVELG9CQUFBbE8sRUFBQTFyRCxHQUFBLEVBQUFzRixJQUNBQSxVQUNTQSxHQUFBLGFBQUF0RixFQUFBc0YsR0FBQXJDLE1BR1QsSUFGQSxJQUFBNDJELEVBQTBCdEIsTUFBVzlrRCxHQUFZczVDLGVBQ2pEdU0sVUFBQTNOLFVBQUFsNEMsRUFBQWs0QyxRQUFBbEIsYUFBQWgzQyxFQUFBZzNDLFdBQUFFLFVBQUFsM0MsRUFBQWszQyxVQUNBcHNELEVBQUEsRUFBdUJBLEVBQUFvN0QsRUFBQXQ0RCxPQUF5QjlDLElBQ2hEbzdELEVBQUFwN0QsR0FBQXdhLElBQUE4Z0QsRUFBQTc1RCxFQUFBcUIsUUFFQSxPQUFBdzRELEdBTUFuQixFQUFBdjRELFVBQUF5NUQsb0JBQUEsU0FBQWxPLEVBQUFVLEVBQUEwTixFQUFBeDBELFFBQ0EsSUFBQXcwRCxJQUErQkEsR0FBQSxHQUMvQixJQUFBdEQsT0FBQTdvRCxJQUFBckksSUFBQThtRCxFQUFBL3FELE9BQ0EsSUFBQXk0RCxFQUNBLFFBQUF2N0QsRUFBQWk0RCxFQUFBLEVBQWtDajRELEdBQUEsRUFBUUEsSUFBQSxDQUMxQyxhQUFBNnRELEVBQUE3dEQsR0FBQTBFLEtBQUEsQ0FDQXV6RCxFQUFBajRELEVBQUEsRUFDQSxNQUVBaTRELEVBQUFqNEQsRUFHQSxJQUFBNEwsRUFBQTNKLEtBQUFvNEQsaUJBQUFuQyxXQUFBckssRUFBQSxXQUEyRSxXQUFBLzhCLEtBQW9CbW5DLEdBSS9GLE9BSEFyc0QsRUFBQTFELElBQUFpbEQsSUFDQXZoRCxFQUFBK3ZCLElBQUF3eEIsRUFBQSxJQUFtQ3lNLElBRW5DaHVELEVBQUEvSyxJQUFBc3NELElBRUFnTixFQUFBdjRELFVBQUFnNUQsaUJBQUEsU0FBQXpOLEVBQUFmLEdBQ0EsSUFBQXJrRCxFQUFBOUYsS0FDQSxHQUFBQSxLQUFBNHBDLE9BQUEsQ0FDQSxJQUFBMnZCLEVBQXNCelAsRUFBUzlwRCxLQUFBNHBDLE9BQUFzaEIsR0FBQSxLQUFBZixHQUFBcm5ELFdBQy9CcEIsS0FBQSxTQUFBaW1CLEdBQXdDLE9BQUE3aEIsRUFBQTB6RCxRQUFBdE8sRUFBQXZqQyxFQUFBd2lDLElBQ3hDeG9ELE1BQUEsYUFDQUMsU0FBQSxlQUVBNUIsS0FBQXU0RCxhQUFBNytCLElBQUF3eEIsR0FBOENxTyxNQUFBcFAsaUJBRzlDbnFELEtBQUF3NEQsa0JBQUE5K0IsSUFBQXd4QixFQUFBZixJQUdBK04sRUFBQXY0RCxVQUFBazVELHlCQUFBLFNBQUFsd0QsR0FDQSxJQUFBN0MsRUFBQTlGLEtBQ0FrckQsRUFBQXZpRCxFQUFBLEdBQUE4d0QsRUFBQTl3RCxFQUFBLEdBQUEwd0QsRUFBQTF3RCxFQUFBLEdBQ0EsR0FBQTNJLEtBQUE0cEMsT0FBQSxDQUlBLElBQUFtZ0IsRUFBQTBQLEVBQUF2N0QsT0FBQSxHQUNBLEdBQUE2ckQsRUFBQSxDQUNBL3BELEtBQUFxNEQsMEJBQUFsQyxPQUFBeHRELEdBQ0EsSUFBQTR3RCxFQUFzQnpQLEVBQVNDLEVBQUFtQixHQUFBLEtBQUFtTyxFQUFBbFAsU0FBQXJuRCxXQUMvQnBCLEtBQUEsU0FBQXdiLEdBQXFDLE9BQUFwWCxFQUFBMHpELFFBQUF0TyxFQUFBaHVDLElBQUFtOEMsRUFBQWxQLFNBQUEsSUFDckN4b0QsTUFBQSxhQUNBQyxTQUFBLGVBRUE1QixLQUFBeTRELHFCQUFBeHlELElBQUFpbEQsSUFDQWxyRCxLQUFBeTRELHFCQUFBLytCLElBQUF3eEIsRUFBQSxJQUFBcjhCLEtBRUEsSUFBQWxsQixFQUFBM0osS0FBQXk0RCxxQkFBQTc1RCxJQUFBc3NELEdBQ0EsSUFBQXZoRCxFQUNBLE9BRUFBLEVBQUErdkIsSUFBQXF3QixHQUE4QndQLE1BQUFGLHFCQUc5QnI1RCxLQUFBcTRELDBCQUFBOS9DLElBQUE1UCxRQXJCQTNJLEtBQUFxNEQsMEJBQUE5L0MsSUFBQTVQLElBd0JBdXZELEVBQUF2NEQsVUFBQSs0RCxvQkFBQSxXQUdBLElBRkEsSUFBQTN1QyxFQUFBL3BCLEtBQUF1NEQsYUFBQWh2QyxVQUNBaXBDLEVBQUF6b0MsRUFBQXJvQixRQUNBOHdELEVBQUE1NkMsTUFBQSxDQUNBLElBQUF1NkMsRUFBQUssRUFBQXh6RCxNQUFBeUQsRUFBQTB2RCxFQUFBLEdBQUFDLEVBQUFELEVBQUEsR0FBQW9ILEVBQUFuSCxFQUFBbUgsSUFBQXBQLEVBQUFpSSxFQUFBakksUUFDQW9QLEVBQUFwM0QsY0FDQW5DLEtBQUEyNEQsaUJBQUFsMkQsRUFBQTBuRCxHQUNBcUksRUFBQXpvQyxFQUFBcm9CLFNBR0F3MkQsRUFBQXY0RCxVQUFBaTVELDBCQUFBLFdBQ0EsSUFBQTl5RCxFQUFBOUYsS0FDQTA1RCxFQUFBLElBQUE3cUMsSUFDQTBnQyxFdkJ4S08sU0FBQTVsRCxHQUNQLGdCQUFBbEgsRUFBQThVLEVBQUF2WSxHQUVBLElBSUEyNkQsRUFMQWh3RCxFQUFBMUQsSUFBQXhELElBQ0FrM0QsRUFBQWh3RCxFQUFBL0ssSUFBQTZELElBQ0FpM0IsSUFBQW5pQixFQUFBdlksS0FHQTI2RCxFQUFBLElBQUE5cUMsS0FDQTZLLElBQUFuaUIsRUFBQXZZLEdBQ0EySyxFQUFBK3ZCLElBQUFqM0IsRUFBQWszRCxLdUIrSnFCQyxDQUFVRixHQUMvQjE1RCxLQUFBeTRELHFCQUFBcmpELFFBQUEsU0FBQXpMLEVBQUFsSCxHQUNBa0gsRUFBQXlMLFFBQUEsU0FBQXBXLEVBQUF1WSxHQUNBLEdBQUF0RixTQUFBNkssS0FBQSs4QyxTQUFBdGlELEdBaUJBZzRDLEVBQUE5c0QsRUFBQThVLEVBQUF2WSxPQWpCQSxDQUNBLElBQUF1NkQsRUFBQXY2RCxFQUFBdTZELElBQUFPLEVBQUE5NkQsRUFBQXE2RCxZQUNBRSxHQUNBQSxFQUFBcDNELGNBRUEsSUFDQTQzRCxFQURBLElBQTRDMU4sRUFBYXlOLEVBQUF2TixhQUFBWCxVQUFBOWxELEVBQUFrbUQsZUFDekQ5dEQsT0FBQSxHQUNBODdELEVBQWlDbFEsRUFBU2lRLEVBQUF0M0QsR0FBQSxLQUFBcTNELEVBQUEzUCxTQUFBcm5ELFdBQzFDcEIsS0FBQSxTQUFBaW1CLEdBQ0EsT0FBQTdoQixFQUFBMHpELFFBQUEvMkQsRUFBQWtsQixJQUFBbXlDLEVBQUEzUCxTQUFBLElBRUF4b0QsTUFBQSxhQUNBQyxTQUFBLGVBRUEydEQsRUFBQTlzRCxFQUFBczNELEdBQTBDUixJQUFBUyxFQUFBWCxZQUFBUyxPQU0xQ2gwRCxFQUFBMnlELHFCQUFBaUIsS0FHQXhCLEVBQUF2NEQsVUFBQXM2RCx1QkFBQSxTQUFBL08sRUFBQTN6QyxFQUFBMHlDLEVBQUFFLEdBQ0EsSUFBQXhnRCxFQUFBM0osS0FBQXk0RCxxQkFBQTc1RCxJQUFBc3NELEdBQ0EsR0FBQXZoRCxFQUFBLENBR0EsSUFBQXhCLEVBQUF3QixFQUFBL0ssSUFBQTJZLEdBQ0FwUCxHQUNBQSxFQUFBa3hELFlBQUFsUCxhQUNBaGlELEVBQUFreEQsWUFBQXBQLGlCQUNBanFELEtBQUFzNEQsMkJBQUEsR0FBQW53RCxFQUFBa3hELGVBR0FuQixFQUFBdjRELFVBQUE2NUQsUUFBQSxTQUFBdE8sRUFBQXZqQyxFQUFBd2lDLEVBQUFnQixRQUNBLElBQUFBLElBQWlDQSxHQUFBLEdBQ2pDLElBQUErTyxFQUFBbDZELEtBQUFtNkQsV0FBQXh5QyxHQUNBa3RDLEVBQUE3MEQsS0FBQWdzRCxjQUFBNkssZUFBQWx2QyxFQUFBdmMsUUFDQSxHQUFBKy9DLEVBQUEsQ0FDQSxJQUFBUyxFQUFBNXJELEtBQUFnc0QsY0FBQUksYUFBQXprQyxFQUFBdmMsUUFDQSxJQUFBd2dELEVBQ0EsT0FFQSxJQUFBbDhDLEVBQUExUCxLQUFBbzVELG9CQUFBbE8sRUFBQVUsR0FDQTVyRCxLQUFBbzZELE9BQUFsUCxFQUFBdmpDLEVBQUF2YyxPQUFBeXBELEVBQUFxRixFQUFBeHFELEVBQUFrOEMsSUFBQS9xRCxPQUFBLEtBQUFzcEQsR0FDQW5xRCxLQUFBbzZELE9BQUFsUCxFQUFBdmpDLEVBQUF2YyxPQUFBeXBELEVBQUFxRixFQUFBeHFELEVBQUFrOEMsSUFBQS9xRCxPQUFBLEtBQUFzcEQsUUFHQW5xRCxLQUFBaTZELHVCQUFBL08sRUFBQXZqQyxFQUFBdmMsUUFBQSxFQUFBKytDLEdBQ0FucUQsS0FBQXE2RCxhQUFBblAsRUFBQXZqQyxFQUFBdmMsT0FBQXlwRCxFQUFBcUYsRUFBQWw2RCxLQUFBczRELDRCQUFBLEVBQUFuTyxHQUNBbnFELEtBQUFpNkQsdUJBQUEvTyxFQUFBdmpDLEVBQUF2YyxRQUFBLEVBQUErK0MsR0FDQW5xRCxLQUFBcTZELGFBQUFuUCxFQUFBdmpDLEVBQUF2YyxPQUFBeXBELEVBQUFxRixFQUFBbDZELEtBQUFzNEQsNEJBQUEsRUFBQW5PLEdBQ0F4aUMsRUFBQTJ5QyxtQkFHQXBDLEVBQUF2NEQsVUFBQXk2RCxPQUFBLFNBQUFsUCxFQUFBM3pDLEVBQUFzOUMsRUFBQWx0QyxFQUFBalksRUFBQWs4QyxFQUFBMTBDLEVBQUEreUMsRUFBQUUsR0FDQUYsR0FBQXRpQyxFQUFBNHlDLDJCQUNBdjZELEtBQUFxNkQsYUFBQW5QLEVBQUEzekMsRUFBQXM5QyxFQUFBbHRDLEVBQUFqWSxFQUFBdTZDLEVBQUFFLEdBRUEsSUFBQXFRLEVBQUEzRixFQUNBNEYsRUFBQXZqRCxFQUNBLEdBQUFLLElBQUFzOUMsRUFBQSxDQUNBLEtBQUEzOUMsR0FBQSxlQUFBMDBDLEVBQUExMEMsR0FBQXpVLE1BS0EsT0FKQSszRCxFQUFBeDZELEtBQUFnc0QsY0FBQTU1QyxXQUFBdzVDLEVBQUExMEMsR0FDQXVqRCxJQU1BbGpELEVBQUEvQyxZQUFBZ21ELEdBQ0F4NkQsS0FBQW82RCxPQUFBbFAsRUFBQTN6QyxFQUFBL0MsV0FBQWdtRCxFQUFBN3lDLEVBQUFqWSxFQUFBazhDLEVBQUE2TyxFQUFBeFEsRUFBQUUsR0FFQUYsSUFBQXRpQyxFQUFBNHlDLDJCQUNBdjZELEtBQUFxNkQsYUFBQW5QLEVBQUEzekMsRUFBQXM5QyxFQUFBbHRDLEVBQUFqWSxFQUFBdTZDLEVBQUFFLElBR0ErTixFQUFBdjRELFVBQUEwNkQsYUFBQSxTQUFBblAsRUFBQTN6QyxFQUFBczlDLEVBQUFsdEMsRUFBQWpZLEVBQUF1NkMsRUFBQUUsR0FDQTBLLElBR0E3MEQsS0FBQTA2RCx5QkFBQS95QyxFQUFBcFEsR0FDQTdILEVBQUEwRixRQUFBLFNBQUEyakQsR0FDQSxHQUFBQSxFQUFBNU8sYUFBQTRPLEVBQUE5TyxlQUFBLENBQ0EsSUFBQWw5QyxFQUEwQjQrQyxFQUFZb04sRUFBQXhNLGFBQUFYLFlBQ3RDamtDLEVBQUE0eUMsMkJBQ0F4QixFQUFBeE0sYUFBQUwsa0JBQUEzMEMsS0FDQSxLQUFBeEssR0FBQXdLLEVBQUFvMUMsUUFBQTUvQyxJQUNBLEtBQUFBLEdBQUF3SyxJQUFBczlDLEtBQ29CeEssRUFBeUIxaUMsRUFBQW94QyxFQUFBN08sZ0JBQzdDNk8sRUFBQUQsUUFBQXp0RCxtQkFBQXNjLFNBS0F1d0MsRUFBQXY0RCxVQUFBdzZELFdBQUEsU0FBQXh5QyxHQUNBLElBQUFnekMsRUFBQWh6QyxFQUNBZ3pDLEVBQUFKLDJCQUFBLEVBQ0EsSUFBQUssRUFBQUQsRUFBQUwsZ0JBS0EsT0FKQUssRUFBQUwsZ0JBQUEsV0FDQU0sRUFBQTE4RCxLQUFBOEIsTUFDQUEsS0FBQXU2RCwyQkFBQSxHQUVBSSxHQUVBekMsRUFBQXY0RCxVQUFBKzZELHlCQUFBLFNBQUEveUMsRUFBQWt6QyxHQUNBLElBQ0FwOEQsT0FBQUMsZUFBQWlwQixFQUFBLGlCQUNBM29CLE1BQUE2N0QsRUFDQTUxQyxjQUFBLElBR0EsTUFBQTNpQixHQUNBcUMsUUFBQUMsSUFBQSxnQ0FFQStpQixFQUFBbXpDLFlBQUFELEdBRUEzQyxFQTVSa0IsR0NqQ2xCLFNBQUE2QyxHQUFBcHlELEdBQ0EsT0FBVysvQyxFQUFBOW5ELEVBQUU2SyxNQUFBOUMsRUFBYysvQyxFQUFBOW5ELEVBQUUySCxTQUU3QixTQUFBeXlELEdBQUEzdEQsR0FDQSxPQUFBQSxFQUFBa0ssSUFFQSxTQUFBMGpELEdBQUEzNEQsSUFDQXFDLFFBQUFoRCxPQUFBZ0QsUUFBQUMsS0FBQXRDLElDNUJtQixXQUNuQixTQUFBNDRELEVBQUFDLEdBQ0FuN0QsS0FBQW03RCxjQUNBQSxFQUFBcFEsU0FDQS9xRCxLQUFBMnRELFVBQUF3TixFQUFBcFEsU0FHQS9xRCxLQUFBMnRELFVBQTZCbHZELE9BQUF1c0QsRUFBQSxNQUFBdnNELENBQU1pcUQsRUFBQTluRCxFQUFFNEgsU0FHckMweUQsRUFBQXY3RCxVQUFBb3JELFNBQUEsV0FDQSxJQUFBbm9ELEVBQUE1QyxLQUNBMnRELFVBRUEsT0FEQS9xRCxFQUFBbW1ELGVBQUEsWUFDQW5tRCxHQUVBczRELEVBQUF2N0QsVUFBQW9xRCxRQUFBLFdBQ0EsSUFBQXFSLEVBQUFwN0QsS0FBQStxRCxXQUNBamhELE9BQUEsU0FBQSthLEdBQW9DLE9BQUFBLEVBQUFoa0IsT0FBQSxJQUNwQzhJLElBQUEsU0FBQWtiLEdBQWlDLE9BQUFBLEVBQUEsS0FDakM3WixXQUNBcEksRUFBa0JuRSxPQUFBdXNELEVBQUEsTUFBQXZzRCxDQUFLMjhELEdBRXZCLE9BREF4NEQsRUFBQW1tRCxlQUFBLFlBQ0FubUQsR0FFQXM0RCxFQUFBdjdELFVBQUFzckQsT0FBQSxTQUFBQyxFQUFBajRDLEVBQUFrNEMsR0FDQSxJQUFBa1EsRUFBQXI3RCxLQUFBbTdELFlBQUFqUSxHQUNBdG9ELEVBQWtCbkUsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBSzQ4RCxHQUF1QjNTLEVBQUE5bkQsRUFBRTRILFNBRWhELE9BREE1RixFQUFBbW1ELGVBQUEsWUFDQW5tRCxHQUVBczRELEVBQUF2N0QsVUFBQWtyRCxPQUFBLFNBQUFDLEdBRUEsV0FBQW9RLEVBREFsN0QsS0FBQW03RCxZQUFBclEsU0FHQW9RLEVBQUF2N0QsVUFBQTB0RCxjQUFBLFNBQUFoOEMsRUFBQXNVLEdBQ0EsT0FBQXRVLEVBQUF3NUMsT0FBQSxPQUFBbGxDLElBRUF1MUMsRUFBQXY3RCxVQUFBMnRELFlBQUEsU0FBQUMsRUFBQTVuQyxHQUNBLE9BQWVsbkIsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBTWlxRCxFQUFBOW5ELEVBQUVnSSxlQUFBMmtELEdBQUE1akQsSUFBQSxTQUFBMEQsR0FDdkIsT0FBQUEsRUFBQU4sTUFBQSxJQUFBTSxFQUFBTixJQUFBdkYsUUF6Q0EsTUF5Q0FtZSxHQUNBdFksR0FHQUEsRUFBQU4sS0FBQSxPQUFBNFksRUFDQXRZLE9BN0NtQixHQ0VuQixTQUFBaXVELEdBQUFDLEdBQ0EsT0FKQSxTQUFBQSxHQUNBLHVCQUFBQSxLQUFBMTZELE9BQUEsRUFHQTI2RCxDQUFBRCxLQUFBLE1BQUFBLEVBQUEsVUFBQUEsRUFBQSxJQUVBLFNBQUFFLEdBQUE1OEMsR0FDQSxnQkFBQWplLEVBQUFQLEVBQUFqQyxHQUNBLElBQUFzOUQsT0FBQSxJQUFBOTZELEVBQ0ErNkQsT0FBQSxJQUFBdDdELEVBQ0F1N0QsT0FBQSxJQUFBeDlELEVBQ0EsT0FBQWs5RCxHQUFBMTZELEdBQ0ErNkQsR0FBQUMsRUFDdUJuOUQsT0FBQXFPLEVBQUEsRUFBQXJPLENBQUNvZ0IsRUFBQWplLEVBQUFQLEVBQUFqQyxHQUV4QnU5RCxFQUN1Qmw5RCxPQUFBcU8sRUFBQSxFQUFBck8sQ0FBQ29nQixFQUFBamUsRUFBQVAsR0FHRDVCLE9BQUFxTyxFQUFBLEVBQUFyTyxDQUFDb2dCLEVBQUFqZSxNQUd4Qmc3RCxFQUNtQm45RCxPQUFBcU8sRUFBQSxFQUFBck8sQ0FBQ29nQixFQUFBamUsRUFBQVAsRUFBQWpDLEdBRXBCdTlELEVBQ21CbDlELE9BQUFxTyxFQUFBLEVBQUFyTyxDQUFDb2dCLEVBQUFqZSxFQUFBUCxHQUVwQnE3RCxFQUNtQmo5RCxPQUFBcU8sRUFBQSxFQUFBck8sQ0FBQ29nQixFQUFBamUsR0FHRG5DLE9BQUFxTyxFQUFBLEVBQUFyTyxDQUFDb2dCLE9BSXBCLElBQUFnOUMsSUFDQSxJQUNBLFdBQ0EsY0FDQSxlQUNBLFVBQ0EsZUFDQSxnQkFDQSxtQkFDQSxTQUNBLFdBQ0EsZUFDQSxTQUNBLE9BQ0EsT0FDQSxVQUNBLFVBQ0EsZ0JBQ0Esc0JBQ0EsY0FDQSxtQkFDQSxvQkFDQSxvQkFDQSxpQkFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsaUJBQ0EsVUFDQSxVQUNBLGNBQ0EsZUFDQSxXQUNBLGVBQ0EscUJBQ0EsY0FDQSxTQUNBLGVBQ0EsU0FDQSxPQUNBLFdBQ0EsaUJBQ0EsZUFDQSxjQUNBLGNBQ0EsZ0JBQ0EsSUFDQSxRQUNBLFdBQ0EsUUFDQSxRQUNBLE9BQ0EsaUJBQ0EsU0FDQSxPQUNBLFdBQ0EsZUFDQSxRQUNBLE9BQ0EsVUFDQSxVQUNBLFdBQ0EsaUJBQ0EsT0FDQSxTQUNBLE1BQ0EsT0FDQSxRQUNBLFNBQ0EsU0FDQSxPQUNBLFdBQ0EsUUFDQSxPQUNBLFFBQ0EsTUFDQSxPQUNBLFNBRUFDLEdBQUFMLEdBQUEsT0FDQUksR0FBQXptRCxRQUFBLFNBQUFzZ0MsR0FDQW9tQixHQUFBcG1CLEdBQUErbEIsR0FBQS9sQixLQUVBLElBQUFxbUIsSUFDQSxJQUNBLE9BQ0EsVUFDQSxPQUNBLFVBQ0EsUUFDQSxRQUNBLElBQ0EsT0FDQSxNQUNBLE1BQ0EsYUFDQSxPQUNBLEtBQ0EsU0FDQSxTQUNBLFVBQ0EsT0FDQSxPQUNBLE1BQ0EsV0FDQSxLQUNBLE1BQ0EsVUFDQSxNQUNBLE1BQ0EsTUFDQSxLQUNBLEtBQ0EsS0FDQSxRQUNBLFdBQ0EsYUFDQSxTQUNBLFNBQ0EsT0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxPQUNBLFNBQ0EsU0FDQSxLQUNBLE9BQ0EsSUFDQSxTQUNBLE1BQ0EsUUFDQSxNQUNBLE1BQ0EsU0FDQSxRQUNBLFNBQ0EsS0FDQSxPQUNBLE9BQ0EsTUFDQSxPQUNBLE9BQ0EsT0FDQSxNQUNBLFdBQ0EsU0FDQSxLQUNBLFdBQ0EsU0FDQSxJQUNBLFFBQ0EsTUFDQSxXQUNBLElBQ0EsS0FDQSxLQUNBLE9BQ0EsSUFDQSxPQUNBLFNBQ0EsVUFDQSxTQUNBLFFBQ0EsU0FDQSxPQUNBLFNBQ0EsUUFDQSxNQUNBLFVBQ0EsTUFDQSxRQUNBLFFBQ0EsS0FDQSxXQUNBLFFBQ0EsS0FDQSxRQUNBLE9BQ0EsUUFDQSxLQUNBLElBQ0EsS0FDQSxTQUVBQyxJQUNBSCxpQkFDQUUsYUFDQUQsT0FDQVIsY0FDQUcsc0JBRUFNLEdBQUEzbUQsUUFBQSxTQUFBNVYsR0FDQXc4RCxHQUFBeDhELEdBQUFpOEQsR0FBQWo4RCxLQUVlLElBQUF5OEQsR0FBQSxHQ3BFRUEsR0FBRUgsSUFDSkcsR0FBRXI3RCxFQUNDcTdELEdBQUVDLEtBQ0NELEdBQUVFLFFBQ0xGLEdBQUVHLEtBQ0NILEdBQUVJLFFBQ0pKLEdBQUVLLE1BQ0ZMLEdBQUVNLE1BQ05OLEdBQUU1N0QsRUFDQzQ3RCxHQUFFeG9ELEtBQ0h3b0QsR0FBRU8sSUFDRlAsR0FBRVEsSUFDS1IsR0FBRVMsV0FDUlQsR0FBRW4vQyxLQUNKbS9DLEdBQUVVLEdBQ0VWLEdBQUVXLE9BQ0ZYLEdBQUVZLE9BQ0RaLEdBQUVhLFFBQ0xiLEdBQUVjLEtBQ0ZkLEdBQUVwNkIsS0FDSG82QixHQUFFZSxJQUNHZixHQUFFZ0IsU0FDUmhCLEdBQUVpQixHQUNEakIsR0FBRXJqQyxJQUNGcWpDLEdBQUVrQixJQUNGbEIsR0FBRW5zRCxJQUNGbXNELEdBQUVtQixJQUNIbkIsR0FBRW9CLEdBQ0ZwQixHQUFFcUIsR0FDRnJCLEdBQUVzQixHQUNDdEIsR0FBRXVCLE1BQ0N2QixHQUFFd0IsU0FDQXhCLEdBQUV5QixXQUNOekIsR0FBRTBCLE9BQ0YxQixHQUFFMkIsT0FDSjNCLEdBQUU5aUMsS0FDSjhpQyxHQUFFNEIsR0FDRjVCLEdBQUU2QixHQUNGN0IsR0FBRThCLEdBQ0Y5QixHQUFFK0IsR0FDRi9CLEdBQUVnQyxHQUNGaEMsR0FBRWlDLEdBQ0FqQyxHQUFFdnBELEtBQ0F1cEQsR0FBRTNrQyxPQUNGMmtDLEdBQUVrQyxPQUNObEMsR0FBRWorQyxHQUNBaStDLEdBQUU5ekMsS0FDTDh6QyxHQUFFbCtELEVBQ0drK0QsR0FBRW1DLE9BQ0xuQyxHQUFFb0MsSUFDQXBDLEdBQUV0ekQsTUFDSnN6RCxHQUFFdjVELElBQ0Z1NUQsR0FBRXFDLElBQ0NyQyxHQUFFc0MsT0FDSHRDLEdBQUV1QyxNQUNEdkMsR0FBRXdDLE9BQ054QyxHQUFFeUMsR0FDQXpDLEdBQUVobUQsS0FDRmdtRCxHQUFFM1QsS0FDSDJULEdBQUV0eUQsSUFDRHN5RCxHQUFFMEMsS0FDRjFDLEdBQUUyQyxLQUNGM0MsR0FBRTRDLEtBQ0g1QyxHQUFFNkMsSUFDRzdDLEdBQUU4QyxTQUNKOUMsR0FBRXg4RCxPQUNOdzhELEdBQUUrQyxHQUNJL0MsR0FBRWdELFNBQ0poRCxHQUFFMzZCLE9BQ1AyNkIsR0FBRXA4RCxFQUNFbzhELEdBQUVWLE1BQ0pVLEdBQUV2L0MsSUFDR3UvQyxHQUFFaUQsU0FDVGpELEdBQUVrRCxFQUNEbEQsR0FBRW1ELEdBQ0ZuRCxHQUFFb0QsR0FDQXBELEdBQUVxRCxLQUNMckQsR0FBRW44RCxFQUNDbThELEdBQUVzRCxLQUNBdEQsR0FBRTV6QyxPQUNENHpDLEdBQUV1RCxRQUNIdkQsR0FBRXBSLE9BQ0hvUixHQUFFd0QsTUFDRHhELEdBQUU1cUQsT0FDSjRxRCxHQUFFeUQsS0FDQXpELEdBQUUwRCxPQUNIMUQsR0FBRW5vRCxNQUNKbW9ELEdBQUUxQyxJQUNGMEMsR0FBRTJELElBQ0EzRCxHQUFFNEQsTUFDRjVELEdBQUU2RCxNQUNMN0QsR0FBRThELEdBQ0k5RCxHQUFFK0QsU0FDTC9ELEdBQUVnRSxNQUNMaEUsR0FBRWlFLEdBQ0NqRSxHQUFFa0UsTUFDRmxFLEdBQUVudEQsTUFDTG10RCxHQUFFbUUsR0FDSG5FLEdBQUVsN0QsRUFDRGs3RCxHQUFFb0UsR0FDQ3BFLEdBQUVxRSxNQ3BRZCxTQUFBalQsR0FBQWtULEVBQUE1NkMsR0FDUCxjQUFBQSxFQUNBNDZDLEVBRUFBLEVBQUF6MkQsT0FBQSxTQUFBNHJCLEdBQ0EsT0FBQXQxQixNQUFBMEksUUFBQTRzQixFQUFBdTJCLGFBYkEsU0FBQXVVLEVBQUFDLEdBQ0EsUUFBQTFpRSxFQUFBLEVBQW1CQSxFQUFBMGlFLEVBQUE1L0QsT0FBNEI5QyxJQUMvQyxHQUFBeWlFLEVBQUF6aUUsS0FBQTBpRSxFQUFBMWlFLEdBQ0EsU0FHQSxTQVFBMmlFLENBQUFockMsRUFBQXUyQixXQUFBc1UsRUFBQXRVLFdBQUFua0QsT0FBQTZkLEtBQ0tBLEdBRUUsU0FBQTJuQyxHQUFBcVQsRUFBQWg3QyxHQUNQLGNBQUFBLEVBQ0FnN0MsRUFFV2xpRSxPQUFBdXNELEVBQUEsTUFBQXZzRCxDQUFNaXFELEVBQUE5bkQsRUFBRWdJLGVBQUErM0QsR0FBQWgzRCxJQUFBLFNBQUFvdEIsR0FDbkIsdUJBQUFBLEdBQ29CbkIsSUFBQW1CLEVBQUFrMUIsWUFBQXRtQyxLQUVwQm9SLEVBQUFrMUIsV0FBQWwxQixFQUFBazFCLGVBQ0FsMUIsRUFBQWsxQixXQUFBdGQsUUFBQWhwQixHQUNBb1IsTUMzQkEsSUFBSTZwQyxHQUFjLFdBQ2xCLFNBQUFDLEVBQUFDLEVBQUFsVyxFQUFBcUIsUUFDQSxJQUFBQSxJQUFvQ0EsTUFDcENqc0QsS0FBQThnRSxTQUNBOWdFLEtBQUE0cUQsUUFDQTVxRCxLQUFBaXNELGFBQ0Fqc0QsS0FBQXF0RCxjQUE2QkEsR0FDN0JydEQsS0FBQXN0RCxZQUEyQkEsR0FjM0IsT0FaQXVULEVBQUFsaEUsVUFBQW1LLE9BQUEsU0FBQWdmLEVBQUFuRCxHQUVBLFdBQUFrN0MsRUFEQTdnRSxLQUFBOGdFLE9BQUFoM0QsT0FBQSxTQUFBaTNELEdBQW1FLE9BQUFqNEMsRUFBQWk0QyxFQUFBcnJDLFdBQ25FMTFCLEtBQUE0cUQsV0FBQXo5QyxJQUFBd1ksRUFBQTNsQixLQUFBaXNELFdBQUFqc0QsS0FBQWlzRCxXQUFBbmtELE9BQUE2ZCxLQUVBazdDLEVBQUFsaEUsVUFBQWtyRCxPQUFBLFNBQUFtVyxHQUNBLElBQUFDLEVBQUFELEVBQ0FoaEUsS0FBQThnRSxPQUFBaDNELE9BQUEsU0FBQW8zRCxHQUFrRCxPQUFBQSxFQUFBeHJDLFNBQUF3ckMsRUFBQXhyQyxRQUFBc3JDLGVBQ2xEaGhFLEtBQUE4Z0UsT0FDQWwrRCxFQUFrQm5FLE9BQUF1c0QsRUFBQSxNQUFBdnNELENBQUt3aUUsR0FFdkIsT0FEQXIrRCxFQUFBbW1ELGVBQUEvb0QsS0FBQTRxRCxNQUNBaG9ELEdBRUFpK0QsRUFyQmtCLFlDdUVYLFNBQUFNLEdBQUFDLEdBQ1AsT0FBVzFZLEVBQUE5bkQsRUFBRXZCLFFBQ2J3QyxNQUFBLFNBQUFzRyxHQUNBLElBQ0EsSUFBQWs1RCxFQUFBQyxHQUFBRixHQUNBcGhFLEtBQUEwMUIsUUFuRU8sU0FBQTZyQyxHQUNQLElBQUFDLEVBUkEsU0FBQUEsR0FLQSxPQUpBQSxFQUFBL2tDLGdCQUFBK2tDLEVBQUEva0Msa0JBQUEsRUFDQStrQyxFQUFBai9CLFVBQ0EsaUJBQUFpL0IsRUFBQWovQixVQUFBaS9CLEVBQUFqL0IsVUFBQSxFQUNBaS9CLEVBQUE3ckMsT0FBQTZyQyxFQUFBN3JDLFFBQUEsTUFDQTZyQyxFQUdBQyxDQUFBRixHQUNBLG9CQUFBQyxFQUFBNXJDLElBQ0EsVUFBQXp2QixNQUFBLDJEQUVBLElBQUF1N0QsR0FBQUYsRUFBQTdyQyxRQUFBLE9BQUFwWSxjQUVBbVksRUFBa0Jpc0MsR0FEbEIsV0FBQUQsRUFBQSxNQUFBQSxHQUM0QkYsRUFBQTVyQyxLQTJCNUIsR0ExQkEsbUJBQUFGLEVBQUE2TSxZQUNBN00sSUFBQTZNLFVBQUFpL0IsRUFBQWovQixZQUVBaS9CLEVBQUEvK0QsT0FDQWl6QixJQUFBanpCLEtBQUErK0QsRUFBQS8rRCxPQUVBKytELEVBQUEzb0MsT0FDQW5ELElBQUFtRCxLQUFBMm9DLEVBQUEzb0MsT0FFQTJvQyxFQUFBN25DLFNBQ0FqRSxJQUFBaUUsT0FBQTZuQyxFQUFBN25DLFNBRUE2bkMsRUFBQXZuQyxRQUNBdkUsSUFBQXVFLE1BQUF1bkMsRUFBQXZuQyxRQUVBdW5DLEVBQUEva0Msa0JBQ0EvRyxJQUFBK0csbUJBRUEra0MsRUFBQXRtQyxRQUVBeEYsR0FEQUEsSUFBQXAyQixJQUFBa2lFLEVBQUF0bUMsTUFBQTU3QixNQUNBc2lFLEtBQUFKLEVBQUF0bUMsTUFBQTBtQyxPQUVBLGlCQUFBSixFQUFBM25DLE1BQ0EsaUJBQUEybkMsRUFBQWpsQyxXQUNBN0csSUFBQWtFLEtBQUE0bkMsRUFBQTNuQyxLQUFBMm5DLEVBQUFqbEMsV0FFQWlsQyxFQUFBanFDLFFBQ0EsUUFBQWo0QixLQUFBa2lFLEVBQUFqcUMsUUFDQWlxQyxFQUFBanFDLFFBQUEzM0IsZUFBQU4sS0FDQW8yQixJQUFBZ0UsSUFBQXA2QixFQUFBa2lFLEVBQUFqcUMsUUFBQWo0QixLQUlBLEdBQUFraUUsRUFBQS9wQyxNQUNBLFFBQUFuNEIsS0FBQWtpRSxFQUFBL3BDLE1BQ0ErcEMsRUFBQS9wQyxNQUFBNzNCLGVBQUFOLEtBQ0FvMkIsSUFBQStCLE1BQUFuNEIsRUFBQWtpRSxFQUFBL3BDLE1BQUFuNEIsS0FJQSxHQUFBa2lFLEVBQUF0bkMsT0FDQSxRQUFBbjhCLEVBQUF5akUsRUFBQXRuQyxPQUFBcjVCLE9BQUEsRUFBa0Q5QyxHQUFBLEVBQVFBLElBQUEsQ0FDMUQsSUFBQTZDLEVBQUE0Z0UsRUFBQXRuQyxPQUFBbjhCLEdBQ0EyM0IsSUFBQXdFLE9BQUF0NUIsRUFBQXRDLEtBQUFzQyxFQUFBdXpDLEtBQUF2ekMsRUFBQWloRSxVQVNBLE9BTkFMLEVBQUF2cUMsZUFDQXZCLElBQUF1QixhQUFBdXFDLEVBQUF2cUMsZUFFQXVxQyxFQUFBamhELEtBQ0FtVixJQUFBblYsR0FBQWloRCxFQUFBamhELEtBRUFtVixFQU9Bb3NDLENBQUFULEdBQ0FBLEVBQUFuQyxXQUNBbC9ELEtBQUEwMUIsUUFBQTExQixLQUFBMDFCLFFBQUEzeEIsR0FBQSxvQkFBQXUwQixHQUNBQSxFQUFBNUMsUUFBQTJyQyxFQUNBbDVELEVBQUF6RyxLQUFBNDJCLE1BR0F0NEIsS0FBQTAxQixRQUFBeHdCLElBQUEsU0FBQTVDLEVBQUFnMkIsR0FDQWgyQixHQUNBQSxFQUFBMjFCLFdBQ0EzMUIsRUFBQTIxQixTQUFBdkMsUUFBQTJyQyxHQUVBbDVELEVBQUF4RyxNQUFBVyxLQUdBZzJCLEVBQUE1QyxRQUFBMnJDLEVBQ0FsNUQsRUFBQXpHLEtBQUE0MkIsR0FDQW53QixFQUFBdkcsY0FJQSxNQUFBVSxHQUNBNkYsRUFBQXhHLE1BQUFXLEtBR0FQLEtBQUEsV0FDQS9CLEtBQUEwMUIsU0FBQTExQixLQUFBMDFCLFFBQUEyTSxPQUNBcmlDLEtBQUEwMUIsUUFBQTJNLFdBZUEsU0FBQWkvQixHQUFBRixHQUNBLG9CQUFBQSxFQUNBLE9BQWdCeHJDLElBQUF3ckMsR0FFaEIsb0JBQUFBLEVBQ0EsT0FBQUEsRUFHQSxVQUFBajdELE1BQUEsd0dBSUEsU0FBQTQ3RCxHQUFBWCxHQUNBLElBQUFZLEVBQUFiLEdBQUFDLEdBQUFwMkQsV0FDQXcyRCxFQXhCQSxTQUFBSixHQUNBLElBQUFJLEVBQ0EsSUFDQUEsRUFBQUYsR0FBQUYsR0FFQSxNQUFBOStELEdBQ0FrL0QsR0FBc0I1ckMsSUFBQSxRQUFBcXNDLE9BQUEzL0QsR0FFdEIsT0FBQWsvRCxFQWdCQVUsQ0FBQWQsR0FhQSxPQVpBSSxFQUFBVyxNQUNBSCxFQUFBOTVELGFBQ0F4RyxLQUFBLGFBQ0FDLE1BQUEsYUFDQUMsU0FBQSxlQUdBb2dFLEVBQWdCdmpFLE9BQUF1c0QsRUFBQSxNQUFBdnNELENBQUt1akUsR0FDckJ2akUsT0FBQUMsZUFBQXNqRSxFQUFBLFdBQ0FoakUsTUFBQXdpRSxFQUNBcjhDLFVBQUEsSUFFQTY4QywwQkNsSklJLEdBQVUsU0FBQXhoRSxHQUFpQixnQkFBQVAsR0FDL0IsR0FBQU8sRUFBQXVYLEtBQUE5WCxFQUFBOFgsS0FDQSxTQUVBLEdBQUF2WCxFQUFBdVgsT0FBQTlYLEVBQUE4WCxNQUdBdlgsRUFBQTRMLFNBQUFuTSxFQUFBbU0sT0FBQSxDQUNBLGdCQUFBNUwsRUFBQTZCLE1BQUEsU0FBQXBDLEVBQUFvQyxLQUNBLFNBRUEsZ0JBQUFwQyxFQUFBb0MsTUFBQSxTQUFBN0IsRUFBQTZCLEtBQ0EsU0FJQSxXQUVBLFNBQUE0L0QsS0FDQSxJQUFBQyxLQUlBLElBQUFDLEVBQTJCQyxNQUMzQnRsQyxXQUFvQmtsQyxHQUNwQmhsQyxRQUFBLElBRUEsU0FBQXFsQyxFQUFBQyxHQUVBLE9BREFKLEVBQUFDLEVBQUFELEVBQUFJLEdBQ0FBLEVBRUEsU0FBQWhpRSxLQUNBLE9BQ0EyWCxlQUFBLFdBQ0EsT0FBQWlxRCxFQUFBN3RDLFNBRUFrdUMsUUFBQSxXQUNBLFdBQUFMLEVBQUF6aEUsUUFFQW9YLEtBQUEsV0FDQSxPQUFBcXFELEVBQUEsSUFFQS9wRCxLQUNBcXFELFVBdkJBLFdBQ0EsT0FBQU4sR0F1QkE1Z0UsS0FBQSxTQUFBOEssRUFBQTJMLEVBQUFuWixFQUFBZ0MsR0FFQSxZQURBLElBQUFBLElBQW1DQSxFQUFBTixHQUNuQytoRSxHQUNBaGdFLEtBQUEsT0FDQStKLFNBQ0EyTCxPQUNBblosUUFDQWdDLE9BR0FXLE1BQUEsU0FBQTZLLEVBQUEyTCxFQUFBeFcsR0FDQSxPQUFBOGdFLEdBQ0FoZ0UsS0FBQSxRQUNBK0osU0FDQTJMLE9BQ0F4VyxXQUdBQyxTQUFBLFNBQUE0SyxFQUFBMkwsR0FDQSxPQUFBc3FELEdBQ0FoZ0UsS0FBQSxXQUNBK0osU0FDQTJMLFlDbkRBLFNBQUEwcUQsR0FBQUMsR0FDQSxJQUFBM1EsRUFBQTJRLElBQUFSLEVBQUFuUSxFQUFBbVEsU0FBQXpxRCxFQUFBczZDLEVBQUF0NkMsWUFDQSxnQkFBQWtyRCxHQUNBLGdCQUFBdjJELEdBQ0EsSUFBQWpMLEdBQ0FNLE1BQUEsU0FBQXNHLEdBQ0EsSUFBQTY2RCxFQXBCQSxTQUFBVixFQUFBenFELEVBQUFrckQsRUFBQTU2RCxHQUNBLElBQUE4NkQsRUFBQSxXQUFtQyxPQUFBcHJELElBQUFrckQsR0FDbkMsT0FDQXJoRSxLQUFBLFNBQUExQyxHQUNBc2pFLEVBQUE1Z0UsS0FBQXlHLEVBQUE4NkQsSUFBQWprRSxJQUVBMkMsTUFBQSxTQUFBQSxHQUNBMmdFLEVBQUEzZ0UsTUFBQXdHLEVBQUE4NkQsSUFBQXRoRSxJQUVBQyxTQUFBLFdBQ0EwZ0UsRUFBQTFnRSxTQUFBdUcsRUFBQTg2RCxPQVVBQyxDQUFBWixFQUFBenFELEVBQUFrckQsRUFBQTU2RCxHQUNvQnVnRCxFQUFBOW5ELEVBQUVnSSxlQUFBNEQsR0FBQXRFLFlBQUE4NkQsSUFFdEJqaEUsS0FBQSxjQUVBLE9BQW1CdEQsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBTWlxRCxFQUFBOW5ELEVBQUV2QixPQUFBa0MsTUNKM0IsU0FBQTRoRSxHQUFBTCxHQUNBLElBQUEzUSxFQUFBMlEsSUFBQVIsRUFBQW5RLEVBQUFtUSxTQUFBenFELEVBQUFzNkMsRUFBQXQ2QyxZQUNBLGdCQUFBdXJELEdBQ0EsZ0JBQUE1MkQsR0FDQSxJQUFBNjJELEdBQXlCQyxlQUFBLE1BQ3pCQyxFQUFrQzdhLEVBQUE5bkQsRUFBRXZCLFFBQ3BDd0MsTUFBQSxTQUFBc0csR0FDQSxJQUFBcTdELEVBNUJBLFNBQUFsQixFQUFBenFELEVBQUF1ckQsRUFBQWo3RCxFQUFBazdELEdBQ0EsT0FDQTNoRSxLQUFBLFNBQUExQyxHQUNBLElBQUFza0UsRUFBQUQsRUFBQUMsZUFDQUcsRUFBQTVyRCxJQUFBdXJELEVBQ0FFLEdBQ0FHLEVBQUFILEVBQUFuckQsTUFDQWlyRCxJQUNBRSxFQUFBaHJELFdBQUEsR0FHQStxRCxFQUFBQyxlQUFBaEIsRUFBQTVnRSxLQUFBeUcsRUFBQXM3RCxFQUFBemtFLElBRUEyQyxNQUFBLFNBQUFWLEdBQ0FrSCxFQUFBeEcsTUFBQVYsSUFFQVcsU0FBQSxXQUNBdUcsRUFBQXZHLGFBV0E4aEUsQ0FBQXBCLEVBQUF6cUQsRUFBQXVyRCxFQUFBajdELEVBQUFrN0QsR0FDb0IzYSxFQUFBOW5ELEVBQUVnSSxlQUFBNEQsR0FBQXRFLFlBQUFzN0QsSUFHdEJ6aEUsS0FBQSxlQUVBLE9BQW1CdEQsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBSzhrRSxLQ2xDeEIsU0FBQUksR0FBQWIsR0FDQSxJQUFBM1EsRUFBQTJRLElBQUFSLEVBQUFuUSxFQUFBbVEsU0FBQXpxRCxFQUFBczZDLEVBQUF0NkMsWUFDQSxnQkFBQXpULEdBQ0EsSUFBQXcvRCxHQUFBLEVBQ0FDLEVBQUEsRUFDQSxTQUFBQyxFQUFBdDZDLEVBQUFyUixFQUFBeXFELEVBQUFtQixHQUNBLElBQUFILEVBQUEsQ0FHQSxJQUFBNWtFLEVBQUF3cUIsRUFBQXhxQixNQUFBLEVBQ0E0akUsRUFBQWxoRSxLQUFBOG5CLEVBQUFoZCxPQUFBcTNELEVBQUF6L0QsRUFBQXBGLEVBQUE4a0UsR0FDQUQsR0FBQXovRCxHQUVBLElBQUE3QyxHQUNBNEcsU0FBQSxLQUNBdEcsTUFBQSxTQUFBc0csR0FDQTVHLEVBQUE0RyxXQUNBLElBQUE2N0QsRUFBQW5zRCxJQUFBelQsRUFDQWsrRCxFQUFBNWdFLEtBQUF5RyxFQUFBNjdELEVBQUEsRUFBQUYsR0FDQUQsRUFBQUcsR0FFQWppRSxLQUFBLFdBQ0E2aEUsR0FBQSxFQUNBcmlFLEVBQUE0RyxTQUFBdkcsYUFHQSxPQUFlbkQsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBTWlxRCxFQUFBOW5ELEVBQUV2QixPQUFBa0MsS0NMdkIsU0FBQTBpRSxHQUFBbkIsR0FDQSxJQUFBM1EsRUFBQTJRLElBQUFSLEVBQUFuUSxFQUFBbVEsU0FBQXpxRCxFQUFBczZDLEVBQUF0NkMsWUFDQSxnQkFBQXpULEdBQ0EsZ0JBQUFvSSxHQUNBLElBQUE2MkQsR0FBeUJhLGVBQUFwd0MsS0FDekJxd0MsRUFBa0N6YixFQUFBOW5ELEVBQUV2QixRQUNwQ3dDLE1BQUEsU0FBQXNHLEdBQ0EsSUFBQWk4RCxFQTVCQSxTQUFBOUIsRUFBQXpxRCxFQUFBelQsRUFBQStELEVBQUFrN0QsR0FDQSxPQUNBM2hFLEtBQUEsU0FBQTFDLEdBQ0EsSUFBQWtsRSxFQUFBYixFQUFBYSxjQUNBL3JELEVBQUFOLElBQ0FNLEVBQUErckQsR0FDQTkvRCxJQUlBaytELEVBQUE1Z0UsS0FBQXlHLEVBQUFnUSxFQUFBblosR0FDQXFrRSxFQUFBYSxjQUFBL3JELElBRUF4VyxNQUFBLFNBQUFBLEdBQ0F3RyxFQUFBeEcsVUFFQUMsU0FBQSxXQUNBMGdFLEVBQUExZ0UsU0FBQXVHLEVBQUEwUCxPQVdBd3NELENBQUEvQixFQUFBenFELEVBQUF6VCxFQUFBK0QsRUFBQWs3RCxHQUNvQjNhLEVBQUE5bkQsRUFBRWdJLGVBQUE0RCxHQUFBdEUsWUFBQWs4RCxJQUV0QnJpRSxLQUFBLGVBRUEsT0FBbUJ0RCxPQUFBdXNELEVBQUEsTUFBQXZzRCxDQUFLMGxFLEtDakN4QixJQUFBRyxHQUFBLE9DQUEsU0FBQUMsR0FBQUMsRUFBQWxDLEVBQUF6cUQsR0FDQSxnQkFBQXJMLEdBQ0EsSUFBQTZFLEVBQUFtekQsSUFDQUwsRUFBOEJ6YixFQUFBOW5ELEVBQUV2QixRQUNoQ3dDLE1BQUEsU0FBQXNHLEdBQ0EsSUFBQXM4RCxFQUFBLEtBQ0FDLEdBQUEsRUFDQUMsRUFBNkJqYyxFQUFBOW5ELEVBQUVnSSxlQUFBeUksRUFBQXV6RCxtQkFDL0JDLEdBQ0FuakUsS0FBQSxTQUFBaW1CLEdBQ0ErOEMsSUFDQXY4RCxFQUFBekcsS0FBQStpRSxHQUNBQyxHQUFBLEtBSWdCaGMsRUFBQTluRCxFQUFFZ0ksZUFBQTRELEdBQUF0RSxhQUNsQnhHLEtBQUEsU0FBQWltQixHQUNBODhDLEVBQUE5OEMsRUFDQSs4QyxHQUFBLEdBRUEvaUUsTUFBQSxTQUFBVyxHQUNBNkYsRUFBQXhHLE1BQUFXLElBRUFWLFNBQUEsV0FDQStpRSxFQUFBdjhELGVBQUF5OEQsR0FDQTE4RCxFQUFBdkcsY0FHQStpRSxFQUFBejhELFlBQUEyOEQsSUFFQTlpRSxLQUFBLGVBRUEsT0FBZXRELE9BQUF1c0QsRUFBQSxNQUFBdnNELENBQUswbEUsbUNDbUNwQixTQUFBVyxHQUFBdlgsR0FDQSxJQUFBcDFDLEVBQUEsRUFDQTRzRCxLQUNBcHRELEVBQW9CMHFELEtBQ3BCLFNBQUF4cUQsSUFDQSxPQUFBTSxFQUVBLFNBQUFMLEVBQUFrdEQsR0FDQTdzRCxFQUFBNnNELEVBTUEsSUFBQTdTLEVBbkVBLFNBQUF4NkMsRUFBQW90RCxFQUFBbHRELEVBQUFDLEdBQ0EsSUFBQW10RCxHQUFBLEVBa0RBLE9BbENJanNELEdBVkosU0FBQWtzRCxFQUFBL3NELEdBQ0E4c0QsRUFDWWpzRCxHQUFxQmtzRCxJQUdqQ3B0RCxFQUFBSyxHQW5CQSxTQUFBOU8sR0FFQSxJQURBLElBQUE4N0QsS0FDQTk3RCxFQUFBeEksT0FBQSxHQUNBc2tFLEVBQUE3aEUsS0FBQStGLEVBQUE4OUIsT0FFQSxPQUFBZytCLEVBZUFDLENBQUFMLEdBQ0EzdkQsUUFBQSxTQUFBOEQsR0FBc0QsT0FBQUEsRUFBQWYsS0FDOUNhLEdBQXFCa3NELE1BbUM3QjNnRSxZQWhDQSxXQUNBLElBQUEwZ0UsRUFBQSxDQUdBLElBQUE5c0QsRUFBbUJrdEQsS0FFbkIsR0FEQXZ0RCxFQUFBSyxJQUNBUixFQUFBZ3JELFVBSUEsSUFEQSxJQUFBMkMsRUFBQTN0RCxFQUFBTSxPQUFBRSxLQUNBbXRELEVBQUFudEQsR0FBQSxDQUNBLElBQUFDLEVBQUFULEVBQUFVLGlCQUNBLElBQUFELEVBQUFFLFVBSUEsR0FIQUYsRUFBQXBYLEdBQ0FvWCxFQUFBcFgsRUFBQW9YLEVBQUFELEVBQUFSLEVBQUFZLElBQUFWLEdBRUEsU0FBQU8sRUFBQTNWLEtBQ0EyVixFQUFBNUwsT0FBQW5CLG1CQUFBK00sRUFBQXBaLFlBRUEsZ0JBQUFvWixFQUFBM1YsS0FDQTJWLEVBQUE1TCxPQUFBakIsNkJBRUEsY0FBQTZNLEVBQUEzVixLQUlBLFVBQUEwRCxNQUFBLHlCQUFBaVMsRUFBQTNWLE1BSEEyVixFQUFBNUwsT0FBQWxCLG9CQUFBOE0sRUFBQXpXLE9BTUEyakUsRUFBQTN0RCxFQUFBTSxRQUFBTixFQUFBTSxPQUFBRSxNQUFBMmIsT0FHQSxLQUNZeXhDLE1BakRaLFdBQTZCLE9BQUFOLEdBQUEsR0FpRGpCTyxPQWhEWixTQUFBcnRELEdBQ0FMLEVBQUFLLEdBQ0E4c0QsR0FBQSxJQThEQVEsQ0FBQTl0RCxFQUFBb3RELEVBQUFsdEQsRUFBQUMsR0FBQXl0RCxFQUFBcFQsRUFBQW9ULE1BQUFDLEVBQUFyVCxFQUFBcVQsT0FDQSxTQUFBMUMsSUFDQSxPQUFnQlIsU0FBQTNxRCxFQUFBWSxJQUFBVixlQUVoQixJQUFBMnNELEdBQ0FJLGdCRnRGQSxTQUFBYyxFQUFBN3RELEdBQ0Esa0JBQ0EsSUFBQTh0RCxHQUNBeHRELEtBQUEsRUFDQXl0RCxNQUFBLEdBQ0FDLGdCQUFBLEdBRUFqQyxHQUFBLEVBQ0FrQyxFQUEwQnBkLEVBQUE5bkQsRUFBRXZCLFFBQzVCd0MsTUFBQSxTQUFBc0csR0FDQXc5RCxFQUFBeHRELEtBQUFOLElBWUE2dEQsRUFYQSxTQUFBNXBELElBQ0EsSUFBQThuRCxFQUFBLENBR0EsSUFBQW1DLEVBQUFKLEVBQUF4dEQsS0FDQXd0RCxFQUFBeHRELEtBQUFOLElBQ0E4dEQsRUFBQUMsTUFBQUQsRUFBQXh0RCxLQUFBNHRELEVBQ0FKLEVBQUFFLGdCQUFBRixFQUFBQyxNQUFBdEIsR0FDQW44RCxFQUFBekcsS0FBQWlrRSxHQUNBRCxFQUFBNXBELE9BSUEvWixLQUFBLFdBQ0E2aEUsR0FBQSxLQUdBLE9BQWVubEUsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBS3FuRSxJRTBES0UsQ0FUekIsU0FBQTlzRCxHQUNBNnJELEVBQUF6aEUsS0FBQTRWLElBUTRDckIsR0FDNUNvdUQsTUFBZXBELEdBQVNDLEdBQ3hCb0QsU0FBa0IvQyxHQUFZTCxHQUM5QnI1RCxTQUFrQms2RCxHQUFZYixHQUM5QnFELFNBQWtCbEMsR0FBWW5CLEdBQzlCc0Qsa0JBQTJCN0IsR0FBcUIsV0FBYyxPQUFBQyxHQUFxQjdzRCxFQUFBWSxLQUNuRjh0RCxNQUFBeHVELEVBQ0F5dUQsV0FBQTN1RCxFQUFBWSxJQUNBZ3VELE9BQUFoQixFQUNBaUIsUUFBQWhCLEVBQ0FpQixjQUFBLFNBQUE3dUQsRUFBQUcsR0FFWXRaLE9BQUFpb0UsR0FBQSxFQUFBam9FLENBQVlrWixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUV4Qnd4QyxRQUFBZ2MsRUFDQXpDLGtCQUVBLE9BQUEwQiwrREMxR0EsU0FBQW1DLEdBQUEvZSxHQUNBLFlBQUFBLEVBQUFnZixPQUFBLEdBSUEsU0FBQUMsR0FBQXYyRCxFQUFBNEcsR0FDQSxRQUFBblosRUFBQW1aLEVBQUF3bEMsRUFBQTMrQyxFQUFBLEVBQUF5QixFQUFBOFEsRUFBQXpQLE9BQWlENjdDLEVBQUFsOUMsRUFBT3pCLEdBQUEsRUFBQTIrQyxHQUFBLEVBQ3hEcHNDLEVBQUF2UyxHQUFBdVMsRUFBQW9zQyxHQUdBcHNDLEVBQUE2MkIsTUEyRGUsSUFBQTIvQixHQXZEZixTQUFBcDVCLEdBQ0EsSUFBQWhsQyxFQUFBVSxVQUFBdkksT0FBQSxRQUFBc00sSUFBQS9ELFVBQUEsR0FBQUEsVUFBQSxNQUVBMjlELEVBQUFyNUIsS0FBQTF3QixNQUFBLFNBQ0FncUQsRUFBQXQrRCxLQUFBc1UsTUFBQSxTQUVBaXFELEVBQUF2NUIsR0FBQWk1QixHQUFBajVCLEdBQ0F3NUIsRUFBQXgrRCxHQUFBaStELEdBQUFqK0QsR0FDQXkrRCxFQUFBRixHQUFBQyxFQVdBLEdBVEF4NUIsR0FBQWk1QixHQUFBajVCLEdBRUFzNUIsRUFBQUQsRUFDR0EsRUFBQWxtRSxTQUVIbW1FLEVBQUE3L0IsTUFDQTYvQixJQUFBbC9ELE9BQUFpL0QsS0FHQUMsRUFBQW5tRSxPQUFBLFVBRUEsSUFBQXVtRSxPQUFBLEVBQ0EsR0FBQUosRUFBQW5tRSxPQUFBLENBQ0EsSUFBQXdKLEVBQUEyOEQsSUFBQW5tRSxPQUFBLEdBQ0F1bUUsRUFBQSxNQUFBLzhELEdBQUEsT0FBQUEsR0FBQSxLQUFBQSxPQUVBKzhELEdBQUEsRUFJQSxJQURBLElBQUE3akUsRUFBQSxFQUNBeEYsRUFBQWlwRSxFQUFBbm1FLE9BQWdDOUMsR0FBQSxFQUFRQSxJQUFBLENBQ3hDLElBQUEyVixFQUFBc3pELEVBQUFqcEUsR0FFQSxNQUFBMlYsRUFDQW16RCxHQUFBRyxFQUFBanBFLEdBQ0ssT0FBQTJWLEdBQ0xtekQsR0FBQUcsRUFBQWpwRSxHQUNBd0YsS0FDS0EsSUFDTHNqRSxHQUFBRyxFQUFBanBFLEdBQ0F3RixLQUlBLElBQUE0akUsRUFBQSxLQUF5QjVqRSxJQUFNQSxFQUMvQnlqRSxFQUFBcjRCLFFBQUEsT0FDR3c0QixHQUFBLEtBQUFILEVBQUEsSUFBQUEsRUFBQSxJQUFBTCxHQUFBSyxFQUFBLEtBQUFBLEVBQUFyNEIsUUFBQSxJQUVILElBQUFsNUIsRUFBQXV4RCxFQUFBejFELEtBQUEsS0FJQSxPQUZBNjFELEdBQUEsTUFBQTN4RCxFQUFBK3hCLFFBQUEsS0FBQS94QixHQUFBLEtBRUFBLEdDbEVBLG1CQUFBM1csZUFBQXdyQixTQXFDZSxJQ3JDUis4QyxHQUFBLFNBQUFsekIsR0FDUCxZQUFBQSxFQUFBeXlCLE9BQUEsR0FBQXp5QixFQUFBLElBQUFBLEdBT09tekIsR0FBQSxTQUFBbnpCLEVBQUFvekIsR0FDUCxXQUFBdDJDLE9BQUEsSUFBQXMyQyxFQUFBLHFCQUFBdHRELEtBQUFrNkIsSUFHT3F6QixHQUFBLFNBQUFyekIsRUFBQW96QixHQUNQLE9BQUFELEdBQUFuekIsRUFBQW96QixHQUFBcHpCLEVBQUEzTSxPQUFBKy9CLEVBQUExbUUsUUFBQXN6QyxHQUdPc3pCLEdBQUEsU0FBQXR6QixHQUNQLFlBQUFBLEVBQUF5eUIsT0FBQXp5QixFQUFBdHpDLE9BQUEsR0FBQXN6QyxFQUFBOTZCLE1BQUEsTUFBQTg2QixHQTJCT3V6QixHQUFBLFNBQUExeEMsR0FDUCxJQUFBNHhCLEVBQUE1eEIsRUFBQTR4QixTQUNBK2YsRUFBQTN4QyxFQUFBMnhDLE9BQ0FqaEMsRUFBQTFRLEVBQUEwUSxLQUdBeU4sRUFBQXlULEdBQUEsSUFNQSxPQUpBK2YsR0FBQSxNQUFBQSxJQUFBeHpCLEdBQUEsTUFBQXd6QixFQUFBZixPQUFBLEdBQUFlLEVBQUEsSUFBQUEsR0FFQWpoQyxHQUFBLE1BQUFBLElBQUF5TixHQUFBLE1BQUF6TixFQUFBa2dDLE9BQUEsR0FBQWxnQyxFQUFBLElBQUFBLEdBRUF5TixHQ3hEQXl6QixHQUFBbnBFLE9BQUE4YixRQUFBLFNBQUFuUCxHQUFtRCxRQUFBck4sRUFBQSxFQUFnQkEsRUFBQXFMLFVBQUF2SSxPQUFzQjlDLElBQUEsQ0FBTyxJQUFBc1QsRUFBQWpJLFVBQUFyTCxHQUEyQixRQUFBdUIsS0FBQStSLEVBQTBCNVMsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBbVQsRUFBQS9SLEtBQXlEOEwsRUFBQTlMLEdBQUErUixFQUFBL1IsSUFBaUMsT0FBQThMLEdBTXBPeThELEdBQWMsU0FBQTF6QixFQUFBa3ZCLEVBQUEvakUsRUFBQXdvRSxHQUN6QixJQUFBOXhDLE9BQUEsRUFDQSxpQkFBQW1lLEdBRUFuZSxFRFVPLFNBQUFtZSxHQUNQLElBQUF5VCxFQUFBelQsR0FBQSxJQUNBd3pCLEVBQUEsR0FDQWpoQyxFQUFBLEdBRUFxaEMsRUFBQW5nQixFQUFBcGdELFFBQUEsTUFDQSxJQUFBdWdFLElBQ0FyaEMsRUFBQWtoQixFQUFBcGdCLE9BQUF1Z0MsR0FDQW5nQixJQUFBcGdCLE9BQUEsRUFBQXVnQyxJQUdBLElBQUFDLEVBQUFwZ0IsRUFBQXBnRCxRQUFBLEtBTUEsT0FMQSxJQUFBd2dFLElBQ0FMLEVBQUEvZixFQUFBcGdCLE9BQUF3Z0MsR0FDQXBnQixJQUFBcGdCLE9BQUEsRUFBQXdnQyxLQUlBcGdCLFdBQ0ErZixPQUFBLE1BQUFBLEVBQUEsR0FBQUEsRUFDQWpoQyxLQUFBLE1BQUFBLEVBQUEsR0FBQUEsR0M5QmV1aEMsQ0FBUzl6QixJQUN4Qmt2QixjQUtBbDJELEtBRkE2b0IsRUFBQTR4QyxNQUEwQnp6QixJQUUxQnlULFdBQUE1eEIsRUFBQTR4QixTQUFBLElBRUE1eEIsRUFBQTJ4QyxPQUNBLE1BQUEzeEMsRUFBQTJ4QyxPQUFBZixPQUFBLEtBQUE1d0MsRUFBQTJ4QyxPQUFBLElBQUEzeEMsRUFBQTJ4QyxRQUVBM3hDLEVBQUEyeEMsT0FBQSxHQUdBM3hDLEVBQUEwUSxLQUNBLE1BQUExUSxFQUFBMFEsS0FBQWtnQyxPQUFBLEtBQUE1d0MsRUFBQTBRLEtBQUEsSUFBQTFRLEVBQUEwUSxNQUVBMVEsRUFBQTBRLEtBQUEsUUFHQXY1QixJQUFBazJELFFBQUFsMkQsSUFBQTZvQixFQUFBcXRDLFFBQUFydEMsRUFBQXF0QyxVQUdBLElBQ0FydEMsRUFBQTR4QixTQUFBdDdCLFVBQUEwSixFQUFBNHhCLFVBQ0csTUFBQTNtRCxHQUNILE1BQUFBLGFBQUFteUIsU0FDQSxJQUFBQSxTQUFBLGFBQUE0QyxFQUFBNHhCLFNBQUEsaUZBRUEzbUQsRUFvQkEsT0FoQkEzQixJQUFBMDJCLEVBQUExMkIsT0FFQXdvRSxFQUVBOXhDLEVBQUE0eEIsU0FFSyxNQUFBNXhCLEVBQUE0eEIsU0FBQWdmLE9BQUEsS0FDTDV3QyxFQUFBNHhCLFNBQTBCa2YsR0FBZTl3QyxFQUFBNHhCLFNBQUFrZ0IsRUFBQWxnQixXQUZ6QzV4QixFQUFBNHhCLFNBQUFrZ0IsRUFBQWxnQixTQU1BNXhCLEVBQUE0eEIsV0FDQTV4QixFQUFBNHhCLFNBQUEsS0FJQTV4QixHQ2lCZWt5QyxHQTFFWSxXQUMzQixJQUFBQyxFQUFBLEtBb0NBejRELEtBNkJBLE9BQ0EwNEQsVUFoRUEsU0FBQUMsR0FLQSxPQUpJQyxLQUFPLE1BQUFILEVBQUEsZ0RBRVhBLEVBQUFFLEVBRUEsV0FDQUYsSUFBQUUsSUFBQUYsRUFBQSxRQTJEQUksb0JBdkRBLFNBQUF2eUMsRUFBQXd5QyxFQUFBQyxFQUFBdnZELEdBSUEsU0FBQWl2RCxFQUFBLENBQ0EsSUFBQTF5RCxFQUFBLG1CQUFBMHlELElBQUFueUMsRUFBQXd5QyxHQUFBTCxFQUVBLGlCQUFBMXlELEVBQ0EsbUJBQUFnekQsRUFDQUEsRUFBQWh6RCxFQUFBeUQsSUFFVW92RCxNQUFPLHFGQUVqQnB2RCxHQUFBLElBSUFBLEdBQUEsSUFBQXpELFFBR0F5RCxHQUFBLElBb0NBd3ZELGVBOUJBLFNBQUE1MkQsR0FDQSxJQUFBNjJELEdBQUEsRUFFQXhnRSxFQUFBLFdBQ0F3Z0UsR0FBQTcyRCxFQUFBakQsV0FBQTFCLEVBQUEvRCxZQUtBLE9BRkFzRyxFQUFBcE0sS0FBQTZFLEdBRUEsV0FDQXdnRSxHQUFBLEVBQ0FqNUQsSUFBQTVGLE9BQUEsU0FBQTBHLEdBQ0EsT0FBQUEsSUFBQXJJLE1BbUJBeWdFLGdCQWRBLFdBQ0EsUUFBQUMsRUFBQXovRCxVQUFBdkksT0FBQStOLEVBQUF4TyxNQUFBeW9FLEdBQUFDLEVBQUEsRUFBbUVBLEVBQUFELEVBQWFDLElBQ2hGbDZELEVBQUFrNkQsR0FBQTEvRCxVQUFBMC9ELEdBR0FwNUQsRUFBQTBGLFFBQUEsU0FBQWpOLEdBQ0EsT0FBQUEsRUFBQTBHLFdBQUExQixFQUFBeUIsUUNoRU9tNkQsS0FBQSxvQkFBQTU4RCxnQkFBQThGLFdBQUE5RixPQUFBOEYsU0FBQTJDLGVBRUFxSSxHQUFBLFNBQUFxQixFQUFBcUosRUFBQXhmLEdBQ1AsT0FBQW1XLEVBQUFyQixpQkFBQXFCLEVBQUFyQixpQkFBQTBLLEVBQUF4ZixHQUFBLEdBQUFtVyxFQUFBc0osWUFBQSxLQUFBRCxFQUFBeGYsSUFHTzY0QixHQUFBLFNBQUExaUIsRUFBQXFKLEVBQUF4ZixHQUNQLE9BQUFtVyxFQUFBMGlCLG9CQUFBMWlCLEVBQUEwaUIsb0JBQUFyWixFQUFBeGYsR0FBQSxHQUFBbVcsRUFBQTBxRCxZQUFBLEtBQUFyaEQsRUFBQXhmLElBR084Z0UsR0FBQSxTQUFBN25ELEVBQUFsSSxHQUNQLE9BQUFBLEVBQUEvTSxPQUFBKzhELFFBQUE5bkQsS0NYSStuRCxHQUFPLG1CQUFBcnFFLFFBQUEsaUJBQUFBLE9BQUF3ckIsU0FBQSxTQUFBaFYsR0FBeUYsY0FBQUEsR0FBcUIsU0FBQUEsR0FBbUIsT0FBQUEsR0FBQSxtQkFBQXhXLFFBQUF3VyxFQUFBL1UsY0FBQXpCLFFBQUF3VyxJQUFBeFcsT0FBQWEsVUFBQSxnQkFBQTJWLEdBRXhJOHpELEdBQVEzcUUsT0FBQThiLFFBQUEsU0FBQW5QLEdBQXVDLFFBQUFyTixFQUFBLEVBQWdCQSxFQUFBcUwsVUFBQXZJLE9BQXNCOUMsSUFBQSxDQUFPLElBQUFzVCxFQUFBakksVUFBQXJMLEdBQTJCLFFBQUF1QixLQUFBK1IsRUFBMEI1UyxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUFtVCxFQUFBL1IsS0FBeUQ4TCxFQUFBOUwsR0FBQStSLEVBQUEvUixJQUFpQyxPQUFBOEwsR0FZL09pK0QsR0FBQSxXQUNBLElBQ0EsT0FBQWw5RCxPQUFBbTlELFFBQUFqRyxVQUNHLE1BQUFwaUUsR0FHSCxXQTZRZXNvRSxHQXJRUyxXQUN4QixJQUFBcnVELEVBQUE5UixVQUFBdkksT0FBQSxRQUFBc00sSUFBQS9ELFVBQUEsR0FBQUEsVUFBQSxNQUVFb2dFLEtBQVVULEdBQVMsK0JBRXJCLElBQUFVLEVBQUF0OUQsT0FBQW05RCxRQUNBSSxFRGJPLFdBQ1AsSUFBQUMsRUFBQXg5RCxPQUFBeTlELFVBQUFDLFVBRUEsWUFBQUYsRUFBQW5pRSxRQUFBLG9CQUFBbWlFLEVBQUFuaUUsUUFBQSxxQkFBQW1pRSxFQUFBbmlFLFFBQUEsdUJBQUFtaUUsRUFBQW5pRSxRQUFBLGdCQUFBbWlFLEVBQUFuaUUsUUFBQSxtQkFFQTJFLE9BQUFtOUQsU0FBQSxjQUFBbjlELE9BQUFtOUQsUUNRc0JRLEdBQ3RCQyxLRERBLElBQUE1OUQsT0FBQXk5RCxVQUFBQyxVQUFBcmlFLFFBQUEsWUNHQXdpRSxFQUFBOXVELEVBQUErdUQsYUFDQUEsT0FBQTk4RCxJQUFBNjhELEtBQ0FFLEVBQUFodkQsRUFBQXV0RCxvQkFDQUEsT0FBQXQ3RCxJQUFBKzhELEVBQWtFakIsR0FBZWlCLEVBQ2pGQyxFQUFBanZELEVBQUFrdkQsVUFDQUEsT0FBQWo5RCxJQUFBZzlELEVBQUEsRUFBQUEsRUFFQUUsRUFBQW52RCxFQUFBbXZELFNBQWtDNUMsR0FBbUJKLEdBQWVuc0QsRUFBQW12RCxXQUFBLEdBRXBFQyxFQUFBLFNBQUFDLEdBQ0EsSUFBQXR0QyxFQUFBc3RDLE1BQ0FqckUsRUFBQTI5QixFQUFBMzlCLElBQ0ErakUsRUFBQXBtQyxFQUFBb21DLE1BRUFtSCxFQUFBcitELE9BQUE2cEIsU0FNQW1lLEVBTEFxMkIsRUFBQTVpQixTQUNBNGlCLEVBQUE3QyxPQUNBNkMsRUFBQTlqQyxLQVNBLE9BSkk0aEMsTUFBTytCLEdBQWMvQyxHQUFXbnpCLEVBQUFrMkIsR0FBQSxrSEFBQWwyQixFQUFBLG9CQUFBazJCLEVBQUEsTUFFcENBLElBQUFsMkIsRUFBeUJxekIsR0FBYXJ6QixFQUFBazJCLElBRTNCeEMsR0FBYzF6QixFQUFBa3ZCLEVBQUEvakUsSUFHekJtckUsRUFBQSxXQUNBLE9BQUFyeEQsS0FBQXFPLFNBQUFsWCxTQUFBLElBQUFpM0IsT0FBQSxFQUFBNGlDLElBR0FNLEVBQTBCeEMsS0FFMUJ5QyxFQUFBLFNBQUFDLEdBQ0l4QixHQUFRRSxFQUFBc0IsR0FFWnRCLEVBQUF6b0UsT0FBQTRvRSxFQUFBNW9FLE9BRUE2cEUsRUFBQTlCLGdCQUFBVSxFQUFBdHpDLFNBQUFzekMsRUFBQWQsU0FHQXFDLEVBQUEsU0FBQWxqRCxJRC9CTyxTQUFBQSxHQUNQLFlBQUF4YSxJQUFBd2EsRUFBQTA3QyxRQUFBLElBQUF1RyxVQUFBQyxVQUFBcmlFLFFBQUEsVUNnQ1FzakUsQ0FBeUJuakQsSUFFakNvakQsRUFBQVQsRUFBQTNpRCxFQUFBMDdDLFNBR0EySCxFQUFBLFdBQ0FELEVBQUFULEVBQUFqQixRQUdBNEIsR0FBQSxFQUVBRixFQUFBLFNBQUEvMEMsR0FDQWkxQyxHQUNBQSxHQUFBLEVBQ0FOLEtBSUFELEVBQUFuQyxvQkFBQXZ5QyxFQUZBLE1BRUF5eUMsRUFBQSxTQUFBbG9ELEdBQ0FBLEVBQ0FvcUQsR0FBb0JuQyxPQUpwQixNQUlvQnh5QyxhQUVwQmsxQyxFQUFBbDFDLE1BTUFrMUMsRUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUE5QixFQUFBdHpDLFNBTUFxMUMsRUFBQUMsRUFBQTlqRSxRQUFBNGpFLEVBQUE5ckUsTUFFQSxJQUFBK3JFLE1BQUEsR0FFQSxJQUFBbnhCLEVBQUFveEIsRUFBQTlqRSxRQUFBMmpFLEVBQUE3ckUsTUFFQSxJQUFBNDZDLE1BQUEsR0FFQSxJQUFBMHJCLEVBQUF5RixFQUFBbnhCLEVBRUEwckIsSUFDQXFGLEdBQUEsRUFDQU0sRUFBQTNGLEtBSUE0RixFQUFBbEIsRUFBQWpCLE1BQ0FpQyxHQUFBRSxFQUFBbHNFLEtBSUFtc0UsRUFBQSxTQUFBejFDLEdBQ0EsT0FBQXEwQyxFQUFzQjNDLEdBQVUxeEMsSUF5RWhDdTFDLEVBQUEsU0FBQS9yRSxHQUNBaXFFLEVBQUE4QixHQUFBL3JFLElBV0Frc0UsRUFBQSxFQUVBQyxFQUFBLFNBQUEvRixHQUdBLEtBRkE4RixHQUFBOUYsSUFHTTNvRCxHQUFnQjlRLE9BM050QixXQTJOc0IwK0QsR0FFdEJkLEdBQW1DOXNELEdBQWdCOVEsT0E1Tm5ELGFBNE5tRDYrRCxJQUM5QyxJQUFBVSxJQUNDMXFDLEdBQW1CNzBCLE9BL056QixXQStOeUIwK0QsR0FFekJkLEdBQW1DL29DLEdBQW1CNzBCLE9BaE90RCxhQWdPc0Q2K0QsS0FJdERZLEdBQUEsRUFnQ0F0QyxHQUNBem9FLE9BQUE0b0UsRUFBQTVvRSxPQUNBMm5FLE9BQUEsTUFDQXh5QyxTQUFBdzFDLEVBQ0FDLGFBQ0Fub0UsS0F2SUEsU0FBQTZ3QyxFQUFBa3ZCLEdBQ0lpRixPQUE4RCxpQkFBdkQsSUFBQW4wQixFQUFBLFlBQWdEZzFCLEdBQU9oMUIsVUFBQWhuQyxJQUFBZ25DLEVBQUFrdkIsWUFBQWwyRCxJQUFBazJELEdBQUEsaUpBRWxFLElBQ0FydEMsRUFBbUI2eEMsR0FBYzF6QixFQUFBa3ZCLEVBQUFvSCxJQUFBbkIsRUFBQXR6QyxVQUVqQzAwQyxFQUFBbkMsb0JBQUF2eUMsRUFIQSxPQUdBeXlDLEVBQUEsU0FBQWxvRCxHQUNBLEdBQUFBLEVBQUEsQ0FFQSxJQUFBL0osRUFBQWkxRCxFQUFBejFDLEdBQ0ExMkIsRUFBQTAyQixFQUFBMTJCLElBQ0ErakUsRUFBQXJ0QyxFQUFBcXRDLE1BR0EsR0FBQXFHLEVBR0EsR0FGQUQsRUFBQW9DLFdBQWlDdnNFLE1BQUErakUsU0FBeUIsS0FBQTdzRCxHQUUxRHl6RCxFQUNBOTlELE9BQUE2cEIsU0FBQXhmLFdBQ1MsQ0FDVCxJQUFBczFELEVBQUFSLEVBQUE5akUsUUFBQThoRSxFQUFBdHpDLFNBQUExMkIsS0FDQXlzRSxFQUFBVCxFQUFBanlELE1BQUEsT0FBQXl5RCxFQUFBLEVBQUFBLEVBQUEsR0FFQUMsRUFBQXpvRSxLQUFBMHlCLEVBQUExMkIsS0FDQWdzRSxFQUFBUyxFQUVBcEIsR0FBb0JuQyxPQXZCcEIsT0F1Qm9CeHlDLGtCQUdac3lDLFVBQU9uN0QsSUFBQWsyRCxFQUFBLG1GQUVmbDNELE9BQUE2cEIsU0FBQXhmLFdBeUdBNUwsUUFwR0EsU0FBQXVwQyxFQUFBa3ZCLEdBQ0lpRixPQUE4RCxpQkFBdkQsSUFBQW4wQixFQUFBLFlBQWdEZzFCLEdBQU9oMUIsVUFBQWhuQyxJQUFBZ25DLEVBQUFrdkIsWUFBQWwyRCxJQUFBazJELEdBQUEsb0pBRWxFLElBQ0FydEMsRUFBbUI2eEMsR0FBYzF6QixFQUFBa3ZCLEVBQUFvSCxJQUFBbkIsRUFBQXR6QyxVQUVqQzAwQyxFQUFBbkMsb0JBQUF2eUMsRUFIQSxVQUdBeXlDLEVBQUEsU0FBQWxvRCxHQUNBLEdBQUFBLEVBQUEsQ0FFQSxJQUFBL0osRUFBQWkxRCxFQUFBejFDLEdBQ0ExMkIsRUFBQTAyQixFQUFBMTJCLElBQ0ErakUsRUFBQXJ0QyxFQUFBcXRDLE1BR0EsR0FBQXFHLEVBR0EsR0FGQUQsRUFBQXVDLGNBQW9DMXNFLE1BQUErakUsU0FBeUIsS0FBQTdzRCxHQUU3RHl6RCxFQUNBOTlELE9BQUE2cEIsU0FBQXByQixRQUFBNEwsT0FDUyxDQUNULElBQUFzMUQsRUFBQVIsRUFBQTlqRSxRQUFBOGhFLEVBQUF0ekMsU0FBQTEyQixNQUVBLElBQUF3c0UsSUFBQVIsRUFBQVEsR0FBQTkxQyxFQUFBMTJCLEtBRUFxckUsR0FBb0JuQyxPQXJCcEIsVUFxQm9CeHlDLGtCQUdac3lDLFVBQU9uN0QsSUFBQWsyRCxFQUFBLHNGQUVmbDNELE9BQUE2cEIsU0FBQXByQixRQUFBNEwsT0F3RUErMEQsS0FDQVUsT0FoRUEsV0FDQSxPQUFBVixHQUFBLElBZ0VBVyxVQTdEQSxXQUNBLE9BQUFYLEVBQUEsSUE2REFyb0QsTUF4Q0EsV0FDQSxJQUFBaWxELEVBQUEvK0QsVUFBQXZJLE9BQUEsUUFBQXNNLElBQUEvRCxVQUFBLElBQUFBLFVBQUEsR0FFQStpRSxFQUFBekIsRUFBQXRDLFVBQUFELEdBT0EsT0FMQXlELElBQ0FELEVBQUEsR0FDQUMsR0FBQSxHQUdBLFdBTUEsT0FMQUEsSUFDQUEsR0FBQSxFQUNBRCxHQUFBLElBR0FRLE1BeUJBQyxPQXJCQSxTQUFBamtFLEdBQ0EsSUFBQWtrRSxFQUFBM0IsRUFBQWhDLGVBQUF2Z0UsR0FHQSxPQUZBd2pFLEVBQUEsR0FFQSxXQUNBQSxHQUFBLEdBQ0FVLE9Ba0JBLE9BQUEvQyxHQzlSWTdxRSxPQUFBOGIsT0NBRCxtQkFBQXpiLGVBQUF3ckIsU0FFQzdyQixPQUFBOGIsT0NETCxTQUFBK3hELEdBQUFoRCxFQUFBaUQsR0FDUCxJQUFBQyxFQUFtQjlqQixFQUFBOW5ELEVBQUUwSCxtQkFBQWdDLFVBQUFnL0QsRUFBQXR6QyxVQUNyQjkzQixFQVdBLFNBQUFvckUsR0FDQSxnQkFBQTNnRSxHQUNBLFNBQUFBLEVBQUFsRyxNQUNBNm1FLEVBQUFobUUsS0FBQXFGLEVBQUFpL0MsU0FBQWovQyxFQUFBMDZELE9BRUEsWUFBQTE2RCxFQUFBbEcsTUFDQTZtRSxFQUFBMStELFFBQUFqQyxFQUFBaS9DLFNBQUFqL0MsRUFBQTA2RCxPQUVBLE9BQUExNkQsRUFBQWxHLE1BQ0E2bUUsRUFBQWlDLEdBQUE1aUUsRUFBQXdCLFFBRUEsV0FBQXhCLEVBQUFsRyxNQUNBNm1FLEVBQUEyQyxTQUVBLGNBQUF0akUsRUFBQWxHLE1BQ0E2bUUsRUFBQTRDLGFBMUJBTyxDQUFBbkQsR0FDQStDLEVBQUEvQyxFQUFBOEMsT0FBQSxTQUFBTSxHQUNBRixFQUFBcHJFLEdBQUFzckUsS0FFQW5ULEVBQUFnVCxFQUFBenBFLFVBMEJBLFNBQUE1RSxFQUFBbXVFLEdBQ0EsT0FDQTNxRSxLQUFBLFNBQUFpSCxHQUVBekssRUFEQSxpQkFBQXlLLEdBQ3NCbEcsS0FBQSxPQUFBbWxELFNBQUFqL0MsR0FHdEJBLElBR0FoSCxNQUFBLFNBQUFXLEdBQ0ErcEUsS0FFQXpxRSxTQUFBLFdBQ0FzQyxXQUFBbW9FLEtBeENBTSxDQUFBenVFLEVBQUFtdUUsSUFLQSxPQUpBRyxFQUFBampCLFFBQUEsV0FDQWdRLEVBQUFwM0QsY0FDQWtxRSxLQUVBRyxFQ1hBLG9CQUFBdjZELG1CQUFBMjZELHFDQ09JQyxHQUFJLFNBQUFqcEUsR0FBaUIsT0FGekIsU0FBQUEsR0FBMkIsdUJBQUFBLEVBRUZvMkIsQ0FBQXAyQixJQUp6QixTQUFBQSxHQUEyQix1QkFBQUEsRUFJRm13QixDQUFBbndCLElBRXJCa3BFLEdBQUssU0FBQWxwRSxHQUFpQixPQUFBeEQsTUFBQTBJLFFBQUFsRixJQUV0Qm1wRSxHQUFNLFNBQUFucEUsR0FBaUIsdUJBQUFBLEdBQUEsT0FBQUEsR0FNM0JvcEUsSUFBbUJsUixJQUFBLEVBQUFtUixPQUFBLEVBQUFDLFFBQUEsRUFBQTExQyxLQUFBLEVBQUEyMUMsUUFBQSxFQUNuQkMsU0FBQSxFQUFBQyxLQUFBLEVBQUE1Z0UsRUFBQSxFQUFBMG5DLEtBQUEsRUFBQWxuQyxLQUFBLEdBS0lxZ0UsR0FBTSxXQUVWLElBREEsSUFBQUMsS0FBQWovRCxFQUFBbEYsVUFBQXZJLE9BQ0F5TixLQUFBaS9ELEVBQUFqL0QsR0FBQWxGLFVBQUFrRixHQUVBLE9BQVNrL0QsR0FBQTVzRSxFQUFPaU8sV0FBQSxPQUFBL0csT0FBQXlsRSxLQUdaRSxHQUFNLFdBRVYsSUFEQSxJQUFBRixLQUFBai9ELEVBQUFsRixVQUFBdkksT0FDQXlOLEtBQUFpL0QsRUFBQWovRCxHQUFBbEYsVUFBQWtGLEdBRUEsT0FBU2svRCxHQUFBNXNFLEVBQU9pTyxXQUFBLE9BQUEvRyxPQUFBeWxFLEtBR2hCRyxHQUFBLFNBQUE3b0QsRUFBQS9TLEVBQUF2SCxHQUVBLElBREEsSUFBQWtMLEVBQUFsTCxFQUNBeE0sRUFBQSxFQUFpQkEsRUFBQThtQixFQUFBaGtCLE9BQWdCOUMsSUFBQSxDQUNqQyxJQUFBaUIsRUFBQTZsQixFQUFBOW1CLEdBRUEwWCxFQURRcTNELEdBQUs5dEUsR0FDYjB1RSxHQUFBMXVFLEVBQUE4UyxFQUFBMkQsR0FFQTNELEVBQUEyRCxFQUFBelcsR0FHQSxPQUFBeVcsR0FHQWs0RCxHQUFBLFNBQUFyNEQsRUFBQXhELEdBQW9DLE9BQUFyVCxPQUFBMFcsS0FBQUcsR0FBQTNMLElBQ3BDLFNBQUFySyxHQUFrQixPQUFBd1MsRUFBQXhTLEVBQUFnVyxFQUFBaFcsTUFDbEJvZ0MsT0FDQSxTQUFBMzVCLEVBQUF5c0QsR0FBd0IsT0FBUThhLEdBQU12bkUsRUFBQXlzRCxTQWtCdENvYixHQUFBLFNBQUF0NEQsR0FBa0MsT0FBQXE0RCxHQUFBcjRELEVBQ2xDLFNBQUFvcEMsRUFBQXh4QyxHQUF3QixPQUFTNi9ELEdBQU03L0QsR0FBb0J5Z0UsR0FDM0RDLEdBQUExZ0UsR0FDQSxTQUFBNU4sRUFBQTRHLEdBQXlCLE9BQUFvUCxNQUFtQm9wQyxFQUFBLElBQUFwL0MsR0FBQTRHLEVBQUFvUCxFQUM1QyxJQUFBQSxNQUh1Q0EsTUFBb0JvcEMsR0FBQXh4QyxFQUFBb0ksR0FLM0QsSUFBQUEsS0FHQXU0RCxHQUFBLFNBQUF2dUUsRUFBQWdXLEdBQWdDLE9BQUFxNEQsR0FBQXI0RCxFQUNoQyxTQUFBb3BDLEVBQUF4eEMsR0FBd0IsT0FBQXd4QyxJQUFBcC9DLElBQUFnVyxNQUFpQ29wQyxHQUFBeHhDLEVBQUFvSSxNQUN6RCxJQUFBQSxLQWNBdzRELEdBQUEsU0FBQUMsR0FBdUMsT0E1RWhDLFNBQUFucUUsR0FBaUIsT0FBQUEsRUFBQW1KLE9BQUFpZ0UsR0E0RXdCZ0IsQ0FBR0QsR0FDakROLEdBQU1NLEdBQ0g3Z0UsS0FBQTJnRSxHQUFBLFFBQXFCUCxHQUFNUyxFQUFBN2dFLE1BQ3pCOU4sR0FBQSw2QkFBQXlWLE1BQUFnNUQsR0FBQSxZQUE0RFAsR0FBTVMsRUFBQTdnRSxLQUFBZ08sT0FDaEVOLE1BQUFtekQsRUFBQTdnRSxLQUFBZ08sTUFBQTZ5RCxFQUFBN2dFLEtBQUFnTyxNQUFBODFDLGVBQUE3akQsVUFHSkgsU0F0R0wsU0FBQXBKLEdBQStCLFlBQUF1SixJQUFBdkosRUFzRzFCcXFFLENBQUFGLEVBQUEvZ0UsZUFBQUcsRUFDTDRnRSxFQUFBL2dFLFNBQUFyRCxJQUFBLFNBQUErMkIsR0FBOEMsT0FBQW90QyxHQUFBcHRDLE9BUktxdEMsR0FpQ25ERyxJQUFtQkMsSUFBQSxFQUFBQyxLQUFBLEVBQUFDLFNBQUEsR0FjbkJDLEdBQUEsU0FBQXBoRSxHQUFvQyxPQXJCcEMsU0FBQUEsR0FBcUMsT0FBQXlnRSxHQUFBemdFLEVBQ3JDLFNBQUE1TixFQUFBNEcsR0FBdUIsT0FBUTZtRSxHQUFNN21FLEtBQUFvUCxNQUFrQmhXLEdBQUE0RyxFQUFBb1AsSUFDbEQ0RixPQUFBcXpELEtBQW9CQSxFQUFBanZFLEdBQUE0RyxFQUFBcW9FLElBQ3pCLElBQUFqNUQsRUFDQWk1RCxJQWlCb0NDLENBM0JwQyxTQUFBdGhFLEdBQW9DLE9BQUFBLEVBQUEySCxPQUFBM0gsRUFBQXVoRSxLQUFBWixHQUFBLE9BQ2xDSixHQUFNdmdFLEdBQ1IySCxNQUFXeTRELEdBQU1wZ0UsRUFBQTJILE1BQUEzSCxFQUFBdWhFLEtBQUFiLElBQXNDYSxLQUFBdmhFLEVBQUF1aEUsY0FFdkR2aEUsRUF1Qm9Dd2hFLENBbkNwQyxTQUFBeGhFLEdBQ0EsT0FBQUEsT0FBQXlnRSxHQUFBemdFLEVBQUEsU0FBQXd4QyxFQUFBeHhDLEdBQ0EsSUFFQW9JLEVBREEsT0FBQUEsTUFEQSxTQUFBb3BDLEVBQUEsVUFBQUEsR0FDc0J4eEMsRUFBQW9JLElBRnRCcEksRUFrQ29DeWhFLENBWnBDLFNBQUF6aEUsR0FBcUMsT0FBQXlnRSxHQUFBemdFLEVBQ3JDLFNBQUE1TixFQUFBNE4sR0FBMEIsT0FBQTVOLEtBQUE0dUUsSUFDMUJyNUQsTUFBYXk0RCxHQUFNcGdFLEVBQUEySCxPQUFBMDVELEtBQXlCQSxFQUFBanZFLEdBQUE0TixFQUFBcWhFLE9BRGxCajVELE1BQTBDaFcsR0FBQTROLEVBQUFvSSxHQUdwRSxJQUFBQSxFQUNBaTVELElBT29DSyxDQUpwQyxTQUFBMWhFLEdBQ0EsY0FBQUEsRUFBQTJnRSxHQUFBLE1BQUEzZ0UsS0FHb0MyaEUsQ0F0RnBDLFNBQUF2NUQsR0FBa0MsT0FBQXE0RCxHQUFBcjRELEVBQ2xDLFNBQUFoVyxFQUFBNEcsR0FDQSxJQVFBcW9FLEVBUkFPLEVBQUF4dkUsRUFBQWtJLFFBQUEsS0FDQSxHQUFBc25FLEdBQUEsR0FDQSxJQUdBeDVELEVBSEF5NUQsS0FFQSxPQURBQSxFQUFBenZFLEVBQUErWixNQUFBeTFELEVBQUEsSUFBQTVvRSxHQUNBb1AsTUFBdUJoVyxFQUFBK1osTUFBQSxFQUFBeTFELElBQUFDLEVBQUF6NUQsRUFHdkIsT0FBQWk1RCxNQUF1Qmp2RSxHQUFBNEcsRUFBQXFvRSxJQTZFYVMsQ0FBQTloRSxTQUlwQytoRSxHQUFBLFNBQUFqaUUsR0FBNEMsT0FBQTBnRSxHQUFBMWdFLEVBQUEsU0FBQWpILEVBQUEyNkIsR0FDNUMsSUFBQXF0QyxFQXJJUyxTQUFBbnFFLEdBQWlCLE9BQVFtcEUsR0FBTW5wRSxJQUFBLFFBQUFBLEdBQUEsU0FBQUEsR0FBQSxhQUFBQSxHQUFBLFNBQUFBLEVBcUl2QnNyRSxDQUFLeHVDLEtBN0R0QixTQUFBeXVDLEdBQTRDLE9BQVN0QyxHQUFJc0MsSUFDekRsaUUsS0FBQWtpRSxFQUNBcGlFLFNBQUFJLEVBQ0FELFVBQUFDLEVBQ0FILGNBQUFHLEVBQ0FvSyxTQUFBcEssRUFDQTdOLFNBQUE2TixRQU55REEsRUE2RG5DaWlFLENBQUExdUMsR0FFdEIsT0FEQTM2QixFQUFBekMsS0FBQXlxRSxHQUNBaG9FLFFBMEJ3Q3NwRSxJQUh4Q3o2RCxjQW5CaUIsU0FBQTdILEVBQUFHLEdBRWpCLElBREEsSUFBQUYsS0FBQXNCLEVBQUFsRixVQUFBdkksT0FBQSxFQUNBeU4sS0FBQSxHQUFBdEIsRUFBQXNCLEdBQUFsRixVQUFBa0YsRUFBQSxHQUVBLEdBakpBLFNBQUExSyxHQUF3Qix5QkFBQUEsRUFpSnhCa0ssQ0FBQWYsR0FDQSxPQUFBQSxFQUFBRyxNQUF5QkYsR0FFekIsSUFBQW1pRSxFQWhCQSxTQUFBbmlFLEdBQXdDLE9BQUFBLEVBQUFuTSxPQUFBLElBQWdDZ3NFLEdBQUk3L0QsRUFBQSxTQUFBRyxFQUFBSCxFQUFBLEdBZ0I1RXNpRSxDQUFBdGlFLEdBQ0EsT0FBQThnRSxJQUNBL2dFLE1BQ0FHLE9BQUFvaEUsR0FBQXBoRSxNQUNBRixTQUFBbWlFLE9BQUFoaUUsRUFBQThoRSxHQUFBamlFLEdBQ0FDLEtBQUFraUUsRUFDQTUzRCxTQUFBcEssRUFDQTdOLElBQUE0TixJQUFBNU4sU0FBQTZOLE1DektJb2lFLEdBQXdCOXdFLE9BQUE4YixRQUFBLFNBQUF0YixHQUM1QixRQUFBYSxFQUFBL0IsRUFBQSxFQUFBeUIsRUFBQTRKLFVBQUF2SSxPQUE0QzlDLEVBQUF5QixFQUFPekIsSUFFbkQsUUFBQThCLEtBREFDLEVBQUFzSixVQUFBckwsR0FDQVUsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBNEIsRUFBQUQsS0FDQVosRUFBQVksR0FBQUMsRUFBQUQsSUFFQSxPQUFBWixHQUVBLFNBQUF1d0UsR0FBQXI3QixHQUNBLE9BQUFBLEVBQUFuM0IsTUFBQSxLQUFBbFQsT0FBQSxTQUFBakssR0FBZ0QsT0FBQUEsRUFBQWdCLE9BQUEsSUFLaEQsSUFBQW14RCxHQUFBLFNBQUF1SixFQUFBdjhELEdBQTBDLE9BQUF1OEQsRUFBQSxLQUFBdjhELEdBQzFDeXdFLEdBQUEsU0FBQWxVLEVBQUFtVSxFQUFBQyxHQUNBLE9BQUFwVSxFQUFBLEtBQUFtVSxHQUFBblUsRUFBQSxLQUFBb1UsR0FFQSxTQUFBQyxHQUFBaGtCLEVBQUFpa0IsR0FXQSxnQkFBQTc1QyxHQUNBLG9CQUFBQSxHQUFBLE9BQUFBLEVBQUEsQ0FDQSxJQUFBODVDLEVBQUEsR0FBQWxrQixFQUFBcjZDLEtBQUEsS0FBQXlrQixFQUFBNHhCLFNBQ0EsT0FBQW9LLEdBQUE4ZCxFQUFBLE1BQUFMLEdBQUFLLEVBQUEsU0FDQUQsRUFBOEJOLE1BQVd2NUMsR0FBYTR4QixTQUFBa29CLEtBQ3RERCxFQUE4Qk4sTUFBV3Y1QyxHQUFhNHhCLFNBQUEsSUFBQWtvQixLQUV0RCxvQkFBQTk1QyxFQUFBLENBQ0E4NUMsRUFBQSxHQUFBbGtCLEVBQUFyNkMsS0FBQSxLQUFBeWtCLEVBQ0EsT0FBQWc4QixHQUFBOGQsRUFBQSxNQUFBTCxHQUFBSyxFQUFBLFNBQ0FELEdBQ0Fqb0IsU0FBQWtvQixJQUVBRCxHQUNBam9CLFNBQUEsSUFBQWtvQixNQy9CQSxJQUFJQyxHQUFZLFdBQ2hCLFNBQUFDLEVBQUFDLEVBQUFoa0IsRUFBQTRqQixFQUFBSyxHQUNBbHdFLEtBQUFpd0UsWUFDQWp3RSxLQUFBaXNELGFBQ0Fqc0QsS0FBQTZ2RSxjQUNBN3ZFLEtBQUFrd0UsZ0JBQ0Fsd0UsS0FBQXdzRSxTQUF3Qi90RSxPQUFBdXNELEVBQUEsTUFBQXZzRCxDQUFLdUIsS0FBQWl3RSxXQWlDN0IsT0EvQkFELEVBQUFyd0UsVUFBQXcwQyxLQUFBLFNBQUF5VCxHQUNBLElBQUF1b0IsRUFBQW53RSxLQUFBaXNELFdBQUFua0QsT0FBcUQwbkUsR0FBYzVuQixJQUNuRXdvQixFQUFBcHdFLEtBQUFpd0UsVUFDQW5tRSxPQUFBLFNBQUFxb0QsR0FDQSxJQUFBa2UsRUFBQWxlLEVBQUF2SyxTQUNBLE9BdkJBLFNBQUFnRSxFQUFBelgsR0FDQSxJQUFBbThCLEVBQW9CZCxHQUFjcjdCLEdBQ2xDLE9BQUF5WCxFQUFBMmtCLE1BQUEsU0FBQTNzRSxFQUFBN0YsR0FDQSxPQUFBdXlFLEVBQUF2eUUsS0FBQTZGLElBb0JBNHNFLENBQUFMLEVBQUFFLEtBRUFybEUsV0FDQXlnRSxFQUFBenJFLEtBQUE2dkUsWUFDQSxXQUFBRyxFQUFBSSxFQUFBRCxFQUFBMUUsRUFBQXpyRSxLQUFBa3dFLGdCQUVBRixFQUFBcndFLFVBQUFtZ0MsT0FBQSxTQUFBMndDLEVBQUFDLEdBQ0EsSUFBQTVxRSxFQUFBOUYsS0FDQTRyRCxFQUFBNXJELEtBQUFpc0QsV0FDQTRqQixFQUFBN3ZFLEtBQUE2dkUsWUFDQXBFLEVBQXlCbUUsR0FBbUJoa0IsRUFBQWlrQixHQUM1Q2MsRUFBQTN3RSxLQUFBaXdFLFVBQ0F0bUUsSUFBQSxTQUFBcXNCLEdBQ0EsSUFFQW04QixHQUZBdWUsR0FBQTVxRSxFQUFBb3FFLGVBOUJBLFNBQUF0a0IsRUFBQXpYLEdBRUEsVURDQSxTQUFBbThCLEVBQUExa0IsR0FDQSxPQUFBMGtCLEVBQUF4bUUsT0FBQSxTQUFBNEosR0FBNkMsT0FBQWs0QyxFQUFBcGtELFFBQUFrTSxHQUFBLElBQXNDbkMsS0FBQSxLQ0ZsRXEvRCxDQURHcEIsR0FBY3I3QixHQUNGeVgsR0E2QmhDaWxCLENBQUFqbEIsRUFBQTUxQixFQUFBNHhCLFVBQ0E2b0IsR0FDQSxPQUFvQnQ4QixLQURwQmdlLEVBQUFoZSxLQUNvQm4xQyxNQURwQm16RCxFQUFBbnpELE1BQ29CZzNCLFdBQUF5MUMsZ0JBRXBCemdFLFdBQ0E4bEUsRUFBbUJyeUUsT0FBQXVzRCxFQUFBLE1BQUF2c0QsQ0FBS2t5RSxHQUV4QixPQURBRyxFQUFBckYsYUFDQXFGLEdBRUFkLEVBQUFyd0UsVUFBQThyRSxXQUFBLFNBQUF0M0IsR0FDQSxPQUFleTdCLEdBQW1CNXZFLEtBQUFpc0QsV0FBQWpzRCxLQUFBNnZFLFlBQW5CRCxDQUFtQno3QixJQUVsQzY3QixFQXZDZ0IsR0NaWmUsR0FBd0J0eUUsT0FBQThiLFFBQUEsU0FBQXRiLEdBQzVCLFFBQUFhLEVBQUEvQixFQUFBLEVBQUF5QixFQUFBNEosVUFBQXZJLE9BQTRDOUMsRUFBQXlCLEVBQU96QixJQUVuRCxRQUFBOEIsS0FEQUMsRUFBQXNKLFVBQUFyTCxHQUNBVSxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE0QixFQUFBRCxLQUNBWixFQUFBWSxHQUFBQyxFQUFBRCxJQUVBLE9BQUFaLEdDTk8sU0FBQSt4RSxHQUFBQyxHQUNQLFlBQUFBLEVBQUFySyxPQUFBLFVBQUFxSyxFQUVPLFNBQUFDLEdBQUFELEdBQ1AsU0FBQUEsR0FBQSxpQkFBQUEsSUFDQUQsR0FBQXZ5RSxPQUFBMFcsS0FBQTg3RCxHQUFBLElBV08sU0FBQUUsR0FBQUYsR0FDUCxjQUFBQSxFQUVPLFNBQVNHLEdBQVNqOUIsR0FDekIsT0FBQUEsRUFBQW4zQixNQUFBLEtBQUFsVCxPQUFBLFNBQUFoSyxHQUFnRCxRQUFBQSxJQUV6QyxTQUFBdXhFLEdBQUFKLEdBQ1AsY0FBQUEsRUFBQXJ3RCxNQUFBLFFBRU8sU0FBQTB3RCxHQUFBQyxFQUFBQyxHQUlQLElBSEEsSUFBQUMsRUFBdUJMLEdBQVNJLEdBQ2hDRSxFQUFzQk4sR0FBU0csR0FDL0JJLEtBQ0E1ekUsRUFBQSxFQUFtQkEsRUFBQTB6RSxFQUFBNXdFLFNBQXlCOUMsRUFDNUM0ekUsRUFBQXJ1RSxLQUFBb3VFLEVBQUEzekUsSUFFQSxPQUFBNHpFLEVBQUE3bkUsT0FBQXFuRSxJQUFBNS9ELEtBQUEsS0N0QkEsU0FBQXFnRSxHQUFBTCxFQUFBTSxHQUdBLElBRkEsSUFBQUgsRUFBc0JOLEdBQVNHLEdBQy9CSSxFQUF1QlAsR0FBU1MsR0FDaEM5ekUsRUFBQSxFQUFtQkEsRUFBQTR6RSxFQUFBOXdFLFNBQXlCOUMsRUFDNUMsR0FBQTR6RSxFQUFBNXpFLEtBQUEyekUsRUFBQTN6RSxHQUNBLFlBR0EsVUFBaUJ1ekUsR0FBY0MsRUFBQU0sR0FFL0IsU0FBQUMsR0FBQWIsRUFBQWMsR0FDQSxRQUFTWixHQUFTRixNQUdURSxHQUFTWSxNQUdsQkgsR0FBQVgsRUFBQWMsSUFHQWQsRUFBQXB3RSxRQUFBa3hFLEVBQUFseEUsb0RDeEJPLFNBQVNteEUsR0FBUzVnRSxHQUN2QixNQUFNNmdFLEVBQ0o3Z0UsRUFBUThnRSxJQUNMcm5CLE9BQU8sZ0JBQ1BJLE9BQU8sU0FFTmtuQixFQUNKL2dFLEVBQVE4Z0UsSUFDTHJuQixPQUFPLDJCQUNQSSxPQUFPLFNBRU5tbkIsRUFDSmhoRSxFQUFROGdFLElBQ0xybkIsT0FBTyx3QkFDUEksT0FBTyxTQUVOb25CLEVBQ0p0bUUsSUFBR04sTUFBTTJtRSxFQUFvQkQsR0FDMUJ4b0UsSUFBSXVULEdBQ0hBLGFBQWNvMUQsV0FDVnAxRCxFQUFHOVIsT0FBT3BNLE1BQ1YsSUFFTDhMLFFBQVFzRyxFQUFRbWhFLEtBQUtyTSxTQUFTLE1BQzlCNTdELFVBQVUsSUFFVGtvRSxFQUNKQyxHQUE0QixJQUFsQkEsRUFBTzV4RSxPQUViNnhFLEVBQ0ozbUUsSUFBRzlDLElBQ0Qyc0IsSUFBS3hrQixFQUFRdWhFLE9BQVEsd0NBQ3JCM1IsU0FBVSxZQUNWNFIsV0FBVyxJQUdUQyxFQUNKemhFLEVBQVEwaEUsS0FDTGpvQixPQUFPLGFBQ1BsaEQsSUFBSW9wRSxHQUNIQSxFQUFNcG9FLGFBQWFySSxHQUFPeUosSUFBRzlDLEdBQUczRyxLQUVqQ3VJLFVBQ0FsQixJQUFJcXBFLEdBQVFBLGFBQWdCN3NFLE1BQVE2c0UsRUFBT2hpRSxLQUFLMmQsTUFBTXFrRCxFQUFLL2xFLE9BQzNEM0MsVUFBVSxJQUVUMm9FLEVBQ0paLEVBQ0d2b0UsT0FBT29wRSxJQUFpQlYsRUFBdUJVLElBQy9DdnBFLElBQUl1cEUsS0FDSHQ5QyxJQUFLeGtCLEVBQVF1aEUsOEJBQThCTyxLQUMzQ2xTLFNBQVUsU0FDVjRSLFdBQVcsS0FHWE8sRUFDSi9oRSxFQUFRMGhFLEtBQ0xqb0IsT0FBTyxVQUNQbGhELElBQUlvcEUsR0FDSEEsRUFBTXBvRSxhQUFhckksR0FBT3lKLElBQUc5QyxHQUFHM0csS0FFakN1SSxVQUNBbEIsSUFBSXFwRSxHQUNIQSxhQUFnQjdzRSxNQUNaNnNFLEVBQ0FoaUUsS0FBSzJkLE1BQU1xa0QsRUFBSy9sRSxPQUVyQjNDLFVBQVUsSUFFVDhvRSxFQUNKcm5FLElBQUdKLFFBQVEwbUUsRUFBZWMsRUFBaUJOLEdBQ3hDbHBFLElBQUksRUFBRXVwRSxFQUFjRyxFQUFnQkMsS0FDbkNkLEVBQXVCVSxHQUNuQkksRUFDQUQsR0FFTC9vRSxVQUFVLElBRVRpcEUsRUFDSnhuRSxJQUFHSixRQUFReW5FLEVBQVVuQixHQUNsQnRvRSxJQUFJLEVBQUU4RyxFQUFTK2lFLE1BQ2QsTUFBTUMsRUFBY2hqRSxFQUFRb2pELFNBQVdwakQsRUFBUW9qRCxRQUFRNmYsS0FDckRsakUsR0FBUUEsRUFBS21CLElBQU02aEUsRUFBc0Jwb0UsT0FBT2tTLFFBQVEzTCxJQUcxRCxPQUFPOGhFLEVBQWNBLEVBQVkza0UsTUFBUSxLQUd6QzZrRSxFQUNKNW5FLElBQUdOLE1BQU13bkUsRUFBZ0JFLEdBQ3RCeHBFLElBQUk5SyxHQUFLQSxHQUFLQSxFQUFFK3pFLFdBQ2hCdG9FLFdBQVUsR0FFVHNwRSxFQUNKN25FLElBQUdOLE1BQU13bkUsRUFBZ0JFLEdBQ3RCeHBFLElBQUk5SyxHQUFLQSxhQUFhc0gsT0FDdEJtRSxXQUFVLEdBMEJmLE9BQ0U0bkUsSUF4QkFubUUsSUFBR0osUUFBUTBtRSxFQUFlZSxFQUFVTyxFQUFZQyxHQUM3Q2pxRSxJQUFJLEVBQUV1cEUsRUFBY3ppRSxFQUFTb2pFLEVBQVd2d0QsS0FFckMrckQsR0FBQXo2RCxjQUFBLFdBQ0V5NkQsR0FBQXo2RCxjQUFBLDRCQUNBeTZELEdBQUF6NkQsY0FBQSxVQUFRbzhDLFVBQVUsYUFBbEIsdUJBRUFxZSxHQUFBejZELGNBQUEsT0FBS284QyxVQUFVLDRDQUNaa2lCLEdBQ0Q3RCxHQUFBejZELGNBQUEsS0FBR284QyxVQUFVLGlDQUFpQ244QyxPQUFTaS9ELFVBQVcsaUJBQ2xFekUsR0FBQXo2RCxjQUFBLFNBQU9vOEMsVUFBVywrQkFBZ0N2dUQsS0FBSyxPQUFPekQsTUFBT2swRSxLQUd2RTdELEdBQUF6NkQsY0FBQSxNQUFJbzhDLFVBQVUsMENBQ1h3aEIsRUFBdUJVLEdBQWdCLGNBQWdCLGtCQ2xIL0QsU0FBMEJXLEVBQVd2d0QsRUFBU3V3QyxHQUNuRCxPQUNFd2IsR0FBQXo2RCxjQUFBLE9BQUtvOEMsVUFBVSxxQkFDYnFlLEdBQUF6NkQsY0FBQSxXQUFNaS9ELEVBQVksYUFBZSxJQUNqQ3hFLEdBQUF6NkQsY0FBQSxXQUFNME8sRUFBVSxnQkFBa0IsSUFFbEMrckQsR0FBQXo2RCxjQUFBLE1BQUlvOEMsVUFBVSxlQUNNLGlCQUFaNkMsSUFBeUJnZ0IsSUFBY3Z3RCxHQUFXdXdDLEVBQVFscUQsSUFBSThMLEdBR2xFQSxFQUFPcytELGVBQ1AxRSxHQUFBejZELGNBQUEsTUFBSW84QyxVQUFVLG9CQUNacWUsR0FBQXo2RCxjQUFBLEtBQUdvOEMsVUFBVSxjQUFjeDZDLEtBQUssSUFBSTNCLE9BQVFtL0QsUUFBUyxnQkFBa0JDLFVBQVN4K0QsRUFBTzlELElBS3JGMDlELEdBQUF6NkQsY0FBQSxPQUFLbzhDLFVBQVUsZ0NBQ2JxZSxHQUFBejZELGNBQUEsT0FBSzBRLHFDQUFzQzdQLEVBQU9zK0QsZ0JBQWlCRyxJQUFJLE1BRXpFN0UsR0FBQXo2RCxjQUFBLE9BQUtvOEMsVUFBVSxtREFBbUR2N0MsRUFBTzNHLFlEaUcxRXFsRSxDQUFpQk4sRUFBV3Z3RCxFQUFTN1MsRUFBUW9qRCxXQVV0RGlmLEtBQ0UvbUUsSUFBR04sTUFBTXduRSxFQUFnQlAsR0FFM0IwQixPQUNFbkMsRUFDR3RvRSxJQUFJZ2UsYUFBbUJBLEVBQU12YyxPQUFPaXBFLFFBQVEsYUFBYS8yRCxRQUFRM0wsTUFHdEU0aEUsc0JFdklHLFNBQVNlLEdBQWlCbGpFLEdBQy9CLE1BQU1takUsRUFBV25qRSxFQUFRb2pFLE9BQ3RCN3FFLElBQUl1UixHQUFTQSxFQUFNcTVELFVBQ25CMXBFLFVBRUcwb0UsRUFBY25pRSxFQUFRb2pFLE9BQ3pCN3FFLElBQUl1UixHQUFTQSxFQUFNcTRELGFBQ25CMW9FLFVBQ0FQLFVBQVUsSUFFUG1xRSxFQUNKRixFQUFTNXFFLElBQUlnSSxLQUNYaWtCLElBQUt4a0IsRUFBUXVoRSxpQkFBaUJoaEUsS0FDOUJxdkQsU0FBVSxVQUNWNFIsV0FBVyxLQUdaOW5FLFFBQVFzRyxFQUFRbWhFLEtBQUt0TSxNQUFNLE1BRXhCeU8sRUFDSnRqRSxFQUFRMGhFLEtBQ0xqb0IsT0FBTyxXQUNQbGhELElBQUlvcEUsR0FDSEEsRUFBTXBvRSxhQUFhckksR0FBT3lKLElBQUc5QyxHQUFHM0csS0FFakN1SSxVQUNBbEIsSUFBSXFwRSxHQUNIQSxhQUFnQjdzRSxNQUNaNnNFLEVBQ0FoaUUsS0FBSzJkLE1BQU1xa0QsRUFBSy9sRSxPQUdwQjBuRSxFQUdKRixFQUNHOXFFLElBQUlpckUsS0FHSGgvQyxJQUFLZy9DLEVBQWVoL0MsSUFBSWhyQixRQUFRLElBQUssYUFDckNvMkQsU0FBVSxVQUNWNFIsV0FBVyxLQUdYaUMsRUFDSnpqRSxFQUFRMGhFLEtBQ0xqb0IsT0FBTyxXQUNQbGhELElBQUlvcEUsR0FDSEEsRUFBTXBvRSxhQUFhckksR0FBT3lKLElBQUc5QyxHQUFHM0csS0FFakN1SSxVQUNBbEIsSUFBSXFwRSxHQUNIQSxhQUFnQjdzRSxNQUNaNnNFLEVBQ0FoaUUsS0FBSzJkLE1BQU1xa0QsRUFBSy9sRSxPQUdwQm1tRSxFQUNKcm5FLElBQUdKLFFBQVErb0UsRUFBa0JHLEdBQzFCdnFFLFVBQVUsSUFFVHFwRSxFQUNKNW5FLElBQUdOLE1BQU1ncEUsRUFBaUJDLEdBQ3ZCL3FFLElBQUk5SyxHQUFLdVksUUFBUXZZLEdBQUtBLEVBQUUrekUsWUFDeEJ0b0UsV0FBVSxHQUVUc3BFLEVBQ0o3bkUsSUFBR04sTUFBTWdwRSxFQUFpQkMsR0FDdkIvcUUsSUFBSTlLLEdBQUtBLGFBQWFzSCxPQUN0Qm1FLFdBQVUsR0F5Q2YsT0FDRTRuRSxJQWJBbm1FLElBQUdKLFFBQVE0bkUsRUFBYUgsRUFBVU8sRUFBWUMsR0FDM0NqcUUsSUFBSSxFQUFFbXJFLEdBQWFDLEVBQVNDLEdBQU9uQixFQUFXdndELEtBRTNDK3JELEdBQUF6NkQsY0FBQSxXQUNFeTZELEdBQUF6NkQsY0FBQSxVQUFLa2dFLEdBQWNDLEdBQVdBLEVBQVFqbUUsT0FDdEN1Z0UsR0FBQXo2RCxjQUFBLFdBQU1pL0QsRUFBWSxhQUFlLElBQ2pDeEUsR0FBQXo2RCxjQUFBLFdBQU0wTyxFQUFVLGdCQUFrQixJQUNoQ3l4RCxJQUFZbEIsSUFBY3Z3RCxHQWxDakIsRUFBQ3l4RCxFQUFTQyxJQUM3QjNGLEdBQUF6NkQsY0FBQSxPQUFLbzhDLFVBQVUsaUJBQ2JxZSxHQUFBejZELGNBQUEsT0FBS284QyxVQUFVLDhDQUE4Q2w5QyxNQUFNLGVBQ2pFdTdELEdBQUF6NkQsY0FBQSxPQUFLMFEscUNBQXNDeXZELEVBQVFFLGNBQWVmLElBQUksTUFFeEU3RSxHQUFBejZELGNBQUEsTUFBSW84QyxVQUFVLHVCQUNacWUsR0FBQXo2RCxjQUFBLHdCQUNBeTZELEdBQUF6NkQsY0FBQSxVQUFLbWdFLEVBQVFHLGNBQ2I3RixHQUFBejZELGNBQUEsc0JBQ0F5NkQsR0FBQXo2RCxjQUFBLFVBQUttZ0UsRUFBUUksVUFDYjlGLEdBQUF6NkQsY0FBQSxvQkFDQXk2RCxHQUFBejZELGNBQUEsVUFBS21nRSxFQUFRSyxPQUFPenJFLElBQUk4QyxHQUFLQSxFQUFFbk8sTUFBTWlULEtBQUssT0FDMUM4OUQsR0FBQXo2RCxjQUFBLHNCQUNBeTZELEdBQUF6NkQsY0FBQSxVQUFLb2dFLEVBQUtBLEtBQUszN0QsTUFBTSxFQUFHLEdBQUcxUCxJQUFJcXJFLEdBQVFBLEVBQUsxMkUsTUFBTWlULEtBQUssT0FDdkQ4OUQsR0FBQXo2RCxjQUFBLHVCQUNBeTZELEdBQUF6NkQsY0FBQSxVQUFLbWdFLEVBQVFNLGlCQUFpQjFyRSxJQUFJOEMsR0FBS0EsRUFBRW5PLE1BQU1pVCxLQUFLLE9BQ3BEODlELEdBQUF6NkQsY0FBQSw0QkFDQXk2RCxHQUFBejZELGNBQUEsVUFBS21nRSxFQUFRTyxnQkFDYmpHLEdBQUF6NkQsY0FBQSwwQkFDQXk2RCxHQUFBejZELGNBQUEsVUFBS21nRSxFQUFRUSxjQUNaUixFQUFRUyxTQUFXbkcsR0FBQXo2RCxjQUFBLHNCQUNuQm1nRSxFQUFRUyxTQUFXbkcsR0FBQXo2RCxjQUFBLFVBQUl5NkQsR0FBQXo2RCxjQUFBLEtBQUc0QixtQ0FBb0N1K0QsRUFBUVMsMENBQ3BDVCxFQUFRUyxlQVlBQyxDQUFhVixFQUFTQyxLQVNyRWxDLEtBQ0UvbUUsSUFBR04sTUFDRGdwRSxFQUNBRSw2SEMvRkQsU0FBU3JzQixHQUFLbDNDLEdBQ25CLE1BQU1za0UsRUFBaUJ0a0UsRUFBUThnRSxJQUM1QnJuQixPQUFPLDZFQUNQSSxPQUFPLFNBVUowcUIsSUFQSnhoQyxLQUFNLElBQ043MEMsSUFBSyxTQUVMNjBDLEtBQU0sYUFDTjcwQyxJQUFLLFNBSUpxSyxJQUFJLEVBQUd3cUMsT0FBTTcwQyxVQUNaNjBDLEVBR0EsU0FBU2w2QixLQUFLazZCLEdBQ1YsSUFBSXZsQyxNQUFZdFAsTUFBS3NQLFVBQ25CdFAsTUFBS3NQLFdBR1RnbkUsRUFDSnhrRSxFQUFRZ2pFLE9BQU90MEMsT0FBTzNMLEtBQVl3aEQsSUFFOUJFLEVBQVdELEVBQ2Rqc0UsSUFBSWlYLEdBQVNBLEVBQU01aEIsTUFBTU0sS0FFdEJpMUUsRUFBV3FCLEVBQ2Rqc0UsSUFBSW1zRSxHQUFjQSxFQUFXOTJFLE1BQU00UCxLQUFLLElBQ3hDOUUsT0FBTzZILEdBQU1BLEdBRVZva0UsRUFBZ0IvRCxHQUFTNWdFLEdBQ3pCNGtFLEVBQWlCMUIsc1VBQWdCMkIsSUFDakM3a0UsR0FDSG9qRSxPQUFRem9FLElBQUc5QyxJQUNUc3JFLFdBSUFoQixZQUFhd0MsRUFBY3hDLGlCQW1CMUIyQyxFQUFlLENBQUM1M0UsRUFBTTYzRSxFQUFNeE4sSUFDaEMwRyxHQUFBejZELGNBQUEsT0FBS284QyxVQUFVLDBEQUNib2xCLFlBQVc5M0UsRUFBTSszRSxjQUFhMU4sR0FFN0J3TixHQTZCTCxPQUNFakUsSUF6QkFubUUsSUFBR0osUUFBUW9xRSxFQUFjN0QsSUFBSzhELEVBQWU5RCxJQUFLMkQsR0FDL0Nsc0UsSUFBSSxFQUFFMnNFLEVBQWNDLEVBQWVDLEtBekJuQixFQUFDQyxFQUFZQyxJQUNoQ3JILEdBQUF6NkQsY0FBQSxPQUFLbzhDLFVBQVUsd0NBQ2JxZSxHQUFBejZELGNBQUEsT0FBS284QyxVQUFVLFVBQ2JxZSxHQUFBejZELGNBQUEsTUFBSW84QyxVQUFVLGtDQUNRLFNBQW5CMGxCLEVBQ0dySCxHQUFBejZELGNBQUEsVUFBSXk2RCxHQUFBejZELGNBQUEsS0FBR284QyxVQUFVLFFBQWIsU0FDSnFlLEdBQUF6NkQsY0FBQSxpQkFJUnk2RCxHQUFBejZELGNBQUEsT0FBS284QyxVQUFVLGlCQUFpQjJsQixrQkFBaUJELEdBQzlDRCxFQUFXOXNFLElBQUl3c0UsR0FBUUEsS0FleEJTLEVBRUlWLEVBQWEsT0FBUUksRUFBMEIsU0FBWkUsR0FDbkNOLEVBQWEsT0FBUUssRUFBMkIsU0FBWkMsSUFFdENBLElBcUJOMUQsS0FoQkEvbUUsSUFBR04sTUFDRHNxRSxFQUFjakQsS0FDZGtELEVBQWVsRCxNQWlCakJzQixPQWJBcm9FLElBQUdOLE1BQ0RpcUUsRUFDRzlyRSxNQUFNLEtBQ1Rtc0UsRUFBYzNCLDZDQTZCcEI3bEUsRU5oSUEsU0FBQSs1QyxFQUFBb29CLEVBQUF6OUQsR0FDQSxzQkFBQXExQyxFQUNBLFVBQUFuaUQsTUFBQSx5REFFQSxJQUFBbS9CLEVBQWV5ckMsSUFBVTFHLFNBQUEsSUFBQXdNLFlBQUEsVUFBQUMsV0FBQSxTQUFBQyxhQUFBLEdBQWlGOWpFLEdBQzFHdzRELEVBQUEsU0FBQXoxQyxHQUNBLE9BQUFzUCxFQUFBK2tDLFNBQStCM0MsR0FBVTF4QyxJQUV6QyxnQkFBQTVrQixHQUNBLElBQUE0bEUsRUFBQSxJQUErQmpILEdBQWFybkIsRUFBQTluRCxFQUFFZ0ksZUFBQXdJLEVBQUFrMEIsRUFBQXV4QyxjQUFBN3JFLGNBQUF5Z0UsRUFBQWlGLEdBQzlDdUcsRUFBQTdsRSxFQUNBazBCLEVBQUF5eEMsb0JBQ0FFLEVBQUEzeEMsRUFBQXV4QyxhQUVBLElBTUExa0IsRUFBQUMsRUFOQW5KLEVBQUFYLEVBQXlCeW9CLE1BQVdrRyxJQUFBOWtCLE1BQWdCN3NCLEVBQUF3eEMsWUFBQUUsRUFBQTdrQixLQUNwRCxPQUFlNGUsTUFBVzluQixJQUFBbUosTUFBaUI5c0IsRUFBQXV4QyxhQUF5QnA0RSxPQUFBdXNELEVBQUEsTUFBQXZzRCxDQUFNaXFELEVBQUE5bkQsRUFBRTZLLE1BQUF3OUMsRUFBQTNqQixFQUFBdXhDLGVBQUF2eEMsRUFBQXl4QyxZQUM5RHJ1QixFQUFBOW5ELEVBQUVnSSxlQUFBcWdELEVBQUEzakIsRUFBQXV4QyxjQUNGbnVCLEVBQUE5bkQsRUFBRTJILFFBQUEwZ0QsRUFBQTNqQixFQUFBd3hDLFlBQ0ZwdUIsRUFBQTluRCxFQUFFZ0ksZUFBQXFnRCxFQUFBM2pCLEVBQUF3eEMsYUFDRnB1QixFQUFBOW5ELEVBQUUySCxVQUFBNnBELEtNZ0dkOGtCLENBQVU1dUIsR0o3RUcsU0FBQTZ1QixFQUFBNUYsRUFBQWQsSUF2RGYsU0FBQXQ4QixFQUFBczhCLEdBQ0EsSUFBU08sR0FBUzc4QixHQUNsQixVQUFBaHVDLE1BQUEsdURBRUEsSUFBUytxRSxHQUFpQlQsR0FDMUIsVUFBQXRxRSxNQUFBLCtFQW1EQWl4RSxDQUFBN0YsRUFBQWQsR0FDQSxJQUFBb0IsRUFBQSxLQUNBd0YsRUFBQSxLQXVCQSxPRDNFTyxTQUFBNUcsRUFBQXYzRCxHQUVQLElBREEsSUFBQS9ELEVBQUExVyxPQUFBMFcsS0FBQXM3RCxHQUNBMXlFLEVBQUEsRUFBbUJBLEVBQUFvWCxFQUFBdFUsU0FBaUI5QyxFQUFBLENBQ3BDLElBQUF5ekUsRUFBQXI4RCxFQUFBcFgsR0FDQSxNQUFBeXpFLEdBRUF0NEQsRUFBQXM0RCxJQytDSThGLENBQWM3RyxFQUFBLFNBQUFlLEdBQ2xCLElBQUFELEVBQUE1SixPQUFBNkosSUFBQU0sR0FBQU4sRUFBQUssS0FDQUEsRUFBQUwsRUFDQTZGLEVBQUE1RyxFQUFBZSxJQUVBLElBQUFsdUMsRUFqQ0EsU0FBQWl1QyxFQUFBQyxHQUNBLElBQUFFLEVBQXNCTixHQUFTRyxHQUMvQkUsRUFBdUJMLEdBQVNJLEdBQ2hDbHVDLEVBQUFtdUMsRUFDQTluRSxJQUFBLFNBQUErSixFQUFBM1YsR0FBaUMsT0FBUXN6RSxHQUFPMzlELEdBQUFnK0QsRUFBQTN6RSxHQUFBLE9BQ2hEK0wsT0FBZ0JxbkUsSUFHaEIsT0FGQU0sRUFDQWxCLE1BQUEsU0FBQTc4RCxFQUFBM1YsR0FBbUMsT0FBUXN6RSxHQUFPMzlELFFBQUFnK0QsRUFBQTN6RSxLQUNsRHVsQyxLQXlCQWkwQyxDQUFBaEcsRUFBQUMsR0FBQTFuRSxPQUFBc04sU0FLQSxHQUpBa3NCLEVBQUF6aUMsT0FBQSxHQUFBaXhFLEdBQUFQLEVBQUFNLEtBQ0FBLEVBQTBCUCxHQUFjQyxFQUFBQyxHQUN4QzZGLEVBMUJBLFNBQUFHLEVBQUFsMEMsR0FDQSxJQUFBbTBDLEVBQW1CdkcsR0FBaUJzRyxLQUFBLEtBQUFBLEVBQ3BDLHlCQUFBQyxJQUFBNW9FLFdBQUEsRUFBQXkwQixHQUFBbTBDLEVBd0JBQyxDQUFBakgsRUFBQWUsR0FBQWx1QyxJQUVZNHRDLEdBQWlCVCxFQUFBZSxLQUFBLElBQUFsdUMsRUFBQXppQyxRQUM3QixNQUFBMHdFLEVBQUEsQ0FDQSxJQUFBN3dDLEVBQUF5MkMsRUR0Q08sU0FBQVEsRUFBQXBRLEdBQ1AsT0FBQW9RLEVBQUEzNkQsTUFBQXVxRCxHQUFBLEdDcUN1Q3FRLENBQVVyRyxFQUFBQyxJQUFBLElBQUFmLEVBQUFlLElBQ2pEcUcsRUFBQXJHLEVBQUE5d0MsRUFBQXlULEtBQ0EsT0FBQXpULEVBQUF5VCxNQUNBMjlCLEdBQUErRixFQUFBaEcsS0FDQUEsRUFBQWdHLEVBQ0FSLEVBQUEzMkMsRUFBQTFoQyxVQS9CQSxTQUFBbXpELEdBQ0EsSUFBQW9mLEVBQUFwZixFQUFBb2YsV0FBQU0sRUFBQTFmLEVBQUEwZixZQUFBd0YsRUFBQWxsQixFQUFBa2xCLGFBQUE1RyxFQUFBdGUsRUFBQXNlLE9BQ0F0OEIsRUFBQTA5QixFQUFBRCxHQUFBTCxFQUFBTSxHQUFBLEtBQ0E3eUUsRUFBQXE0RSxFQUtBLE9BSkFsakMsSUFFQW4xQyxHQURBbTFDLEVBQUFzOEIsRUFBQSxLQUFBYyxFQUFBLE1BQ0FkLEVBQUEsWUFFWXQ4QixPQUFBbjFDLFNBNEJaODRFLEVBQXFCdkcsYUFBQU0sY0FBQXdGLGVBQUE1RyxjSXNEbkJ5QixJbkM5RUYsU0FBQTNtQixFQUFBdDRDLEdBQ0FBLElBQ0FBLE1BRUlxNEMsRUFBbUJDLEdBQ3ZCLElBQUF0dEQsRUFBQWdWLEVBQUFoVixTQUFxQ3EzRCxJQXBEckMsU0FBQXIzRCxHQUNBLElBQUFtQyxNQUFBMEksUUFBQTdLLEdBQ0EsVUFBQWtJLE1BQUEsaUVBbURBNHhFLENBQUE5NUUsR0FDQSxJQUdBKzVFLEVBQ0FDLEVBSkFqc0IsRUFBQSxJQUE0Qm9LLEdBQzVCdDVCLEVBQWdCOHhCLEdBQUk1QyxFQUFBOEssZ0JBQUFodkQsT0FBQTdKLElBQ3BCaTZFLEVBakNXeHZCLEVBQUE5bkQsRUFBRXZCLFFBQ2J3QyxNQUFBLFNBQUFzMkUsR0FDQSxZQUFBbG1FLFNBQUF5cEIsV0FDQXpwQixTQUFBZ0wsaUJBQUEsOEJBQ0EsSUFBQW9tRCxFQUFBcHhELFNBQUF5cEIsV0FDQSxnQkFBQTJuQyxHQUFBLGFBQUFBLElBQ0E4VSxFQUFBejJFLEtBQUEsTUFDQXkyRSxFQUFBdjJFLGVBS0F1MkUsRUFBQXoyRSxLQUFBLE1BQ0F5MkUsRUFBQXYyRSxhQUdBRyxLQUFBLGVBb0JBcTJFLEVBQTZCMXZCLEVBQUE5bkQsRUFBRXZCLFFBQy9Cd0MsTUFBQSxTQUFBc0csR0FDQTh2RSxFQUFBLElBQUE1akQsaUJBQUEsV0FBaUUsT0FBQWxzQixFQUFBekcsS0FBQSxTQUVqRUssS0FBQSxXQUNBazJFLEVBQUFJLGdCQXlEQSxPQXREQSxTQUFBQyxFQUFBaDZFLFFBQ0EsSUFBQUEsSUFBOEJBLEVBQUEsT0EvRDlCLFNBQUFpNkUsR0FDQSxJQUFBQSxHQUNBLG1CQUFBQSxFQUFBcndFLGFBQ0EsbUJBQUFxd0UsRUFBQTl0RSxLQUNBLFVBQUF0RSxNQUFBLDZFQTREQXF5RSxDQUFBRixHQUNBLElBQUFHLEVBQTBCL3ZCLEVBQUE5bkQsRUFBRXZCLFNBQzVCcTVFLEVBQUFSLEVBQUF2dUUsSUFBQSxXQUNBLElBQUFndkUsRXhCN0RPLFNBQUFDLEdBQ1AsSUFBQUMsRUFBQSxpQkFBQUQsRUFDQTNtRSxTQUFBTSxjQUFBcW1FLEdBQ0FBLEVBQ0Esb0JBQUFBLEdBQUEsT0FBQUMsRUFDQSxVQUFBMXlFLE1BQUEsdUNBQUF5eUUsRUFBQSxLQUVBLE9BQUFDLEV3QnNENEJDLENBQVl2dEIsSUFBQXQ1QyxTQUFBNkssS0FFeEMsT0FEQWs3RCxFQUFBLElBQStCcmpCLEdBQVlna0IsR0FDM0NBLElBT0FJLEVBQUFULEVBQUF0dEUsV0FDQSt0RSxFQUFBN3dFLGdCQUdBa3dFLEVBQUFsd0UsZ0JBQ0EsSUFBQTh3RSxFQUFBTixFQUNBL3VFLElBQUEsU0FBQWd2RSxHQUNBLE9BQW1CandCLEVBQUE5bkQsRUFDbkI2SyxNQUFBc3RFLEVBQUF2dkUsUUFBQWl2RSxNQUNBOXVFLElBQUEsU0FBQTBELEdBQXVDLE9BQUEycUUsRUFBQTk1RSxLQUFBbVAsS0FDdkMvQyxVQWpEQSxTQUFBK0MsR0FHQSxPQUZBQSxFQUFBSCxLQUFBRyxFQUFBSCxTQUNBRyxFQUFBSCxLQUFBdWdELFdBQ0FwZ0QsRUE4Q0E0ckUsQ0FBd0N4NkUsT0FBQXk2RSxFQUFBLFFBQUF6NkUsQ0FBT2s2RSxLQUMvQ2x1RSxLQUFBcXlCLEVBQTZCcitCLE9BQUF5NkUsRUFBQSxRQUFBejZFLENBQU9rNkUsSUFDcEN2dUUsS0FBQSxHQUNBVCxJQUFBcXhELElBQ0Exd0QsVUFBQXF1RSxHQUNBaHZFLElBQUEsU0FBQXVMLEdBU0EsT0FSQStpRSxFQUFBdmpELFFBQUF4ZixHQUNBaWtFLFdBQUEsRUFDQXA2RCxZQUFBLEVBQ0E0VixlQUFBLEVBQ0F5a0QsU0FBQSxFQUNBQyxtQkFBQSxFQUNBQyx1QkFBQSxJQUVBcGtFLElBRUFwSyxRQUFBaXdELE1BR0Fsd0QsVUFDQXN0RCxFQUEyQm9oQixJQUFNckIsRUFBQUUsR0FDakM1dUUsUUFBQWl2RSxHQUNBM3RFLFFBQXFCMHVFLElBQWFSLElBQ2xDcnZFLElBQUEsU0FBQWtiLEdBQWlDLE9BQUFBLEVBQUEsS0FDakM3WixXQUVBbXRELEVBQUFqd0QsYUFBa0N2RyxNQUFBczVELEtBQ2xDLElBQUF3ZSxFQUFBLElBQTRCeGhCLEdBQWNFLEVBQUFuTSxHQUMxQyxXQUFtQmUsRUFBYW9MLEVBQUFzZ0IsS0FBQXpzQixFQUFBeXRCLEVBQUFuN0UsSW1DTXpCbzdFLENBQWMsUUFDbkJwUSxRQ3BJSyxTQUFBcjJELEdBQ1AsSUFBQXEyRCxFQU9BLE9BTEFBLEVBREFyMkQsR0FMQSxTQUFBckwsR0FDQSxRQUFBQSxFQUFBNmpFLFdBSUFrTyxDQUFBMW1FLEdBQ0FBLEVBR2tCczJELEdBQW9CdDJELEdBRXRDLFNBQUFzNUQsR0FDQSxPQUFlRCxHQUFjaEQsRUFBQWlELElEMkhsQnFOLEdBQ1Q5RyxLN0JZRixTQUFBblMsRUFBQXJpRSxHQUNBLElBQUF1N0UsRUFBQWxaLEVBQUFoM0QsSUFBQW80RCxJQUNBeEIsRUFBQSxJQUE2QkssR0FBY2laLEVBQUF2N0UsTUFNM0MsT0FMQXU3RSxFQUFBM3hFLGFBQ0F4RyxLQUFBLGFBQ0FDLE1BQUEsYUFDQUMsU0FBQSxlQUVBMitELEc2Qm5CRWdTLEtFdElGLFNBQW1CaGxCLEdBQ25CLE9BQVd1WCxNRnNJVDZOLE9BQVEsSUFBT21ILEdBQ2JBLEVBQ0dsdkUsUUFBUSxJQUFLLGdDQUNiQSxRQUFRLFNBQVUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQ5KTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc3ltYm9sX29ic2VydmFibGVfMSA9IHJlcXVpcmUoXCJzeW1ib2wtb2JzZXJ2YWJsZVwiKTtcbnZhciBOTyA9IHt9O1xuZXhwb3J0cy5OTyA9IE5PO1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZnVuY3Rpb24gY3AoYSkge1xuICAgIHZhciBsID0gYS5sZW5ndGg7XG4gICAgdmFyIGIgPSBBcnJheShsKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7ICsraSlcbiAgICAgICAgYltpXSA9IGFbaV07XG4gICAgcmV0dXJuIGI7XG59XG5mdW5jdGlvbiBhbmQoZjEsIGYyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGFuZEZuKHQpIHtcbiAgICAgICAgcmV0dXJuIGYxKHQpICYmIGYyKHQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBfdHJ5KGMsIHQsIHUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYy5mKHQpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB1Ll9lKGUpO1xuICAgICAgICByZXR1cm4gTk87XG4gICAgfVxufVxudmFyIE5PX0lMID0ge1xuICAgIF9uOiBub29wLFxuICAgIF9lOiBub29wLFxuICAgIF9jOiBub29wLFxufTtcbmV4cG9ydHMuTk9fSUwgPSBOT19JTDtcbi8vIG11dGF0ZXMgdGhlIGlucHV0XG5mdW5jdGlvbiBpbnRlcm5hbGl6ZVByb2R1Y2VyKHByb2R1Y2VyKSB7XG4gICAgcHJvZHVjZXIuX3N0YXJ0ID0gZnVuY3Rpb24gX3N0YXJ0KGlsKSB7XG4gICAgICAgIGlsLm5leHQgPSBpbC5fbjtcbiAgICAgICAgaWwuZXJyb3IgPSBpbC5fZTtcbiAgICAgICAgaWwuY29tcGxldGUgPSBpbC5fYztcbiAgICAgICAgdGhpcy5zdGFydChpbCk7XG4gICAgfTtcbiAgICBwcm9kdWNlci5fc3RvcCA9IHByb2R1Y2VyLnN0b3A7XG59XG52YXIgU3RyZWFtU3ViID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0cmVhbVN1Yihfc3RyZWFtLCBfbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fc3RyZWFtID0gX3N0cmVhbTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIgPSBfbGlzdGVuZXI7XG4gICAgfVxuICAgIFN0cmVhbVN1Yi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbS5fcmVtb3ZlKHRoaXMuX2xpc3RlbmVyKTtcbiAgICB9O1xuICAgIHJldHVybiBTdHJlYW1TdWI7XG59KCkpO1xudmFyIE9ic2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmVyKF9saXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IF9saXN0ZW5lcjtcbiAgICB9XG4gICAgT2JzZXJ2ZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIuX24odmFsdWUpO1xuICAgIH07XG4gICAgT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5fZShlcnIpO1xuICAgIH07XG4gICAgT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9saXN0ZW5lci5fYygpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmVyO1xufSgpKTtcbnZhciBGcm9tT2JzZXJ2YWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcm9tT2JzZXJ2YWJsZShvYnNlcnZhYmxlKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmcm9tT2JzZXJ2YWJsZSc7XG4gICAgICAgIHRoaXMuaW5zID0gb2JzZXJ2YWJsZTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgRnJvbU9ic2VydmFibGUucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc3ViID0gdGhpcy5pbnMuc3Vic2NyaWJlKG5ldyBPYnNlcnZlcihvdXQpKTtcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSlcbiAgICAgICAgICAgIHRoaXMuX3N1Yi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgRnJvbU9ic2VydmFibGUucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fc3ViKVxuICAgICAgICAgICAgdGhpcy5fc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gRnJvbU9ic2VydmFibGU7XG59KCkpO1xudmFyIE1lcmdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lcmdlKGluc0Fycikge1xuICAgICAgICB0aGlzLnR5cGUgPSAnbWVyZ2UnO1xuICAgICAgICB0aGlzLmluc0FyciA9IGluc0FycjtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5hYyA9IDA7XG4gICAgfVxuICAgIE1lcmdlLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB2YXIgcyA9IHRoaXMuaW5zQXJyO1xuICAgICAgICB2YXIgTCA9IHMubGVuZ3RoO1xuICAgICAgICB0aGlzLmFjID0gTDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBMOyBpKyspXG4gICAgICAgICAgICBzW2ldLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBNZXJnZS5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5pbnNBcnI7XG4gICAgICAgIHZhciBMID0gcy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTDsgaSsrKVxuICAgICAgICAgICAgc1tpXS5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgTWVyZ2UucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgTWVyZ2UucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIE1lcmdlLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5hYyA8PSAwKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHUuX2MoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlO1xufSgpKTtcbnZhciBDb21iaW5lTGlzdGVuZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tYmluZUxpc3RlbmVyKGksIG91dCwgcCkge1xuICAgICAgICB0aGlzLmkgPSBpO1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5wID0gcDtcbiAgICAgICAgcC5pbHMucHVzaCh0aGlzKTtcbiAgICB9XG4gICAgQ29tYmluZUxpc3RlbmVyLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBwID0gdGhpcy5wLCBvdXQgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKG91dCA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChwLnVwKHQsIHRoaXMuaSkpIHtcbiAgICAgICAgICAgIHZhciBhID0gcC52YWxzO1xuICAgICAgICAgICAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBiID0gQXJyYXkobCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7ICsraSlcbiAgICAgICAgICAgICAgICBiW2ldID0gYVtpXTtcbiAgICAgICAgICAgIG91dC5fbihiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tYmluZUxpc3RlbmVyLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIG91dCA9IHRoaXMub3V0O1xuICAgICAgICBpZiAob3V0ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0Ll9lKGVycik7XG4gICAgfTtcbiAgICBDb21iaW5lTGlzdGVuZXIucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcCA9IHRoaXMucDtcbiAgICAgICAgaWYgKHAub3V0ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKC0tcC5OYyA9PT0gMClcbiAgICAgICAgICAgIHAub3V0Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tYmluZUxpc3RlbmVyO1xufSgpKTtcbnZhciBDb21iaW5lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbWJpbmUoaW5zQXJyKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdjb21iaW5lJztcbiAgICAgICAgdGhpcy5pbnNBcnIgPSBpbnNBcnI7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuaWxzID0gW107XG4gICAgICAgIHRoaXMuTmMgPSB0aGlzLk5uID0gMDtcbiAgICAgICAgdGhpcy52YWxzID0gW107XG4gICAgfVxuICAgIENvbWJpbmUucHJvdG90eXBlLnVwID0gZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgdmFyIHYgPSB0aGlzLnZhbHNbaV07XG4gICAgICAgIHZhciBObiA9ICF0aGlzLk5uID8gMCA6IHYgPT09IE5PID8gLS10aGlzLk5uIDogdGhpcy5ObjtcbiAgICAgICAgdGhpcy52YWxzW2ldID0gdDtcbiAgICAgICAgcmV0dXJuIE5uID09PSAwO1xuICAgIH07XG4gICAgQ29tYmluZS5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdmFyIHMgPSB0aGlzLmluc0FycjtcbiAgICAgICAgdmFyIG4gPSB0aGlzLk5jID0gdGhpcy5ObiA9IHMubGVuZ3RoO1xuICAgICAgICB2YXIgdmFscyA9IHRoaXMudmFscyA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICAgIG91dC5fbihbXSk7XG4gICAgICAgICAgICBvdXQuX2MoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsc1tpXSA9IE5PO1xuICAgICAgICAgICAgICAgIHNbaV0uX2FkZChuZXcgQ29tYmluZUxpc3RlbmVyKGksIG91dCwgdGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21iaW5lLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzLmluc0FycjtcbiAgICAgICAgdmFyIG4gPSBzLmxlbmd0aDtcbiAgICAgICAgdmFyIGlscyA9IHRoaXMuaWxzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKylcbiAgICAgICAgICAgIHNbaV0uX3JlbW92ZShpbHNbaV0pO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmlscyA9IFtdO1xuICAgICAgICB0aGlzLnZhbHMgPSBbXTtcbiAgICB9O1xuICAgIHJldHVybiBDb21iaW5lO1xufSgpKTtcbnZhciBGcm9tQXJyYXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnJvbUFycmF5KGEpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Zyb21BcnJheSc7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgfVxuICAgIEZyb21BcnJheS5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMuYTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhLmxlbmd0aDsgaSA8IG47IGkrKylcbiAgICAgICAgICAgIG91dC5fbihhW2ldKTtcbiAgICAgICAgb3V0Ll9jKCk7XG4gICAgfTtcbiAgICBGcm9tQXJyYXkucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgcmV0dXJuIEZyb21BcnJheTtcbn0oKSk7XG52YXIgRnJvbVByb21pc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnJvbVByb21pc2UocCkge1xuICAgICAgICB0aGlzLnR5cGUgPSAnZnJvbVByb21pc2UnO1xuICAgICAgICB0aGlzLm9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMucCA9IHA7XG4gICAgfVxuICAgIEZyb21Qcm9taXNlLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHZhciBwcm9kID0gdGhpcztcbiAgICAgICAgdGhpcy5vbiA9IHRydWU7XG4gICAgICAgIHRoaXMucC50aGVuKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBpZiAocHJvZC5vbikge1xuICAgICAgICAgICAgICAgIG91dC5fbih2KTtcbiAgICAgICAgICAgICAgICBvdXQuX2MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIG91dC5fZShlKTtcbiAgICAgICAgfSkudGhlbihub29wLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tUHJvbWlzZS5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub24gPSBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBGcm9tUHJvbWlzZTtcbn0oKSk7XG52YXIgUGVyaW9kaWMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGVyaW9kaWMocGVyaW9kKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwZXJpb2RpYyc7XG4gICAgICAgIHRoaXMucGVyaW9kID0gcGVyaW9kO1xuICAgICAgICB0aGlzLmludGVydmFsSUQgPSAtMTtcbiAgICAgICAgdGhpcy5pID0gMDtcbiAgICB9XG4gICAgUGVyaW9kaWMucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBmdW5jdGlvbiBpbnRlcnZhbEhhbmRsZXIoKSB7IG91dC5fbihzZWxmLmkrKyk7IH1cbiAgICAgICAgdGhpcy5pbnRlcnZhbElEID0gc2V0SW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGVyLCB0aGlzLnBlcmlvZCk7XG4gICAgfTtcbiAgICBQZXJpb2RpYy5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmludGVydmFsSUQgIT09IC0xKVxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSUQpO1xuICAgICAgICB0aGlzLmludGVydmFsSUQgPSAtMTtcbiAgICAgICAgdGhpcy5pID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBQZXJpb2RpYztcbn0oKSk7XG52YXIgRGVidWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVidWcoaW5zLCBhcmcpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2RlYnVnJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMucyA9IG5vb3A7XG4gICAgICAgIHRoaXMubCA9ICcnO1xuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aGlzLmwgPSBhcmc7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aGlzLnMgPSBhcmc7XG4gICAgfVxuICAgIERlYnVnLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgRGVidWcucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgRGVidWcucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgcyA9IHRoaXMucywgbCA9IHRoaXMubDtcbiAgICAgICAgaWYgKHMgIT09IG5vb3ApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcyh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdS5fZShlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsKVxuICAgICAgICAgICAgY29uc29sZS5sb2cobCArICc6JywgdCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHQpO1xuICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgRGVidWcucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIERlYnVnLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVidWc7XG59KCkpO1xudmFyIERyb3AgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRHJvcChtYXgsIGlucykge1xuICAgICAgICB0aGlzLnR5cGUgPSAnZHJvcCc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLm1heCA9IG1heDtcbiAgICAgICAgdGhpcy5kcm9wcGVkID0gMDtcbiAgICB9XG4gICAgRHJvcC5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5kcm9wcGVkID0gMDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIERyb3AucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgRHJvcC5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLmRyb3BwZWQrKyA+PSB0aGlzLm1heClcbiAgICAgICAgICAgIHUuX24odCk7XG4gICAgfTtcbiAgICBEcm9wLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBEcm9wLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRHJvcDtcbn0oKSk7XG52YXIgRW5kV2hlbkxpc3RlbmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVuZFdoZW5MaXN0ZW5lcihvdXQsIG9wKSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLm9wID0gb3A7XG4gICAgfVxuICAgIEVuZFdoZW5MaXN0ZW5lci5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3AuZW5kKCk7XG4gICAgfTtcbiAgICBFbmRXaGVuTGlzdGVuZXIucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLm91dC5fZShlcnIpO1xuICAgIH07XG4gICAgRW5kV2hlbkxpc3RlbmVyLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcC5lbmQoKTtcbiAgICB9O1xuICAgIHJldHVybiBFbmRXaGVuTGlzdGVuZXI7XG59KCkpO1xudmFyIEVuZFdoZW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRW5kV2hlbihvLCBpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2VuZFdoZW4nO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5vID0gbztcbiAgICAgICAgdGhpcy5vaWwgPSBOT19JTDtcbiAgICB9XG4gICAgRW5kV2hlbi5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5vLl9hZGQodGhpcy5vaWwgPSBuZXcgRW5kV2hlbkxpc3RlbmVyKG91dCwgdGhpcykpO1xuICAgICAgICB0aGlzLmlucy5fYWRkKHRoaXMpO1xuICAgIH07XG4gICAgRW5kV2hlbi5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMuby5fcmVtb3ZlKHRoaXMub2lsKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5vaWwgPSBOT19JTDtcbiAgICB9O1xuICAgIEVuZFdoZW4ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICBFbmRXaGVuLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fbih0KTtcbiAgICB9O1xuICAgIEVuZFdoZW4ucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIEVuZFdoZW4ucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVuZCgpO1xuICAgIH07XG4gICAgcmV0dXJuIEVuZFdoZW47XG59KCkpO1xudmFyIEZpbHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaWx0ZXIocGFzc2VzLCBpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2ZpbHRlcic7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmYgPSBwYXNzZXM7XG4gICAgfVxuICAgIEZpbHRlci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIEZpbHRlci5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgfTtcbiAgICBGaWx0ZXIucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgciA9IF90cnkodGhpcywgdCwgdSk7XG4gICAgICAgIGlmIChyID09PSBOTyB8fCAhcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fbih0KTtcbiAgICB9O1xuICAgIEZpbHRlci5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgRmlsdGVyLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRmlsdGVyO1xufSgpKTtcbnZhciBGbGF0dGVuTGlzdGVuZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmxhdHRlbkxpc3RlbmVyKG91dCwgb3ApIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMub3AgPSBvcDtcbiAgICB9XG4gICAgRmxhdHRlbkxpc3RlbmVyLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHRoaXMub3V0Ll9uKHQpO1xuICAgIH07XG4gICAgRmxhdHRlbkxpc3RlbmVyLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5vdXQuX2UoZXJyKTtcbiAgICB9O1xuICAgIEZsYXR0ZW5MaXN0ZW5lci5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3AuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5vcC5sZXNzKCk7XG4gICAgfTtcbiAgICByZXR1cm4gRmxhdHRlbkxpc3RlbmVyO1xufSgpKTtcbnZhciBGbGF0dGVuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZsYXR0ZW4oaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmbGF0dGVuJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMub3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5pbCA9IE5PX0lMO1xuICAgIH1cbiAgICBGbGF0dGVuLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLmlubmVyID0gTk87XG4gICAgICAgIHRoaXMuaWwgPSBOT19JTDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIEZsYXR0ZW4ucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5pbm5lciAhPT0gTk8pXG4gICAgICAgICAgICB0aGlzLmlubmVyLl9yZW1vdmUodGhpcy5pbCk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMub3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5uZXIgPSBOTztcbiAgICAgICAgdGhpcy5pbCA9IE5PX0lMO1xuICAgIH07XG4gICAgRmxhdHRlbi5wcm90b3R5cGUubGVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMub3BlbiAmJiB0aGlzLmlubmVyID09PSBOTylcbiAgICAgICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIEZsYXR0ZW4ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBpbm5lciA9IF9hLmlubmVyLCBpbCA9IF9hLmlsO1xuICAgICAgICBpZiAoaW5uZXIgIT09IE5PICYmIGlsICE9PSBOT19JTClcbiAgICAgICAgICAgIGlubmVyLl9yZW1vdmUoaWwpO1xuICAgICAgICAodGhpcy5pbm5lciA9IHMpLl9hZGQodGhpcy5pbCA9IG5ldyBGbGF0dGVuTGlzdGVuZXIodSwgdGhpcykpO1xuICAgIH07XG4gICAgRmxhdHRlbi5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgRmxhdHRlbi5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxlc3MoKTtcbiAgICB9O1xuICAgIHJldHVybiBGbGF0dGVuO1xufSgpKTtcbnZhciBGb2xkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZvbGQoZiwgc2VlZCwgaW5zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMudHlwZSA9ICdmb2xkJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuZiA9IGZ1bmN0aW9uICh0KSB7IHJldHVybiBmKF90aGlzLmFjYywgdCk7IH07XG4gICAgICAgIHRoaXMuYWNjID0gdGhpcy5zZWVkID0gc2VlZDtcbiAgICB9XG4gICAgRm9sZC5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5hY2MgPSB0aGlzLnNlZWQ7XG4gICAgICAgIG91dC5fbih0aGlzLmFjYyk7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBGb2xkLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5hY2MgPSB0aGlzLnNlZWQ7XG4gICAgfTtcbiAgICBGb2xkLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHIgPSBfdHJ5KHRoaXMsIHQsIHUpO1xuICAgICAgICBpZiAociA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX24odGhpcy5hY2MgPSByKTtcbiAgICB9O1xuICAgIEZvbGQucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIEZvbGQucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIHJldHVybiBGb2xkO1xufSgpKTtcbnZhciBMYXN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExhc3QoaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdsYXN0JztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuaGFzID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmFsID0gTk87XG4gICAgfVxuICAgIExhc3QucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgdGhpcy5vdXQgPSBvdXQ7XG4gICAgICAgIHRoaXMuaGFzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBMYXN0LnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy52YWwgPSBOTztcbiAgICB9O1xuICAgIExhc3QucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdGhpcy5oYXMgPSB0cnVlO1xuICAgICAgICB0aGlzLnZhbCA9IHQ7XG4gICAgfTtcbiAgICBMYXN0LnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBMYXN0LnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5oYXMpIHtcbiAgICAgICAgICAgIHUuX24odGhpcy52YWwpO1xuICAgICAgICAgICAgdS5fYygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHUuX2UobmV3IEVycm9yKCdsYXN0KCkgZmFpbGVkIGJlY2F1c2UgaW5wdXQgc3RyZWFtIGNvbXBsZXRlZCcpKTtcbiAgICB9O1xuICAgIHJldHVybiBMYXN0O1xufSgpKTtcbnZhciBNYXBPcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBPcChwcm9qZWN0LCBpbnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ21hcCc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLmYgPSBwcm9qZWN0O1xuICAgIH1cbiAgICBNYXBPcC5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIE1hcE9wLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIE1hcE9wLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHIgPSBfdHJ5KHRoaXMsIHQsIHUpO1xuICAgICAgICBpZiAociA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX24ocik7XG4gICAgfTtcbiAgICBNYXBPcC5wcm90b3R5cGUuX2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciB1ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmICh1ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdS5fZShlcnIpO1xuICAgIH07XG4gICAgTWFwT3AucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBPcDtcbn0oKSk7XG52YXIgUmVtZW1iZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVtZW1iZXIoaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdyZW1lbWJlcic7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH1cbiAgICBSZW1lbWJlci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZChvdXQpO1xuICAgIH07XG4gICAgUmVtZW1iZXIucHJvdG90eXBlLl9zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlucy5fcmVtb3ZlKHRoaXMub3V0KTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIHJldHVybiBSZW1lbWJlcjtcbn0oKSk7XG52YXIgUmVwbGFjZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcGxhY2VFcnJvcihyZXBsYWNlciwgaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdyZXBsYWNlRXJyb3InO1xuICAgICAgICB0aGlzLmlucyA9IGlucztcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICAgICAgdGhpcy5mID0gcmVwbGFjZXI7XG4gICAgfVxuICAgIFJlcGxhY2VFcnJvci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIFJlcGxhY2VFcnJvci5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgfTtcbiAgICBSZXBsYWNlRXJyb3IucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgUmVwbGFjZUVycm9yLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICh0aGlzLmlucyA9IHRoaXMuZihlcnIpKS5fYWRkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB1Ll9lKGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXBsYWNlRXJyb3IucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAodSA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2MoKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXBsYWNlRXJyb3I7XG59KCkpO1xudmFyIFN0YXJ0V2l0aCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGFydFdpdGgoaW5zLCB2YWwpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ3N0YXJ0V2l0aCc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgICAgICB0aGlzLnZhbCA9IHZhbDtcbiAgICB9XG4gICAgU3RhcnRXaXRoLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB0aGlzLm91dC5fbih0aGlzLnZhbCk7XG4gICAgICAgIHRoaXMuaW5zLl9hZGQob3V0KTtcbiAgICB9O1xuICAgIFN0YXJ0V2l0aC5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5zLl9yZW1vdmUodGhpcy5vdXQpO1xuICAgICAgICB0aGlzLm91dCA9IE5PO1xuICAgIH07XG4gICAgcmV0dXJuIFN0YXJ0V2l0aDtcbn0oKSk7XG52YXIgVGFrZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWtlKG1heCwgaW5zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICd0YWtlJztcbiAgICAgICAgdGhpcy5pbnMgPSBpbnM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgICAgICB0aGlzLnRha2VuID0gMDtcbiAgICB9XG4gICAgVGFrZS5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy50YWtlbiA9IDA7XG4gICAgICAgIGlmICh0aGlzLm1heCA8PSAwKVxuICAgICAgICAgICAgb3V0Ll9jKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuaW5zLl9hZGQodGhpcyk7XG4gICAgfTtcbiAgICBUYWtlLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5vdXQgPSBOTztcbiAgICB9O1xuICAgIFRha2UucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgbSA9ICsrdGhpcy50YWtlbjtcbiAgICAgICAgaWYgKG0gPCB0aGlzLm1heClcbiAgICAgICAgICAgIHUuX24odCk7XG4gICAgICAgIGVsc2UgaWYgKG0gPT09IHRoaXMubWF4KSB7XG4gICAgICAgICAgICB1Ll9uKHQpO1xuICAgICAgICAgICAgdS5fYygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUYWtlLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9lKGVycik7XG4gICAgfTtcbiAgICBUYWtlLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKHUgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9jKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZTtcbn0oKSk7XG52YXIgU3RyZWFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0cmVhbShwcm9kdWNlcikge1xuICAgICAgICB0aGlzLl9wcm9kID0gcHJvZHVjZXIgfHwgTk87XG4gICAgICAgIHRoaXMuX2lscyA9IFtdO1xuICAgICAgICB0aGlzLl9zdG9wSUQgPSBOTztcbiAgICAgICAgdGhpcy5fZGwgPSBOTztcbiAgICAgICAgdGhpcy5fZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSBOTztcbiAgICAgICAgdGhpcy5fZXJyID0gTk87XG4gICAgfVxuICAgIFN0cmVhbS5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMuX2lscztcbiAgICAgICAgdmFyIEwgPSBhLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuX2QpXG4gICAgICAgICAgICB0aGlzLl9kbC5fbih0KTtcbiAgICAgICAgaWYgKEwgPT0gMSlcbiAgICAgICAgICAgIGFbMF0uX24odCk7XG4gICAgICAgIGVsc2UgaWYgKEwgPT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYiA9IGNwKGEpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBMOyBpKyspXG4gICAgICAgICAgICAgICAgYltpXS5fbih0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VyciAhPT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2VyciA9IGVycjtcbiAgICAgICAgdmFyIGEgPSB0aGlzLl9pbHM7XG4gICAgICAgIHZhciBMID0gYS5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3goKTtcbiAgICAgICAgaWYgKHRoaXMuX2QpXG4gICAgICAgICAgICB0aGlzLl9kbC5fZShlcnIpO1xuICAgICAgICBpZiAoTCA9PSAxKVxuICAgICAgICAgICAgYVswXS5fZShlcnIpO1xuICAgICAgICBlbHNlIGlmIChMID09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGIgPSBjcChhKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTDsgaSsrKVxuICAgICAgICAgICAgICAgIGJbaV0uX2UoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2QgJiYgTCA9PSAwKVxuICAgICAgICAgICAgdGhyb3cgdGhpcy5fZXJyO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGEgPSB0aGlzLl9pbHM7XG4gICAgICAgIHZhciBMID0gYS5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3goKTtcbiAgICAgICAgaWYgKHRoaXMuX2QpXG4gICAgICAgICAgICB0aGlzLl9kbC5fYygpO1xuICAgICAgICBpZiAoTCA9PSAxKVxuICAgICAgICAgICAgYVswXS5fYygpO1xuICAgICAgICBlbHNlIGlmIChMID09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGIgPSBjcChhKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTDsgaSsrKVxuICAgICAgICAgICAgICAgIGJbaV0uX2MoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5feCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lscy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLl9wcm9kICE9PSBOTylcbiAgICAgICAgICAgIHRoaXMuX3Byb2QuX3N0b3AoKTtcbiAgICAgICAgdGhpcy5fZXJyID0gTk87XG4gICAgICAgIHRoaXMuX2lscyA9IFtdO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fc3RvcE5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV0FSTklORzogY29kZSB0aGF0IGNhbGxzIHRoaXMgbWV0aG9kIHNob3VsZFxuICAgICAgICAvLyBmaXJzdCBjaGVjayBpZiB0aGlzLl9wcm9kIGlzIHZhbGlkIChub3QgYE5PYClcbiAgICAgICAgdGhpcy5fcHJvZC5fc3RvcCgpO1xuICAgICAgICB0aGlzLl9lcnIgPSBOTztcbiAgICAgICAgdGhpcy5fc3RvcElEID0gTk87XG4gICAgfTtcbiAgICBTdHJlYW0ucHJvdG90eXBlLl9hZGQgPSBmdW5jdGlvbiAoaWwpIHtcbiAgICAgICAgdmFyIHRhID0gdGhpcy5fdGFyZ2V0O1xuICAgICAgICBpZiAodGEgIT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuIHRhLl9hZGQoaWwpO1xuICAgICAgICB2YXIgYSA9IHRoaXMuX2lscztcbiAgICAgICAgYS5wdXNoKGlsKTtcbiAgICAgICAgaWYgKGEubGVuZ3RoID4gMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuX3N0b3BJRCAhPT0gTk8pIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9zdG9wSUQpO1xuICAgICAgICAgICAgdGhpcy5fc3RvcElEID0gTk87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRoaXMuX3Byb2Q7XG4gICAgICAgICAgICBpZiAocCAhPT0gTk8pXG4gICAgICAgICAgICAgICAgcC5fc3RhcnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0cmVhbS5wcm90b3R5cGUuX3JlbW92ZSA9IGZ1bmN0aW9uIChpbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdGEgPSB0aGlzLl90YXJnZXQ7XG4gICAgICAgIGlmICh0YSAhPT0gTk8pXG4gICAgICAgICAgICByZXR1cm4gdGEuX3JlbW92ZShpbCk7XG4gICAgICAgIHZhciBhID0gdGhpcy5faWxzO1xuICAgICAgICB2YXIgaSA9IGEuaW5kZXhPZihpbCk7XG4gICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgIGEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Byb2QgIT09IE5PICYmIGEubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIgPSBOTztcbiAgICAgICAgICAgICAgICB0aGlzLl9zdG9wSUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9zdG9wTm93KCk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcnVuZUN5Y2xlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBJZiBhbGwgcGF0aHMgc3RlbW1pbmcgZnJvbSBgdGhpc2Agc3RyZWFtIGV2ZW50dWFsbHkgZW5kIGF0IGB0aGlzYFxuICAgIC8vIHN0cmVhbSwgdGhlbiB3ZSByZW1vdmUgdGhlIHNpbmdsZSBsaXN0ZW5lciBvZiBgdGhpc2Agc3RyZWFtLCB0b1xuICAgIC8vIGZvcmNlIGl0IHRvIGVuZCBpdHMgZXhlY3V0aW9uIGFuZCBkaXNwb3NlIHJlc291cmNlcy4gVGhpcyBtZXRob2RcbiAgICAvLyBhc3N1bWVzIGFzIGEgcHJlY29uZGl0aW9uIHRoYXQgdGhpcy5faWxzIGhhcyBqdXN0IG9uZSBsaXN0ZW5lci5cbiAgICBTdHJlYW0ucHJvdG90eXBlLl9wcnVuZUN5Y2xlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc05vU2lua3ModGhpcywgW10pKVxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlKHRoaXMuX2lsc1swXSk7XG4gICAgfTtcbiAgICAvLyBDaGVja3Mgd2hldGhlciAqdGhlcmUgaXMgbm8qIHBhdGggc3RhcnRpbmcgZnJvbSBgeGAgdGhhdCBsZWFkcyB0byBhbiBlbmRcbiAgICAvLyBsaXN0ZW5lciAoc2luaykgaW4gdGhlIHN0cmVhbSBncmFwaCwgZm9sbG93aW5nIGVkZ2VzIEEtPkIgd2hlcmUgQiBpcyBhXG4gICAgLy8gbGlzdGVuZXIgb2YgQS4gVGhpcyBtZWFucyB0aGVzZSBwYXRocyBjb25zdGl0dXRlIGEgY3ljbGUgc29tZWhvdy4gSXMgZ2l2ZW5cbiAgICAvLyBhIHRyYWNlIG9mIGFsbCB2aXNpdGVkIG5vZGVzIHNvIGZhci5cbiAgICBTdHJlYW0ucHJvdG90eXBlLl9oYXNOb1NpbmtzID0gZnVuY3Rpb24gKHgsIHRyYWNlKSB7XG4gICAgICAgIGlmICh0cmFjZS5pbmRleE9mKHgpICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBlbHNlIGlmICh4Lm91dCA9PT0gdGhpcylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBlbHNlIGlmICh4Lm91dCAmJiB4Lm91dCAhPT0gTk8pXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzTm9TaW5rcyh4Lm91dCwgdHJhY2UuY29uY2F0KHgpKTtcbiAgICAgICAgZWxzZSBpZiAoeC5faWxzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgTiA9IHguX2lscy5sZW5ndGg7IGkgPCBOOyBpKyspXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9oYXNOb1NpbmtzKHguX2lsc1tpXSwgdHJhY2UuY29uY2F0KHgpKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5jdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIE1lbW9yeVN0cmVhbSA/IE1lbW9yeVN0cmVhbSA6IFN0cmVhbTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBMaXN0ZW5lciB0byB0aGUgU3RyZWFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtMaXN0ZW5lcn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyLl9uID0gbGlzdGVuZXIubmV4dCB8fCBub29wO1xuICAgICAgICBsaXN0ZW5lci5fZSA9IGxpc3RlbmVyLmVycm9yIHx8IG5vb3A7XG4gICAgICAgIGxpc3RlbmVyLl9jID0gbGlzdGVuZXIuY29tcGxldGUgfHwgbm9vcDtcbiAgICAgICAgdGhpcy5fYWRkKGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBMaXN0ZW5lciBmcm9tIHRoZSBTdHJlYW0sIGFzc3VtaW5nIHRoZSBMaXN0ZW5lciB3YXMgYWRkZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xpc3RlbmVyPFQ+fSBsaXN0ZW5lclxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlKGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBMaXN0ZW5lciB0byB0aGUgU3RyZWFtIHJldHVybmluZyBhIFN1YnNjcmlwdGlvbiB0byByZW1vdmUgdGhhdFxuICAgICAqIGxpc3RlbmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtMaXN0ZW5lcn0gbGlzdGVuZXJcbiAgICAgKiBAcmV0dXJucyB7U3Vic2NyaXB0aW9ufVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbVN1Yih0aGlzLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGQgaW50ZXJvcCBiZXR3ZWVuIG1vc3QuanMgYW5kIFJ4SlMgNVxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlW3N5bWJvbF9vYnNlcnZhYmxlXzEuZGVmYXVsdF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTdHJlYW0gZ2l2ZW4gYSBQcm9kdWNlci5cbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0ge1Byb2R1Y2VyfSBwcm9kdWNlciBBbiBvcHRpb25hbCBQcm9kdWNlciB0aGF0IGRpY3RhdGVzIGhvdyB0b1xuICAgICAqIHN0YXJ0LCBnZW5lcmF0ZSBldmVudHMsIGFuZCBzdG9wIHRoZSBTdHJlYW0uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5jcmVhdGUgPSBmdW5jdGlvbiAocHJvZHVjZXIpIHtcbiAgICAgICAgaWYgKHByb2R1Y2VyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb2R1Y2VyLnN0YXJ0ICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgfHwgdHlwZW9mIHByb2R1Y2VyLnN0b3AgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9kdWNlciByZXF1aXJlcyBib3RoIHN0YXJ0IGFuZCBzdG9wIGZ1bmN0aW9ucycpO1xuICAgICAgICAgICAgaW50ZXJuYWxpemVQcm9kdWNlcihwcm9kdWNlcik7IC8vIG11dGF0ZXMgdGhlIGlucHV0XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0ocHJvZHVjZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBNZW1vcnlTdHJlYW0gZ2l2ZW4gYSBQcm9kdWNlci5cbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0ge1Byb2R1Y2VyfSBwcm9kdWNlciBBbiBvcHRpb25hbCBQcm9kdWNlciB0aGF0IGRpY3RhdGVzIGhvdyB0b1xuICAgICAqIHN0YXJ0LCBnZW5lcmF0ZSBldmVudHMsIGFuZCBzdG9wIHRoZSBTdHJlYW0uXG4gICAgICogQHJldHVybiB7TWVtb3J5U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5jcmVhdGVXaXRoTWVtb3J5ID0gZnVuY3Rpb24gKHByb2R1Y2VyKSB7XG4gICAgICAgIGlmIChwcm9kdWNlcilcbiAgICAgICAgICAgIGludGVybmFsaXplUHJvZHVjZXIocHJvZHVjZXIpOyAvLyBtdXRhdGVzIHRoZSBpbnB1dFxuICAgICAgICByZXR1cm4gbmV3IE1lbW9yeVN0cmVhbShwcm9kdWNlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU3RyZWFtIHRoYXQgZG9lcyBub3RoaW5nIHdoZW4gc3RhcnRlZC4gSXQgbmV2ZXIgZW1pdHMgYW55IGV2ZW50LlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogICAgICAgICAgbmV2ZXJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ubmV2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKHsgX3N0YXJ0OiBub29wLCBfc3RvcDogbm9vcCB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBTdHJlYW0gdGhhdCBpbW1lZGlhdGVseSBlbWl0cyB0aGUgXCJjb21wbGV0ZVwiIG5vdGlmaWNhdGlvbiB3aGVuXG4gICAgICogc3RhcnRlZCwgYW5kIHRoYXQncyBpdC5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIGVtcHR5XG4gICAgICogLXxcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbSh7XG4gICAgICAgICAgICBfc3RhcnQ6IGZ1bmN0aW9uIChpbCkgeyBpbC5fYygpOyB9LFxuICAgICAgICAgICAgX3N0b3A6IG5vb3AsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFN0cmVhbSB0aGF0IGltbWVkaWF0ZWx5IGVtaXRzIGFuIFwiZXJyb3JcIiBub3RpZmljYXRpb24gd2l0aCB0aGVcbiAgICAgKiB2YWx1ZSB5b3UgcGFzc2VkIGFzIHRoZSBgZXJyb3JgIGFyZ3VtZW50IHdoZW4gdGhlIHN0cmVhbSBzdGFydHMsIGFuZCB0aGF0J3NcbiAgICAgKiBpdC5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIHRocm93KFgpXG4gICAgICogLVhcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0gZXJyb3IgVGhlIGVycm9yIGV2ZW50IHRvIGVtaXQgb24gdGhlIGNyZWF0ZWQgc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0udGhyb3cgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oe1xuICAgICAgICAgICAgX3N0YXJ0OiBmdW5jdGlvbiAoaWwpIHsgaWwuX2UoZXJyb3IpOyB9LFxuICAgICAgICAgICAgX3N0b3A6IG5vb3AsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0cmVhbSBmcm9tIGFuIEFycmF5LCBQcm9taXNlLCBvciBhbiBPYnNlcnZhYmxlLlxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8UHJvbWlzZUxpa2V8T2JzZXJ2YWJsZX0gaW5wdXQgVGhlIGlucHV0IHRvIG1ha2UgYSBzdHJlYW0gZnJvbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLmZyb20gPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dFtzeW1ib2xfb2JzZXJ2YWJsZV8xLmRlZmF1bHRdID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbS5mcm9tT2JzZXJ2YWJsZShpbnB1dCk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dC50aGVuID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbS5mcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKVxuICAgICAgICAgICAgcmV0dXJuIFN0cmVhbS5mcm9tQXJyYXkoaW5wdXQpO1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVHlwZSBvZiBpbnB1dCB0byBmcm9tKCkgbXVzdCBiZSBhbiBBcnJheSwgUHJvbWlzZSwgb3IgT2JzZXJ2YWJsZVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBTdHJlYW0gdGhhdCBpbW1lZGlhdGVseSBlbWl0cyB0aGUgYXJndW1lbnRzIHRoYXQgeW91IGdpdmUgdG9cbiAgICAgKiAqb2YqLCB0aGVuIGNvbXBsZXRlcy5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIG9mKDEsMiwzKVxuICAgICAqIDEyM3xcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0gYSBUaGUgZmlyc3QgdmFsdWUgeW91IHdhbnQgdG8gZW1pdCBhcyBhbiBldmVudCBvbiB0aGUgc3RyZWFtLlxuICAgICAqIEBwYXJhbSBiIFRoZSBzZWNvbmQgdmFsdWUgeW91IHdhbnQgdG8gZW1pdCBhcyBhbiBldmVudCBvbiB0aGUgc3RyZWFtLiBPbmVcbiAgICAgKiBvciBtb3JlIG9mIHRoZXNlIHZhbHVlcyBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ub2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaXRlbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyZWFtLmZyb21BcnJheShpdGVtcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbiBhcnJheSB0byBhIHN0cmVhbS4gVGhlIHJldHVybmVkIHN0cmVhbSB3aWxsIGVtaXQgc3luY2hyb25vdXNseVxuICAgICAqIGFsbCB0aGUgaXRlbXMgaW4gdGhlIGFycmF5LCBhbmQgdGhlbiBjb21wbGV0ZS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIGZyb21BcnJheShbMSwyLDNdKVxuICAgICAqIDEyM3xcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBmYWN0b3J5IHRydWVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gYmUgY29udmVydGVkIGFzIGEgc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0uZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBGcm9tQXJyYXkoYXJyYXkpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgcHJvbWlzZSB0byBhIHN0cmVhbS4gVGhlIHJldHVybmVkIHN0cmVhbSB3aWxsIGVtaXQgdGhlIHJlc29sdmVkXG4gICAgICogdmFsdWUgb2YgdGhlIHByb21pc2UsIGFuZCB0aGVuIGNvbXBsZXRlLiBIb3dldmVyLCBpZiB0aGUgcHJvbWlzZSBpc1xuICAgICAqIHJlamVjdGVkLCB0aGUgc3RyZWFtIHdpbGwgZW1pdCB0aGUgY29ycmVzcG9uZGluZyBlcnJvci5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIGZyb21Qcm9taXNlKCAtLS0tNDIgKVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tNDJ8XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHtQcm9taXNlTGlrZX0gcHJvbWlzZSBUaGUgcHJvbWlzZSB0byBiZSBjb252ZXJ0ZWQgYXMgYSBzdHJlYW0uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5mcm9tUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBGcm9tUHJvbWlzZShwcm9taXNlKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbiBPYnNlcnZhYmxlIGludG8gYSBTdHJlYW0uXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHthbnl9IG9ic2VydmFibGUgVGhlIG9ic2VydmFibGUgdG8gYmUgY29udmVydGVkIGFzIGEgc3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0uZnJvbU9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JzKSB7XG4gICAgICAgIGlmIChvYnMuZW5kV2hlbilcbiAgICAgICAgICAgIHJldHVybiBvYnM7XG4gICAgICAgIHZhciBvID0gdHlwZW9mIG9ic1tzeW1ib2xfb2JzZXJ2YWJsZV8xLmRlZmF1bHRdID09PSAnZnVuY3Rpb24nID8gb2JzW3N5bWJvbF9vYnNlcnZhYmxlXzEuZGVmYXVsdF0oKSA6IG9icztcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IEZyb21PYnNlcnZhYmxlKG8pKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdHJlYW0gdGhhdCBwZXJpb2RpY2FsbHkgZW1pdHMgaW5jcmVtZW50YWwgbnVtYmVycywgZXZlcnlcbiAgICAgKiBgcGVyaW9kYCBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAgICAgcGVyaW9kaWMoMTAwMClcbiAgICAgKiAtLS0wLS0tMS0tLTItLS0zLS0tNC0tLS4uLlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwZXJpb2QgVGhlIGludGVydmFsIGluIG1pbGxpc2Vjb25kcyB0byB1c2UgYXMgYSByYXRlIG9mXG4gICAgICogZW1pc3Npb24uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wZXJpb2RpYyA9IGZ1bmN0aW9uIChwZXJpb2QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IFBlcmlvZGljKHBlcmlvZCkpO1xuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS5fbWFwID0gZnVuY3Rpb24gKHByb2plY3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAodGhpcy5jdG9yKCkpKG5ldyBNYXBPcChwcm9qZWN0LCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGVhY2ggZXZlbnQgZnJvbSB0aGUgaW5wdXQgU3RyZWFtIHRocm91Z2ggYSBgcHJvamVjdGAgZnVuY3Rpb24sXG4gICAgICogdG8gZ2V0IGEgU3RyZWFtIHRoYXQgZW1pdHMgdGhvc2UgdHJhbnNmb3JtZWQgZXZlbnRzLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0xLS0tMy0tNS0tLS0tNy0tLS0tLVxuICAgICAqICAgIG1hcChpID0+IGkgKiAxMClcbiAgICAgKiAtLTEwLS0zMC01MC0tLS03MC0tLS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9qZWN0IEEgZnVuY3Rpb24gb2YgdHlwZSBgKHQ6IFQpID0+IFVgIHRoYXQgdGFrZXMgZXZlbnRcbiAgICAgKiBgdGAgb2YgdHlwZSBgVGAgZnJvbSB0aGUgaW5wdXQgU3RyZWFtIGFuZCBwcm9kdWNlcyBhbiBldmVudCBvZiB0eXBlIGBVYCwgdG9cbiAgICAgKiBiZSBlbWl0dGVkIG9uIHRoZSBvdXRwdXQgU3RyZWFtLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChwcm9qZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAocHJvamVjdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJdCdzIGxpa2UgYG1hcGAsIGJ1dCB0cmFuc2Zvcm1zIGVhY2ggaW5wdXQgZXZlbnQgdG8gYWx3YXlzIHRoZSBzYW1lXG4gICAgICogY29uc3RhbnQgdmFsdWUgb24gdGhlIG91dHB1dCBTdHJlYW0uXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLTEtLS0zLS01LS0tLS03LS0tLS1cbiAgICAgKiAgICAgICBtYXBUbygxMClcbiAgICAgKiAtLTEwLS0xMC0xMC0tLS0xMC0tLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9qZWN0ZWRWYWx1ZSBBIHZhbHVlIHRvIGVtaXQgb24gdGhlIG91dHB1dCBTdHJlYW0gd2hlbmV2ZXIgdGhlXG4gICAgICogaW5wdXQgU3RyZWFtIGVtaXRzIGFueSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5tYXBUbyA9IGZ1bmN0aW9uIChwcm9qZWN0ZWRWYWx1ZSkge1xuICAgICAgICB2YXIgcyA9IHRoaXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb2plY3RlZFZhbHVlOyB9KTtcbiAgICAgICAgdmFyIG9wID0gcy5fcHJvZDtcbiAgICAgICAgb3AudHlwZSA9ICdtYXBUbyc7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT25seSBhbGxvd3MgZXZlbnRzIHRoYXQgcGFzcyB0aGUgdGVzdCBnaXZlbiBieSB0aGUgYHBhc3Nlc2AgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBFYWNoIGV2ZW50IGZyb20gdGhlIGlucHV0IHN0cmVhbSBpcyBnaXZlbiB0byB0aGUgYHBhc3Nlc2AgZnVuY3Rpb24uIElmIHRoZVxuICAgICAqIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgLCB0aGUgZXZlbnQgaXMgZm9yd2FyZGVkIHRvIHRoZSBvdXRwdXQgc3RyZWFtLFxuICAgICAqIG90aGVyd2lzZSBpdCBpcyBpZ25vcmVkIGFuZCBub3QgZm9yd2FyZGVkLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0xLS0tMi0tMy0tLS0tNC0tLS0tNS0tLTYtLTctOC0tXG4gICAgICogICAgIGZpbHRlcihpID0+IGkgJSAyID09PSAwKVxuICAgICAqIC0tLS0tLTItLS0tLS0tLTQtLS0tLS0tLS02LS0tLTgtLVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcGFzc2VzIEEgZnVuY3Rpb24gb2YgdHlwZSBgKHQ6IFQpID0+IGJvb2xlYW5gIHRoYXQgdGFrZXNcbiAgICAgKiBhbiBldmVudCBmcm9tIHRoZSBpbnB1dCBzdHJlYW0gYW5kIGNoZWNrcyBpZiBpdCBwYXNzZXMsIGJ5IHJldHVybmluZyBhXG4gICAgICogYm9vbGVhbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAocGFzc2VzKSB7XG4gICAgICAgIHZhciBwID0gdGhpcy5fcHJvZDtcbiAgICAgICAgaWYgKHAgaW5zdGFuY2VvZiBGaWx0ZXIpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShuZXcgRmlsdGVyKGFuZChwLmYsIHBhc3NlcyksIHAuaW5zKSk7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBGaWx0ZXIocGFzc2VzLCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMZXRzIHRoZSBmaXJzdCBgYW1vdW50YCBtYW55IGV2ZW50cyBmcm9tIHRoZSBpbnB1dCBzdHJlYW0gcGFzcyB0byB0aGVcbiAgICAgKiBvdXRwdXQgc3RyZWFtLCB0aGVuIG1ha2VzIHRoZSBvdXRwdXQgc3RyZWFtIGNvbXBsZXRlLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS1hLS0tYi0tYy0tLS1kLS0tZS0tXG4gICAgICogICAgdGFrZSgzKVxuICAgICAqIC0tYS0tLWItLWN8XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IEhvdyBtYW55IGV2ZW50cyB0byBhbGxvdyBmcm9tIHRoZSBpbnB1dCBzdHJlYW1cbiAgICAgKiBiZWZvcmUgY29tcGxldGluZyB0aGUgb3V0cHV0IHN0cmVhbS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS50YWtlID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICByZXR1cm4gbmV3ICh0aGlzLmN0b3IoKSkobmV3IFRha2UoYW1vdW50LCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJZ25vcmVzIHRoZSBmaXJzdCBgYW1vdW50YCBtYW55IGV2ZW50cyBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIGFuZCB0aGVuXG4gICAgICogYWZ0ZXIgdGhhdCBzdGFydHMgZm9yd2FyZGluZyBldmVudHMgZnJvbSB0aGUgaW5wdXQgc3RyZWFtIHRvIHRoZSBvdXRwdXRcbiAgICAgKiBzdHJlYW0uXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLWEtLS1iLS1jLS0tLWQtLS1lLS1cbiAgICAgKiAgICAgICBkcm9wKDMpXG4gICAgICogLS0tLS0tLS0tLS0tLS1kLS0tZS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IEhvdyBtYW55IGV2ZW50cyB0byBpZ25vcmUgZnJvbSB0aGUgaW5wdXQgc3RyZWFtXG4gICAgICogYmVmb3JlIGZvcndhcmRpbmcgYWxsIGV2ZW50cyBmcm9tIHRoZSBpbnB1dCBzdHJlYW0gdG8gdGhlIG91dHB1dCBzdHJlYW0uXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuZHJvcCA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IERyb3AoYW1vdW50LCB0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBpbnB1dCBzdHJlYW0gY29tcGxldGVzLCB0aGUgb3V0cHV0IHN0cmVhbSB3aWxsIGVtaXQgdGhlIGxhc3QgZXZlbnRcbiAgICAgKiBlbWl0dGVkIGJ5IHRoZSBpbnB1dCBzdHJlYW0sIGFuZCB0aGVuIHdpbGwgYWxzbyBjb21wbGV0ZS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIC0tYS0tLWItLWMtLWQtLS0tfFxuICAgICAqICAgICAgIGxhc3QoKVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tZHxcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtKG5ldyBMYXN0KHRoaXMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFByZXBlbmRzIHRoZSBnaXZlbiBgaW5pdGlhbGAgdmFsdWUgdG8gdGhlIHNlcXVlbmNlIG9mIGV2ZW50cyBlbWl0dGVkIGJ5IHRoZVxuICAgICAqIGlucHV0IHN0cmVhbS4gVGhlIHJldHVybmVkIHN0cmVhbSBpcyBhIE1lbW9yeVN0cmVhbSwgd2hpY2ggbWVhbnMgaXQgaXNcbiAgICAgKiBhbHJlYWR5IGByZW1lbWJlcigpYCdkLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0tMS0tLTItLS0tLTMtLS1cbiAgICAgKiAgIHN0YXJ0V2l0aCgwKVxuICAgICAqIDAtLTEtLS0yLS0tLS0zLS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5pdGlhbCBUaGUgdmFsdWUgb3IgZXZlbnQgdG8gcHJlcGVuZC5cbiAgICAgKiBAcmV0dXJuIHtNZW1vcnlTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5zdGFydFdpdGggPSBmdW5jdGlvbiAoaW5pdGlhbCkge1xuICAgICAgICByZXR1cm4gbmV3IE1lbW9yeVN0cmVhbShuZXcgU3RhcnRXaXRoKHRoaXMsIGluaXRpYWwpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZXMgYW5vdGhlciBzdHJlYW0gdG8gZGV0ZXJtaW5lIHdoZW4gdG8gY29tcGxldGUgdGhlIGN1cnJlbnQgc3RyZWFtLlxuICAgICAqXG4gICAgICogV2hlbiB0aGUgZ2l2ZW4gYG90aGVyYCBzdHJlYW0gZW1pdHMgYW4gZXZlbnQgb3IgY29tcGxldGVzLCB0aGUgb3V0cHV0XG4gICAgICogc3RyZWFtIHdpbGwgY29tcGxldGUuIEJlZm9yZSB0aGF0IGhhcHBlbnMsIHRoZSBvdXRwdXQgc3RyZWFtIHdpbGwgYmVoYXZlc1xuICAgICAqIGxpa2UgdGhlIGlucHV0IHN0cmVhbS5cbiAgICAgKlxuICAgICAqIE1hcmJsZSBkaWFncmFtOlxuICAgICAqXG4gICAgICogYGBgdGV4dFxuICAgICAqIC0tLTEtLS0yLS0tLS0zLS00LS0tLTUtLS0tNi0tLVxuICAgICAqICAgZW5kV2hlbiggLS0tLS0tLS1hLS1iLS18IClcbiAgICAgKiAtLS0xLS0tMi0tLS0tMy0tNC0tfFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyIFNvbWUgb3RoZXIgc3RyZWFtIHRoYXQgaXMgdXNlZCB0byBrbm93IHdoZW4gc2hvdWxkIHRoZSBvdXRwdXRcbiAgICAgKiBzdHJlYW0gb2YgdGhpcyBvcGVyYXRvciBjb21wbGV0ZS5cbiAgICAgKiBAcmV0dXJuIHtTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5lbmRXaGVuID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgKHRoaXMuY3RvcigpKShuZXcgRW5kV2hlbihvdGhlciwgdGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogXCJGb2xkc1wiIHRoZSBzdHJlYW0gb250byBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBDb21iaW5lcyBldmVudHMgZnJvbSB0aGUgcGFzdCB0aHJvdWdob3V0XG4gICAgICogdGhlIGVudGlyZSBleGVjdXRpb24gb2YgdGhlIGlucHV0IHN0cmVhbSwgYWxsb3dpbmcgeW91IHRvIGFjY3VtdWxhdGUgdGhlbVxuICAgICAqIHRvZ2V0aGVyLiBJdCdzIGVzc2VudGlhbGx5IGxpa2UgYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgLiBUaGUgcmV0dXJuZWRcbiAgICAgKiBzdHJlYW0gaXMgYSBNZW1vcnlTdHJlYW0sIHdoaWNoIG1lYW5zIGl0IGlzIGFscmVhZHkgYHJlbWVtYmVyKClgJ2QuXG4gICAgICpcbiAgICAgKiBUaGUgb3V0cHV0IHN0cmVhbSBzdGFydHMgYnkgZW1pdHRpbmcgdGhlIGBzZWVkYCB3aGljaCB5b3UgZ2l2ZSBhcyBhcmd1bWVudC5cbiAgICAgKiBUaGVuLCB3aGVuIGFuIGV2ZW50IGhhcHBlbnMgb24gdGhlIGlucHV0IHN0cmVhbSwgaXQgaXMgY29tYmluZWQgd2l0aCB0aGF0XG4gICAgICogc2VlZCB2YWx1ZSB0aHJvdWdoIHRoZSBgYWNjdW11bGF0ZWAgZnVuY3Rpb24sIGFuZCB0aGUgb3V0cHV0IHZhbHVlIGlzXG4gICAgICogZW1pdHRlZCBvbiB0aGUgb3V0cHV0IHN0cmVhbS4gYGZvbGRgIHJlbWVtYmVycyB0aGF0IG91dHB1dCB2YWx1ZSBhcyBgYWNjYFxuICAgICAqIChcImFjY3VtdWxhdG9yXCIpLCBhbmQgdGhlbiB3aGVuIGEgbmV3IGlucHV0IGV2ZW50IGB0YCBoYXBwZW5zLCBgYWNjYCB3aWxsIGJlXG4gICAgICogY29tYmluZWQgd2l0aCB0aGF0IHRvIHByb2R1Y2UgdGhlIG5ldyBgYWNjYCBhbmQgc28gZm9ydGguXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLS0tLS0xLS0tLS0xLS0yLS0tLTEtLS0tMS0tLS0tLVxuICAgICAqICAgZm9sZCgoYWNjLCB4KSA9PiBhY2MgKyB4LCAzKVxuICAgICAqIDMtLS0tLTQtLS0tLTUtLTctLS0tOC0tLS05LS0tLS0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhY2N1bXVsYXRlIEEgZnVuY3Rpb24gb2YgdHlwZSBgKGFjYzogUiwgdDogVCkgPT4gUmAgdGhhdFxuICAgICAqIHRha2VzIHRoZSBwcmV2aW91cyBhY2N1bXVsYXRlZCB2YWx1ZSBgYWNjYCBhbmQgdGhlIGluY29taW5nIGV2ZW50IGZyb20gdGhlXG4gICAgICogaW5wdXQgc3RyZWFtIGFuZCBwcm9kdWNlcyB0aGUgbmV3IGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSBzZWVkIFRoZSBpbml0aWFsIGFjY3VtdWxhdGVkIHZhbHVlLCBvZiB0eXBlIGBSYC5cbiAgICAgKiBAcmV0dXJuIHtNZW1vcnlTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5mb2xkID0gZnVuY3Rpb24gKGFjY3VtdWxhdGUsIHNlZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZW1vcnlTdHJlYW0obmV3IEZvbGQoYWNjdW11bGF0ZSwgc2VlZCwgdGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgYW4gZXJyb3Igd2l0aCBhbm90aGVyIHN0cmVhbS5cbiAgICAgKlxuICAgICAqIFdoZW4gKGFuZCBpZikgYW4gZXJyb3IgaGFwcGVucyBvbiB0aGUgaW5wdXQgc3RyZWFtLCBpbnN0ZWFkIG9mIGZvcndhcmRpbmdcbiAgICAgKiB0aGF0IGVycm9yIHRvIHRoZSBvdXRwdXQgc3RyZWFtLCAqcmVwbGFjZUVycm9yKiB3aWxsIGNhbGwgdGhlIGByZXBsYWNlYFxuICAgICAqIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgdGhlIHN0cmVhbSB0aGF0IHRoZSBvdXRwdXQgc3RyZWFtIHdpbGwgcmVwbGljYXRlLlxuICAgICAqIEFuZCwgaW4gY2FzZSB0aGF0IG5ldyBzdHJlYW0gYWxzbyBlbWl0cyBhbiBlcnJvciwgYHJlcGxhY2VgIHdpbGwgYmUgY2FsbGVkXG4gICAgICogYWdhaW4gdG8gZ2V0IGFub3RoZXIgc3RyZWFtIHRvIHN0YXJ0IHJlcGxpY2F0aW5nLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0xLS0tMi0tLS0tMy0tNC0tLS0tWFxuICAgICAqICAgcmVwbGFjZUVycm9yKCAoKSA9PiAtLTEwLS18IClcbiAgICAgKiAtLTEtLS0yLS0tLS0zLS00LS0tLS0tLS0xMC0tfFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVwbGFjZSBBIGZ1bmN0aW9uIG9mIHR5cGUgYChlcnIpID0+IFN0cmVhbWAgdGhhdCB0YWtlc1xuICAgICAqIHRoZSBlcnJvciB0aGF0IG9jY3VycmVkIG9uIHRoZSBpbnB1dCBzdHJlYW0gb3Igb24gdGhlIHByZXZpb3VzIHJlcGxhY2VtZW50XG4gICAgICogc3RyZWFtIGFuZCByZXR1cm5zIGEgbmV3IHN0cmVhbS4gVGhlIG91dHB1dCBzdHJlYW0gd2lsbCBiZWhhdmUgbGlrZSB0aGVcbiAgICAgKiBzdHJlYW0gdGhhdCB0aGlzIGZ1bmN0aW9uIHJldHVybnMuXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUucmVwbGFjZUVycm9yID0gZnVuY3Rpb24gKHJlcGxhY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAodGhpcy5jdG9yKCkpKG5ldyBSZXBsYWNlRXJyb3IocmVwbGFjZSwgdGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYSBcInN0cmVhbSBvZiBzdHJlYW1zXCIsIGhhbmRsaW5nIG9ubHkgb25lIG5lc3RlZCBzdHJlYW0gYXQgYSB0aW1lXG4gICAgICogKG5vIGNvbmN1cnJlbmN5KS5cbiAgICAgKlxuICAgICAqIElmIHRoZSBpbnB1dCBzdHJlYW0gaXMgYSBzdHJlYW0gdGhhdCBlbWl0cyBzdHJlYW1zLCB0aGVuIHRoaXMgb3BlcmF0b3Igd2lsbFxuICAgICAqIHJldHVybiBhbiBvdXRwdXQgc3RyZWFtIHdoaWNoIGlzIGEgZmxhdCBzdHJlYW06IGVtaXRzIHJlZ3VsYXIgZXZlbnRzLiBUaGVcbiAgICAgKiBmbGF0dGVuaW5nIGhhcHBlbnMgd2l0aG91dCBjb25jdXJyZW5jeS4gSXQgd29ya3MgbGlrZSB0aGlzOiB3aGVuIHRoZSBpbnB1dFxuICAgICAqIHN0cmVhbSBlbWl0cyBhIG5lc3RlZCBzdHJlYW0sICpmbGF0dGVuKiB3aWxsIHN0YXJ0IGltaXRhdGluZyB0aGF0IG5lc3RlZFxuICAgICAqIG9uZS4gSG93ZXZlciwgYXMgc29vbiBhcyB0aGUgbmV4dCBuZXN0ZWQgc3RyZWFtIGlzIGVtaXR0ZWQgb24gdGhlIGlucHV0XG4gICAgICogc3RyZWFtLCAqZmxhdHRlbiogd2lsbCBmb3JnZXQgdGhlIHByZXZpb3VzIG5lc3RlZCBvbmUgaXQgd2FzIGltaXRhdGluZywgYW5kXG4gICAgICogd2lsbCBzdGFydCBpbWl0YXRpbmcgdGhlIG5ldyBuZXN0ZWQgb25lLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0rLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tXG4gICAgICogICBcXCAgICAgICAgXFxcbiAgICAgKiAgICBcXCAgICAgICAtLS0tMS0tLS0yLS0tMy0tXG4gICAgICogICAgLS1hLS1iLS0tLWMtLS0tZC0tLS0tLS0tXG4gICAgICogICAgICAgICAgIGZsYXR0ZW5cbiAgICAgKiAtLS0tLWEtLWItLS0tLS0xLS0tLTItLS0zLS1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmZsYXR0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwID0gdGhpcy5fcHJvZDtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IEZsYXR0ZW4odGhpcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFzc2VzIHRoZSBpbnB1dCBzdHJlYW0gdG8gYSBjdXN0b20gb3BlcmF0b3IsIHRvIHByb2R1Y2UgYW4gb3V0cHV0IHN0cmVhbS5cbiAgICAgKlxuICAgICAqICpjb21wb3NlKiBpcyBhIGhhbmR5IHdheSBvZiB1c2luZyBhbiBleGlzdGluZyBmdW5jdGlvbiBpbiBhIGNoYWluZWQgc3R5bGUuXG4gICAgICogSW5zdGVhZCBvZiB3cml0aW5nIGBvdXRTdHJlYW0gPSBmKGluU3RyZWFtKWAgeW91IGNhbiB3cml0ZVxuICAgICAqIGBvdXRTdHJlYW0gPSBpblN0cmVhbS5jb21wb3NlKGYpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wZXJhdG9yIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHN0cmVhbSBhcyBpbnB1dCBhbmRcbiAgICAgKiByZXR1cm5zIGEgc3RyZWFtIGFzIHdlbGwuXG4gICAgICogQHJldHVybiB7U3RyZWFtfVxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuY29tcG9zZSA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICByZXR1cm4gb3BlcmF0b3IodGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG91dHB1dCBzdHJlYW0gdGhhdCBiZWhhdmVzIGxpa2UgdGhlIGlucHV0IHN0cmVhbSwgYnV0IGFsc29cbiAgICAgKiByZW1lbWJlcnMgdGhlIG1vc3QgcmVjZW50IGV2ZW50IHRoYXQgaGFwcGVucyBvbiB0aGUgaW5wdXQgc3RyZWFtLCBzbyB0aGF0IGFcbiAgICAgKiBuZXdseSBhZGRlZCBsaXN0ZW5lciB3aWxsIGltbWVkaWF0ZWx5IHJlY2VpdmUgdGhhdCBtZW1vcmlzZWQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtNZW1vcnlTdHJlYW19XG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5yZW1lbWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZW1vcnlTdHJlYW0obmV3IFJlbWVtYmVyKHRoaXMpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb3V0cHV0IHN0cmVhbSB0aGF0IGlkZW50aWNhbGx5IGJlaGF2ZXMgbGlrZSB0aGUgaW5wdXQgc3RyZWFtLFxuICAgICAqIGJ1dCBhbHNvIHJ1bnMgYSBgc3B5YCBmdW5jdGlvbiBmb3IgZWFjaCBldmVudCwgdG8gaGVscCB5b3UgZGVidWcgeW91ciBhcHAuXG4gICAgICpcbiAgICAgKiAqZGVidWcqIHRha2VzIGEgYHNweWAgZnVuY3Rpb24gYXMgYXJndW1lbnQsIGFuZCBydW5zIHRoYXQgZm9yIGVhY2ggZXZlbnRcbiAgICAgKiBoYXBwZW5pbmcgb24gdGhlIGlucHV0IHN0cmVhbS4gSWYgeW91IGRvbid0IHByb3ZpZGUgdGhlIGBzcHlgIGFyZ3VtZW50LFxuICAgICAqIHRoZW4gKmRlYnVnKiB3aWxsIGp1c3QgYGNvbnNvbGUubG9nYCBlYWNoIGV2ZW50LiBUaGlzIGhlbHBzIHlvdSB0b1xuICAgICAqIHVuZGVyc3RhbmQgdGhlIGZsb3cgb2YgZXZlbnRzIHRocm91Z2ggc29tZSBvcGVyYXRvciBjaGFpbi5cbiAgICAgKlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgaWYgdGhlIG91dHB1dCBzdHJlYW0gaGFzIG5vIGxpc3RlbmVycywgdGhlbiBpdCB3aWxsIG5vdFxuICAgICAqIHN0YXJ0LCB3aGljaCBtZWFucyBgc3B5YCB3aWxsIG5ldmVyIHJ1biBiZWNhdXNlIG5vIGFjdHVhbCBldmVudCBoYXBwZW5zIGluXG4gICAgICogdGhhdCBjYXNlLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0xLS0tLTItLS0tLTMtLS0tLTQtLVxuICAgICAqICAgICAgICAgZGVidWdcbiAgICAgKiAtLTEtLS0tMi0tLS0tMy0tLS0tNC0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsYWJlbE9yU3B5IEEgc3RyaW5nIHRvIHVzZSBhcyB0aGUgbGFiZWwgd2hlbiBwcmludGluZ1xuICAgICAqIGRlYnVnIGluZm9ybWF0aW9uIG9uIHRoZSBjb25zb2xlLCBvciBhICdzcHknIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4gZXZlbnRcbiAgICAgKiBhcyBhcmd1bWVudCwgYW5kIGRvZXMgbm90IG5lZWQgdG8gcmV0dXJuIGFueXRoaW5nLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLmRlYnVnID0gZnVuY3Rpb24gKGxhYmVsT3JTcHkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAodGhpcy5jdG9yKCkpKG5ldyBEZWJ1Zyh0aGlzLCBsYWJlbE9yU3B5KSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiAqaW1pdGF0ZSogY2hhbmdlcyB0aGlzIGN1cnJlbnQgU3RyZWFtIHRvIGVtaXQgdGhlIHNhbWUgZXZlbnRzIHRoYXQgdGhlXG4gICAgICogYG90aGVyYCBnaXZlbiBTdHJlYW0gZG9lcy4gVGhpcyBtZXRob2QgcmV0dXJucyBub3RoaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZXhpc3RzIHRvIGFsbG93IG9uZSB0aGluZzogKipjaXJjdWxhciBkZXBlbmRlbmN5IG9mIHN0cmVhbXMqKi5cbiAgICAgKiBGb3IgaW5zdGFuY2UsIGxldCdzIGltYWdpbmUgdGhhdCBmb3Igc29tZSByZWFzb24geW91IG5lZWQgdG8gY3JlYXRlIGFcbiAgICAgKiBjaXJjdWxhciBkZXBlbmRlbmN5IHdoZXJlIHN0cmVhbSBgZmlyc3QkYCBkZXBlbmRzIG9uIHN0cmVhbSBgc2Vjb25kJGBcbiAgICAgKiB3aGljaCBpbiB0dXJuIGRlcGVuZHMgb24gYGZpcnN0JGA6XG4gICAgICpcbiAgICAgKiA8IS0tIHNraXAtZXhhbXBsZSAtLT5cbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCBkZWxheSBmcm9tICd4c3RyZWFtL2V4dHJhL2RlbGF5J1xuICAgICAqXG4gICAgICogdmFyIGZpcnN0JCA9IHNlY29uZCQubWFwKHggPT4geCAqIDEwKS50YWtlKDMpO1xuICAgICAqIHZhciBzZWNvbmQkID0gZmlyc3QkLm1hcCh4ID0+IHggKyAxKS5zdGFydFdpdGgoMSkuY29tcG9zZShkZWxheSgxMDApKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEhvd2V2ZXIsIHRoYXQgaXMgaW52YWxpZCBKYXZhU2NyaXB0LCBiZWNhdXNlIGBzZWNvbmQkYCBpcyB1bmRlZmluZWRcbiAgICAgKiBvbiB0aGUgZmlyc3QgbGluZS4gVGhpcyBpcyBob3cgKmltaXRhdGUqIGNhbiBoZWxwIHNvbHZlIGl0OlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBpbXBvcnQgZGVsYXkgZnJvbSAneHN0cmVhbS9leHRyYS9kZWxheSdcbiAgICAgKlxuICAgICAqIHZhciBzZWNvbmRQcm94eSQgPSB4cy5jcmVhdGUoKTtcbiAgICAgKiB2YXIgZmlyc3QkID0gc2Vjb25kUHJveHkkLm1hcCh4ID0+IHggKiAxMCkudGFrZSgzKTtcbiAgICAgKiB2YXIgc2Vjb25kJCA9IGZpcnN0JC5tYXAoeCA9PiB4ICsgMSkuc3RhcnRXaXRoKDEpLmNvbXBvc2UoZGVsYXkoMTAwKSk7XG4gICAgICogc2Vjb25kUHJveHkkLmltaXRhdGUoc2Vjb25kJCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBXZSBjcmVhdGUgYHNlY29uZFByb3h5JGAgYmVmb3JlIHRoZSBvdGhlcnMsIHNvIGl0IGNhbiBiZSB1c2VkIGluIHRoZVxuICAgICAqIGRlY2xhcmF0aW9uIG9mIGBmaXJzdCRgLiBUaGVuLCBhZnRlciBib3RoIGBmaXJzdCRgIGFuZCBgc2Vjb25kJGAgYXJlXG4gICAgICogZGVmaW5lZCwgd2UgaG9vayBgc2Vjb25kUHJveHkkYCB3aXRoIGBzZWNvbmQkYCB3aXRoIGBpbWl0YXRlKClgIHRvIHRlbGxcbiAgICAgKiB0aGF0IHRoZXkgYXJlIFwidGhlIHNhbWVcIi4gYGltaXRhdGVgIHdpbGwgbm90IHRyaWdnZXIgdGhlIHN0YXJ0IG9mIGFueVxuICAgICAqIHN0cmVhbSwgaXQganVzdCBiaW5kcyBgc2Vjb25kUHJveHkkYCBhbmQgYHNlY29uZCRgIHRvZ2V0aGVyLlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBpcyBhbiBleGFtcGxlIHdoZXJlIGBpbWl0YXRlKClgIGlzIGltcG9ydGFudCBpbiBDeWNsZS5qc1xuICAgICAqIGFwcGxpY2F0aW9ucy4gQSBwYXJlbnQgY29tcG9uZW50IGNvbnRhaW5zIHNvbWUgY2hpbGQgY29tcG9uZW50cy4gQSBjaGlsZFxuICAgICAqIGhhcyBhbiBhY3Rpb24gc3RyZWFtIHdoaWNoIGlzIGdpdmVuIHRvIHRoZSBwYXJlbnQgdG8gZGVmaW5lIGl0cyBzdGF0ZTpcbiAgICAgKlxuICAgICAqIDwhLS0gc2tpcC1leGFtcGxlIC0tPlxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgY2hpbGRBY3Rpb25Qcm94eSQgPSB4cy5jcmVhdGUoKTtcbiAgICAgKiBjb25zdCBwYXJlbnQgPSBQYXJlbnQoey4uLnNvdXJjZXMsIGNoaWxkQWN0aW9uJDogY2hpbGRBY3Rpb25Qcm94eSR9KTtcbiAgICAgKiBjb25zdCBjaGlsZEFjdGlvbiQgPSBwYXJlbnQuc3RhdGUkLm1hcChzID0+IHMuY2hpbGQuYWN0aW9uJCkuZmxhdHRlbigpO1xuICAgICAqIGNoaWxkQWN0aW9uUHJveHkkLmltaXRhdGUoY2hpbGRBY3Rpb24kKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE5vdGUsIHRob3VnaCwgdGhhdCAqKmBpbWl0YXRlKClgIGRvZXMgbm90IHN1cHBvcnQgTWVtb3J5U3RyZWFtcyoqLiBJZiB3ZVxuICAgICAqIHdvdWxkIGF0dGVtcHQgdG8gaW1pdGF0ZSBhIE1lbW9yeVN0cmVhbSBpbiBhIGNpcmN1bGFyIGRlcGVuZGVuY3ksIHdlIHdvdWxkXG4gICAgICogZWl0aGVyIGdldCBhIHJhY2UgY29uZGl0aW9uICh3aGVyZSB0aGUgc3ltcHRvbSB3b3VsZCBiZSBcIm5vdGhpbmcgaGFwcGVuc1wiKVxuICAgICAqIG9yIGFuIGluZmluaXRlIGN5Y2xpYyBlbWlzc2lvbiBvZiB2YWx1ZXMuIEl0J3MgdXNlZnVsIHRvIHRoaW5rIGFib3V0XG4gICAgICogTWVtb3J5U3RyZWFtcyBhcyBjZWxscyBpbiBhIHNwcmVhZHNoZWV0LiBJdCBkb2Vzbid0IG1ha2UgYW55IHNlbnNlIHRvXG4gICAgICogZGVmaW5lIGEgc3ByZWFkc2hlZXQgY2VsbCBgQTFgIHdpdGggYSBmb3JtdWxhIHRoYXQgZGVwZW5kcyBvbiBgQjFgIGFuZFxuICAgICAqIGNlbGwgYEIxYCBkZWZpbmVkIHdpdGggYSBmb3JtdWxhIHRoYXQgZGVwZW5kcyBvbiBgQTFgLlxuICAgICAqXG4gICAgICogSWYgeW91IGZpbmQgeW91cnNlbGYgd2FudGluZyB0byB1c2UgYGltaXRhdGUoKWAgd2l0aCBhXG4gICAgICogTWVtb3J5U3RyZWFtLCB5b3Ugc2hvdWxkIHJld29yayB5b3VyIGNvZGUgYXJvdW5kIGBpbWl0YXRlKClgIHRvIHVzZSBhXG4gICAgICogU3RyZWFtIGluc3RlYWQuIExvb2sgZm9yIHRoZSBzdHJlYW0gaW4gdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kgdGhhdFxuICAgICAqIHJlcHJlc2VudHMgYW4gZXZlbnQgc3RyZWFtLCBhbmQgdGhhdCB3b3VsZCBiZSBhIGNhbmRpZGF0ZSBmb3IgY3JlYXRpbmcgYVxuICAgICAqIHByb3h5IFN0cmVhbSB3aGljaCB0aGVuIGltaXRhdGVzIHRoZSB0YXJnZXQgU3RyZWFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJlYW19IHRhcmdldCBUaGUgb3RoZXIgc3RyZWFtIHRvIGltaXRhdGUgb24gdGhlIGN1cnJlbnQgb25lLiBNdXN0XG4gICAgICogbm90IGJlIGEgTWVtb3J5U3RyZWFtLlxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuaW1pdGF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIE1lbW9yeVN0cmVhbSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQSBNZW1vcnlTdHJlYW0gd2FzIGdpdmVuIHRvIGltaXRhdGUoKSwgYnV0IGl0IG9ubHkgJyArXG4gICAgICAgICAgICAgICAgJ3N1cHBvcnRzIGEgU3RyZWFtLiBSZWFkIG1vcmUgYWJvdXQgdGhpcyByZXN0cmljdGlvbiBoZXJlOiAnICtcbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3N0YWx0ei94c3RyZWFtI2ZhcScpO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIGZvciAodmFyIGlscyA9IHRoaXMuX2lscywgTiA9IGlscy5sZW5ndGgsIGkgPSAwOyBpIDwgTjsgaSsrKVxuICAgICAgICAgICAgdGFyZ2V0Ll9hZGQoaWxzW2ldKTtcbiAgICAgICAgdGhpcy5faWxzID0gW107XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGb3JjZXMgdGhlIFN0cmVhbSB0byBlbWl0IHRoZSBnaXZlbiB2YWx1ZSB0byBpdHMgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQXMgdGhlIG5hbWUgaW5kaWNhdGVzLCBpZiB5b3UgdXNlIHRoaXMsIHlvdSBhcmUgbW9zdCBsaWtlbHkgZG9pbmcgc29tZXRoaW5nXG4gICAgICogVGhlIFdyb25nIFdheS4gUGxlYXNlIHRyeSB0byB1bmRlcnN0YW5kIHRoZSByZWFjdGl2ZSB3YXkgYmVmb3JlIHVzaW5nIHRoaXNcbiAgICAgKiBtZXRob2QuIFVzZSBpdCBvbmx5IHdoZW4geW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBcIm5leHRcIiB2YWx1ZSB5b3Ugd2FudCB0byBicm9hZGNhc3QgdG8gYWxsIGxpc3RlbmVycyBvZlxuICAgICAqIHRoaXMgU3RyZWFtLlxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuc2hhbWVmdWxseVNlbmROZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX24odmFsdWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRm9yY2VzIHRoZSBTdHJlYW0gdG8gZW1pdCB0aGUgZ2l2ZW4gZXJyb3IgdG8gaXRzIGxpc3RlbmVycy5cbiAgICAgKlxuICAgICAqIEFzIHRoZSBuYW1lIGluZGljYXRlcywgaWYgeW91IHVzZSB0aGlzLCB5b3UgYXJlIG1vc3QgbGlrZWx5IGRvaW5nIHNvbWV0aGluZ1xuICAgICAqIFRoZSBXcm9uZyBXYXkuIFBsZWFzZSB0cnkgdG8gdW5kZXJzdGFuZCB0aGUgcmVhY3RpdmUgd2F5IGJlZm9yZSB1c2luZyB0aGlzXG4gICAgICogbWV0aG9kLiBVc2UgaXQgb25seSB3aGVuIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7YW55fSBlcnJvciBUaGUgZXJyb3IgeW91IHdhbnQgdG8gYnJvYWRjYXN0IHRvIGFsbCB0aGUgbGlzdGVuZXJzIG9mXG4gICAgICogdGhpcyBTdHJlYW0uXG4gICAgICovXG4gICAgU3RyZWFtLnByb3RvdHlwZS5zaGFtZWZ1bGx5U2VuZEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRoaXMuX2UoZXJyb3IpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRm9yY2VzIHRoZSBTdHJlYW0gdG8gZW1pdCB0aGUgXCJjb21wbGV0ZWRcIiBldmVudCB0byBpdHMgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQXMgdGhlIG5hbWUgaW5kaWNhdGVzLCBpZiB5b3UgdXNlIHRoaXMsIHlvdSBhcmUgbW9zdCBsaWtlbHkgZG9pbmcgc29tZXRoaW5nXG4gICAgICogVGhlIFdyb25nIFdheS4gUGxlYXNlIHRyeSB0byB1bmRlcnN0YW5kIHRoZSByZWFjdGl2ZSB3YXkgYmVmb3JlIHVzaW5nIHRoaXNcbiAgICAgKiBtZXRob2QuIFVzZSBpdCBvbmx5IHdoZW4geW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxuICAgICAqL1xuICAgIFN0cmVhbS5wcm90b3R5cGUuc2hhbWVmdWxseVNlbmRDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIFwiZGVidWdcIiBsaXN0ZW5lciB0byB0aGUgc3RyZWFtLiBUaGVyZSBjYW4gb25seSBiZSBvbmUgZGVidWdcbiAgICAgKiBsaXN0ZW5lciwgdGhhdCdzIHdoeSB0aGlzIGlzICdzZXREZWJ1Z0xpc3RlbmVyJy4gVG8gcmVtb3ZlIHRoZSBkZWJ1Z1xuICAgICAqIGxpc3RlbmVyLCBqdXN0IGNhbGwgc2V0RGVidWdMaXN0ZW5lcihudWxsKS5cbiAgICAgKlxuICAgICAqIEEgZGVidWcgbGlzdGVuZXIgaXMgbGlrZSBhbnkgb3RoZXIgbGlzdGVuZXIuIFRoZSBvbmx5IGRpZmZlcmVuY2UgaXMgdGhhdCBhXG4gICAgICogZGVidWcgbGlzdGVuZXIgaXMgXCJzdGVhbHRoeVwiOiBpdHMgcHJlc2VuY2UvYWJzZW5jZSBkb2VzIG5vdCB0cmlnZ2VyIHRoZVxuICAgICAqIHN0YXJ0L3N0b3Agb2YgdGhlIHN0cmVhbSAob3IgdGhlIHByb2R1Y2VyIGluc2lkZSB0aGUgc3RyZWFtKS4gVGhpcyBpc1xuICAgICAqIHVzZWZ1bCBzbyB5b3UgY2FuIGluc3BlY3Qgd2hhdCBpcyBnb2luZyBvbiB3aXRob3V0IGNoYW5naW5nIHRoZSBiZWhhdmlvclxuICAgICAqIG9mIHRoZSBwcm9ncmFtLiBJZiB5b3UgaGF2ZSBhbiBpZGxlIHN0cmVhbSBhbmQgeW91IGFkZCBhIG5vcm1hbCBsaXN0ZW5lciB0b1xuICAgICAqIGl0LCB0aGUgc3RyZWFtIHdpbGwgc3RhcnQgZXhlY3V0aW5nLiBCdXQgaWYgeW91IHNldCBhIGRlYnVnIGxpc3RlbmVyIG9uIGFuXG4gICAgICogaWRsZSBzdHJlYW0sIGl0IHdvbid0IHN0YXJ0IGV4ZWN1dGluZyAobm90IHVudGlsIHRoZSBmaXJzdCBub3JtYWwgbGlzdGVuZXJcbiAgICAgKiBpcyBhZGRlZCkuXG4gICAgICpcbiAgICAgKiBBcyB0aGUgbmFtZSBpbmRpY2F0ZXMsIHdlIGRvbid0IHJlY29tbWVuZCB1c2luZyB0aGlzIG1ldGhvZCB0byBidWlsZCBhcHBcbiAgICAgKiBsb2dpYy4gSW4gZmFjdCwgaW4gbW9zdCBjYXNlcyB0aGUgZGVidWcgb3BlcmF0b3Igd29ya3MganVzdCBmaW5lLiBPbmx5IHVzZVxuICAgICAqIHRoaXMgb25lIGlmIHlvdSBrbm93IHdoYXQgeW91J3JlIGRvaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtMaXN0ZW5lcjxUPn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBTdHJlYW0ucHJvdG90eXBlLnNldERlYnVnTGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5fZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fZGwgPSBOTztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSB0cnVlO1xuICAgICAgICAgICAgbGlzdGVuZXIuX24gPSBsaXN0ZW5lci5uZXh0IHx8IG5vb3A7XG4gICAgICAgICAgICBsaXN0ZW5lci5fZSA9IGxpc3RlbmVyLmVycm9yIHx8IG5vb3A7XG4gICAgICAgICAgICBsaXN0ZW5lci5fYyA9IGxpc3RlbmVyLmNvbXBsZXRlIHx8IG5vb3A7XG4gICAgICAgICAgICB0aGlzLl9kbCA9IGxpc3RlbmVyO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBCbGVuZHMgbXVsdGlwbGUgc3RyZWFtcyB0b2dldGhlciwgZW1pdHRpbmcgZXZlbnRzIGZyb20gYWxsIG9mIHRoZW1cbiAgICAgKiBjb25jdXJyZW50bHkuXG4gICAgICpcbiAgICAgKiAqbWVyZ2UqIHRha2VzIG11bHRpcGxlIHN0cmVhbXMgYXMgYXJndW1lbnRzLCBhbmQgY3JlYXRlcyBhIHN0cmVhbSB0aGF0XG4gICAgICogYmVoYXZlcyBsaWtlIGVhY2ggb2YgdGhlIGFyZ3VtZW50IHN0cmVhbXMsIGluIHBhcmFsbGVsLlxuICAgICAqXG4gICAgICogTWFyYmxlIGRpYWdyYW06XG4gICAgICpcbiAgICAgKiBgYGB0ZXh0XG4gICAgICogLS0xLS0tLTItLS0tLTMtLS0tLS0tLTQtLS1cbiAgICAgKiAtLS0tYS0tLS0tYi0tLS1jLS0tZC0tLS0tLVxuICAgICAqICAgICAgICAgICAgbWVyZ2VcbiAgICAgKiAtLTEtYS0tMi0tYi0tMy1jLS0tZC0tNC0tLVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGZhY3RvcnkgdHJ1ZVxuICAgICAqIEBwYXJhbSB7U3RyZWFtfSBzdHJlYW0xIEEgc3RyZWFtIHRvIG1lcmdlIHRvZ2V0aGVyIHdpdGggb3RoZXIgc3RyZWFtcy5cbiAgICAgKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtMiBBIHN0cmVhbSB0byBtZXJnZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuIFR3b1xuICAgICAqIG9yIG1vcmUgc3RyZWFtcyBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0ubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSgpIHtcbiAgICAgICAgdmFyIHN0cmVhbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHN0cmVhbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShuZXcgTWVyZ2Uoc3RyZWFtcykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tYmluZXMgbXVsdGlwbGUgaW5wdXQgc3RyZWFtcyB0b2dldGhlciB0byByZXR1cm4gYSBzdHJlYW0gd2hvc2UgZXZlbnRzXG4gICAgICogYXJlIGFycmF5cyB0aGF0IGNvbGxlY3QgdGhlIGxhdGVzdCBldmVudHMgZnJvbSBlYWNoIGlucHV0IHN0cmVhbS5cbiAgICAgKlxuICAgICAqICpjb21iaW5lKiBpbnRlcm5hbGx5IHJlbWVtYmVycyB0aGUgbW9zdCByZWNlbnQgZXZlbnQgZnJvbSBlYWNoIG9mIHRoZSBpbnB1dFxuICAgICAqIHN0cmVhbXMuIFdoZW4gYW55IG9mIHRoZSBpbnB1dCBzdHJlYW1zIGVtaXRzIGFuIGV2ZW50LCB0aGF0IGV2ZW50IHRvZ2V0aGVyXG4gICAgICogd2l0aCBhbGwgdGhlIG90aGVyIHNhdmVkIGV2ZW50cyBhcmUgY29tYmluZWQgaW50byBhbiBhcnJheS4gVGhhdCBhcnJheSB3aWxsXG4gICAgICogYmUgZW1pdHRlZCBvbiB0aGUgb3V0cHV0IHN0cmVhbS4gSXQncyBlc3NlbnRpYWxseSBhIHdheSBvZiBqb2luaW5nIHRvZ2V0aGVyXG4gICAgICogdGhlIGV2ZW50cyBmcm9tIG11bHRpcGxlIHN0cmVhbXMuXG4gICAgICpcbiAgICAgKiBNYXJibGUgZGlhZ3JhbTpcbiAgICAgKlxuICAgICAqIGBgYHRleHRcbiAgICAgKiAtLTEtLS0tMi0tLS0tMy0tLS0tLS0tNC0tLVxuICAgICAqIC0tLS1hLS0tLS1iLS0tLS1jLS1kLS0tLS0tXG4gICAgICogICAgICAgICAgY29tYmluZVxuICAgICAqIC0tLS0xYS0yYS0yYi0zYi0zYy0zZC00ZC0tXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZmFjdG9yeSB0cnVlXG4gICAgICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbTEgQSBzdHJlYW0gdG8gY29tYmluZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuXG4gICAgICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbTIgQSBzdHJlYW0gdG8gY29tYmluZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuXG4gICAgICogTXVsdGlwbGUgc3RyZWFtcywgbm90IGp1c3QgdHdvLCBtYXkgYmUgZ2l2ZW4gYXMgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm4ge1N0cmVhbX1cbiAgICAgKi9cbiAgICBTdHJlYW0uY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoKSB7XG4gICAgICAgIHZhciBzdHJlYW1zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBzdHJlYW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0obmV3IENvbWJpbmUoc3RyZWFtcykpO1xuICAgIH07XG4gICAgcmV0dXJuIFN0cmVhbTtcbn0oKSk7XG5leHBvcnRzLlN0cmVhbSA9IFN0cmVhbTtcbnZhciBNZW1vcnlTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1lbW9yeVN0cmVhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNZW1vcnlTdHJlYW0ocHJvZHVjZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvZHVjZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9oYXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgdGhpcy5fdiA9IHg7XG4gICAgICAgIHRoaXMuX2hhcyA9IHRydWU7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX24uY2FsbCh0aGlzLCB4KTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuX2FkZCA9IGZ1bmN0aW9uIChpbCkge1xuICAgICAgICB2YXIgdGEgPSB0aGlzLl90YXJnZXQ7XG4gICAgICAgIGlmICh0YSAhPT0gTk8pXG4gICAgICAgICAgICByZXR1cm4gdGEuX2FkZChpbCk7XG4gICAgICAgIHZhciBhID0gdGhpcy5faWxzO1xuICAgICAgICBhLnB1c2goaWwpO1xuICAgICAgICBpZiAoYS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faGFzKVxuICAgICAgICAgICAgICAgIGlsLl9uKHRoaXMuX3YpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdG9wSUQgIT09IE5PKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faGFzKVxuICAgICAgICAgICAgICAgIGlsLl9uKHRoaXMuX3YpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3N0b3BJRCk7XG4gICAgICAgICAgICB0aGlzLl9zdG9wSUQgPSBOTztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9oYXMpXG4gICAgICAgICAgICBpbC5fbih0aGlzLl92KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRoaXMuX3Byb2Q7XG4gICAgICAgICAgICBpZiAocCAhPT0gTk8pXG4gICAgICAgICAgICAgICAgcC5fc3RhcnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuX3N0b3BOb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2hhcyA9IGZhbHNlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9zdG9wTm93LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLl94ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9oYXMgPSBmYWxzZTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5feC5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAocHJvamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwKHByb2plY3QpO1xuICAgIH07XG4gICAgTWVtb3J5U3RyZWFtLnByb3RvdHlwZS5tYXBUbyA9IGZ1bmN0aW9uIChwcm9qZWN0ZWRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5tYXBUby5jYWxsKHRoaXMsIHByb2plY3RlZFZhbHVlKTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUudGFrZSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUudGFrZS5jYWxsKHRoaXMsIGFtb3VudCk7XG4gICAgfTtcbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLmVuZFdoZW4gPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuZW5kV2hlbi5jYWxsKHRoaXMsIG90aGVyKTtcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUucmVwbGFjZUVycm9yID0gZnVuY3Rpb24gKHJlcGxhY2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUucmVwbGFjZUVycm9yLmNhbGwodGhpcywgcmVwbGFjZSk7XG4gICAgfTtcbiAgICBNZW1vcnlTdHJlYW0ucHJvdG90eXBlLnJlbWVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE1lbW9yeVN0cmVhbS5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiAobGFiZWxPclNweSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5kZWJ1Zy5jYWxsKHRoaXMsIGxhYmVsT3JTcHkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1lbW9yeVN0cmVhbTtcbn0oU3RyZWFtKSk7XG5leHBvcnRzLk1lbW9yeVN0cmVhbSA9IE1lbW9yeVN0cmVhbTtcbnZhciB4cyA9IFN0cmVhbTtcbmV4cG9ydHMuZGVmYXVsdCA9IHhzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKemNtTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPMEZCUVVFc2RVUkJRVFpETzBGQlJUZERMRWxCUVUwc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF6dEJRV2xuUlU0c1owSkJRVVU3UVVGb1owVldMR3RDUVVGcFFpeERRVUZETzBGQlJXeENMRmxCUVdVc1EwRkJWenRKUVVONFFpeEpRVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRMjVDTEVsQlFVMHNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU51UWl4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRSUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGVFTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRXQ3hEUVVGRE8wRkJSVVFzWVVGQlowSXNSVUZCY1VJc1JVRkJSU3hGUVVGeFFqdEpRVU14UkN4UFFVRlBMR1ZCUVdVc1EwRkJTVHRSUVVONFFpeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEZUVJc1EwRkJReXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVTFFTEdOQlFXOUNMRU5CUVcxQ0xFVkJRVVVzUTBGQlNTeEZRVUZGTEVOQlFXTTdTVUZETTBRc1NVRkJTVHRSUVVOR0xFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVObU8wbEJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdVVUZEVml4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExSXNUMEZCVHl4RlFVRkZMRU5CUVVNN1MwRkRXRHRCUVVOSUxFTkJRVU03UVVGUlJDeEpRVUZOTEV0QlFVc3NSMEZCTUVJN1NVRkRia01zUlVGQlJTeEZRVUZGTEVsQlFVazdTVUZEVWl4RlFVRkZMRVZCUVVVc1NVRkJTVHRKUVVOU0xFVkJRVVVzUlVGQlJTeEpRVUZKTzBOQlExUXNRMEZCUXp0QlFUQTVSRlVzYzBKQlFVczdRVUZvTjBScVFpeHZRa0ZCYjBJN1FVRkRjRUlzTmtKQlFXZERMRkZCUVc5RU8wbEJRMnhHTEZGQlFWRXNRMEZCUXl4TlFVRk5MRWRCUVVjc1owSkJRV2RDTEVWQlFUaERPMUZCUXpsRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJRenRSUVVOb1FpeEZRVUZGTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU03VVVGRGFrSXNSVUZCUlN4RFFVRkRMRkZCUVZFc1IwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETzFGQlEzQkNMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEYWtJc1EwRkJReXhEUVVGRE8wbEJRMFlzVVVGQlVTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRMnBETEVOQlFVTTdRVUZGUkR0SlFVTkZMRzFDUVVGdlFpeFBRVUZyUWl4RlFVRlZMRk5CUVRoQ08xRkJRVEZFTEZsQlFVOHNSMEZCVUN4UFFVRlBMRU5CUVZjN1VVRkJWU3hqUVVGVExFZEJRVlFzVTBGQlV5eERRVUZ4UWp0SlFVRkhMRU5CUVVNN1NVRkZiRVlzSzBKQlFWY3NSMEZCV0R0UlFVTkZMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRKUVVOMlF5eERRVUZETzBsQlEwZ3NaMEpCUVVNN1FVRkJSQ3hEUVVGRExFRkJUa1FzU1VGTlF6dEJRVVZFTzBsQlEwVXNhMEpCUVc5Q0xGTkJRVGhDTzFGQlFUbENMR05CUVZNc1IwRkJWQ3hUUVVGVExFTkJRWEZDTzBsQlFVY3NRMEZCUXp0SlFVVjBSQ3gxUWtGQlNTeEhRVUZLTEZWQlFVc3NTMEZCVVR0UlFVTllMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUXpOQ0xFTkJRVU03U1VGRlJDeDNRa0ZCU3l4SFFVRk1MRlZCUVUwc1IwRkJVVHRSUVVOYUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRM3BDTEVOQlFVTTdTVUZGUkN3eVFrRkJVU3hIUVVGU08xRkJRMFVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlEwZ3NaVUZCUXp0QlFVRkVMRU5CUVVNc1FVRmtSQ3hKUVdORE8wRkJSVVE3U1VGUFJTeDNRa0ZCV1N4VlFVRjVRanRSUVU0NVFpeFRRVUZKTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03VVVGUE4wSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhWUVVGVkxFTkJRVU03VVVGRGRFSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU03U1VGRGRFSXNRMEZCUXp0SlFVVkVMQ3RDUVVGTkxFZEJRVTRzVlVGQlR5eEhRVUZqTzFGQlEyNUNMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlEyWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRGJrSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyeEVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRUdFpRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03U1VGRE5VTXNRMEZCUXp0SlFVVkVMRGhDUVVGTExFZEJRVXc3VVVGRFJTeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpPMWxCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVTjJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXp0SlFVTjBRaXhEUVVGRE8wbEJRMGdzY1VKQlFVTTdRVUZCUkN4RFFVRkRMRUZCZGtKRUxFbEJkVUpETzBGQmRVVkVPMGxCVFVVc1pVRkJXU3hOUVVGM1FqdFJRVXczUWl4VFFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRE8xRkJUWEJDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRM0pDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJaU3hEUVVGRE8xRkJRek5DTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRMlFzUTBGQlF6dEpRVVZFTEhOQ1FVRk5MRWRCUVU0c1ZVRkJUeXhIUVVGak8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRMllzU1VGQlRTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVOMFFpeEpRVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMW9zUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVTdXVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUXpsRExFTkJRVU03U1VGRlJDeHhRa0ZCU3l4SFFVRk1PMUZCUTBVc1NVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0UlFVTjBRaXhKUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTI1Q0xFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTzFsQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTXZReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFXVXNRMEZCUXp0SlFVTTNRaXhEUVVGRE8wbEJSVVFzYTBKQlFVVXNSMEZCUml4VlFVRkhMRU5CUVVrN1VVRkRUQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZCUlN4UFFVRlBPMUZCUTNKQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRWaXhEUVVGRE8wbEJSVVFzYTBKQlFVVXNSMEZCUml4VlFVRkhMRWRCUVZFN1VVRkRWQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZCUlN4UFFVRlBPMUZCUTNKQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRXaXhEUVVGRE8wbEJSVVFzYTBKQlFVVXNSMEZCUmp0UlFVTkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNSVUZCUlR0WlFVTnNRaXhKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMWxCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdaMEpCUVVVc1QwRkJUenRaUVVOeVFpeERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1UwRkRVanRKUVVOSUxFTkJRVU03U1VGRFNDeFpRVUZETzBGQlFVUXNRMEZCUXl4QlFUbERSQ3hKUVRoRFF6dEJRWFZGUkR0SlFVdEZMSGxDUVVGWkxFTkJRVk1zUlVGQlJTeEhRVUZ4UWl4RlFVRkZMRU5CUVdFN1VVRkRla1FzU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRXQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVTm1MRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlExZ3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEYmtJc1EwRkJRenRKUVVWRUxEUkNRVUZGTEVkQlFVWXNWVUZCUnl4RFFVRkpPMUZCUTB3c1NVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU5xUXl4SlFVRkpMRWRCUVVjc1MwRkJTeXhGUVVGRk8xbEJRVVVzVDBGQlR6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSVHRaUVVOdVFpeEpRVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJRMnBDTEVsQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU03V1VGRGJrSXNTVUZCVFN4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNUNMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8yZENRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZUVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTllPMGxCUTBnc1EwRkJRenRKUVVWRUxEUkNRVUZGTEVkQlFVWXNWVUZCUnl4SFFVRlJPMUZCUTFRc1NVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXp0UlFVTnlRaXhKUVVGSkxFZEJRVWNzUzBGQlN5eEZRVUZGTzFsQlFVVXNUMEZCVHp0UlFVTjJRaXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTJRc1EwRkJRenRKUVVWRUxEUkNRVUZGTEVkQlFVWTdVVUZEUlN4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEycENMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUzBGQlN5eEZRVUZGTzFsQlFVVXNUMEZCVHp0UlFVTjZRaXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRPMWxCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0SlFVTXZRaXhEUVVGRE8wbEJRMGdzYzBKQlFVTTdRVUZCUkN4RFFVRkRMRUZCYmtORUxFbEJiVU5ETzBGQlJVUTdTVUZUUlN4cFFrRkJXU3hOUVVFd1FqdFJRVkl2UWl4VFFVRkpMRWRCUVVjc1UwRkJVeXhEUVVGRE8xRkJVM1JDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRM0pDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJjMElzUTBGQlF6dFJRVU5zUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5rTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEZEVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVWRUxHOUNRVUZGTEVkQlFVWXNWVUZCUnl4RFFVRk5MRVZCUVVVc1EwRkJVenRSUVVOc1FpeEpRVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzWkNMRWxCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU03VVVGRGVrUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEYWtJc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBsQlEyeENMRU5CUVVNN1NVRkZSQ3gzUWtGQlRTeEhRVUZPTEZWQlFVOHNSMEZCY1VJN1VVRkRNVUlzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRaaXhKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTNSQ0xFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTNaRExFbEJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZEVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzFsQlExZ3NSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU5ZTEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRUUVVOV08yRkJRVTA3V1VGRFRDeExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMmRDUVVNeFFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8yZENRVU5pTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeGxRVUZsTEVOQlFVTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzJGQlF6bERPMU5CUTBZN1NVRkRTQ3hEUVVGRE8wbEJSVVFzZFVKQlFVc3NSMEZCVER0UlFVTkZMRWxCUVUwc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdVVUZEZEVJc1NVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXp0UlFVTnVRaXhKUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTNKQ0xFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTzFsQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOcVJDeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVhOQ0xFTkJRVU03VVVGRGJFTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRFpDeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlEwZ3NZMEZCUXp0QlFVRkVMRU5CUVVNc1FVRnFSRVFzU1VGcFJFTTdRVUZGUkR0SlFVbEZMRzFDUVVGWkxFTkJRVmM3VVVGSWFFSXNVMEZCU1N4SFFVRkhMRmRCUVZjc1EwRkJRenRSUVVsNFFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOaUxFTkJRVU03U1VGRlJDd3dRa0ZCVFN4SFFVRk9MRlZCUVU4c1IwRkJkMEk3VVVGRE4wSXNTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5xUWl4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlR0WlFVRkZMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRka1FzUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMGxCUTFnc1EwRkJRenRKUVVWRUxIbENRVUZMTEVkQlFVdzdTVUZEUVN4RFFVRkRPMGxCUTBnc1owSkJRVU03UVVGQlJDeERRVUZETEVGQmFFSkVMRWxCWjBKRE8wRkJSVVE3U1VGTFJTeHhRa0ZCV1N4RFFVRnBRanRSUVVwMFFpeFRRVUZKTEVkQlFVY3NZVUZCWVN4RFFVRkRPMUZCU3pGQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTJoQ0xFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTJJc1EwRkJRenRKUVVWRUxEUkNRVUZOTEVkQlFVNHNWVUZCVHl4SFFVRjNRanRSUVVNM1FpeEpRVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1VVRkRiRUlzU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNN1VVRkRaaXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZEVkN4VlFVRkRMRU5CUVVrN1dVRkRTQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVTdaMEpCUTFnc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRWaXhIUVVGSExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdZVUZEVmp0UlFVTklMRU5CUVVNc1JVRkRSQ3hWUVVGRExFTkJRVTA3V1VGRFRDeEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMW9zUTBGQlF5eERRVU5HTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hWUVVGRExFZEJRVkU3V1VGRGNFSXNWVUZCVlN4RFFVRkRMR05CUVZFc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnVReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkN3eVFrRkJTeXhIUVVGTU8xRkJRMFVzU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1NVRkRiRUlzUTBGQlF6dEpRVU5JTEd0Q1FVRkRPMEZCUVVRc1EwRkJReXhCUVM5Q1JDeEpRU3RDUXp0QlFVVkVPMGxCVFVVc2EwSkJRVmtzVFVGQll6dFJRVXh1UWl4VFFVRkpMRWRCUVVjc1ZVRkJWU3hEUVVGRE8xRkJUWFpDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRM0pDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNrSXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRFlpeERRVUZETzBsQlJVUXNlVUpCUVUwc1IwRkJUaXhWUVVGUExFZEJRVFpDTzFGQlEyeERMRWxCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU5zUWl3MlFrRkJOa0lzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYUVRc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFhRVUZYTEVOQlFVTXNaVUZCWlN4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEpRVU01UkN4RFFVRkRPMGxCUlVRc2QwSkJRVXNzUjBGQlREdFJRVU5GTEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGQlJTeGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJRek5FTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNrSXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRFlpeERRVUZETzBsQlEwZ3NaVUZCUXp0QlFVRkVMRU5CUVVNc1FVRjJRa1FzU1VGMVFrTTdRVUZGUkR0SlFWZEZMR1ZCUVZrc1IwRkJZeXhGUVVGRkxFZEJRVEJETzFGQlZpOUVMRk5CUVVrc1IwRkJSeXhQUVVGUExFTkJRVU03VVVGWGNFSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVdVc1EwRkJRenRSUVVNelFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOa0xFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTFvc1NVRkJTU3hQUVVGUExFZEJRVWNzUzBGQlN5eFJRVUZSTzFsQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03WVVGQlRTeEpRVUZKTEU5QlFVOHNSMEZCUnl4TFFVRkxMRlZCUVZVN1dVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXp0SlFVTTVSaXhEUVVGRE8wbEJSVVFzYzBKQlFVMHNSMEZCVGl4VlFVRlBMRWRCUVdNN1VVRkRia0lzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRaaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlJVUXNjVUpCUVVzc1IwRkJURHRSUVVORkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRM1pDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJaU3hEUVVGRE8wbEJRemRDTEVOQlFVTTdTVUZGUkN4clFrRkJSU3hIUVVGR0xGVkJRVWNzUTBGQlNUdFJRVU5NTEVsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRGJrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVGRkxFOUJRVTg3VVVGRGNrSXNTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNM1FpeEpRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRVZCUVVVN1dVRkRaQ3hKUVVGSk8yZENRVU5HTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRoUVVOT08xbEJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdaMEpCUTFZc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTlVPMU5CUTBZN1lVRkJUU3hKUVVGSkxFTkJRVU03V1VGQlJTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdPMWxCUVUwc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXpSQ3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFZc1EwRkJRenRKUVVWRUxHdENRVUZGTEVkQlFVWXNWVUZCUnl4SFFVRlJPMUZCUTFRc1NVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzFsQlFVVXNUMEZCVHp0UlFVTnlRaXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTFvc1EwRkJRenRKUVVWRUxHdENRVUZGTEVkQlFVWTdVVUZEUlN4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlEyNUNMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVU3V1VGQlJTeFBRVUZQTzFGQlEzSkNMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dEpRVU5VTEVOQlFVTTdTVUZEU0N4WlFVRkRPMEZCUVVRc1EwRkJReXhCUVhSRVJDeEpRWE5FUXp0QlFVVkVPMGxCVDBVc1kwRkJXU3hIUVVGWExFVkJRVVVzUjBGQll6dFJRVTVvUXl4VFFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJUMjVDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRMllzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRmxMRU5CUVVNN1VVRkRNMElzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRaaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTnVRaXhEUVVGRE8wbEJSVVFzY1VKQlFVMHNSMEZCVGl4VlFVRlBMRWRCUVdNN1VVRkRia0lzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRaaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTnFRaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlJVUXNiMEpCUVVzc1IwRkJURHRSUVVORkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRM1pDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJaU3hEUVVGRE8wbEJRemRDTEVOQlFVTTdTVUZGUkN4cFFrRkJSU3hIUVVGR0xGVkJRVWNzUTBGQlNUdFJRVU5NTEVsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRGJrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVGRkxFOUJRVTg3VVVGRGNrSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVYzdXVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF6RkRMRU5CUVVNN1NVRkZSQ3hwUWtGQlJTeEhRVUZHTEZWQlFVY3NSMEZCVVR0UlFVTlVMRWxCUVUwc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdFpRVUZGTEU5QlFVODdVVUZEY2tJc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTmFMRU5CUVVNN1NVRkZSQ3hwUWtGQlJTeEhRVUZHTzFGQlEwVXNTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRVVVzVDBGQlR6dFJRVU55UWl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03U1VGRFZDeERRVUZETzBsQlEwZ3NWMEZCUXp0QlFVRkVMRU5CUVVNc1FVRXhRMFFzU1VFd1EwTTdRVUZGUkR0SlFVbEZMSGxDUVVGWkxFZEJRV01zUlVGQlJTeEZRVUZqTzFGQlEzaERMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlEyWXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRFppeERRVUZETzBsQlJVUXNORUpCUVVVc1IwRkJSanRSUVVORkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1NVRkRhRUlzUTBGQlF6dEpRVVZFTERSQ1FVRkZMRWRCUVVZc1ZVRkJSeXhIUVVGUk8xRkJRMVFzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGJrSXNRMEZCUXp0SlFVVkVMRFJDUVVGRkxFZEJRVVk3VVVGRFJTeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRMmhDTEVOQlFVTTdTVUZEU0N4elFrRkJRenRCUVVGRUxFTkJRVU1zUVVGd1FrUXNTVUZ2UWtNN1FVRkZSRHRKUVU5RkxHbENRVUZaTEVOQlFXTXNSVUZCUlN4SFFVRmpPMUZCVG01RExGTkJRVWtzUjBGQlJ5eFRRVUZUTEVOQlFVTTdVVUZQZEVJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZEWml4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRV1VzUTBGQlF6dFJRVU16UWl4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5ZTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRE8wbEJRMjVDTEVOQlFVTTdTVUZGUkN4M1FrRkJUU3hIUVVGT0xGVkJRVThzUjBGQll6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlF6dFJRVU5tTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NTVUZCU1N4bFFVRmxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZGtRc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRkRUlzUTBGQlF6dEpRVVZFTEhWQ1FVRkxMRWRCUVV3N1VVRkRSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOMlFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEZWtJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEZRVUZsTEVOQlFVTTdVVUZETTBJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTTdTVUZEYmtJc1EwRkJRenRKUVVWRUxIRkNRVUZITEVkQlFVZzdVVUZEUlN4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlEyNUNMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVU3V1VGQlJTeFBRVUZQTzFGQlEzSkNMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dEpRVU5VTEVOQlFVTTdTVUZGUkN4dlFrRkJSU3hIUVVGR0xGVkJRVWNzUTBGQlNUdFJRVU5NTEVsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRGJrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVGRkxFOUJRVTg3VVVGRGNrSXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5XTEVOQlFVTTdTVUZGUkN4dlFrRkJSU3hIUVVGR0xGVkJRVWNzUjBGQlVUdFJRVU5VTEVsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRGJrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVGRkxFOUJRVTg3VVVGRGNrSXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU5hTEVOQlFVTTdTVUZGUkN4dlFrRkJSU3hIUVVGR08xRkJRMFVzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTJJc1EwRkJRenRKUVVOSUxHTkJRVU03UVVGQlJDeERRVUZETEVGQmFFUkVMRWxCWjBSRE8wRkJSVVE3U1VGTlJTeG5Ra0ZCV1N4TlFVRjVRaXhGUVVGRkxFZEJRV003VVVGTU9VTXNVMEZCU1N4SFFVRkhMRkZCUVZFc1EwRkJRenRSUVUxeVFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVObUxFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NSVUZCWlN4RFFVRkRPMUZCUXpOQ0xFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRPMGxCUTJ4Q0xFTkJRVU03U1VGRlJDeDFRa0ZCVFN4SFFVRk9MRlZCUVU4c1IwRkJZenRSUVVOdVFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVObUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRM1JDTEVOQlFVTTdTVUZGUkN4elFrRkJTeXhIUVVGTU8xRkJRMFVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGRrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGbExFTkJRVU03U1VGRE4wSXNRMEZCUXp0SlFVVkVMRzFDUVVGRkxFZEJRVVlzVlVGQlJ5eERRVUZKTzFGQlEwd3NTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRVVVzVDBGQlR6dFJRVU55UWl4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNelFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRVVVzVDBGQlR6dFJRVU16UWl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExWXNRMEZCUXp0SlFVVkVMRzFDUVVGRkxFZEJRVVlzVlVGQlJ5eEhRVUZSTzFGQlExUXNTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRVVVzVDBGQlR6dFJRVU55UWl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlExb3NRMEZCUXp0SlFVVkVMRzFDUVVGRkxFZEJRVVk3VVVGRFJTeEpRVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkJSU3hQUVVGUE8xRkJRM0pDTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRKUVVOVUxFTkJRVU03U1VGRFNDeGhRVUZETzBGQlFVUXNRMEZCUXl4QlFYcERSQ3hKUVhsRFF6dEJRVVZFTzBsQlNVVXNlVUpCUVZrc1IwRkJZeXhGUVVGRkxFVkJRV003VVVGRGVFTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVObUxFTkJRVU03U1VGRlJDdzBRa0ZCUlN4SFFVRkdMRlZCUVVjc1EwRkJTVHRSUVVOTUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMnBDTEVOQlFVTTdTVUZGUkN3MFFrRkJSU3hIUVVGR0xGVkJRVWNzUjBGQlVUdFJRVU5VTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlEyNUNMRU5CUVVNN1NVRkZSQ3cwUWtGQlJTeEhRVUZHTzFGQlEwVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhMUVVGTExFZEJRVWNzUlVGQlpTeERRVUZETzFGQlEyaERMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVOSUxITkNRVUZETzBGQlFVUXNRMEZCUXl4QlFYSkNSQ3hKUVhGQ1F6dEJRVVZFTzBsQlVVVXNhVUpCUVZrc1IwRkJjMEk3VVVGUU0wSXNVMEZCU1N4SFFVRkhMRk5CUVZNc1EwRkJRenRSUVZGMFFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVObUxFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NSVUZCWlN4RFFVRkRPMUZCUXpOQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NSVUZCWlN4RFFVRkRPMUZCUXpkQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRPMGxCUTJ4Q0xFTkJRVU03U1VGRlJDeDNRa0ZCVFN4SFFVRk9MRlZCUVU4c1IwRkJZenRSUVVOdVFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVObUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NSVUZCWlN4RFFVRkRPMUZCUXpkQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTJoQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRM1JDTEVOQlFVTTdTVUZGUkN4MVFrRkJTeXhIUVVGTU8xRkJRMFVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGRrSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhMUVVGTExFVkJRVVU3V1VGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEYmtRc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEZRVUZsTEVOQlFVTTdVVUZETTBJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEYWtJc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEZRVUZsTEVOQlFVTTdVVUZETjBJc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdTVUZEYkVJc1EwRkJRenRKUVVWRUxITkNRVUZKTEVkQlFVbzdVVUZEUlN4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlEyNUNMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVU3V1VGQlJTeFBRVUZQTzFGQlEzSkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRXRCUVVzc1JVRkJSVHRaUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0SlFVTTVReXhEUVVGRE8wbEJSVVFzYjBKQlFVVXNSMEZCUml4VlFVRkhMRU5CUVZrN1VVRkRZaXhKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZCUlN4UFFVRlBPMUZCUTJZc1NVRkJRU3hUUVVGclFpeEZRVUZxUWl4blFrRkJTeXhGUVVGRkxGVkJRVVVzUTBGQlV6dFJRVU42UWl4SlFVRkpMRXRCUVVzc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEV0QlFVczdXVUZCUlN4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzQkVMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eEpRVUZKTEdWQlFXVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5vUlN4RFFVRkRPMGxCUlVRc2IwSkJRVVVzUjBGQlJpeFZRVUZITEVkQlFWRTdVVUZEVkN4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlEyNUNMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVU3V1VGQlJTeFBRVUZQTzFGQlEzSkNMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEV2l4RFFVRkRPMGxCUlVRc2IwSkJRVVVzUjBGQlJqdFJRVU5GTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRMnhDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRKUVVOa0xFTkJRVU03U1VGRFNDeGpRVUZETzBGQlFVUXNRMEZCUXl4QlFYcEVSQ3hKUVhsRVF6dEJRVVZFTzBsQlVVVXNZMEZCV1N4RFFVRnpRaXhGUVVGRkxFbEJRVThzUlVGQlJTeEhRVUZqTzFGQlFUTkVMR2xDUVV0RE8xRkJXazBzVTBGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXp0UlFWRnVRaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVTm1MRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlpTeERRVUZETzFGQlF6TkNMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzVlVGQlF5eERRVUZKTEVsQlFVc3NUMEZCUVN4RFFVRkRMRU5CUVVNc1MwRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCWkN4RFFVRmpMRU5CUVVNN1VVRkRiRU1zU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dEpRVU01UWl4RFFVRkRPMGxCUlVRc2NVSkJRVTBzUjBGQlRpeFZRVUZQTEVkQlFXTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZEWml4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEY2tJc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRha0lzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRGRFSXNRMEZCUXp0SlFVVkVMRzlDUVVGTExFZEJRVXc3VVVGRFJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRV1VzUTBGQlF6dFJRVU16UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEZGtJc1EwRkJRenRKUVVWRUxHbENRVUZGTEVkQlFVWXNWVUZCUnl4RFFVRkpPMUZCUTB3c1NVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzFsQlFVVXNUMEZCVHp0UlFVTnlRaXhKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU16UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRVVVzVDBGQlR6dFJRVU55UWl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCVFN4RFFVRkRMRU5CUVVNN1NVRkRNVUlzUTBGQlF6dEpRVVZFTEdsQ1FVRkZMRWRCUVVZc1ZVRkJSeXhIUVVGUk8xRkJRMVFzU1VGQlRTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVOdVFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMWxCUVVVc1QwRkJUenRSUVVOeVFpeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRMW9zUTBGQlF6dEpRVVZFTEdsQ1FVRkZMRWRCUVVZN1VVRkRSU3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZCUlN4UFFVRlBPMUZCUTNKQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0SlFVTlVMRU5CUVVNN1NVRkRTQ3hYUVVGRE8wRkJRVVFzUTBGQlF5eEJRUzlEUkN4SlFTdERRenRCUVVWRU8wbEJUMFVzWTBGQldTeEhRVUZqTzFGQlRtNUNMRk5CUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU03VVVGUGJrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVdVc1EwRkJRenRSUVVNelFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVOcVFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVU4c1EwRkJRenRKUVVOeVFpeERRVUZETzBsQlJVUXNjVUpCUVUwc1IwRkJUaXhWUVVGUExFZEJRV003VVVGRGJrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVOcVFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU4wUWl4RFFVRkRPMGxCUlVRc2IwSkJRVXNzUjBGQlREdFJRVU5GTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEzWkNMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlpTeERRVUZETzFGQlF6TkNMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlR5eERRVUZETzBsQlEzSkNMRU5CUVVNN1NVRkZSQ3hwUWtGQlJTeEhRVUZHTEZWQlFVY3NRMEZCU1R0UlFVTk1MRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEyaENMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlEyWXNRMEZCUXp0SlFVVkVMR2xDUVVGRkxFZEJRVVlzVlVGQlJ5eEhRVUZSTzFGQlExUXNTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRVVVzVDBGQlR6dFJRVU55UWl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlExb3NRMEZCUXp0SlFVVkVMR2xDUVVGRkxFZEJRVVk3VVVGRFJTeEpRVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkJSU3hQUVVGUE8xRkJRM0pDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSVHRaUVVOYUxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRMllzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMU5CUTFJN08xbEJRVTBzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRXRCUVVzc1EwRkJReXc0UTBGQk9FTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRla1VzUTBGQlF6dEpRVU5JTEZkQlFVTTdRVUZCUkN4RFFVRkRMRUZCTjBORUxFbEJOa05ETzBGQlJVUTdTVUZOUlN4bFFVRlpMRTlCUVc5Q0xFVkJRVVVzUjBGQll6dFJRVXg2UXl4VFFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJUV3hDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRMllzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRmxMRU5CUVVNN1VVRkRNMElzU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNN1NVRkRia0lzUTBGQlF6dEpRVVZFTEhOQ1FVRk5MRWRCUVU0c1ZVRkJUeXhIUVVGak8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRMllzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRGRFSXNRMEZCUXp0SlFVVkVMSEZDUVVGTExFZEJRVXc3VVVGRFJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRV1VzUTBGQlF6dEpRVU0zUWl4RFFVRkRPMGxCUlVRc2EwSkJRVVVzUjBGQlJpeFZRVUZITEVOQlFVazdVVUZEVEN4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlEyNUNMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVU3V1VGQlJTeFBRVUZQTzFGQlEzSkNMRWxCUVUwc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRek5DTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkJSU3hQUVVGUE8xRkJRM0pDTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJUU3hEUVVGRExFTkJRVU03U1VGRFppeERRVUZETzBsQlJVUXNhMEpCUVVVc1IwRkJSaXhWUVVGSExFZEJRVkU3VVVGRFZDeEpRVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkJSU3hQUVVGUE8xRkJRM0pDTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRFdpeERRVUZETzBsQlJVUXNhMEpCUVVVc1IwRkJSanRSUVVORkxFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRia0lzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0WlFVRkZMRTlCUVU4N1VVRkRja0lzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMGxCUTFRc1EwRkJRenRKUVVOSUxGbEJRVU03UVVGQlJDeERRVUZETEVGQmVrTkVMRWxCZVVORE8wRkJSVVE3U1VGTFJTeHJRa0ZCV1N4SFFVRmpPMUZCU201Q0xGTkJRVWtzUjBGQlJ5eFZRVUZWTEVOQlFVTTdVVUZMZGtJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZEWml4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRV1VzUTBGQlF6dEpRVU0zUWl4RFFVRkRPMGxCUlVRc2VVSkJRVTBzUjBGQlRpeFZRVUZQTEVkQlFXTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZEWml4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTnlRaXhEUVVGRE8wbEJSVVFzZDBKQlFVc3NSMEZCVER0UlFVTkZMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVNelFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVdVc1EwRkJRenRKUVVNM1FpeERRVUZETzBsQlEwZ3NaVUZCUXp0QlFVRkVMRU5CUVVNc1FVRnVRa1FzU1VGdFFrTTdRVUZGUkR0SlFVMUZMSE5DUVVGWkxGRkJRV2xETEVWQlFVVXNSMEZCWXp0UlFVeDBSQ3hUUVVGSkxFZEJRVWNzWTBGQll5eERRVUZETzFGQlRUTkNMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlEyWXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGbExFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU03U1VGRGNFSXNRMEZCUXp0SlFVVkVMRFpDUVVGTkxFZEJRVTRzVlVGQlR5eEhRVUZqTzFGQlEyNUNMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlEyWXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEZEVJc1EwRkJRenRKUVVWRUxEUkNRVUZMTEVkQlFVdzdVVUZEUlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTjJRaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFXVXNRMEZCUXp0SlFVTTNRaXhEUVVGRE8wbEJSVVFzZVVKQlFVVXNSMEZCUml4VlFVRkhMRU5CUVVrN1VVRkRUQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZCUlN4UFFVRlBPMUZCUTNKQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRWaXhEUVVGRE8wbEJSVVFzZVVKQlFVVXNSMEZCUml4VlFVRkhMRWRCUVZFN1VVRkRWQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZCUlN4UFFVRlBPMUZCUTNKQ0xFbEJRVWs3V1VGRFJpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU4yUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0VFFVTnlRenRSUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzFsQlExWXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU5VTzBsQlEwZ3NRMEZCUXp0SlFVVkVMSGxDUVVGRkxFZEJRVVk3VVVGRFJTeEpRVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkJSU3hQUVVGUE8xRkJRM0pDTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRKUVVOVUxFTkJRVU03U1VGRFNDeHRRa0ZCUXp0QlFVRkVMRU5CUVVNc1FVRTFRMFFzU1VFMFEwTTdRVUZGUkR0SlFVMUZMRzFDUVVGWkxFZEJRV01zUlVGQlJTeEhRVUZOTzFGQlRETkNMRk5CUVVrc1IwRkJSeXhYUVVGWExFTkJRVU03VVVGTmVFSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVdVc1EwRkJRenRSUVVNelFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUXNNRUpCUVUwc1IwRkJUaXhWUVVGUExFZEJRV003VVVGRGJrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEZEVJc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRja0lzUTBGQlF6dEpRVVZFTEhsQ1FVRkxMRWRCUVV3N1VVRkRSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGbExFTkJRVU03U1VGRE4wSXNRMEZCUXp0SlFVTklMR2RDUVVGRE8wRkJRVVFzUTBGQlF5eEJRWFJDUkN4SlFYTkNRenRCUVVWRU8wbEJUMFVzWTBGQldTeEhRVUZYTEVWQlFVVXNSMEZCWXp0UlFVNW9ReXhUUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETzFGQlQyNUNMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlEyWXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGbExFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUXNjVUpCUVUwc1IwRkJUaXhWUVVGUExFZEJRV003VVVGRGJrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVObUxFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZET3p0WlFVRk5MRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTNoRUxFTkJRVU03U1VGRlJDeHZRa0ZCU3l4SFFVRk1PMUZCUTBVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRka0lzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRmxMRU5CUVVNN1NVRkROMElzUTBGQlF6dEpRVVZFTEdsQ1FVRkZMRWRCUVVZc1ZVRkJSeXhEUVVGSk8xRkJRMHdzU1VGQlRTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVOdVFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMWxCUVVVc1QwRkJUenRSUVVOeVFpeEpRVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03VVVGRGRrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWM3V1VGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRVTBzU1VGQlNTeERRVUZETEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSVHRaUVVOc1JDeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMUlzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMU5CUTFJN1NVRkRTQ3hEUVVGRE8wbEJSVVFzYVVKQlFVVXNSMEZCUml4VlFVRkhMRWRCUVZFN1VVRkRWQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZCUlN4UFFVRlBPMUZCUTNKQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRXaXhEUVVGRE8wbEJSVVFzYVVKQlFVVXNSMEZCUmp0UlFVTkZMRWxCUVUwc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdFpRVUZGTEU5QlFVODdVVUZEY2tJc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzBsQlExUXNRMEZCUXp0SlFVTklMRmRCUVVNN1FVRkJSQ3hEUVVGRExFRkJPVU5FTEVsQk9FTkRPMEZCUlVRN1NVRlRSU3huUWtGQldTeFJRVUU0UWp0UlFVTjRReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEZGQlFWRXNTVUZCU1N4RlFVRjVRaXhEUVVGRE8xRkJRMjVFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMllzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRiRUlzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRjVRaXhEUVVGRE8xRkJRM0pETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRMmhDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1JVRkJaU3hEUVVGRE8xRkJReTlDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRMnBDTEVOQlFVTTdTVUZGUkN4dFFrRkJSU3hIUVVGR0xGVkJRVWNzUTBGQlNUdFJRVU5NTEVsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGNFSXNTVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU51UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhGUVVGRk8xbEJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE5VSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WVVGQlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMWxCUVVVc1QwRkJUenRoUVVGTk8xbEJRM0JFTEVsQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5vUWl4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRuUWtGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEzaERPMGxCUTBnc1EwRkJRenRKUVVWRUxHMUNRVUZGTEVkQlFVWXNWVUZCUnl4SFFVRlJPMUZCUTFRc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEVWQlFVVTdXVUZCUlN4UFFVRlBPMUZCUXpkQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRPMUZCUTJoQ0xFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRjRUlzU1VGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVOdVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1VVRkRWaXhKUVVGSkxFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZET1VJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dFpRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdZVUZCVFN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJRVVVzVDBGQlR6dGhRVUZOTzFsQlEzUkVMRWxCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm9RaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdG5Ra0ZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMU5CUXpGRE8xRkJRMFFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGQlJTeE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRNVU1zUTBGQlF6dEpRVVZFTEcxQ1FVRkZMRWRCUVVZN1VVRkRSU3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNCQ0xFbEJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNN1VVRkRia0lzU1VGQlNTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMUZCUTFZc1NVRkJTU3hKUVVGSkxFTkJRVU1zUlVGQlJUdFpRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRoUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZCUlN4UFFVRlBPMkZCUVUwN1dVRkRia1FzU1VGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMmhDTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZPMmRDUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJRenRUUVVOMlF6dEpRVU5JTEVOQlFVTTdTVUZGUkN4dFFrRkJSU3hIUVVGR08xRkJRMFVzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRE8xbEJRVVVzVDBGQlR6dFJRVU51UXl4SlFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFdEJRVXNzUlVGQlJUdFpRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGRE1VTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUXNlVUpCUVZFc1IwRkJVanRSUVVORkxEaERRVUU0UXp0UlFVTTVReXhuUkVGQlowUTdVVUZEYUVRc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTm1MRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZETzBsQlEzQkNMRU5CUVVNN1NVRkZSQ3h4UWtGQlNTeEhRVUZLTEZWQlFVc3NSVUZCZFVJN1VVRkRNVUlzU1VGQlRTeEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVONFFpeEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZPMWxCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJ4RExFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRjRUlzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOWUxFbEJRVWtzUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRPMWxCUVVVc1QwRkJUenRSUVVONlFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSU3hGUVVGRk8xbEJRM1pDTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03V1VGRE0wSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU03VTBGRGJrSTdZVUZCVFR0WlFVTk1MRWxCUVUwc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdXVUZEY2tJc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdG5Ra0ZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFOQlF6bENPMGxCUTBnc1EwRkJRenRKUVVWRUxIZENRVUZQTEVkQlFWQXNWVUZCVVN4RlFVRjFRanRSUVVFdlFpeHBRa0ZqUXp0UlFXSkRMRWxCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTTdVVUZEZUVJc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJUdFpRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU55UXl4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEzQkNMRWxCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRlRUlzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVN1dVRkRWaXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVObUxFbEJRVWtzU1VGQlNTeERRVUZETEV0QlFVc3NTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVWQlFVVTdaMEpCUTNSRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMmRDUVVObUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NWVUZCVlN4RFFVRkRMR05CUVUwc1QwRkJRU3hMUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFXWXNRMEZCWlN4RFFVRkRMRU5CUVVNN1lVRkRiRVE3YVVKQlFVMHNTVUZCU1N4RFFVRkRMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zUlVGQlJUdG5Ra0ZEZWtJc1NVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETzJGQlEzSkNPMU5CUTBZN1NVRkRTQ3hEUVVGRE8wbEJSVVFzYjBWQlFXOUZPMGxCUTNCRkxHdEZRVUZyUlR0SlFVTnNSU3h0UlVGQmJVVTdTVUZEYmtVc2EwVkJRV3RGTzBsQlEyeEZMRFpDUVVGWkxFZEJRVm83VVVGRFJTeEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpkRUxFTkJRVU03U1VGRlJDd3lSVUZCTWtVN1NVRkRNMFVzZVVWQlFYbEZPMGxCUTNwRkxEWkZRVUUyUlR0SlFVTTNSU3gxUTBGQmRVTTdTVUZEZGtNc05FSkJRVmNzUjBGQldDeFZRVUZaTEVOQlFYZENMRVZCUVVVc1MwRkJhVUk3VVVGRGNrUXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTjZRaXhQUVVGUExFbEJRVWtzUTBGQlF6dGhRVU5rTEVsQlFVc3NRMEZCTWtJc1EwRkJReXhIUVVGSExFdEJRVXNzU1VGQlNUdFpRVU16UXl4UFFVRlBMRWxCUVVrc1EwRkJRenRoUVVOa0xFbEJRVXNzUTBGQk1rSXNRMEZCUXl4SFFVRkhMRWxCUVVzc1EwRkJNa0lzUTBGQlF5eEhRVUZITEV0QlFVc3NSVUZCUlR0WlFVTTNSU3hQUVVGUExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVVXNRMEZCTWtJc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRemRGTEVsQlFVc3NRMEZCYVVJc1EwRkJReXhKUVVGSkxFVkJRVVU3V1VGRE0wSXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZKTEVOQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRuUWtGRE5VUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVVVzUTBGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGFFVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1dVRkRha0lzVDBGQlR5eEpRVUZKTEVOQlFVTTdVMEZEWWpzN1dVRkJUU3hQUVVGUExFdEJRVXNzUTBGQlF6dEpRVU4wUWl4RFFVRkRPMGxCUlU4c2NVSkJRVWtzUjBGQldqdFJRVU5GTEU5QlFVOHNTVUZCU1N4WlFVRlpMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRPVVFzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDdzBRa0ZCVnl4SFFVRllMRlZCUVZrc1VVRkJPRUk3VVVGRGRrTXNVVUZCWjBNc1EwRkJReXhGUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNN1VVRkROVVFzVVVGQlowTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFVTTdVVUZETjBRc1VVRkJaME1zUTBGQlF5eEZRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRMRkZCUVZFc1NVRkJTU3hKUVVGSkxFTkJRVU03VVVGRGFrVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVFclFpeERRVUZETEVOQlFVTTdTVUZETjBNc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3dyUWtGQll5eEhRVUZrTEZWQlFXVXNVVUZCT0VJN1VVRkRNME1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRXJRaXhEUVVGRExFTkJRVU03U1VGRGFFUXNRMEZCUXp0SlFVVkVPenM3T3pzN1QwRk5SenRKUVVOSUxEQkNRVUZUTEVkQlFWUXNWVUZCVlN4UlFVRTRRanRSUVVOMFF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRek5DTEU5QlFVOHNTVUZCU1N4VFFVRlRMRU5CUVVrc1NVRkJTU3hGUVVGRkxGRkJRU3RDTEVOQlFVTXNRMEZCUXp0SlFVTnFSU3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxHbENRVUZETERKQ1FVRlpMRU5CUVVNc1IwRkJaRHRSUVVORkxFOUJRVThzU1VGQlNTeERRVUZETzBsQlEyUXNRMEZCUXp0SlFVVkVPenM3T3pzN08wOUJUMGM3U1VGRFNTeGhRVUZOTEVkQlFXSXNWVUZCYVVJc1VVRkJjMEk3VVVGRGNrTXNTVUZCU1N4UlFVRlJMRVZCUVVVN1dVRkRXaXhKUVVGSkxFOUJRVThzVVVGQlVTeERRVUZETEV0QlFVc3NTMEZCU3l4VlFVRlZPMjFDUVVOeVF5eFBRVUZQTEZGQlFWRXNRMEZCUXl4SlFVRkpMRXRCUVVzc1ZVRkJWVHRuUWtGRGNFTXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhwUkVGQmFVUXNRMEZCUXl4RFFVRkRPMWxCUTNKRkxHMUNRVUZ0UWl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zYjBKQlFXOUNPMU5CUTNCRU8xRkJRMFFzVDBGQlR5eEpRVUZKTEUxQlFVMHNRMEZCUXl4UlFVRTJReXhEUVVGRExFTkJRVU03U1VGRGJrVXNRMEZCUXp0SlFVVkVPenM3T3pzN08wOUJUMGM3U1VGRFNTeDFRa0ZCWjBJc1IwRkJka0lzVlVGQk1rSXNVVUZCYzBJN1VVRkRMME1zU1VGQlNTeFJRVUZSTzFsQlFVVXNiVUpCUVcxQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4dlFrRkJiMEk3VVVGRGFrVXNUMEZCVHl4SlFVRkpMRmxCUVZrc1EwRkJTU3hSUVVFMlF5eERRVUZETEVOQlFVTTdTVUZETlVVc1EwRkJRenRKUVVWRU96czdPenM3T3pzN096czdUMEZaUnp0SlFVTkpMRmxCUVVzc1IwRkJXanRSUVVORkxFOUJRVThzU1VGQlNTeE5RVUZOTEVOQlFVMHNSVUZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEVWQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTNSRUxFTkJRVU03U1VGRlJEczdPenM3T3pzN096czdPenRQUVdGSE8wbEJRMGtzV1VGQlN5eEhRVUZhTzFGQlEwVXNUMEZCVHl4SlFVRkpMRTFCUVUwc1EwRkJUVHRaUVVOeVFpeE5RVUZOTEZsQlFVTXNSVUZCZVVJc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXpsRExFdEJRVXNzUlVGQlJTeEpRVUZKTzFOQlExb3NRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenM3T3pzN096czdPenM3VDBGbFJ6dEpRVU5KTEZsQlFVc3NSMEZCV2l4VlFVRmhMRXRCUVZVN1VVRkRja0lzVDBGQlR5eEpRVUZKTEUxQlFVMHNRMEZCVFR0WlFVTnlRaXhOUVVGTkxGbEJRVU1zUlVGQmVVSXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnVSQ3hMUVVGTExFVkJRVVVzU1VGQlNUdFRRVU5hTEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3pzN08wOUJUVWM3U1VGRFNTeFhRVUZKTEVkQlFWZ3NWVUZCWlN4TFFVRTBSRHRSUVVONlJTeEpRVUZKTEU5QlFVOHNTMEZCU3l4RFFVRkRMREpDUVVGWkxFTkJRVU1zUzBGQlN5eFZRVUZWTzFsQlF6TkRMRTlCUVU4c1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlNTeExRVUZ6UWl4RFFVRkRMRU5CUVVNN1lVRkRNVVFzU1VGQlNTeFBRVUZSTEV0QlFYZENMRU5CUVVNc1NVRkJTU3hMUVVGTExGVkJRVlU3V1VGRGRFUXNUMEZCVHl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGSkxFdEJRWFZDTEVOQlFVTXNRMEZCUXp0aFFVTjRSQ3hKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRPMWxCUTNSQ0xFOUJRVThzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCU1N4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVWd1F5eE5RVUZOTEVsQlFVa3NVMEZCVXl4RFFVRkRMR3RGUVVGclJTeERRVUZETEVOQlFVTTdTVUZETVVZc1EwRkJRenRKUVVWRU96czdPenM3T3pzN096czdPenM3TzA5QlowSkhPMGxCUTBrc1UwRkJSU3hIUVVGVU8xRkJRV0VzWlVGQmEwSTdZVUZCYkVJc1ZVRkJhMElzUlVGQmJFSXNjVUpCUVd0Q0xFVkJRV3hDTEVsQlFXdENPMWxCUVd4Q0xEQkNRVUZyUWpzN1VVRkROMElzVDBGQlR5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkpMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJRM0JETEVOQlFVTTdTVUZGUkRzN096czdPenM3T3pzN096czdUMEZqUnp0SlFVTkpMR2RDUVVGVExFZEJRV2hDTEZWQlFXOUNMRXRCUVdVN1VVRkRha01zVDBGQlR5eEpRVUZKTEUxQlFVMHNRMEZCU1N4SlFVRkpMRk5CUVZNc1EwRkJTU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyaEVMRU5CUVVNN1NVRkZSRHM3T3pzN096czdPenM3T3pzN08wOUJaVWM3U1VGRFNTeHJRa0ZCVnl4SFFVRnNRaXhWUVVGelFpeFBRVUYxUWp0UlFVTXpReXhQUVVGUExFbEJRVWtzVFVGQlRTeERRVUZKTEVsQlFVa3NWMEZCVnl4RFFVRkpMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGNFUXNRMEZCUXp0SlFVVkVPenM3T3pzN1QwRk5SenRKUVVOSkxIRkNRVUZqTEVkQlFYSkNMRlZCUVhsQ0xFZEJRWEZDTzFGQlF6VkRMRWxCUVVzc1IwRkJhVUlzUTBGQlF5eFBRVUZQTzFsQlFVVXNUMEZCVHl4SFFVRm5RaXhEUVVGRE8xRkJRM2hFTEVsQlFVMHNRMEZCUXl4SFFVRkhMRTlCUVU4c1IwRkJSeXhEUVVGRExESkNRVUZaTEVOQlFVTXNTMEZCU3l4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5d3lRa0ZCV1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlF6bEZMRTlCUVU4c1NVRkJTU3hOUVVGTkxFTkJRVWtzU1VGQlNTeGpRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVNNVF5eERRVUZETzBsQlJVUTdPenM3T3pzN096czdPenM3T3p0UFFXVkhPMGxCUTBrc1pVRkJVU3hIUVVGbUxGVkJRV2RDTEUxQlFXTTdVVUZETlVJc1QwRkJUeXhKUVVGSkxFMUJRVTBzUTBGQlV5eEpRVUZKTEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMnhFTEVOQlFVTTdTVUY1UkZNc2NVSkJRVWtzUjBGQlpDeFZRVUZyUWl4UFFVRnZRanRSUVVOd1F5eFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlNTeEpRVUZKTEV0QlFVc3NRMEZCVHl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU01UkN4RFFVRkRPMGxCUlVRN096czdPenM3T3pzN096czdPenM3VDBGblFrYzdTVUZEU0N4dlFrRkJSeXhIUVVGSUxGVkJRVThzVDBGQmIwSTdVVUZEZWtJc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUXpWQ0xFTkJRVU03U1VGRlJEczdPenM3T3pzN096czdPenM3TzA5QlpVYzdTVUZEU0N4elFrRkJTeXhIUVVGTUxGVkJRVk1zWTBGQmFVSTdVVUZEZUVJc1NVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4alFVRk5MRTlCUVVFc1kwRkJZeXhGUVVGa0xFTkJRV01zUTBGQlF5eERRVUZETzFGQlEzcERMRWxCUVUwc1JVRkJSU3hIUVVGdFFpeERRVUZETEVOQlFVTXNTMEZCZFVJc1EwRkJRenRSUVVOeVJDeEZRVUZGTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVOc1FpeFBRVUZQTEVOQlFVTXNRMEZCUXp0SlFVTllMRU5CUVVNN1NVRkpSRHM3T3pzN096czdPenM3T3pzN096czdPenRQUVcxQ1J6dEpRVU5JTEhWQ1FVRk5MRWRCUVU0c1ZVRkJUeXhOUVVGNVFqdFJRVU01UWl4SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFGQlEzSkNMRWxCUVVrc1EwRkJReXhaUVVGWkxFMUJRVTA3V1VGRGNrSXNUMEZCVHl4SlFVRkpMRTFCUVUwc1EwRkJTU3hKUVVGSkxFMUJRVTBzUTBGRE4wSXNSMEZCUnl4RFFVRkZMRU5CUVdVc1EwRkJReXhEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETEVWQlF6bENMRU5CUVdVc1EwRkJReXhIUVVGSExFTkJRM0pDTEVOQlFVTXNRMEZCUXp0UlFVTk1MRTlCUVU4c1NVRkJTU3hOUVVGTkxFTkJRVWtzU1VGQlNTeE5RVUZOTEVOQlFVa3NUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGNFUXNRMEZCUXp0SlFVVkVPenM3T3pzN096czdPenM3T3pzN1QwRmxSenRKUVVOSUxIRkNRVUZKTEVkQlFVb3NWVUZCU3l4TlFVRmpPMUZCUTJwQ0xFOUJRVThzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZKTEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM3BFTEVOQlFVTTdTVUZGUkRzN096czdPenM3T3pzN096czdPenRQUVdkQ1J6dEpRVU5JTEhGQ1FVRkpMRWRCUVVvc1ZVRkJTeXhOUVVGak8xRkJRMnBDTEU5QlFVOHNTVUZCU1N4TlFVRk5MRU5CUVVrc1NVRkJTU3hKUVVGSkxFTkJRVWtzVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRiRVFzUTBGQlF6dEpRVVZFT3pzN096czdPenM3T3pzN08wOUJZVWM3U1VGRFNDeHhRa0ZCU1N4SFFVRktPMUZCUTBVc1QwRkJUeXhKUVVGSkxFMUJRVTBzUTBGQlNTeEpRVUZKTEVsQlFVa3NRMEZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRekZETEVOQlFVTTdTVUZGUkRzN096czdPenM3T3pzN096czdPMDlCWlVjN1NVRkRTQ3d3UWtGQlV5eEhRVUZVTEZWQlFWVXNUMEZCVlR0UlFVTnNRaXhQUVVGUExFbEJRVWtzV1VGQldTeERRVUZKTEVsQlFVa3NVMEZCVXl4RFFVRkpMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF6bEVMRU5CUVVNN1NVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPMDlCYTBKSE8wbEJRMGdzZDBKQlFVOHNSMEZCVUN4VlFVRlJMRXRCUVd0Q08xRkJRM2hDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZKTEVsQlFVa3NUMEZCVHl4RFFVRkpMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF6TkVMRU5CUVVNN1NVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRQUVRSQ1J6dEpRVU5JTEhGQ1FVRkpMRWRCUVVvc1ZVRkJVU3hWUVVFclFpeEZRVUZGTEVsQlFVODdVVUZET1VNc1QwRkJUeXhKUVVGSkxGbEJRVmtzUTBGQlNTeEpRVUZKTEVsQlFVa3NRMEZCVHl4VlFVRlZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEY2tVc1EwRkJRenRKUVVWRU96czdPenM3T3pzN096czdPenM3T3pzN096czdPMDlCYzBKSE8wbEJRMGdzTmtKQlFWa3NSMEZCV2l4VlFVRmhMRTlCUVdkRE8xRkJRek5ETEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZKTEVsQlFVa3NXVUZCV1N4RFFVRkpMRTlCUVU4c1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyeEZMRU5CUVVNN1NVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wOUJkMEpITzBsQlEwZ3NkMEpCUVU4c1IwRkJVRHRSUVVORkxFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRja0lzVDBGQlR5eEpRVUZKTEUxQlFVMHNRMEZCU1N4SlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQmEwSXNRMEZCUXp0SlFVTXpSQ3hEUVVGRE8wbEJSVVE3T3pzN096czdPenM3VDBGVlJ6dEpRVU5JTEhkQ1FVRlBMRWRCUVZBc1ZVRkJWeXhSUVVGclF6dFJRVU16UXl4UFFVRlBMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU40UWl4RFFVRkRPMGxCUlVRN096czdPenRQUVUxSE8wbEJRMGdzZVVKQlFWRXNSMEZCVWp0UlFVTkZMRTlCUVU4c1NVRkJTU3haUVVGWkxFTkJRVWtzU1VGQlNTeFJRVUZSTEVOQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOd1JDeERRVUZETzBsQlMwUTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1QwRjVRa2M3U1VGRFNDeHpRa0ZCU3l4SFFVRk1MRlZCUVUwc1ZVRkJjVU03VVVGRGVrTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVa3NTVUZCU1N4TFFVRkxMRU5CUVVrc1NVRkJTU3hGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZET1VRc1EwRkJRenRKUVVWRU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1QwRXJSRWM3U1VGRFNDeDNRa0ZCVHl4SFFVRlFMRlZCUVZFc1RVRkJhVUk3VVVGRGRrSXNTVUZCU1N4TlFVRk5MRmxCUVZrc1dVRkJXVHRaUVVOb1F5eE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMSEZFUVVGeFJEdG5Ra0ZEY2tVc05FUkJRVFJFTzJkQ1FVTTFSQ3gxUTBGQmRVTXNRMEZCUXl4RFFVRkRPMUZCUXpORExFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRPMUZCUTNSQ0xFdEJRVXNzU1VGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZPMWxCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOcVJpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUTdPenM3T3pzN096dFBRVk5ITzBsQlEwZ3NiVU5CUVd0Q0xFZEJRV3hDTEZWQlFXMUNMRXRCUVZFN1VVRkRla0lzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUTdPenM3T3pzN096dFBRVk5ITzBsQlEwZ3NiME5CUVcxQ0xFZEJRVzVDTEZWQlFXOUNMRXRCUVZVN1VVRkROVUlzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVOcVFpeERRVUZETzBsQlJVUTdPenM3T3p0UFFVMUhPMGxCUTBnc2RVTkJRWE5DTEVkQlFYUkNPMUZCUTBVc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzBsQlExb3NRMEZCUXp0SlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPMDlCYlVKSE8wbEJRMGdzYVVOQlFXZENMRWRCUVdoQ0xGVkJRV2xDTEZGQlFXbEVPMUZCUTJoRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdXVUZEWWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExFdEJRVXNzUTBGQlF6dFpRVU5vUWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRWGxDTEVOQlFVTTdVMEZEZEVNN1lVRkJUVHRaUVVOTUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUTJRc1VVRkJaME1zUTBGQlF5eEZRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRMRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU03V1VGRE5VUXNVVUZCWjBNc1EwRkJReXhGUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NTVUZCU1N4SlFVRkpMRU5CUVVNN1dVRkROMFFzVVVGQlowTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1VVRkJVU3hEUVVGRExGRkJRVkVzU1VGQlNTeEpRVUZKTEVOQlFVTTdXVUZEYWtVc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eFJRVUVyUWl4RFFVRkRPMU5CUXpWRE8wbEJRMGdzUTBGQlF6dEpRV3hvUWtRN096czdPenM3T3pzN096czdPenM3T3pzN096dFBRWEZDUnp0SlFVTkpMRmxCUVVzc1IwRkJiVUk3VVVGQlpTeHBRa0ZCT0VJN1lVRkJPVUlzVlVGQk9FSXNSVUZCT1VJc2NVSkJRVGhDTEVWQlFUbENMRWxCUVRoQ08xbEJRVGxDTERSQ1FVRTRRanM3VVVGRE1VVXNUMEZCVHl4SlFVRkpMRTFCUVUwc1EwRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpkRExFTkJRVzFDTEVOQlFVTTdTVUZGY0VJN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRQUVhkQ1J6dEpRVU5KTEdOQlFVOHNSMEZCY1VJN1VVRkJhVUlzYVVKQlFUaENPMkZCUVRsQ0xGVkJRVGhDTEVWQlFUbENMSEZDUVVFNFFpeEZRVUU1UWl4SlFVRTRRanRaUVVFNVFpdzBRa0ZCT0VJN08xRkJRMmhHTEU5QlFVOHNTVUZCU1N4TlFVRk5MRU5CUVdFc1NVRkJTU3hQUVVGUExFTkJRVTBzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTXpSQ3hEUVVGeFFpeERRVUZETzBsQk9HUjRRaXhoUVVGRE8wTkJRVUVzUVVFek5FSkVMRWxCTWpSQ1F6dEJRVE0wUWxrc2QwSkJRVTA3UVVFMk5FSnVRanRKUVVGeFF5eG5RMEZCVXp0SlFVYzFReXh6UWtGQldTeFJRVUUyUWp0UlFVRjZReXhaUVVORkxHdENRVUZOTEZGQlFWRXNRMEZCUXl4VFFVTm9RanRSUVVoUExGVkJRVWtzUjBGQldTeExRVUZMTEVOQlFVTTdPMGxCUnpsQ0xFTkJRVU03U1VGRlJDeDVRa0ZCUlN4SFFVRkdMRlZCUVVjc1EwRkJTVHRSUVVOTUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTFvc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEYWtJc2FVSkJRVTBzUlVGQlJTeFpRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJRc1EwRkJRenRKUVVWRUxESkNRVUZKTEVkQlFVb3NWVUZCU3l4RlFVRjFRanRSUVVNeFFpeEpRVUZOTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRE8xRkJRM2hDTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVN1dVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRiRU1zU1VGQlRTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVOd1FpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRMWdzU1VGQlNTeERRVUZETEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSVHRaUVVOb1FpeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpPMmRDUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRemxDTEU5QlFVODdVMEZEVWp0UlFVTkVMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTEVWQlFVVTdXVUZEZGtJc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNUdG5Ra0ZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVTTVRaXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMWxCUXpOQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NSVUZCUlN4RFFVRkRPMU5CUTI1Q08yRkJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1R0WlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMkZCUVUwN1dVRkRla01zU1VGQlRTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRaUVVOeVFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMmRDUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1UwRkRPVUk3U1VGRFNDeERRVUZETzBsQlJVUXNLMEpCUVZFc1IwRkJVanRSUVVORkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTJ4Q0xHbENRVUZOTEZGQlFWRXNWMEZCUlN4RFFVRkRPMGxCUTI1Q0xFTkJRVU03U1VGRlJDeDVRa0ZCUlN4SFFVRkdPMUZCUTBVc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTTdVVUZEYkVJc2FVSkJRVTBzUlVGQlJTeFhRVUZGTEVOQlFVTTdTVUZEWWl4RFFVRkRPMGxCUlVRc01FSkJRVWNzUjBGQlNDeFZRVUZQTEU5QlFXOUNPMUZCUTNwQ0xFOUJRVThzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVc5Q0xFTkJRVU03U1VGREwwTXNRMEZCUXp0SlFVVkVMRFJDUVVGTExFZEJRVXdzVlVGQlV5eGpRVUZwUWp0UlFVTjRRaXhQUVVGUExHbENRVUZOTEV0QlFVc3NXVUZCUXl4alFVRmpMRU5CUVc5Q0xFTkJRVU03U1VGRGVFUXNRMEZCUXp0SlFVVkVMREpDUVVGSkxFZEJRVW9zVlVGQlN5eE5RVUZqTzFGQlEycENMRTlCUVU4c2FVSkJRVTBzU1VGQlNTeFpRVUZETEUxQlFVMHNRMEZCYjBJc1EwRkJRenRKUVVNdlF5eERRVUZETzBsQlJVUXNPRUpCUVU4c1IwRkJVQ3hWUVVGUkxFdEJRV3RDTzFGQlEzaENMRTlCUVU4c2FVSkJRVTBzVDBGQlR5eFpRVUZETEV0QlFVc3NRMEZCYjBJc1EwRkJRenRKUVVOcVJDeERRVUZETzBsQlJVUXNiVU5CUVZrc1IwRkJXaXhWUVVGaExFOUJRV2RETzFGQlF6TkRMRTlCUVU4c2FVSkJRVTBzV1VGQldTeFpRVUZETEU5QlFVOHNRMEZCYjBJc1EwRkJRenRKUVVONFJDeERRVUZETzBsQlJVUXNLMEpCUVZFc1IwRkJVanRSUVVORkxFOUJRVThzU1VGQlNTeERRVUZETzBsQlEyUXNRMEZCUXp0SlFVdEVMRFJDUVVGTExFZEJRVXdzVlVGQlRTeFZRVUZwUkR0UlFVTnlSQ3hQUVVGUExHbENRVUZOTEV0QlFVc3NXVUZCUXl4VlFVRnBRaXhEUVVGdlFpeERRVUZETzBsQlF6TkVMRU5CUVVNN1NVRkRTQ3h0UWtGQlF6dEJRVUZFTEVOQlFVTXNRVUY0UlVRc1EwRkJjVU1zVFVGQlRTeEhRWGRGTVVNN1FVRjRSVmtzYjBOQlFWazdRVUV5UlhwQ0xFbEJRVTBzUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVVnNRaXhyUWtGQlpTeEZRVUZGTEVOQlFVTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdKQ1J2WW5ObGNuWmhZbXhsSUdaeWIyMGdKM041YldKdmJDMXZZbk5sY25aaFlteGxKenRjYmx4dVkyOXVjM1FnVGs4Z1BTQjdmVHRjYm1aMWJtTjBhVzl1SUc1dmIzQW9LU0I3ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjRHhVUGloaE9pQkJjbkpoZVR4VVBpazZJRUZ5Y21GNVBGUStJSHRjYmlBZ1kyOXVjM1FnYkNBOUlHRXViR1Z1WjNSb08xeHVJQ0JqYjI1emRDQmlJRDBnUVhKeVlYa29iQ2s3WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diRHNnS3l0cEtTQmlXMmxkSUQwZ1lWdHBYVHRjYmlBZ2NtVjBkWEp1SUdJN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdGdVpEeFVQaWhtTVRvZ0tIUTZJRlFwSUQwK0lHSnZiMnhsWVc0c0lHWXlPaUFvZERvZ1ZDa2dQVDRnWW05dmJHVmhiaWs2SUNoME9pQlVLU0E5UGlCaWIyOXNaV0Z1SUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHRnVaRVp1S0hRNklGUXBPaUJpYjI5c1pXRnVJSHRjYmlBZ0lDQnlaWFIxY200Z1pqRW9kQ2tnSmlZZ1pqSW9kQ2s3WEc0Z0lIMDdYRzU5WEc1Y2JtbHVkR1Z5Wm1GalpTQkdRMjl1ZEdGcGJtVnlQRlFzSUZJK0lIdGNiaUFnWmloME9pQlVLVG9nVWp0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNSeWVUeFVMQ0JTUGloak9pQkdRMjl1ZEdGcGJtVnlQRlFzSUZJK0xDQjBPaUJVTENCMU9pQlRkSEpsWVcwOFlXNTVQaWs2SUZJZ2ZDQjdmU0I3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlHTXVaaWgwS1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJSFV1WDJVb1pTazdYRzRnSUNBZ2NtVjBkWEp1SUU1UE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdTVzUwWlhKdVlXeE1hWE4wWlc1bGNqeFVQaUI3WEc0Z0lGOXVPaUFvZGpvZ1ZDa2dQVDRnZG05cFpEdGNiaUFnWDJVNklDaGxjbkk2SUdGdWVTa2dQVDRnZG05cFpEdGNiaUFnWDJNNklDZ3BJRDArSUhadmFXUTdYRzU5WEc1Y2JtTnZibk4wSUU1UFgwbE1PaUJKYm5SbGNtNWhiRXhwYzNSbGJtVnlQR0Z1ZVQ0Z1BTQjdYRzRnSUY5dU9pQnViMjl3TEZ4dUlDQmZaVG9nYm05dmNDeGNiaUFnWDJNNklHNXZiM0FzWEc1OU8xeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRWx1ZEdWeWJtRnNVSEp2WkhWalpYSThWRDRnZTF4dUlDQmZjM1JoY25Rb2JHbHpkR1Z1WlhJNklFbHVkR1Z5Ym1Gc1RHbHpkR1Z1WlhJOFZENHBPaUIyYjJsa08xeHVJQ0JmYzNSdmNEb2dLQ2tnUFQ0Z2RtOXBaRHRjYm4xY2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQlBkWFJUWlc1a1pYSThWRDRnZTF4dUlDQnZkWFE2SUZOMGNtVmhiVHhVUGp0Y2JuMWNibHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JQY0dWeVlYUnZjanhVTENCU1BpQmxlSFJsYm1SeklFbHVkR1Z5Ym1Gc1VISnZaSFZqWlhJOFVqNHNJRWx1ZEdWeWJtRnNUR2x6ZEdWdVpYSThWRDRzSUU5MWRGTmxibVJsY2p4U1BpQjdYRzRnSUhSNWNHVTZJSE4wY21sdVp6dGNiaUFnYVc1ek9pQlRkSEpsWVcwOFZENDdYRzRnSUY5emRHRnlkQ2h2ZFhRNklGTjBjbVZoYlR4U1BpazZJSFp2YVdRN1hHNTlYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnUVdkbmNtVm5ZWFJ2Y2p4VUxDQlZQaUJsZUhSbGJtUnpJRWx1ZEdWeWJtRnNVSEp2WkhWalpYSThWVDRzSUU5MWRGTmxibVJsY2p4VlBpQjdYRzRnSUhSNWNHVTZJSE4wY21sdVp6dGNiaUFnYVc1elFYSnlPaUJCY25KaGVUeFRkSEpsWVcwOFZENCtPMXh1SUNCZmMzUmhjblFvYjNWME9pQlRkSEpsWVcwOFZUNHBPaUIyYjJsa08xeHVmVnh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUZCeWIyUjFZMlZ5UEZRK0lIdGNiaUFnYzNSaGNuUTZJQ2hzYVhOMFpXNWxjam9nVEdsemRHVnVaWEk4VkQ0cElEMCtJSFp2YVdRN1hHNGdJSE4wYjNBNklDZ3BJRDArSUhadmFXUTdYRzU5WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1RHbHpkR1Z1WlhJOFZENGdlMXh1SUNCdVpYaDBPaUFvZURvZ1ZDa2dQVDRnZG05cFpEdGNiaUFnWlhKeWIzSTZJQ2hsY25JNklHRnVlU2tnUFQ0Z2RtOXBaRHRjYmlBZ1kyOXRjR3hsZEdVNklDZ3BJRDArSUhadmFXUTdYRzU5WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1UzVmljMk55YVhCMGFXOXVJSHRjYmlBZ2RXNXpkV0p6WTNKcFltVW9LVG9nZG05cFpEdGNibjFjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCUFluTmxjblpoWW14bFBGUStJSHRjYmlBZ2MzVmljMk55YVdKbEtHeHBjM1JsYm1WeU9pQk1hWE4wWlc1bGNqeFVQaWs2SUZOMVluTmpjbWx3ZEdsdmJqdGNibjFjYmx4dUx5OGdiWFYwWVhSbGN5QjBhR1VnYVc1d2RYUmNibVoxYm1OMGFXOXVJR2x1ZEdWeWJtRnNhWHBsVUhKdlpIVmpaWEk4VkQ0b2NISnZaSFZqWlhJNklGQnliMlIxWTJWeVBGUStJQ1lnVUdGeWRHbGhiRHhKYm5SbGNtNWhiRkJ5YjJSMVkyVnlQRlErUGlrZ2UxeHVJQ0J3Y205a2RXTmxjaTVmYzNSaGNuUWdQU0JtZFc1amRHbHZiaUJmYzNSaGNuUW9hV3c2SUVsdWRHVnlibUZzVEdsemRHVnVaWEk4VkQ0Z0ppQlFZWEowYVdGc1BFeHBjM1JsYm1WeVBGUStQaWtnZTF4dUlDQWdJR2xzTG01bGVIUWdQU0JwYkM1ZmJqdGNiaUFnSUNCcGJDNWxjbkp2Y2lBOUlHbHNMbDlsTzF4dUlDQWdJR2xzTG1OdmJYQnNaWFJsSUQwZ2FXd3VYMk03WEc0Z0lDQWdkR2hwY3k1emRHRnlkQ2hwYkNrN1hHNGdJSDA3WEc0Z0lIQnliMlIxWTJWeUxsOXpkRzl3SUQwZ2NISnZaSFZqWlhJdWMzUnZjRHRjYm4xY2JseHVZMnhoYzNNZ1UzUnlaV0Z0VTNWaVBGUStJR2x0Y0d4bGJXVnVkSE1nVTNWaWMyTnlhWEIwYVc5dUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2NISnBkbUYwWlNCZmMzUnlaV0Z0T2lCVGRISmxZVzA4VkQ0c0lIQnlhWFpoZEdVZ1gyeHBjM1JsYm1WeU9pQkpiblJsY201aGJFeHBjM1JsYm1WeVBGUStLU0I3ZlZ4dVhHNGdJSFZ1YzNWaWMyTnlhV0psS0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdVgzTjBjbVZoYlM1ZmNtVnRiM1psS0hSb2FYTXVYMnhwYzNSbGJtVnlLVHRjYmlBZ2ZWeHVmVnh1WEc1amJHRnpjeUJQWW5ObGNuWmxjanhVUGlCcGJYQnNaVzFsYm5SeklFeHBjM1JsYm1WeVBGUStJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jSEpwZG1GMFpTQmZiR2x6ZEdWdVpYSTZJRWx1ZEdWeWJtRnNUR2x6ZEdWdVpYSThWRDRwSUh0OVhHNWNiaUFnYm1WNGRDaDJZV3gxWlRvZ1ZDa2dlMXh1SUNBZ0lIUm9hWE11WDJ4cGMzUmxibVZ5TGw5dUtIWmhiSFZsS1R0Y2JpQWdmVnh1WEc0Z0lHVnljbTl5S0dWeWNqb2dZVzU1S1NCN1hHNGdJQ0FnZEdocGN5NWZiR2x6ZEdWdVpYSXVYMlVvWlhKeUtUdGNiaUFnZlZ4dVhHNGdJR052YlhCc1pYUmxLQ2tnZTF4dUlDQWdJSFJvYVhNdVgyeHBjM1JsYm1WeUxsOWpLQ2s3WEc0Z0lIMWNibjFjYmx4dVkyeGhjM01nUm5KdmJVOWljMlZ5ZG1GaWJHVThWRDRnYVcxd2JHVnRaVzUwY3lCSmJuUmxjbTVoYkZCeWIyUjFZMlZ5UEZRK0lIdGNiaUFnY0hWaWJHbGpJSFI1Y0dVZ1BTQW5abkp2YlU5aWMyVnlkbUZpYkdVbk8xeHVJQ0J3ZFdKc2FXTWdhVzV6T2lCUFluTmxjblpoWW14bFBGUStPMXh1SUNCd2RXSnNhV01nYjNWME9pQlRkSEpsWVcwOFZENDdYRzRnSUhCeWFYWmhkR1VnWVdOMGFYWmxPaUJpYjI5c1pXRnVPMXh1SUNCd2NtbDJZWFJsSUY5emRXSTZJRk4xWW5OamNtbHdkR2x2YmlCOElIVnVaR1ZtYVc1bFpEdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHZZbk5sY25aaFlteGxPaUJQWW5ObGNuWmhZbXhsUEZRK0tTQjdYRzRnSUNBZ2RHaHBjeTVwYm5NZ1BTQnZZbk5sY25aaFlteGxPMXh1SUNBZ0lIUm9hWE11WVdOMGFYWmxJRDBnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0JmYzNSaGNuUW9iM1YwT2lCVGRISmxZVzA4VkQ0cElIdGNiaUFnSUNCMGFHbHpMbTkxZENBOUlHOTFkRHRjYmlBZ0lDQjBhR2x6TG1GamRHbDJaU0E5SUhSeWRXVTdYRzRnSUNBZ2RHaHBjeTVmYzNWaUlEMGdkR2hwY3k1cGJuTXVjM1ZpYzJOeWFXSmxLRzVsZHlCUFluTmxjblpsY2lodmRYUXBLVHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVZV04wYVhabEtTQjBhR2x6TGw5emRXSXVkVzV6ZFdKelkzSnBZbVVvS1R0Y2JpQWdmVnh1WEc0Z0lGOXpkRzl3S0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TGw5emRXSXBJSFJvYVhNdVgzTjFZaTUxYm5OMVluTmpjbWxpWlNncE8xeHVJQ0FnSUhSb2FYTXVZV04wYVhabElEMGdabUZzYzJVN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQk5aWEpuWlZOcFoyNWhkSFZ5WlNCN1hHNGdJQ2dwT2lCVGRISmxZVzA4WVc1NVBqdGNiaUFnUEZReFBpaHpNVG9nVTNSeVpXRnRQRlF4UGlrNklGTjBjbVZoYlR4VU1UNDdYRzRnSUR4VU1Td2dWREkrS0Z4dUlDQWdJSE14T2lCVGRISmxZVzA4VkRFK0xGeHVJQ0FnSUhNeU9pQlRkSEpsWVcwOFZESStLVG9nVTNSeVpXRnRQRlF4SUh3Z1ZESStPMXh1SUNBOFZERXNJRlF5TENCVU16NG9YRzRnSUNBZ2N6RTZJRk4wY21WaGJUeFVNVDRzWEc0Z0lDQWdjekk2SUZOMGNtVmhiVHhVTWo0c1hHNGdJQ0FnY3pNNklGTjBjbVZoYlR4VU16NHBPaUJUZEhKbFlXMDhWREVnZkNCVU1pQjhJRlF6UGp0Y2JpQWdQRlF4TENCVU1pd2dWRE1zSUZRMFBpaGNiaUFnSUNCek1Ub2dVM1J5WldGdFBGUXhQaXhjYmlBZ0lDQnpNam9nVTNSeVpXRnRQRlF5UGl4Y2JpQWdJQ0J6TXpvZ1UzUnlaV0Z0UEZRelBpeGNiaUFnSUNCek5Eb2dVM1J5WldGdFBGUTBQaWs2SUZOMGNtVmhiVHhVTVNCOElGUXlJSHdnVkRNZ2ZDQlVORDQ3WEc0Z0lEeFVNU3dnVkRJc0lGUXpMQ0JVTkN3Z1ZEVStLRnh1SUNBZ0lITXhPaUJUZEhKbFlXMDhWREUrTEZ4dUlDQWdJSE15T2lCVGRISmxZVzA4VkRJK0xGeHVJQ0FnSUhNek9pQlRkSEpsWVcwOFZETStMRnh1SUNBZ0lITTBPaUJUZEhKbFlXMDhWRFErTEZ4dUlDQWdJSE0xT2lCVGRISmxZVzA4VkRVK0tUb2dVM1J5WldGdFBGUXhJSHdnVkRJZ2ZDQlVNeUI4SUZRMElId2dWRFUrTzF4dUlDQThWREVzSUZReUxDQlVNeXdnVkRRc0lGUTFMQ0JVTmo0b1hHNGdJQ0FnY3pFNklGTjBjbVZoYlR4VU1UNHNYRzRnSUNBZ2N6STZJRk4wY21WaGJUeFVNajRzWEc0Z0lDQWdjek02SUZOMGNtVmhiVHhVTXo0c1hHNGdJQ0FnY3pRNklGTjBjbVZoYlR4VU5ENHNYRzRnSUNBZ2N6VTZJRk4wY21WaGJUeFVOVDRzWEc0Z0lDQWdjelk2SUZOMGNtVmhiVHhVTmo0cE9pQlRkSEpsWVcwOFZERWdmQ0JVTWlCOElGUXpJSHdnVkRRZ2ZDQlVOU0I4SUZRMlBqdGNiaUFnUEZReExDQlVNaXdnVkRNc0lGUTBMQ0JVTlN3Z1ZEWXNJRlEzUGloY2JpQWdJQ0J6TVRvZ1UzUnlaV0Z0UEZReFBpeGNiaUFnSUNCek1qb2dVM1J5WldGdFBGUXlQaXhjYmlBZ0lDQnpNem9nVTNSeVpXRnRQRlF6UGl4Y2JpQWdJQ0J6TkRvZ1UzUnlaV0Z0UEZRMFBpeGNiaUFnSUNCek5Ub2dVM1J5WldGdFBGUTFQaXhjYmlBZ0lDQnpOam9nVTNSeVpXRnRQRlEyUGl4Y2JpQWdJQ0J6TnpvZ1UzUnlaV0Z0UEZRM1BpazZJRk4wY21WaGJUeFVNU0I4SUZReUlId2dWRE1nZkNCVU5DQjhJRlExSUh3Z1ZEWWdmQ0JVTno0N1hHNGdJRHhVTVN3Z1ZESXNJRlF6TENCVU5Dd2dWRFVzSUZRMkxDQlVOeXdnVkRnK0tGeHVJQ0FnSUhNeE9pQlRkSEpsWVcwOFZERStMRnh1SUNBZ0lITXlPaUJUZEhKbFlXMDhWREkrTEZ4dUlDQWdJSE16T2lCVGRISmxZVzA4VkRNK0xGeHVJQ0FnSUhNME9pQlRkSEpsWVcwOFZEUStMRnh1SUNBZ0lITTFPaUJUZEhKbFlXMDhWRFUrTEZ4dUlDQWdJSE0yT2lCVGRISmxZVzA4VkRZK0xGeHVJQ0FnSUhNM09pQlRkSEpsWVcwOFZEYytMRnh1SUNBZ0lITTRPaUJUZEhKbFlXMDhWRGcrS1RvZ1UzUnlaV0Z0UEZReElId2dWRElnZkNCVU15QjhJRlEwSUh3Z1ZEVWdmQ0JVTmlCOElGUTNJSHdnVkRnK08xeHVJQ0E4VkRFc0lGUXlMQ0JVTXl3Z1ZEUXNJRlExTENCVU5pd2dWRGNzSUZRNExDQlVPVDRvWEc0Z0lDQWdjekU2SUZOMGNtVmhiVHhVTVQ0c1hHNGdJQ0FnY3pJNklGTjBjbVZoYlR4VU1qNHNYRzRnSUNBZ2N6TTZJRk4wY21WaGJUeFVNejRzWEc0Z0lDQWdjelE2SUZOMGNtVmhiVHhVTkQ0c1hHNGdJQ0FnY3pVNklGTjBjbVZoYlR4VU5UNHNYRzRnSUNBZ2N6WTZJRk4wY21WaGJUeFVOajRzWEc0Z0lDQWdjemM2SUZOMGNtVmhiVHhVTno0c1hHNGdJQ0FnY3pnNklGTjBjbVZoYlR4VU9ENHNYRzRnSUNBZ2N6azZJRk4wY21WaGJUeFVPVDRwT2lCVGRISmxZVzA4VkRFZ2ZDQlVNaUI4SUZReklId2dWRFFnZkNCVU5TQjhJRlEySUh3Z1ZEY2dmQ0JVT0NCOElGUTVQanRjYmlBZ1BGUXhMQ0JVTWl3Z1ZETXNJRlEwTENCVU5Td2dWRFlzSUZRM0xDQlVPQ3dnVkRrc0lGUXhNRDRvWEc0Z0lDQWdjekU2SUZOMGNtVmhiVHhVTVQ0c1hHNGdJQ0FnY3pJNklGTjBjbVZoYlR4VU1qNHNYRzRnSUNBZ2N6TTZJRk4wY21WaGJUeFVNejRzWEc0Z0lDQWdjelE2SUZOMGNtVmhiVHhVTkQ0c1hHNGdJQ0FnY3pVNklGTjBjbVZoYlR4VU5UNHNYRzRnSUNBZ2N6WTZJRk4wY21WaGJUeFVOajRzWEc0Z0lDQWdjemM2SUZOMGNtVmhiVHhVTno0c1hHNGdJQ0FnY3pnNklGTjBjbVZoYlR4VU9ENHNYRzRnSUNBZ2N6azZJRk4wY21WaGJUeFVPVDRzWEc0Z0lDQWdjekV3T2lCVGRISmxZVzA4VkRFd1BpazZJRk4wY21WaGJUeFVNU0I4SUZReUlId2dWRE1nZkNCVU5DQjhJRlExSUh3Z1ZEWWdmQ0JVTnlCOElGUTRJSHdnVkRrZ2ZDQlVNVEErTzF4dUlDQThWRDRvTGk0dWMzUnlaV0Z0T2lCQmNuSmhlVHhUZEhKbFlXMDhWRDQrS1RvZ1UzUnlaV0Z0UEZRK08xeHVmVnh1WEc1amJHRnpjeUJOWlhKblpUeFVQaUJwYlhCc1pXMWxiblJ6SUVGblozSmxaMkYwYjNJOFZDd2dWRDRzSUVsdWRHVnlibUZzVEdsemRHVnVaWEk4VkQ0Z2UxeHVJQ0J3ZFdKc2FXTWdkSGx3WlNBOUlDZHRaWEpuWlNjN1hHNGdJSEIxWW14cFl5QnBibk5CY25JNklFRnljbUY1UEZOMGNtVmhiVHhVUGo0N1hHNGdJSEIxWW14cFl5QnZkWFE2SUZOMGNtVmhiVHhVUGp0Y2JpQWdjSEpwZG1GMFpTQmhZem9nYm5WdFltVnlPeUF2THlCaFl5QnBjeUJoWTNScGRtVkRiM1Z1ZEZ4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dsdWMwRnljam9nUVhKeVlYazhVM1J5WldGdFBGUStQaWtnZTF4dUlDQWdJSFJvYVhNdWFXNXpRWEp5SUQwZ2FXNXpRWEp5TzF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnVGs4Z1lYTWdVM1J5WldGdFBGUStPMXh1SUNBZ0lIUm9hWE11WVdNZ1BTQXdPMXh1SUNCOVhHNWNiaUFnWDNOMFlYSjBLRzkxZERvZ1UzUnlaV0Z0UEZRK0tUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NXZkWFFnUFNCdmRYUTdYRzRnSUNBZ1kyOXVjM1FnY3lBOUlIUm9hWE11YVc1elFYSnlPMXh1SUNBZ0lHTnZibk4wSUV3Z1BTQnpMbXhsYm1kMGFEdGNiaUFnSUNCMGFHbHpMbUZqSUQwZ1REdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElFdzdJR2tyS3lrZ2MxdHBYUzVmWVdSa0tIUm9hWE1wTzF4dUlDQjlYRzVjYmlBZ1gzTjBiM0FvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdZMjl1YzNRZ2N5QTlJSFJvYVhNdWFXNXpRWEp5TzF4dUlDQWdJR052Ym5OMElFd2dQU0J6TG14bGJtZDBhRHRjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRXc3SUdrckt5a2djMXRwWFM1ZmNtVnRiM1psS0hSb2FYTXBPMXh1SUNBZ0lIUm9hWE11YjNWMElEMGdUazhnWVhNZ1UzUnlaV0Z0UEZRK08xeHVJQ0I5WEc1Y2JpQWdYMjRvZERvZ1ZDa2dlMXh1SUNBZ0lHTnZibk4wSUhVZ1BTQjBhR2x6TG05MWREdGNiaUFnSUNCcFppQW9kU0E5UFQwZ1RrOHBJSEpsZEhWeWJqdGNiaUFnSUNCMUxsOXVLSFFwTzF4dUlDQjlYRzVjYmlBZ1gyVW9aWEp5T2lCaGJua3BJSHRjYmlBZ0lDQmpiMjV6ZENCMUlEMGdkR2hwY3k1dmRYUTdYRzRnSUNBZ2FXWWdLSFVnUFQwOUlFNVBLU0J5WlhSMWNtNDdYRzRnSUNBZ2RTNWZaU2hsY25JcE8xeHVJQ0I5WEc1Y2JpQWdYMk1vS1NCN1hHNGdJQ0FnYVdZZ0tDMHRkR2hwY3k1aFl5QThQU0F3S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0IxSUQwZ2RHaHBjeTV2ZFhRN1hHNGdJQ0FnSUNCcFppQW9kU0E5UFQwZ1RrOHBJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIVXVYMk1vS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCRGIyMWlhVzVsVTJsbmJtRjBkWEpsSUh0Y2JpQWdLQ2s2SUZOMGNtVmhiVHhCY25KaGVUeGhibmsrUGp0Y2JpQWdQRlF4UGloek1Ub2dVM1J5WldGdFBGUXhQaWs2SUZOMGNtVmhiVHhiVkRGZFBqdGNiaUFnUEZReExDQlVNajRvWEc0Z0lDQWdjekU2SUZOMGNtVmhiVHhVTVQ0c1hHNGdJQ0FnY3pJNklGTjBjbVZoYlR4VU1qNHBPaUJUZEhKbFlXMDhXMVF4TENCVU1sMCtPMXh1SUNBOFZERXNJRlF5TENCVU16NG9YRzRnSUNBZ2N6RTZJRk4wY21WaGJUeFVNVDRzWEc0Z0lDQWdjekk2SUZOMGNtVmhiVHhVTWo0c1hHNGdJQ0FnY3pNNklGTjBjbVZoYlR4VU16NHBPaUJUZEhKbFlXMDhXMVF4TENCVU1pd2dWRE5kUGp0Y2JpQWdQRlF4TENCVU1pd2dWRE1zSUZRMFBpaGNiaUFnSUNCek1Ub2dVM1J5WldGdFBGUXhQaXhjYmlBZ0lDQnpNam9nVTNSeVpXRnRQRlF5UGl4Y2JpQWdJQ0J6TXpvZ1UzUnlaV0Z0UEZRelBpeGNiaUFnSUNCek5Eb2dVM1J5WldGdFBGUTBQaWs2SUZOMGNtVmhiVHhiVkRFc0lGUXlMQ0JVTXl3Z1ZEUmRQanRjYmlBZ1BGUXhMQ0JVTWl3Z1ZETXNJRlEwTENCVU5UNG9YRzRnSUNBZ2N6RTZJRk4wY21WaGJUeFVNVDRzWEc0Z0lDQWdjekk2SUZOMGNtVmhiVHhVTWo0c1hHNGdJQ0FnY3pNNklGTjBjbVZoYlR4VU16NHNYRzRnSUNBZ2N6UTZJRk4wY21WaGJUeFVORDRzWEc0Z0lDQWdjelU2SUZOMGNtVmhiVHhVTlQ0cE9pQlRkSEpsWVcwOFcxUXhMQ0JVTWl3Z1ZETXNJRlEwTENCVU5WMCtPMXh1SUNBOFZERXNJRlF5TENCVU15d2dWRFFzSUZRMUxDQlVOajRvWEc0Z0lDQWdjekU2SUZOMGNtVmhiVHhVTVQ0c1hHNGdJQ0FnY3pJNklGTjBjbVZoYlR4VU1qNHNYRzRnSUNBZ2N6TTZJRk4wY21WaGJUeFVNejRzWEc0Z0lDQWdjelE2SUZOMGNtVmhiVHhVTkQ0c1hHNGdJQ0FnY3pVNklGTjBjbVZoYlR4VU5UNHNYRzRnSUNBZ2N6WTZJRk4wY21WaGJUeFVOajRwT2lCVGRISmxZVzA4VzFReExDQlVNaXdnVkRNc0lGUTBMQ0JVTlN3Z1ZEWmRQanRjYmlBZ1BGUXhMQ0JVTWl3Z1ZETXNJRlEwTENCVU5Td2dWRFlzSUZRM1BpaGNiaUFnSUNCek1Ub2dVM1J5WldGdFBGUXhQaXhjYmlBZ0lDQnpNam9nVTNSeVpXRnRQRlF5UGl4Y2JpQWdJQ0J6TXpvZ1UzUnlaV0Z0UEZRelBpeGNiaUFnSUNCek5Eb2dVM1J5WldGdFBGUTBQaXhjYmlBZ0lDQnpOVG9nVTNSeVpXRnRQRlExUGl4Y2JpQWdJQ0J6TmpvZ1UzUnlaV0Z0UEZRMlBpeGNiaUFnSUNCek56b2dVM1J5WldGdFBGUTNQaWs2SUZOMGNtVmhiVHhiVkRFc0lGUXlMQ0JVTXl3Z1ZEUXNJRlExTENCVU5pd2dWRGRkUGp0Y2JpQWdQRlF4TENCVU1pd2dWRE1zSUZRMExDQlVOU3dnVkRZc0lGUTNMQ0JVT0Q0b1hHNGdJQ0FnY3pFNklGTjBjbVZoYlR4VU1UNHNYRzRnSUNBZ2N6STZJRk4wY21WaGJUeFVNajRzWEc0Z0lDQWdjek02SUZOMGNtVmhiVHhVTXo0c1hHNGdJQ0FnY3pRNklGTjBjbVZoYlR4VU5ENHNYRzRnSUNBZ2N6VTZJRk4wY21WaGJUeFVOVDRzWEc0Z0lDQWdjelk2SUZOMGNtVmhiVHhVTmo0c1hHNGdJQ0FnY3pjNklGTjBjbVZoYlR4VU56NHNYRzRnSUNBZ2N6ZzZJRk4wY21WaGJUeFVPRDRwT2lCVGRISmxZVzA4VzFReExDQlVNaXdnVkRNc0lGUTBMQ0JVTlN3Z1ZEWXNJRlEzTENCVU9GMCtPMXh1SUNBOFZERXNJRlF5TENCVU15d2dWRFFzSUZRMUxDQlVOaXdnVkRjc0lGUTRMQ0JVT1Q0b1hHNGdJQ0FnY3pFNklGTjBjbVZoYlR4VU1UNHNYRzRnSUNBZ2N6STZJRk4wY21WaGJUeFVNajRzWEc0Z0lDQWdjek02SUZOMGNtVmhiVHhVTXo0c1hHNGdJQ0FnY3pRNklGTjBjbVZoYlR4VU5ENHNYRzRnSUNBZ2N6VTZJRk4wY21WaGJUeFVOVDRzWEc0Z0lDQWdjelk2SUZOMGNtVmhiVHhVTmo0c1hHNGdJQ0FnY3pjNklGTjBjbVZoYlR4VU56NHNYRzRnSUNBZ2N6ZzZJRk4wY21WaGJUeFVPRDRzWEc0Z0lDQWdjems2SUZOMGNtVmhiVHhVT1Q0cE9pQlRkSEpsWVcwOFcxUXhMQ0JVTWl3Z1ZETXNJRlEwTENCVU5Td2dWRFlzSUZRM0xDQlVPQ3dnVkRsZFBqdGNiaUFnUEZReExDQlVNaXdnVkRNc0lGUTBMQ0JVTlN3Z1ZEWXNJRlEzTENCVU9Dd2dWRGtzSUZReE1ENG9YRzRnSUNBZ2N6RTZJRk4wY21WaGJUeFVNVDRzWEc0Z0lDQWdjekk2SUZOMGNtVmhiVHhVTWo0c1hHNGdJQ0FnY3pNNklGTjBjbVZoYlR4VU16NHNYRzRnSUNBZ2N6UTZJRk4wY21WaGJUeFVORDRzWEc0Z0lDQWdjelU2SUZOMGNtVmhiVHhVTlQ0c1hHNGdJQ0FnY3pZNklGTjBjbVZoYlR4VU5qNHNYRzRnSUNBZ2N6YzZJRk4wY21WaGJUeFVOejRzWEc0Z0lDQWdjemc2SUZOMGNtVmhiVHhVT0Q0c1hHNGdJQ0FnY3prNklGTjBjbVZoYlR4VU9UNHNYRzRnSUNBZ2N6RXdPaUJUZEhKbFlXMDhWREV3UGlrNklGTjBjbVZoYlR4YlZERXNJRlF5TENCVU15d2dWRFFzSUZRMUxDQlVOaXdnVkRjc0lGUTRMQ0JVT1N3Z1ZERXdYVDQ3WEc0Z0lDZ3VMaTV6ZEhKbFlXMDZJRUZ5Y21GNVBGTjBjbVZoYlR4aGJuaytQaWs2SUZOMGNtVmhiVHhCY25KaGVUeGhibmsrUGp0Y2JuMWNibHh1WTJ4aGMzTWdRMjl0WW1sdVpVeHBjM1JsYm1WeVBGUStJR2x0Y0d4bGJXVnVkSE1nU1c1MFpYSnVZV3hNYVhOMFpXNWxjanhVUGl3Z1QzVjBVMlZ1WkdWeVBFRnljbUY1UEZRK1BpQjdYRzRnSUhCeWFYWmhkR1VnYVRvZ2JuVnRZbVZ5TzF4dUlDQndkV0pzYVdNZ2IzVjBPaUJUZEhKbFlXMDhRWEp5WVhrOFZENCtPMXh1SUNCd2NtbDJZWFJsSUhBNklFTnZiV0pwYm1VOFZENDdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9hVG9nYm5WdFltVnlMQ0J2ZFhRNklGTjBjbVZoYlR4QmNuSmhlVHhVUGo0c0lIQTZJRU52YldKcGJtVThWRDRwSUh0Y2JpQWdJQ0IwYUdsekxta2dQU0JwTzF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnYjNWME8xeHVJQ0FnSUhSb2FYTXVjQ0E5SUhBN1hHNGdJQ0FnY0M1cGJITXVjSFZ6YUNoMGFHbHpLVHRjYmlBZ2ZWeHVYRzRnSUY5dUtIUTZJRlFwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCd0lEMGdkR2hwY3k1d0xDQnZkWFFnUFNCMGFHbHpMbTkxZER0Y2JpQWdJQ0JwWmlBb2IzVjBJRDA5UFNCT1R5a2djbVYwZFhKdU8xeHVJQ0FnSUdsbUlDaHdMblZ3S0hRc0lIUm9hWE11YVNrcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdFZ1BTQndMblpoYkhNN1hHNGdJQ0FnSUNCamIyNXpkQ0JzSUQwZ1lTNXNaVzVuZEdnN1hHNGdJQ0FnSUNCamIyNXpkQ0JpSUQwZ1FYSnlZWGtvYkNrN1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHdzdJQ3NyYVNrZ1lsdHBYU0E5SUdGYmFWMDdYRzRnSUNBZ0lDQnZkWFF1WDI0b1lpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdYMlVvWlhKeU9pQmhibmtwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCdmRYUWdQU0IwYUdsekxtOTFkRHRjYmlBZ0lDQnBaaUFvYjNWMElEMDlQU0JPVHlrZ2NtVjBkWEp1TzF4dUlDQWdJRzkxZEM1ZlpTaGxjbklwTzF4dUlDQjlYRzVjYmlBZ1gyTW9LVG9nZG05cFpDQjdYRzRnSUNBZ1kyOXVjM1FnY0NBOUlIUm9hWE11Y0R0Y2JpQWdJQ0JwWmlBb2NDNXZkWFFnUFQwOUlFNVBLU0J5WlhSMWNtNDdYRzRnSUNBZ2FXWWdLQzB0Y0M1T1l5QTlQVDBnTUNrZ2NDNXZkWFF1WDJNb0tUdGNiaUFnZlZ4dWZWeHVYRzVqYkdGemN5QkRiMjFpYVc1bFBGSStJR2x0Y0d4bGJXVnVkSE1nUVdkbmNtVm5ZWFJ2Y2p4aGJua3NJRUZ5Y21GNVBGSStQaUI3WEc0Z0lIQjFZbXhwWXlCMGVYQmxJRDBnSjJOdmJXSnBibVVuTzF4dUlDQndkV0pzYVdNZ2FXNXpRWEp5T2lCQmNuSmhlVHhUZEhKbFlXMDhZVzU1UGo0N1hHNGdJSEIxWW14cFl5QnZkWFE2SUZOMGNtVmhiVHhCY25KaGVUeFNQajQ3WEc0Z0lIQjFZbXhwWXlCcGJITTZJRUZ5Y21GNVBFTnZiV0pwYm1WTWFYTjBaVzVsY2p4aGJuaytQanRjYmlBZ2NIVmliR2xqSUU1ak9pQnVkVzFpWlhJN0lDOHZJQ3BPS25WdFltVnlJRzltSUhOMGNtVmhiWE1nYzNScGJHd2dkRzhnYzJWdVpDQXFZeXB2YlhCc1pYUmxYRzRnSUhCMVlteHBZeUJPYmpvZ2JuVnRZbVZ5T3lBdkx5QXFUaXAxYldKbGNpQnZaaUJ6ZEhKbFlXMXpJSE4wYVd4c0lIUnZJSE5sYm1RZ0ttNHFaWGgwWEc0Z0lIQjFZbXhwWXlCMllXeHpPaUJCY25KaGVUeFNQanRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWhwYm5OQmNuSTZJRUZ5Y21GNVBGTjBjbVZoYlR4aGJuaytQaWtnZTF4dUlDQWdJSFJvYVhNdWFXNXpRWEp5SUQwZ2FXNXpRWEp5TzF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnVGs4Z1lYTWdVM1J5WldGdFBFRnljbUY1UEZJK1BqdGNiaUFnSUNCMGFHbHpMbWxzY3lBOUlGdGRPMXh1SUNBZ0lIUm9hWE11VG1NZ1BTQjBhR2x6TGs1dUlEMGdNRHRjYmlBZ0lDQjBhR2x6TG5aaGJITWdQU0JiWFR0Y2JpQWdmVnh1WEc0Z0lIVndLSFE2SUdGdWVTd2dhVG9nYm5WdFltVnlLVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdZMjl1YzNRZ2RpQTlJSFJvYVhNdWRtRnNjMXRwWFR0Y2JpQWdJQ0JqYjI1emRDQk9iaUE5SUNGMGFHbHpMazV1SUQ4Z01DQTZJSFlnUFQwOUlFNVBJRDhnTFMxMGFHbHpMazV1SURvZ2RHaHBjeTVPYmp0Y2JpQWdJQ0IwYUdsekxuWmhiSE5iYVYwZ1BTQjBPMXh1SUNBZ0lISmxkSFZ5YmlCT2JpQTlQVDBnTUR0Y2JpQWdmVnh1WEc0Z0lGOXpkR0Z5ZENodmRYUTZJRk4wY21WaGJUeEJjbkpoZVR4U1BqNHBPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbTkxZENBOUlHOTFkRHRjYmlBZ0lDQmpiMjV6ZENCeklEMGdkR2hwY3k1cGJuTkJjbkk3WEc0Z0lDQWdZMjl1YzNRZ2JpQTlJSFJvYVhNdVRtTWdQU0IwYUdsekxrNXVJRDBnY3k1c1pXNW5kR2c3WEc0Z0lDQWdZMjl1YzNRZ2RtRnNjeUE5SUhSb2FYTXVkbUZzY3lBOUlHNWxkeUJCY25KaGVTaHVLVHRjYmlBZ0lDQnBaaUFvYmlBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnYjNWMExsOXVLRnRkS1R0Y2JpQWdJQ0FnSUc5MWRDNWZZeWdwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IyWVd4elcybGRJRDBnVGs4N1hHNGdJQ0FnSUNBZ0lITmJhVjB1WDJGa1pDaHVaWGNnUTI5dFltbHVaVXhwYzNSbGJtVnlLR2tzSUc5MWRDd2dkR2hwY3lrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lGOXpkRzl3S0NrNklIWnZhV1FnZTF4dUlDQWdJR052Ym5OMElITWdQU0IwYUdsekxtbHVjMEZ5Y2p0Y2JpQWdJQ0JqYjI1emRDQnVJRDBnY3k1c1pXNW5kR2c3WEc0Z0lDQWdZMjl1YzNRZ2FXeHpJRDBnZEdocGN5NXBiSE03WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J1T3lCcEt5c3BJSE5iYVYwdVgzSmxiVzkyWlNocGJITmJhVjBwTzF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnVGs4Z1lYTWdVM1J5WldGdFBFRnljbUY1UEZJK1BqdGNiaUFnSUNCMGFHbHpMbWxzY3lBOUlGdGRPMXh1SUNBZ0lIUm9hWE11ZG1Gc2N5QTlJRnRkTzF4dUlDQjlYRzU5WEc1Y2JtTnNZWE56SUVaeWIyMUJjbkpoZVR4VVBpQnBiWEJzWlcxbGJuUnpJRWx1ZEdWeWJtRnNVSEp2WkhWalpYSThWRDRnZTF4dUlDQndkV0pzYVdNZ2RIbHdaU0E5SUNkbWNtOXRRWEp5WVhrbk8xeHVJQ0J3ZFdKc2FXTWdZVG9nUVhKeVlYazhWRDQ3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWVRvZ1FYSnlZWGs4VkQ0cElIdGNiaUFnSUNCMGFHbHpMbUVnUFNCaE8xeHVJQ0I5WEc1Y2JpQWdYM04wWVhKMEtHOTFkRG9nU1c1MFpYSnVZV3hNYVhOMFpXNWxjanhVUGlrNklIWnZhV1FnZTF4dUlDQWdJR052Ym5OMElHRWdQU0IwYUdsekxtRTdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUc0Z1BTQmhMbXhsYm1kMGFEc2dhU0E4SUc0N0lHa3JLeWtnYjNWMExsOXVLR0ZiYVYwcE8xeHVJQ0FnSUc5MWRDNWZZeWdwTzF4dUlDQjlYRzVjYmlBZ1gzTjBiM0FvS1RvZ2RtOXBaQ0I3WEc0Z0lIMWNibjFjYmx4dVkyeGhjM01nUm5KdmJWQnliMjFwYzJVOFZENGdhVzF3YkdWdFpXNTBjeUJKYm5SbGNtNWhiRkJ5YjJSMVkyVnlQRlErSUh0Y2JpQWdjSFZpYkdsaklIUjVjR1VnUFNBblpuSnZiVkJ5YjIxcGMyVW5PMXh1SUNCd2RXSnNhV01nYjI0NklHSnZiMnhsWVc0N1hHNGdJSEIxWW14cFl5QndPaUJRY205dGFYTmxUR2xyWlR4VVBqdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHdPaUJRY205dGFYTmxUR2xyWlR4VVBpa2dlMXh1SUNBZ0lIUm9hWE11YjI0Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxuQWdQU0J3TzF4dUlDQjlYRzVjYmlBZ1gzTjBZWEowS0c5MWREb2dTVzUwWlhKdVlXeE1hWE4wWlc1bGNqeFVQaWs2SUhadmFXUWdlMXh1SUNBZ0lHTnZibk4wSUhCeWIyUWdQU0IwYUdsek8xeHVJQ0FnSUhSb2FYTXViMjRnUFNCMGNuVmxPMXh1SUNBZ0lIUm9hWE11Y0M1MGFHVnVLRnh1SUNBZ0lDQWdLSFk2SUZRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnliMlF1YjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0J2ZFhRdVgyNG9kaWs3WEc0Z0lDQWdJQ0FnSUNBZ2IzVjBMbDlqS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQW9aVG9nWVc1NUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUc5MWRDNWZaU2hsS1R0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnS1M1MGFHVnVLRzV2YjNBc0lDaGxjbkk2SUdGdWVTa2dQVDRnZTF4dUlDQWdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3SUhSb2NtOTNJR1Z5Y2pzZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JmYzNSdmNDZ3BPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbTl1SUQwZ1ptRnNjMlU3WEc0Z0lIMWNibjFjYmx4dVkyeGhjM01nVUdWeWFXOWthV01nYVcxd2JHVnRaVzUwY3lCSmJuUmxjbTVoYkZCeWIyUjFZMlZ5UEc1MWJXSmxjajRnZTF4dUlDQndkV0pzYVdNZ2RIbHdaU0E5SUNkd1pYSnBiMlJwWXljN1hHNGdJSEIxWW14cFl5QndaWEpwYjJRNklHNTFiV0psY2p0Y2JpQWdjSEpwZG1GMFpTQnBiblJsY25aaGJFbEVPaUJoYm5rN1hHNGdJSEJ5YVhaaGRHVWdhVG9nYm5WdFltVnlPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLSEJsY21sdlpEb2diblZ0WW1WeUtTQjdYRzRnSUNBZ2RHaHBjeTV3WlhKcGIyUWdQU0J3WlhKcGIyUTdYRzRnSUNBZ2RHaHBjeTVwYm5SbGNuWmhiRWxFSUQwZ0xURTdYRzRnSUNBZ2RHaHBjeTVwSUQwZ01EdGNiaUFnZlZ4dVhHNGdJRjl6ZEdGeWRDaHZkWFE2SUVsdWRHVnlibUZzVEdsemRHVnVaWEk4Ym5WdFltVnlQaWs2SUhadmFXUWdlMXh1SUNBZ0lHTnZibk4wSUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUdaMWJtTjBhVzl1SUdsdWRHVnlkbUZzU0dGdVpHeGxjaWdwSUhzZ2IzVjBMbDl1S0hObGJHWXVhU3NyS1RzZ2ZWeHVJQ0FnSUhSb2FYTXVhVzUwWlhKMllXeEpSQ0E5SUhObGRFbHVkR1Z5ZG1Gc0tHbHVkR1Z5ZG1Gc1NHRnVaR3hsY2l3Z2RHaHBjeTV3WlhKcGIyUXBPMXh1SUNCOVhHNWNiaUFnWDNOMGIzQW9LVG9nZG05cFpDQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWFXNTBaWEoyWVd4SlJDQWhQVDBnTFRFcElHTnNaV0Z5U1c1MFpYSjJZV3dvZEdocGN5NXBiblJsY25aaGJFbEVLVHRjYmlBZ0lDQjBhR2x6TG1sdWRHVnlkbUZzU1VRZ1BTQXRNVHRjYmlBZ0lDQjBhR2x6TG1rZ1BTQXdPMXh1SUNCOVhHNTlYRzVjYm1Oc1lYTnpJRVJsWW5WblBGUStJR2x0Y0d4bGJXVnVkSE1nVDNCbGNtRjBiM0k4VkN3Z1ZENGdlMXh1SUNCd2RXSnNhV01nZEhsd1pTQTlJQ2RrWldKMVp5YzdYRzRnSUhCMVlteHBZeUJwYm5NNklGTjBjbVZoYlR4VVBqdGNiaUFnY0hWaWJHbGpJRzkxZERvZ1UzUnlaV0Z0UEZRK08xeHVJQ0J3Y21sMllYUmxJSE02SUNoME9pQlVLU0E5UGlCaGJuazdJQzh2SUhOd2VWeHVJQ0J3Y21sMllYUmxJR3c2SUhOMGNtbHVaenNnTHk4Z2JHRmlaV3hjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWhwYm5NNklGTjBjbVZoYlR4VVBpazdYRzRnSUdOdmJuTjBjblZqZEc5eUtHbHVjem9nVTNSeVpXRnRQRlErTENCaGNtYy9PaUJ6ZEhKcGJtY3BPMXh1SUNCamIyNXpkSEoxWTNSdmNpaHBibk02SUZOMGNtVmhiVHhVUGl3Z1lYSm5Qem9nS0hRNklGUXBJRDArSUdGdWVTazdYRzRnSUdOdmJuTjBjblZqZEc5eUtHbHVjem9nVTNSeVpXRnRQRlErTENCaGNtYy9PaUJ6ZEhKcGJtY2dmQ0FvS0hRNklGUXBJRDArSUdGdWVTa3BPMXh1SUNCamIyNXpkSEoxWTNSdmNpaHBibk02SUZOMGNtVmhiVHhVUGl3Z1lYSm5Qem9nYzNSeWFXNW5JSHdnS0NoME9pQlVLU0E5UGlCaGJua3BJSHdnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnZEdocGN5NXBibk1nUFNCcGJuTTdYRzRnSUNBZ2RHaHBjeTV2ZFhRZ1BTQk9UeUJoY3lCVGRISmxZVzA4VkQ0N1hHNGdJQ0FnZEdocGN5NXpJRDBnYm05dmNEdGNiaUFnSUNCMGFHbHpMbXdnUFNBbkp6dGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHRnlaeUE5UFQwZ0ozTjBjbWx1WnljcElIUm9hWE11YkNBOUlHRnlaenNnWld4elpTQnBaaUFvZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMloxYm1OMGFXOXVKeWtnZEdocGN5NXpJRDBnWVhKbk8xeHVJQ0I5WEc1Y2JpQWdYM04wWVhKMEtHOTFkRG9nVTNSeVpXRnRQRlErS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1dmRYUWdQU0J2ZFhRN1hHNGdJQ0FnZEdocGN5NXBibk11WDJGa1pDaDBhR2x6S1R0Y2JpQWdmVnh1WEc0Z0lGOXpkRzl3S0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWFXNXpMbDl5WlcxdmRtVW9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NXZkWFFnUFNCT1R5QmhjeUJUZEhKbFlXMDhWRDQ3WEc0Z0lIMWNibHh1SUNCZmJpaDBPaUJVS1NCN1hHNGdJQ0FnWTI5dWMzUWdkU0E5SUhSb2FYTXViM1YwTzF4dUlDQWdJR2xtSUNoMUlEMDlQU0JPVHlrZ2NtVjBkWEp1TzF4dUlDQWdJR052Ym5OMElITWdQU0IwYUdsekxuTXNJR3dnUFNCMGFHbHpMbXc3WEc0Z0lDQWdhV1lnS0hNZ0lUMDlJRzV2YjNBcElIdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUhNb2RDazdYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUhVdVgyVW9aU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hzS1NCamIyNXpiMnhsTG14dlp5aHNJQ3NnSnpvbkxDQjBLVHNnWld4elpTQmpiMjV6YjJ4bExteHZaeWgwS1R0Y2JpQWdJQ0IxTGw5dUtIUXBPMXh1SUNCOVhHNWNiaUFnWDJVb1pYSnlPaUJoYm5rcElIdGNiaUFnSUNCamIyNXpkQ0IxSUQwZ2RHaHBjeTV2ZFhRN1hHNGdJQ0FnYVdZZ0tIVWdQVDA5SUU1UEtTQnlaWFIxY200N1hHNGdJQ0FnZFM1ZlpTaGxjbklwTzF4dUlDQjlYRzVjYmlBZ1gyTW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2RTQTlJSFJvYVhNdWIzVjBPMXh1SUNBZ0lHbG1JQ2gxSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lIVXVYMk1vS1R0Y2JpQWdmVnh1ZlZ4dVhHNWpiR0Z6Y3lCRWNtOXdQRlErSUdsdGNHeGxiV1Z1ZEhNZ1QzQmxjbUYwYjNJOFZDd2dWRDRnZTF4dUlDQndkV0pzYVdNZ2RIbHdaU0E5SUNka2NtOXdKenRjYmlBZ2NIVmliR2xqSUdsdWN6b2dVM1J5WldGdFBGUStPMXh1SUNCd2RXSnNhV01nYjNWME9pQlRkSEpsWVcwOFZENDdYRzRnSUhCMVlteHBZeUJ0WVhnNklHNTFiV0psY2p0Y2JpQWdjSEpwZG1GMFpTQmtjbTl3Y0dWa09pQnVkVzFpWlhJN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2JXRjRPaUJ1ZFcxaVpYSXNJR2x1Y3pvZ1UzUnlaV0Z0UEZRK0tTQjdYRzRnSUNBZ2RHaHBjeTVwYm5NZ1BTQnBibk03WEc0Z0lDQWdkR2hwY3k1dmRYUWdQU0JPVHlCaGN5QlRkSEpsWVcwOFZENDdYRzRnSUNBZ2RHaHBjeTV0WVhnZ1BTQnRZWGc3WEc0Z0lDQWdkR2hwY3k1a2NtOXdjR1ZrSUQwZ01EdGNiaUFnZlZ4dVhHNGdJRjl6ZEdGeWRDaHZkWFE2SUZOMGNtVmhiVHhVUGlrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnYjNWME8xeHVJQ0FnSUhSb2FYTXVaSEp2Y0hCbFpDQTlJREE3WEc0Z0lDQWdkR2hwY3k1cGJuTXVYMkZrWkNoMGFHbHpLVHRjYmlBZ2ZWeHVYRzRnSUY5emRHOXdLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11YVc1ekxsOXlaVzF2ZG1Vb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1dmRYUWdQU0JPVHlCaGN5QlRkSEpsWVcwOFZENDdYRzRnSUgxY2JseHVJQ0JmYmloME9pQlVLU0I3WEc0Z0lDQWdZMjl1YzNRZ2RTQTlJSFJvYVhNdWIzVjBPMXh1SUNBZ0lHbG1JQ2gxSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lHbG1JQ2gwYUdsekxtUnliM0J3WldRckt5QStQU0IwYUdsekxtMWhlQ2tnZFM1ZmJpaDBLVHRjYmlBZ2ZWeHVYRzRnSUY5bEtHVnljam9nWVc1NUtTQjdYRzRnSUNBZ1kyOXVjM1FnZFNBOUlIUm9hWE11YjNWME8xeHVJQ0FnSUdsbUlDaDFJRDA5UFNCT1R5a2djbVYwZFhKdU8xeHVJQ0FnSUhVdVgyVW9aWEp5S1R0Y2JpQWdmVnh1WEc0Z0lGOWpLQ2tnZTF4dUlDQWdJR052Ym5OMElIVWdQU0IwYUdsekxtOTFkRHRjYmlBZ0lDQnBaaUFvZFNBOVBUMGdUazhwSUhKbGRIVnlianRjYmlBZ0lDQjFMbDlqS0NrN1hHNGdJSDFjYm4xY2JseHVZMnhoYzNNZ1JXNWtWMmhsYmt4cGMzUmxibVZ5UEZRK0lHbHRjR3hsYldWdWRITWdTVzUwWlhKdVlXeE1hWE4wWlc1bGNqeGhibmsrSUh0Y2JpQWdjSEpwZG1GMFpTQnZkWFE2SUZOMGNtVmhiVHhVUGp0Y2JpQWdjSEpwZG1GMFpTQnZjRG9nUlc1a1YyaGxianhVUGp0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lodmRYUTZJRk4wY21WaGJUeFVQaXdnYjNBNklFVnVaRmRvWlc0OFZENHBJSHRjYmlBZ0lDQjBhR2x6TG05MWRDQTlJRzkxZER0Y2JpQWdJQ0IwYUdsekxtOXdJRDBnYjNBN1hHNGdJSDFjYmx4dUlDQmZiaWdwSUh0Y2JpQWdJQ0IwYUdsekxtOXdMbVZ1WkNncE8xeHVJQ0I5WEc1Y2JpQWdYMlVvWlhKeU9pQmhibmtwSUh0Y2JpQWdJQ0IwYUdsekxtOTFkQzVmWlNobGNuSXBPMXh1SUNCOVhHNWNiaUFnWDJNb0tTQjdYRzRnSUNBZ2RHaHBjeTV2Y0M1bGJtUW9LVHRjYmlBZ2ZWeHVmVnh1WEc1amJHRnpjeUJGYm1SWGFHVnVQRlErSUdsdGNHeGxiV1Z1ZEhNZ1QzQmxjbUYwYjNJOFZDd2dWRDRnZTF4dUlDQndkV0pzYVdNZ2RIbHdaU0E5SUNkbGJtUlhhR1Z1Snp0Y2JpQWdjSFZpYkdsaklHbHVjem9nVTNSeVpXRnRQRlErTzF4dUlDQndkV0pzYVdNZ2IzVjBPaUJUZEhKbFlXMDhWRDQ3WEc0Z0lIQjFZbXhwWXlCdk9pQlRkSEpsWVcwOFlXNTVQanNnTHk4Z2J5QTlJRzkwYUdWeVhHNGdJSEJ5YVhaaGRHVWdiMmxzT2lCSmJuUmxjbTVoYkV4cGMzUmxibVZ5UEdGdWVUNDdJQzh2SUc5cGJDQTlJRzkwYUdWeUlFbHVkR1Z5Ym1Gc1RHbHpkR1Z1WlhKY2JseHVJQ0JqYjI1emRISjFZM1J2Y2lodk9pQlRkSEpsWVcwOFlXNTVQaXdnYVc1ek9pQlRkSEpsWVcwOFZENHBJSHRjYmlBZ0lDQjBhR2x6TG1sdWN5QTlJR2x1Y3p0Y2JpQWdJQ0IwYUdsekxtOTFkQ0E5SUU1UElHRnpJRk4wY21WaGJUeFVQanRjYmlBZ0lDQjBhR2x6TG04Z1BTQnZPMXh1SUNBZ0lIUm9hWE11YjJsc0lEMGdUazlmU1V3N1hHNGdJSDFjYmx4dUlDQmZjM1JoY25Rb2IzVjBPaUJUZEhKbFlXMDhWRDRwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG05MWRDQTlJRzkxZER0Y2JpQWdJQ0IwYUdsekxtOHVYMkZrWkNoMGFHbHpMbTlwYkNBOUlHNWxkeUJGYm1SWGFHVnVUR2x6ZEdWdVpYSW9iM1YwTENCMGFHbHpLU2s3WEc0Z0lDQWdkR2hwY3k1cGJuTXVYMkZrWkNoMGFHbHpLVHRjYmlBZ2ZWeHVYRzRnSUY5emRHOXdLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11YVc1ekxsOXlaVzF2ZG1Vb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1dkxsOXlaVzF2ZG1Vb2RHaHBjeTV2YVd3cE8xeHVJQ0FnSUhSb2FYTXViM1YwSUQwZ1RrOGdZWE1nVTNSeVpXRnRQRlErTzF4dUlDQWdJSFJvYVhNdWIybHNJRDBnVGs5ZlNVdzdYRzRnSUgxY2JseHVJQ0JsYm1Rb0tUb2dkbTlwWkNCN1hHNGdJQ0FnWTI5dWMzUWdkU0E5SUhSb2FYTXViM1YwTzF4dUlDQWdJR2xtSUNoMUlEMDlQU0JPVHlrZ2NtVjBkWEp1TzF4dUlDQWdJSFV1WDJNb0tUdGNiaUFnZlZ4dVhHNGdJRjl1S0hRNklGUXBJSHRjYmlBZ0lDQmpiMjV6ZENCMUlEMGdkR2hwY3k1dmRYUTdYRzRnSUNBZ2FXWWdLSFVnUFQwOUlFNVBLU0J5WlhSMWNtNDdYRzRnSUNBZ2RTNWZiaWgwS1R0Y2JpQWdmVnh1WEc0Z0lGOWxLR1Z5Y2pvZ1lXNTVLU0I3WEc0Z0lDQWdZMjl1YzNRZ2RTQTlJSFJvYVhNdWIzVjBPMXh1SUNBZ0lHbG1JQ2gxSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lIVXVYMlVvWlhKeUtUdGNiaUFnZlZ4dVhHNGdJRjlqS0NrZ2UxeHVJQ0FnSUhSb2FYTXVaVzVrS0NrN1hHNGdJSDFjYm4xY2JseHVZMnhoYzNNZ1JtbHNkR1Z5UEZRK0lHbHRjR3hsYldWdWRITWdUM0JsY21GMGIzSThWQ3dnVkQ0Z2UxeHVJQ0J3ZFdKc2FXTWdkSGx3WlNBOUlDZG1hV3gwWlhJbk8xeHVJQ0J3ZFdKc2FXTWdhVzV6T2lCVGRISmxZVzA4VkQ0N1hHNGdJSEIxWW14cFl5QnZkWFE2SUZOMGNtVmhiVHhVUGp0Y2JpQWdjSFZpYkdsaklHWTZJQ2gwT2lCVUtTQTlQaUJpYjI5c1pXRnVPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLSEJoYzNObGN6b2dLSFE2SUZRcElEMCtJR0p2YjJ4bFlXNHNJR2x1Y3pvZ1UzUnlaV0Z0UEZRK0tTQjdYRzRnSUNBZ2RHaHBjeTVwYm5NZ1BTQnBibk03WEc0Z0lDQWdkR2hwY3k1dmRYUWdQU0JPVHlCaGN5QlRkSEpsWVcwOFZENDdYRzRnSUNBZ2RHaHBjeTVtSUQwZ2NHRnpjMlZ6TzF4dUlDQjlYRzVjYmlBZ1gzTjBZWEowS0c5MWREb2dVM1J5WldGdFBGUStLVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTV2ZFhRZ1BTQnZkWFE3WEc0Z0lDQWdkR2hwY3k1cGJuTXVYMkZrWkNoMGFHbHpLVHRjYmlBZ2ZWeHVYRzRnSUY5emRHOXdLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11YVc1ekxsOXlaVzF2ZG1Vb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1dmRYUWdQU0JPVHlCaGN5QlRkSEpsWVcwOFZENDdYRzRnSUgxY2JseHVJQ0JmYmloME9pQlVLU0I3WEc0Z0lDQWdZMjl1YzNRZ2RTQTlJSFJvYVhNdWIzVjBPMXh1SUNBZ0lHbG1JQ2gxSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lHTnZibk4wSUhJZ1BTQmZkSEo1S0hSb2FYTXNJSFFzSUhVcE8xeHVJQ0FnSUdsbUlDaHlJRDA5UFNCT1R5QjhmQ0FoY2lrZ2NtVjBkWEp1TzF4dUlDQWdJSFV1WDI0b2RDazdYRzRnSUgxY2JseHVJQ0JmWlNobGNuSTZJR0Z1ZVNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFVnUFNCMGFHbHpMbTkxZER0Y2JpQWdJQ0JwWmlBb2RTQTlQVDBnVGs4cElISmxkSFZ5Ymp0Y2JpQWdJQ0IxTGw5bEtHVnljaWs3WEc0Z0lIMWNibHh1SUNCZll5Z3BJSHRjYmlBZ0lDQmpiMjV6ZENCMUlEMGdkR2hwY3k1dmRYUTdYRzRnSUNBZ2FXWWdLSFVnUFQwOUlFNVBLU0J5WlhSMWNtNDdYRzRnSUNBZ2RTNWZZeWdwTzF4dUlDQjlYRzU5WEc1Y2JtTnNZWE56SUVac1lYUjBaVzVNYVhOMFpXNWxjanhVUGlCcGJYQnNaVzFsYm5SeklFbHVkR1Z5Ym1Gc1RHbHpkR1Z1WlhJOFZENGdlMXh1SUNCd2NtbDJZWFJsSUc5MWREb2dVM1J5WldGdFBGUStPMXh1SUNCd2NtbDJZWFJsSUc5d09pQkdiR0YwZEdWdVBGUStPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLRzkxZERvZ1UzUnlaV0Z0UEZRK0xDQnZjRG9nUm14aGRIUmxianhVUGlrZ2UxeHVJQ0FnSUhSb2FYTXViM1YwSUQwZ2IzVjBPMXh1SUNBZ0lIUm9hWE11YjNBZ1BTQnZjRHRjYmlBZ2ZWeHVYRzRnSUY5dUtIUTZJRlFwSUh0Y2JpQWdJQ0IwYUdsekxtOTFkQzVmYmloMEtUdGNiaUFnZlZ4dVhHNGdJRjlsS0dWeWNqb2dZVzU1S1NCN1hHNGdJQ0FnZEdocGN5NXZkWFF1WDJVb1pYSnlLVHRjYmlBZ2ZWeHVYRzRnSUY5aktDa2dlMXh1SUNBZ0lIUm9hWE11YjNBdWFXNXVaWElnUFNCT1R5QmhjeUJUZEhKbFlXMDhWRDQ3WEc0Z0lDQWdkR2hwY3k1dmNDNXNaWE56S0NrN1hHNGdJSDFjYm4xY2JseHVZMnhoYzNNZ1JteGhkSFJsYmp4VVBpQnBiWEJzWlcxbGJuUnpJRTl3WlhKaGRHOXlQRk4wY21WaGJUeFVQaXdnVkQ0Z2UxeHVJQ0J3ZFdKc2FXTWdkSGx3WlNBOUlDZG1iR0YwZEdWdUp6dGNiaUFnY0hWaWJHbGpJR2x1Y3pvZ1UzUnlaV0Z0UEZOMGNtVmhiVHhVUGo0N1hHNGdJSEIxWW14cFl5QnZkWFE2SUZOMGNtVmhiVHhVUGp0Y2JpQWdjSEpwZG1GMFpTQnZjR1Z1T2lCaWIyOXNaV0Z1TzF4dUlDQndkV0pzYVdNZ2FXNXVaWEk2SUZOMGNtVmhiVHhVUGpzZ0x5OGdRM1Z5Y21WdWRDQnBibTVsY2lCVGRISmxZVzFjYmlBZ2NISnBkbUYwWlNCcGJEb2dTVzUwWlhKdVlXeE1hWE4wWlc1bGNqeFVQanNnTHk4Z1EzVnljbVZ1ZENCcGJtNWxjaUJKYm5SbGNtNWhiRXhwYzNSbGJtVnlYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9hVzV6T2lCVGRISmxZVzA4VTNSeVpXRnRQRlErUGlrZ2UxeHVJQ0FnSUhSb2FYTXVhVzV6SUQwZ2FXNXpPMXh1SUNBZ0lIUm9hWE11YjNWMElEMGdUazhnWVhNZ1UzUnlaV0Z0UEZRK08xeHVJQ0FnSUhSb2FYTXViM0JsYmlBOUlIUnlkV1U3WEc0Z0lDQWdkR2hwY3k1cGJtNWxjaUE5SUU1UElHRnpJRk4wY21WaGJUeFVQanRjYmlBZ0lDQjBhR2x6TG1sc0lEMGdUazlmU1V3N1hHNGdJSDFjYmx4dUlDQmZjM1JoY25Rb2IzVjBPaUJUZEhKbFlXMDhWRDRwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG05MWRDQTlJRzkxZER0Y2JpQWdJQ0IwYUdsekxtOXdaVzRnUFNCMGNuVmxPMXh1SUNBZ0lIUm9hWE11YVc1dVpYSWdQU0JPVHlCaGN5QlRkSEpsWVcwOFZENDdYRzRnSUNBZ2RHaHBjeTVwYkNBOUlFNVBYMGxNTzF4dUlDQWdJSFJvYVhNdWFXNXpMbDloWkdRb2RHaHBjeWs3WEc0Z0lIMWNibHh1SUNCZmMzUnZjQ2dwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG1sdWN5NWZjbVZ0YjNabEtIUm9hWE1wTzF4dUlDQWdJR2xtSUNoMGFHbHpMbWx1Ym1WeUlDRTlQU0JPVHlrZ2RHaHBjeTVwYm01bGNpNWZjbVZ0YjNabEtIUm9hWE11YVd3cE8xeHVJQ0FnSUhSb2FYTXViM1YwSUQwZ1RrOGdZWE1nVTNSeVpXRnRQRlErTzF4dUlDQWdJSFJvYVhNdWIzQmxiaUE5SUhSeWRXVTdYRzRnSUNBZ2RHaHBjeTVwYm01bGNpQTlJRTVQSUdGeklGTjBjbVZoYlR4VVBqdGNiaUFnSUNCMGFHbHpMbWxzSUQwZ1RrOWZTVXc3WEc0Z0lIMWNibHh1SUNCc1pYTnpLQ2s2SUhadmFXUWdlMXh1SUNBZ0lHTnZibk4wSUhVZ1BTQjBhR2x6TG05MWREdGNiaUFnSUNCcFppQW9kU0E5UFQwZ1RrOHBJSEpsZEhWeWJqdGNiaUFnSUNCcFppQW9JWFJvYVhNdWIzQmxiaUFtSmlCMGFHbHpMbWx1Ym1WeUlEMDlQU0JPVHlrZ2RTNWZZeWdwTzF4dUlDQjlYRzVjYmlBZ1gyNG9jem9nVTNSeVpXRnRQRlErS1NCN1hHNGdJQ0FnWTI5dWMzUWdkU0E5SUhSb2FYTXViM1YwTzF4dUlDQWdJR2xtSUNoMUlEMDlQU0JPVHlrZ2NtVjBkWEp1TzF4dUlDQWdJR052Ym5OMElIdHBibTVsY2l3Z2FXeDlJRDBnZEdocGN6dGNiaUFnSUNCcFppQW9hVzV1WlhJZ0lUMDlJRTVQSUNZbUlHbHNJQ0U5UFNCT1QxOUpUQ2tnYVc1dVpYSXVYM0psYlc5MlpTaHBiQ2s3WEc0Z0lDQWdLSFJvYVhNdWFXNXVaWElnUFNCektTNWZZV1JrS0hSb2FYTXVhV3dnUFNCdVpYY2dSbXhoZEhSbGJreHBjM1JsYm1WeUtIVXNJSFJvYVhNcEtUdGNiaUFnZlZ4dVhHNGdJRjlsS0dWeWNqb2dZVzU1S1NCN1hHNGdJQ0FnWTI5dWMzUWdkU0E5SUhSb2FYTXViM1YwTzF4dUlDQWdJR2xtSUNoMUlEMDlQU0JPVHlrZ2NtVjBkWEp1TzF4dUlDQWdJSFV1WDJVb1pYSnlLVHRjYmlBZ2ZWeHVYRzRnSUY5aktDa2dlMXh1SUNBZ0lIUm9hWE11YjNCbGJpQTlJR1poYkhObE8xeHVJQ0FnSUhSb2FYTXViR1Z6Y3lncE8xeHVJQ0I5WEc1OVhHNWNibU5zWVhOeklFWnZiR1E4VkN3Z1VqNGdhVzF3YkdWdFpXNTBjeUJQY0dWeVlYUnZjanhVTENCU1BpQjdYRzRnSUhCMVlteHBZeUIwZVhCbElEMGdKMlp2YkdRbk8xeHVJQ0J3ZFdKc2FXTWdhVzV6T2lCVGRISmxZVzA4VkQ0N1hHNGdJSEIxWW14cFl5QnZkWFE2SUZOMGNtVmhiVHhTUGp0Y2JpQWdjSFZpYkdsaklHWTZJQ2gwT2lCVUtTQTlQaUJTTzF4dUlDQndkV0pzYVdNZ2MyVmxaRG9nVWp0Y2JpQWdjSEpwZG1GMFpTQmhZMk02SUZJN0lDOHZJR2x1YVhScFlXeHBlbVZrSUdGeklITmxaV1JjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWhtT2lBb1lXTmpPaUJTTENCME9pQlVLU0E5UGlCU0xDQnpaV1ZrT2lCU0xDQnBibk02SUZOMGNtVmhiVHhVUGlrZ2UxeHVJQ0FnSUhSb2FYTXVhVzV6SUQwZ2FXNXpPMXh1SUNBZ0lIUm9hWE11YjNWMElEMGdUazhnWVhNZ1UzUnlaV0Z0UEZJK08xeHVJQ0FnSUhSb2FYTXVaaUE5SUNoME9pQlVLU0E5UGlCbUtIUm9hWE11WVdOakxDQjBLVHRjYmlBZ0lDQjBhR2x6TG1Gall5QTlJSFJvYVhNdWMyVmxaQ0E5SUhObFpXUTdYRzRnSUgxY2JseHVJQ0JmYzNSaGNuUW9iM1YwT2lCVGRISmxZVzA4VWo0cE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxtOTFkQ0E5SUc5MWREdGNiaUFnSUNCMGFHbHpMbUZqWXlBOUlIUm9hWE11YzJWbFpEdGNiaUFnSUNCdmRYUXVYMjRvZEdocGN5NWhZMk1wTzF4dUlDQWdJSFJvYVhNdWFXNXpMbDloWkdRb2RHaHBjeWs3WEc0Z0lIMWNibHh1SUNCZmMzUnZjQ2dwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG1sdWN5NWZjbVZ0YjNabEtIUm9hWE1wTzF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnVGs4Z1lYTWdVM1J5WldGdFBGSStPMXh1SUNBZ0lIUm9hWE11WVdOaklEMGdkR2hwY3k1elpXVmtPMXh1SUNCOVhHNWNiaUFnWDI0b2REb2dWQ2tnZTF4dUlDQWdJR052Ym5OMElIVWdQU0IwYUdsekxtOTFkRHRjYmlBZ0lDQnBaaUFvZFNBOVBUMGdUazhwSUhKbGRIVnlianRjYmlBZ0lDQmpiMjV6ZENCeUlEMGdYM1J5ZVNoMGFHbHpMQ0IwTENCMUtUdGNiaUFnSUNCcFppQW9jaUE5UFQwZ1RrOHBJSEpsZEhWeWJqdGNiaUFnSUNCMUxsOXVLSFJvYVhNdVlXTmpJRDBnY2lCaGN5QlNLVHRjYmlBZ2ZWeHVYRzRnSUY5bEtHVnljam9nWVc1NUtTQjdYRzRnSUNBZ1kyOXVjM1FnZFNBOUlIUm9hWE11YjNWME8xeHVJQ0FnSUdsbUlDaDFJRDA5UFNCT1R5a2djbVYwZFhKdU8xeHVJQ0FnSUhVdVgyVW9aWEp5S1R0Y2JpQWdmVnh1WEc0Z0lGOWpLQ2tnZTF4dUlDQWdJR052Ym5OMElIVWdQU0IwYUdsekxtOTFkRHRjYmlBZ0lDQnBaaUFvZFNBOVBUMGdUazhwSUhKbGRIVnlianRjYmlBZ0lDQjFMbDlqS0NrN1hHNGdJSDFjYm4xY2JseHVZMnhoYzNNZ1RHRnpkRHhVUGlCcGJYQnNaVzFsYm5SeklFOXdaWEpoZEc5eVBGUXNJRlErSUh0Y2JpQWdjSFZpYkdsaklIUjVjR1VnUFNBbmJHRnpkQ2M3WEc0Z0lIQjFZbXhwWXlCcGJuTTZJRk4wY21WaGJUeFVQanRjYmlBZ2NIVmliR2xqSUc5MWREb2dVM1J5WldGdFBGUStPMXh1SUNCd2NtbDJZWFJsSUdoaGN6b2dZbTl2YkdWaGJqdGNiaUFnY0hKcGRtRjBaU0IyWVd3NklGUTdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9hVzV6T2lCVGRISmxZVzA4VkQ0cElIdGNiaUFnSUNCMGFHbHpMbWx1Y3lBOUlHbHVjenRjYmlBZ0lDQjBhR2x6TG05MWRDQTlJRTVQSUdGeklGTjBjbVZoYlR4VVBqdGNiaUFnSUNCMGFHbHpMbWhoY3lBOUlHWmhiSE5sTzF4dUlDQWdJSFJvYVhNdWRtRnNJRDBnVGs4Z1lYTWdWRHRjYmlBZ2ZWeHVYRzRnSUY5emRHRnlkQ2h2ZFhRNklGTjBjbVZoYlR4VVBpazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXViM1YwSUQwZ2IzVjBPMXh1SUNBZ0lIUm9hWE11YUdGeklEMGdabUZzYzJVN1hHNGdJQ0FnZEdocGN5NXBibk11WDJGa1pDaDBhR2x6S1R0Y2JpQWdmVnh1WEc0Z0lGOXpkRzl3S0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWFXNXpMbDl5WlcxdmRtVW9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NXZkWFFnUFNCT1R5QmhjeUJUZEhKbFlXMDhWRDQ3WEc0Z0lDQWdkR2hwY3k1MllXd2dQU0JPVHlCaGN5QlVPMXh1SUNCOVhHNWNiaUFnWDI0b2REb2dWQ2tnZTF4dUlDQWdJSFJvYVhNdWFHRnpJRDBnZEhKMVpUdGNiaUFnSUNCMGFHbHpMblpoYkNBOUlIUTdYRzRnSUgxY2JseHVJQ0JmWlNobGNuSTZJR0Z1ZVNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFVnUFNCMGFHbHpMbTkxZER0Y2JpQWdJQ0JwWmlBb2RTQTlQVDBnVGs4cElISmxkSFZ5Ymp0Y2JpQWdJQ0IxTGw5bEtHVnljaWs3WEc0Z0lIMWNibHh1SUNCZll5Z3BJSHRjYmlBZ0lDQmpiMjV6ZENCMUlEMGdkR2hwY3k1dmRYUTdYRzRnSUNBZ2FXWWdLSFVnUFQwOUlFNVBLU0J5WlhSMWNtNDdYRzRnSUNBZ2FXWWdLSFJvYVhNdWFHRnpLU0I3WEc0Z0lDQWdJQ0IxTGw5dUtIUm9hWE11ZG1Gc0tUdGNiaUFnSUNBZ0lIVXVYMk1vS1R0Y2JpQWdJQ0I5SUdWc2MyVWdkUzVmWlNodVpYY2dSWEp5YjNJb0oyeGhjM1FvS1NCbVlXbHNaV1FnWW1WallYVnpaU0JwYm5CMWRDQnpkSEpsWVcwZ1kyOXRjR3hsZEdWa0p5a3BPMXh1SUNCOVhHNTlYRzVjYm1Oc1lYTnpJRTFoY0U5d1BGUXNJRkkrSUdsdGNHeGxiV1Z1ZEhNZ1QzQmxjbUYwYjNJOFZDd2dVajRnZTF4dUlDQndkV0pzYVdNZ2RIbHdaU0E5SUNkdFlYQW5PMXh1SUNCd2RXSnNhV01nYVc1ek9pQlRkSEpsWVcwOFZENDdYRzRnSUhCMVlteHBZeUJ2ZFhRNklGTjBjbVZoYlR4U1BqdGNiaUFnY0hWaWJHbGpJR1k2SUNoME9pQlVLU0E5UGlCU08xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtIQnliMnBsWTNRNklDaDBPaUJVS1NBOVBpQlNMQ0JwYm5NNklGTjBjbVZoYlR4VVBpa2dlMXh1SUNBZ0lIUm9hWE11YVc1eklEMGdhVzV6TzF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnVGs4Z1lYTWdVM1J5WldGdFBGSStPMXh1SUNBZ0lIUm9hWE11WmlBOUlIQnliMnBsWTNRN1hHNGdJSDFjYmx4dUlDQmZjM1JoY25Rb2IzVjBPaUJUZEhKbFlXMDhVajRwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG05MWRDQTlJRzkxZER0Y2JpQWdJQ0IwYUdsekxtbHVjeTVmWVdSa0tIUm9hWE1wTzF4dUlDQjlYRzVjYmlBZ1gzTjBiM0FvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1cGJuTXVYM0psYlc5MlpTaDBhR2x6S1R0Y2JpQWdJQ0IwYUdsekxtOTFkQ0E5SUU1UElHRnpJRk4wY21WaGJUeFNQanRjYmlBZ2ZWeHVYRzRnSUY5dUtIUTZJRlFwSUh0Y2JpQWdJQ0JqYjI1emRDQjFJRDBnZEdocGN5NXZkWFE3WEc0Z0lDQWdhV1lnS0hVZ1BUMDlJRTVQS1NCeVpYUjFjbTQ3WEc0Z0lDQWdZMjl1YzNRZ2NpQTlJRjkwY25rb2RHaHBjeXdnZEN3Z2RTazdYRzRnSUNBZ2FXWWdLSElnUFQwOUlFNVBLU0J5WlhSMWNtNDdYRzRnSUNBZ2RTNWZiaWh5SUdGeklGSXBPMXh1SUNCOVhHNWNiaUFnWDJVb1pYSnlPaUJoYm5rcElIdGNiaUFnSUNCamIyNXpkQ0IxSUQwZ2RHaHBjeTV2ZFhRN1hHNGdJQ0FnYVdZZ0tIVWdQVDA5SUU1UEtTQnlaWFIxY200N1hHNGdJQ0FnZFM1ZlpTaGxjbklwTzF4dUlDQjlYRzVjYmlBZ1gyTW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2RTQTlJSFJvYVhNdWIzVjBPMXh1SUNBZ0lHbG1JQ2gxSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lIVXVYMk1vS1R0Y2JpQWdmVnh1ZlZ4dVhHNWpiR0Z6Y3lCU1pXMWxiV0psY2p4VVBpQnBiWEJzWlcxbGJuUnpJRWx1ZEdWeWJtRnNVSEp2WkhWalpYSThWRDRnZTF4dUlDQndkV0pzYVdNZ2RIbHdaU0E5SUNkeVpXMWxiV0psY2ljN1hHNGdJSEIxWW14cFl5QnBibk02SUZOMGNtVmhiVHhVUGp0Y2JpQWdjSFZpYkdsaklHOTFkRG9nVTNSeVpXRnRQRlErTzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dsdWN6b2dVM1J5WldGdFBGUStLU0I3WEc0Z0lDQWdkR2hwY3k1cGJuTWdQU0JwYm5NN1hHNGdJQ0FnZEdocGN5NXZkWFFnUFNCT1R5QmhjeUJUZEhKbFlXMDhWRDQ3WEc0Z0lIMWNibHh1SUNCZmMzUmhjblFvYjNWME9pQlRkSEpsWVcwOFZENHBPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbTkxZENBOUlHOTFkRHRjYmlBZ0lDQjBhR2x6TG1sdWN5NWZZV1JrS0c5MWRDazdYRzRnSUgxY2JseHVJQ0JmYzNSdmNDZ3BPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbWx1Y3k1ZmNtVnRiM1psS0hSb2FYTXViM1YwS1R0Y2JpQWdJQ0IwYUdsekxtOTFkQ0E5SUU1UElHRnpJRk4wY21WaGJUeFVQanRjYmlBZ2ZWeHVmVnh1WEc1amJHRnpjeUJTWlhCc1lXTmxSWEp5YjNJOFZENGdhVzF3YkdWdFpXNTBjeUJQY0dWeVlYUnZjanhVTENCVVBpQjdYRzRnSUhCMVlteHBZeUIwZVhCbElEMGdKM0psY0d4aFkyVkZjbkp2Y2ljN1hHNGdJSEIxWW14cFl5QnBibk02SUZOMGNtVmhiVHhVUGp0Y2JpQWdjSFZpYkdsaklHOTFkRG9nVTNSeVpXRnRQRlErTzF4dUlDQndkV0pzYVdNZ1pqb2dLR1Z5Y2pvZ1lXNTVLU0E5UGlCVGRISmxZVzA4VkQ0N1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2NtVndiR0ZqWlhJNklDaGxjbkk2SUdGdWVTa2dQVDRnVTNSeVpXRnRQRlErTENCcGJuTTZJRk4wY21WaGJUeFVQaWtnZTF4dUlDQWdJSFJvYVhNdWFXNXpJRDBnYVc1ek8xeHVJQ0FnSUhSb2FYTXViM1YwSUQwZ1RrOGdZWE1nVTNSeVpXRnRQRlErTzF4dUlDQWdJSFJvYVhNdVppQTlJSEpsY0d4aFkyVnlPMXh1SUNCOVhHNWNiaUFnWDNOMFlYSjBLRzkxZERvZ1UzUnlaV0Z0UEZRK0tUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NXZkWFFnUFNCdmRYUTdYRzRnSUNBZ2RHaHBjeTVwYm5NdVgyRmtaQ2gwYUdsektUdGNiaUFnZlZ4dVhHNGdJRjl6ZEc5d0tDazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVhVzV6TGw5eVpXMXZkbVVvZEdocGN5azdYRzRnSUNBZ2RHaHBjeTV2ZFhRZ1BTQk9UeUJoY3lCVGRISmxZVzA4VkQ0N1hHNGdJSDFjYmx4dUlDQmZiaWgwT2lCVUtTQjdYRzRnSUNBZ1kyOXVjM1FnZFNBOUlIUm9hWE11YjNWME8xeHVJQ0FnSUdsbUlDaDFJRDA5UFNCT1R5a2djbVYwZFhKdU8xeHVJQ0FnSUhVdVgyNG9kQ2s3WEc0Z0lIMWNibHh1SUNCZlpTaGxjbkk2SUdGdWVTa2dlMXh1SUNBZ0lHTnZibk4wSUhVZ1BTQjBhR2x6TG05MWREdGNiaUFnSUNCcFppQW9kU0E5UFQwZ1RrOHBJSEpsZEhWeWJqdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdkR2hwY3k1cGJuTXVYM0psYlc5MlpTaDBhR2x6S1R0Y2JpQWdJQ0FnSUNoMGFHbHpMbWx1Y3lBOUlIUm9hWE11WmlobGNuSXBLUzVmWVdSa0tIUm9hWE1wTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUhVdVgyVW9aU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDJNb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZFNBOUlIUm9hWE11YjNWME8xeHVJQ0FnSUdsbUlDaDFJRDA5UFNCT1R5a2djbVYwZFhKdU8xeHVJQ0FnSUhVdVgyTW9LVHRjYmlBZ2ZWeHVmVnh1WEc1amJHRnpjeUJUZEdGeWRGZHBkR2c4VkQ0Z2FXMXdiR1Z0Wlc1MGN5QkpiblJsY201aGJGQnliMlIxWTJWeVBGUStJSHRjYmlBZ2NIVmliR2xqSUhSNWNHVWdQU0FuYzNSaGNuUlhhWFJvSnp0Y2JpQWdjSFZpYkdsaklHbHVjem9nVTNSeVpXRnRQRlErTzF4dUlDQndkV0pzYVdNZ2IzVjBPaUJUZEhKbFlXMDhWRDQ3WEc0Z0lIQjFZbXhwWXlCMllXdzZJRlE3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYVc1ek9pQlRkSEpsWVcwOFZENHNJSFpoYkRvZ1ZDa2dlMXh1SUNBZ0lIUm9hWE11YVc1eklEMGdhVzV6TzF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnVGs4Z1lYTWdVM1J5WldGdFBGUStPMXh1SUNBZ0lIUm9hWE11ZG1Gc0lEMGdkbUZzTzF4dUlDQjlYRzVjYmlBZ1gzTjBZWEowS0c5MWREb2dVM1J5WldGdFBGUStLVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTV2ZFhRZ1BTQnZkWFE3WEc0Z0lDQWdkR2hwY3k1dmRYUXVYMjRvZEdocGN5NTJZV3dwTzF4dUlDQWdJSFJvYVhNdWFXNXpMbDloWkdRb2IzVjBLVHRjYmlBZ2ZWeHVYRzRnSUY5emRHOXdLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11YVc1ekxsOXlaVzF2ZG1Vb2RHaHBjeTV2ZFhRcE8xeHVJQ0FnSUhSb2FYTXViM1YwSUQwZ1RrOGdZWE1nVTNSeVpXRnRQRlErTzF4dUlDQjlYRzU5WEc1Y2JtTnNZWE56SUZSaGEyVThWRDRnYVcxd2JHVnRaVzUwY3lCUGNHVnlZWFJ2Y2p4VUxDQlVQaUI3WEc0Z0lIQjFZbXhwWXlCMGVYQmxJRDBnSjNSaGEyVW5PMXh1SUNCd2RXSnNhV01nYVc1ek9pQlRkSEpsWVcwOFZENDdYRzRnSUhCMVlteHBZeUJ2ZFhRNklGTjBjbVZoYlR4VVBqdGNiaUFnY0hWaWJHbGpJRzFoZURvZ2JuVnRZbVZ5TzF4dUlDQndjbWwyWVhSbElIUmhhMlZ1T2lCdWRXMWlaWEk3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYldGNE9pQnVkVzFpWlhJc0lHbHVjem9nVTNSeVpXRnRQRlErS1NCN1hHNGdJQ0FnZEdocGN5NXBibk1nUFNCcGJuTTdYRzRnSUNBZ2RHaHBjeTV2ZFhRZ1BTQk9UeUJoY3lCVGRISmxZVzA4VkQ0N1hHNGdJQ0FnZEdocGN5NXRZWGdnUFNCdFlYZzdYRzRnSUNBZ2RHaHBjeTUwWVd0bGJpQTlJREE3WEc0Z0lIMWNibHh1SUNCZmMzUmhjblFvYjNWME9pQlRkSEpsWVcwOFZENHBPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbTkxZENBOUlHOTFkRHRjYmlBZ0lDQjBhR2x6TG5SaGEyVnVJRDBnTUR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV0WVhnZ1BEMGdNQ2tnYjNWMExsOWpLQ2s3SUdWc2MyVWdkR2hwY3k1cGJuTXVYMkZrWkNoMGFHbHpLVHRjYmlBZ2ZWeHVYRzRnSUY5emRHOXdLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11YVc1ekxsOXlaVzF2ZG1Vb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1dmRYUWdQU0JPVHlCaGN5QlRkSEpsWVcwOFZENDdYRzRnSUgxY2JseHVJQ0JmYmloME9pQlVLU0I3WEc0Z0lDQWdZMjl1YzNRZ2RTQTlJSFJvYVhNdWIzVjBPMXh1SUNBZ0lHbG1JQ2gxSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lHTnZibk4wSUcwZ1BTQXJLM1JvYVhNdWRHRnJaVzQ3WEc0Z0lDQWdhV1lnS0cwZ1BDQjBhR2x6TG0xaGVDa2dkUzVmYmloMEtUc2daV3h6WlNCcFppQW9iU0E5UFQwZ2RHaHBjeTV0WVhncElIdGNiaUFnSUNBZ0lIVXVYMjRvZENrN1hHNGdJQ0FnSUNCMUxsOWpLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDJVb1pYSnlPaUJoYm5rcElIdGNiaUFnSUNCamIyNXpkQ0IxSUQwZ2RHaHBjeTV2ZFhRN1hHNGdJQ0FnYVdZZ0tIVWdQVDA5SUU1UEtTQnlaWFIxY200N1hHNGdJQ0FnZFM1ZlpTaGxjbklwTzF4dUlDQjlYRzVjYmlBZ1gyTW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2RTQTlJSFJvYVhNdWIzVjBPMXh1SUNBZ0lHbG1JQ2gxSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lIVXVYMk1vS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVTNSeVpXRnRQRlErSUdsdGNHeGxiV1Z1ZEhNZ1NXNTBaWEp1WVd4TWFYTjBaVzVsY2p4VVBpQjdYRzRnSUhCMVlteHBZeUJmY0hKdlpEb2dTVzUwWlhKdVlXeFFjbTlrZFdObGNqeFVQanRjYmlBZ2NISnZkR1ZqZEdWa0lGOXBiSE02SUVGeWNtRjVQRWx1ZEdWeWJtRnNUR2x6ZEdWdVpYSThWRDQrT3lBdkx5QW5hV3h6SnlBOUlFbHVkR1Z5Ym1Gc0lHeHBjM1JsYm1WeWMxeHVJQ0J3Y205MFpXTjBaV1FnWDNOMGIzQkpSRG9nWVc1NU8xeHVJQ0J3Y205MFpXTjBaV1FnWDJSc09pQkpiblJsY201aGJFeHBjM1JsYm1WeVBGUStPeUF2THlCMGFHVWdaR1ZpZFdjZ2JHbHpkR1Z1WlhKY2JpQWdjSEp2ZEdWamRHVmtJRjlrT2lCaWIyOXNaV0Z1T3lBdkx5Qm1iR0ZuSUdsdVpHbGpZWFJwYm1jZ2RHaGxJR1Y0YVhOMFpXNWpaU0J2WmlCMGFHVWdaR1ZpZFdjZ2JHbHpkR1Z1WlhKY2JpQWdjSEp2ZEdWamRHVmtJRjkwWVhKblpYUTZJRk4wY21WaGJUeFVQanNnTHk4Z2FXMXBkR0YwYVc5dUlIUmhjbWRsZENCcFppQjBhR2x6SUZOMGNtVmhiU0IzYVd4c0lHbHRhWFJoZEdWY2JpQWdjSEp2ZEdWamRHVmtJRjlsY25JNklHRnVlVHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3Y205a2RXTmxjajg2SUVsdWRHVnlibUZzVUhKdlpIVmpaWEk4VkQ0cElIdGNiaUFnSUNCMGFHbHpMbDl3Y205a0lEMGdjSEp2WkhWalpYSWdmSHdnVGs4Z1lYTWdTVzUwWlhKdVlXeFFjbTlrZFdObGNqeFVQanRjYmlBZ0lDQjBhR2x6TGw5cGJITWdQU0JiWFR0Y2JpQWdJQ0IwYUdsekxsOXpkRzl3U1VRZ1BTQk9UenRjYmlBZ0lDQjBhR2x6TGw5a2JDQTlJRTVQSUdGeklFbHVkR1Z5Ym1Gc1RHbHpkR1Z1WlhJOFZENDdYRzRnSUNBZ2RHaHBjeTVmWkNBOUlHWmhiSE5sTzF4dUlDQWdJSFJvYVhNdVgzUmhjbWRsZENBOUlFNVBJR0Z6SUZOMGNtVmhiVHhVUGp0Y2JpQWdJQ0IwYUdsekxsOWxjbklnUFNCT1R6dGNiaUFnZlZ4dVhHNGdJRjl1S0hRNklGUXBPaUIyYjJsa0lIdGNiaUFnSUNCamIyNXpkQ0JoSUQwZ2RHaHBjeTVmYVd4ek8xeHVJQ0FnSUdOdmJuTjBJRXdnUFNCaExteGxibWQwYUR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmWkNrZ2RHaHBjeTVmWkd3dVgyNG9kQ2s3WEc0Z0lDQWdhV1lnS0V3Z1BUMGdNU2tnWVZzd1hTNWZiaWgwS1RzZ1pXeHpaU0JwWmlBb1RDQTlQU0F3S1NCeVpYUjFjbTQ3SUdWc2MyVWdlMXh1SUNBZ0lDQWdZMjl1YzNRZ1lpQTlJR053S0dFcE8xeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQk1PeUJwS3lzcElHSmJhVjB1WDI0b2RDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdYMlVvWlhKeU9pQmhibmtwT2lCMmIybGtJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NWZaWEp5SUNFOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lIUm9hWE11WDJWeWNpQTlJR1Z5Y2p0Y2JpQWdJQ0JqYjI1emRDQmhJRDBnZEdocGN5NWZhV3h6TzF4dUlDQWdJR052Ym5OMElFd2dQU0JoTG14bGJtZDBhRHRjYmlBZ0lDQjBhR2x6TGw5NEtDazdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyUXBJSFJvYVhNdVgyUnNMbDlsS0dWeWNpazdYRzRnSUNBZ2FXWWdLRXdnUFQwZ01Ta2dZVnN3WFM1ZlpTaGxjbklwT3lCbGJITmxJR2xtSUNoTUlEMDlJREFwSUhKbGRIVnlianNnWld4elpTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCaUlEMGdZM0FvWVNrN1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElFdzdJR2tyS3lrZ1lsdHBYUzVmWlNobGNuSXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JWFJvYVhNdVgyUWdKaVlnVENBOVBTQXdLU0IwYUhKdmR5QjBhR2x6TGw5bGNuSTdYRzRnSUgxY2JseHVJQ0JmWXlncE9pQjJiMmxrSUh0Y2JpQWdJQ0JqYjI1emRDQmhJRDBnZEdocGN5NWZhV3h6TzF4dUlDQWdJR052Ym5OMElFd2dQU0JoTG14bGJtZDBhRHRjYmlBZ0lDQjBhR2x6TGw5NEtDazdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyUXBJSFJvYVhNdVgyUnNMbDlqS0NrN1hHNGdJQ0FnYVdZZ0tFd2dQVDBnTVNrZ1lWc3dYUzVmWXlncE95QmxiSE5sSUdsbUlDaE1JRDA5SURBcElISmxkSFZ5YmpzZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmlJRDBnWTNBb1lTazdYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRXc3SUdrckt5a2dZbHRwWFM1Zll5Z3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRjk0S0NrNklIWnZhV1FnZXlBdkx5QjBaV0Z5SUdSdmQyNGdiRzluYVdNc0lHRm1kR1Z5SUdWeWNtOXlJRzl5SUdOdmJYQnNaWFJsWEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmxzY3k1c1pXNW5kR2dnUFQwOUlEQXBJSEpsZEhWeWJqdGNiaUFnSUNCcFppQW9kR2hwY3k1ZmNISnZaQ0FoUFQwZ1RrOHBJSFJvYVhNdVgzQnliMlF1WDNOMGIzQW9LVHRjYmlBZ0lDQjBhR2x6TGw5bGNuSWdQU0JPVHp0Y2JpQWdJQ0IwYUdsekxsOXBiSE1nUFNCYlhUdGNiaUFnZlZ4dVhHNGdJRjl6ZEc5d1RtOTNLQ2tnZTF4dUlDQWdJQzh2SUZkQlVrNUpUa2M2SUdOdlpHVWdkR2hoZENCallXeHNjeUIwYUdseklHMWxkR2h2WkNCemFHOTFiR1JjYmlBZ0lDQXZMeUJtYVhKemRDQmphR1ZqYXlCcFppQjBhR2x6TGw5d2NtOWtJR2x6SUhaaGJHbGtJQ2h1YjNRZ1lFNVBZQ2xjYmlBZ0lDQjBhR2x6TGw5d2NtOWtMbDl6ZEc5d0tDazdYRzRnSUNBZ2RHaHBjeTVmWlhKeUlEMGdUazg3WEc0Z0lDQWdkR2hwY3k1ZmMzUnZjRWxFSUQwZ1RrODdYRzRnSUgxY2JseHVJQ0JmWVdSa0tHbHNPaUJKYm5SbGNtNWhiRXhwYzNSbGJtVnlQRlErS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdZMjl1YzNRZ2RHRWdQU0IwYUdsekxsOTBZWEpuWlhRN1hHNGdJQ0FnYVdZZ0tIUmhJQ0U5UFNCT1R5a2djbVYwZFhKdUlIUmhMbDloWkdRb2FXd3BPMXh1SUNBZ0lHTnZibk4wSUdFZ1BTQjBhR2x6TGw5cGJITTdYRzRnSUNBZ1lTNXdkWE5vS0dsc0tUdGNiaUFnSUNCcFppQW9ZUzVzWlc1bmRHZ2dQaUF4S1NCeVpYUjFjbTQ3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM04wYjNCSlJDQWhQVDBnVGs4cElIdGNiaUFnSUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYUdsekxsOXpkRzl3U1VRcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmYzNSdmNFbEVJRDBnVGs4N1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR052Ym5OMElIQWdQU0IwYUdsekxsOXdjbTlrTzF4dUlDQWdJQ0FnYVdZZ0tIQWdJVDA5SUU1UEtTQndMbDl6ZEdGeWRDaDBhR2x6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCZmNtVnRiM1psS0dsc09pQkpiblJsY201aGJFeHBjM1JsYm1WeVBGUStLVG9nZG05cFpDQjdYRzRnSUNBZ1kyOXVjM1FnZEdFZ1BTQjBhR2x6TGw5MFlYSm5aWFE3WEc0Z0lDQWdhV1lnS0hSaElDRTlQU0JPVHlrZ2NtVjBkWEp1SUhSaExsOXlaVzF2ZG1Vb2FXd3BPMXh1SUNBZ0lHTnZibk4wSUdFZ1BTQjBhR2x6TGw5cGJITTdYRzRnSUNBZ1kyOXVjM1FnYVNBOUlHRXVhVzVrWlhoUFppaHBiQ2s3WEc0Z0lDQWdhV1lnS0drZ1BpQXRNU2tnZTF4dUlDQWdJQ0FnWVM1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZjSEp2WkNBaFBUMGdUazhnSmlZZ1lTNXNaVzVuZEdnZ1BEMGdNQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsY25JZ1BTQk9UenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1J2Y0VsRUlEMGdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQjBhR2x6TGw5emRHOXdUbTkzS0NrcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2NuVnVaVU41WTJ4bGN5Z3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2SUVsbUlHRnNiQ0J3WVhSb2N5QnpkR1Z0YldsdVp5Qm1jbTl0SUdCMGFHbHpZQ0J6ZEhKbFlXMGdaWFpsYm5SMVlXeHNlU0JsYm1RZ1lYUWdZSFJvYVhOZ1hHNGdJQzh2SUhOMGNtVmhiU3dnZEdobGJpQjNaU0J5WlcxdmRtVWdkR2hsSUhOcGJtZHNaU0JzYVhOMFpXNWxjaUJ2WmlCZ2RHaHBjMkFnYzNSeVpXRnRMQ0IwYjF4dUlDQXZMeUJtYjNKalpTQnBkQ0IwYnlCbGJtUWdhWFJ6SUdWNFpXTjFkR2x2YmlCaGJtUWdaR2x6Y0c5elpTQnlaWE52ZFhKalpYTXVJRlJvYVhNZ2JXVjBhRzlrWEc0Z0lDOHZJR0Z6YzNWdFpYTWdZWE1nWVNCd2NtVmpiMjVrYVhScGIyNGdkR2hoZENCMGFHbHpMbDlwYkhNZ2FHRnpJR3AxYzNRZ2IyNWxJR3hwYzNSbGJtVnlMbHh1SUNCZmNISjFibVZEZVdOc1pYTW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmhoYzA1dlUybHVhM01vZEdocGN5d2dXMTBwS1NCMGFHbHpMbDl5WlcxdmRtVW9kR2hwY3k1ZmFXeHpXekJkS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRU5vWldOcmN5QjNhR1YwYUdWeUlDcDBhR1Z5WlNCcGN5QnVieW9nY0dGMGFDQnpkR0Z5ZEdsdVp5Qm1jbTl0SUdCNFlDQjBhR0YwSUd4bFlXUnpJSFJ2SUdGdUlHVnVaRnh1SUNBdkx5QnNhWE4wWlc1bGNpQW9jMmx1YXlrZ2FXNGdkR2hsSUhOMGNtVmhiU0JuY21Gd2FDd2dabTlzYkc5M2FXNW5JR1ZrWjJWeklFRXRQa0lnZDJobGNtVWdRaUJwY3lCaFhHNGdJQzh2SUd4cGMzUmxibVZ5SUc5bUlFRXVJRlJvYVhNZ2JXVmhibk1nZEdobGMyVWdjR0YwYUhNZ1kyOXVjM1JwZEhWMFpTQmhJR041WTJ4bElITnZiV1ZvYjNjdUlFbHpJR2RwZG1WdVhHNGdJQzh2SUdFZ2RISmhZMlVnYjJZZ1lXeHNJSFpwYzJsMFpXUWdibTlrWlhNZ2MyOGdabUZ5TGx4dUlDQmZhR0Z6VG05VGFXNXJjeWg0T2lCSmJuUmxjbTVoYkV4cGMzUmxibVZ5UEdGdWVUNHNJSFJ5WVdObE9pQkJjbkpoZVR4aGJuaytLVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdhV1lnS0hSeVlXTmxMbWx1WkdWNFQyWW9lQ2tnSVQwOUlDMHhLVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3SUdWc2MyVmNiaUFnSUNCcFppQW9LSGdnWVhNZ1lXNTVJR0Z6SUU5MWRGTmxibVJsY2p4aGJuaytLUzV2ZFhRZ1BUMDlJSFJvYVhNcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUc2daV3h6WlZ4dUlDQWdJR2xtSUNnb2VDQmhjeUJoYm5rZ1lYTWdUM1YwVTJWdVpHVnlQR0Z1ZVQ0cExtOTFkQ0FtSmlBb2VDQmhjeUJoYm5rZ1lYTWdUM1YwVTJWdVpHVnlQR0Z1ZVQ0cExtOTFkQ0FoUFQwZ1RrOHBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYUdGelRtOVRhVzVyY3lnb2VDQmhjeUJoYm5rZ1lYTWdUM1YwVTJWdVpHVnlQR0Z1ZVQ0cExtOTFkQ3dnZEhKaFkyVXVZMjl1WTJGMEtIZ3BLVHNnWld4elpWeHVJQ0FnSUdsbUlDZ29lQ0JoY3lCVGRISmxZVzA4WVc1NVBpa3VYMmxzY3lrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUU0Z1BTQW9lQ0JoY3lCVGRISmxZVzA4WVc1NVBpa3VYMmxzY3k1c1pXNW5kR2c3SUdrZ1BDQk9PeUJwS3lzcFhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZhR0Z6VG05VGFXNXJjeWdvZUNCaGN5QlRkSEpsWVcwOFlXNTVQaWt1WDJsc2MxdHBYU3dnZEhKaFkyVXVZMjl1WTJGMEtIZ3BLU2xjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQjlJR1ZzYzJVZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JqZEc5eUtDazZJSFI1Y0dWdlppQlRkSEpsWVcwZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdseklHbHVjM1JoYm1ObGIyWWdUV1Z0YjNKNVUzUnlaV0Z0SUQ4Z1RXVnRiM0o1VTNSeVpXRnRJRG9nVTNSeVpXRnRPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGa1pITWdZU0JNYVhOMFpXNWxjaUIwYnlCMGFHVWdVM1J5WldGdExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMHhwYzNSbGJtVnlmU0JzYVhOMFpXNWxjbHh1SUNBZ0tpOWNiaUFnWVdSa1RHbHpkR1Z1WlhJb2JHbHpkR1Z1WlhJNklGQmhjblJwWVd3OFRHbHpkR1Z1WlhJOFZENCtLVG9nZG05cFpDQjdYRzRnSUNBZ0tHeHBjM1JsYm1WeUlHRnpJRWx1ZEdWeWJtRnNUR2x6ZEdWdVpYSThWRDRwTGw5dUlEMGdiR2x6ZEdWdVpYSXVibVY0ZENCOGZDQnViMjl3TzF4dUlDQWdJQ2hzYVhOMFpXNWxjaUJoY3lCSmJuUmxjbTVoYkV4cGMzUmxibVZ5UEZRK0tTNWZaU0E5SUd4cGMzUmxibVZ5TG1WeWNtOXlJSHg4SUc1dmIzQTdYRzRnSUNBZ0tHeHBjM1JsYm1WeUlHRnpJRWx1ZEdWeWJtRnNUR2x6ZEdWdVpYSThWRDRwTGw5aklEMGdiR2x6ZEdWdVpYSXVZMjl0Y0d4bGRHVWdmSHdnYm05dmNEdGNiaUFnSUNCMGFHbHpMbDloWkdRb2JHbHpkR1Z1WlhJZ1lYTWdTVzUwWlhKdVlXeE1hWE4wWlc1bGNqeFVQaWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVnRiM1psY3lCaElFeHBjM1JsYm1WeUlHWnliMjBnZEdobElGTjBjbVZoYlN3Z1lYTnpkVzFwYm1jZ2RHaGxJRXhwYzNSbGJtVnlJSGRoY3lCaFpHUmxaQ0IwYnlCcGRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRNYVhOMFpXNWxjanhVUG4wZ2JHbHpkR1Z1WlhKY2JpQWdJQ292WEc0Z0lISmxiVzkyWlV4cGMzUmxibVZ5S0d4cGMzUmxibVZ5T2lCUVlYSjBhV0ZzUEV4cGMzUmxibVZ5UEZRK1BpazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVYM0psYlc5MlpTaHNhWE4wWlc1bGNpQmhjeUJKYm5SbGNtNWhiRXhwYzNSbGJtVnlQRlErS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR1J6SUdFZ1RHbHpkR1Z1WlhJZ2RHOGdkR2hsSUZOMGNtVmhiU0J5WlhSMWNtNXBibWNnWVNCVGRXSnpZM0pwY0hScGIyNGdkRzhnY21WdGIzWmxJSFJvWVhSY2JpQWdJQ29nYkdsemRHVnVaWEl1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1RHbHpkR1Z1WlhKOUlHeHBjM1JsYm1WeVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VGRXSnpZM0pwY0hScGIyNTlYRzRnSUNBcUwxeHVJQ0J6ZFdKelkzSnBZbVVvYkdsemRHVnVaWEk2SUZCaGNuUnBZV3c4VEdsemRHVnVaWEk4VkQ0K0tUb2dVM1ZpYzJOeWFYQjBhVzl1SUh0Y2JpQWdJQ0IwYUdsekxtRmtaRXhwYzNSbGJtVnlLR3hwYzNSbGJtVnlLVHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk4wY21WaGJWTjFZanhVUGloMGFHbHpMQ0JzYVhOMFpXNWxjaUJoY3lCSmJuUmxjbTVoYkV4cGMzUmxibVZ5UEZRK0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCWkdRZ2FXNTBaWEp2Y0NCaVpYUjNaV1Z1SUcxdmMzUXVhbk1nWVc1a0lGSjRTbE1nTlZ4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVM1J5WldGdGZWeHVJQ0FnS2k5Y2JpQWdXeVFrYjJKelpYSjJZV0pzWlYwb0tUb2dVM1J5WldGdFBGUStJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJRk4wY21WaGJTQm5hWFpsYmlCaElGQnliMlIxWTJWeUxseHVJQ0FnS2x4dUlDQWdLaUJBWm1GamRHOXllU0IwY25WbFhHNGdJQ0FxSUVCd1lYSmhiU0I3VUhKdlpIVmpaWEo5SUhCeWIyUjFZMlZ5SUVGdUlHOXdkR2x2Ym1Gc0lGQnliMlIxWTJWeUlIUm9ZWFFnWkdsamRHRjBaWE1nYUc5M0lIUnZYRzRnSUNBcUlITjBZWEowTENCblpXNWxjbUYwWlNCbGRtVnVkSE1zSUdGdVpDQnpkRzl3SUhSb1pTQlRkSEpsWVcwdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFOMGNtVmhiWDFjYmlBZ0lDb3ZYRzRnSUhOMFlYUnBZeUJqY21WaGRHVThWRDRvY0hKdlpIVmpaWEkvT2lCUWNtOWtkV05sY2p4VVBpazZJRk4wY21WaGJUeFVQaUI3WEc0Z0lDQWdhV1lnS0hCeWIyUjFZMlZ5S1NCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIQnliMlIxWTJWeUxuTjBZWEowSUNFOVBTQW5ablZ1WTNScGIyNG5YRzRnSUNBZ0lDQjhmQ0IwZVhCbGIyWWdjSEp2WkhWalpYSXVjM1J2Y0NBaFBUMGdKMloxYm1OMGFXOXVKeWxjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R3Y205a2RXTmxjaUJ5WlhGMWFYSmxjeUJpYjNSb0lITjBZWEowSUdGdVpDQnpkRzl3SUdaMWJtTjBhVzl1Y3ljcE8xeHVJQ0FnSUNBZ2FXNTBaWEp1WVd4cGVtVlFjbTlrZFdObGNpaHdjbTlrZFdObGNpazdJQzh2SUcxMWRHRjBaWE1nZEdobElHbHVjSFYwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVM1J5WldGdEtIQnliMlIxWTJWeUlHRnpJRWx1ZEdWeWJtRnNVSEp2WkhWalpYSThWRDRnSmlCUWNtOWtkV05sY2p4VVBpazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUc1bGR5Qk5aVzF2Y25sVGRISmxZVzBnWjJsMlpXNGdZU0JRY205a2RXTmxjaTVjYmlBZ0lDcGNiaUFnSUNvZ1FHWmhZM1J2Y25rZ2RISjFaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UxQnliMlIxWTJWeWZTQndjbTlrZFdObGNpQkJiaUJ2Y0hScGIyNWhiQ0JRY205a2RXTmxjaUIwYUdGMElHUnBZM1JoZEdWeklHaHZkeUIwYjF4dUlDQWdLaUJ6ZEdGeWRDd2daMlZ1WlhKaGRHVWdaWFpsYm5SekxDQmhibVFnYzNSdmNDQjBhR1VnVTNSeVpXRnRMbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdE5aVzF2Y25sVGRISmxZVzE5WEc0Z0lDQXFMMXh1SUNCemRHRjBhV01nWTNKbFlYUmxWMmwwYUUxbGJXOXllVHhVUGlod2NtOWtkV05sY2o4NklGQnliMlIxWTJWeVBGUStLVG9nVFdWdGIzSjVVM1J5WldGdFBGUStJSHRjYmlBZ0lDQnBaaUFvY0hKdlpIVmpaWElwSUdsdWRHVnlibUZzYVhwbFVISnZaSFZqWlhJb2NISnZaSFZqWlhJcE95QXZMeUJ0ZFhSaGRHVnpJSFJvWlNCcGJuQjFkRnh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z0YjNKNVUzUnlaV0Z0UEZRK0tIQnliMlIxWTJWeUlHRnpJRWx1ZEdWeWJtRnNVSEp2WkhWalpYSThWRDRnSmlCUWNtOWtkV05sY2p4VVBpazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUZOMGNtVmhiU0IwYUdGMElHUnZaWE1nYm05MGFHbHVaeUIzYUdWdUlITjBZWEowWldRdUlFbDBJRzVsZG1WeUlHVnRhWFJ6SUdGdWVTQmxkbVZ1ZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dUV0Z5WW14bElHUnBZV2R5WVcwNlhHNGdJQ0FxWEc0Z0lDQXFJR0JnWUhSbGVIUmNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ2JtVjJaWEpjYmlBZ0lDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQWdJQ29nWUdCZ1hHNGdJQ0FxWEc0Z0lDQXFJRUJtWVdOMGIzSjVJSFJ5ZFdWY2JpQWdJQ29nUUhKbGRIVnliaUI3VTNSeVpXRnRmVnh1SUNBZ0tpOWNiaUFnYzNSaGRHbGpJRzVsZG1WeUtDazZJRk4wY21WaGJUeGhibmsrSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiVHhoYm5rK0tIdGZjM1JoY25RNklHNXZiM0FzSUY5emRHOXdPaUJ1YjI5d2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUZOMGNtVmhiU0IwYUdGMElHbHRiV1ZrYVdGMFpXeDVJR1Z0YVhSeklIUm9aU0JjSW1OdmJYQnNaWFJsWENJZ2JtOTBhV1pwWTJGMGFXOXVJSGRvWlc1Y2JpQWdJQ29nYzNSaGNuUmxaQ3dnWVc1a0lIUm9ZWFFuY3lCcGRDNWNiaUFnSUNwY2JpQWdJQ29nVFdGeVlteGxJR1JwWVdkeVlXMDZYRzRnSUNBcVhHNGdJQ0FxSUdCZ1lIUmxlSFJjYmlBZ0lDb2daVzF3ZEhsY2JpQWdJQ29nTFh4Y2JpQWdJQ29nWUdCZ1hHNGdJQ0FxWEc0Z0lDQXFJRUJtWVdOMGIzSjVJSFJ5ZFdWY2JpQWdJQ29nUUhKbGRIVnliaUI3VTNSeVpXRnRmVnh1SUNBZ0tpOWNiaUFnYzNSaGRHbGpJR1Z0Y0hSNUtDazZJRk4wY21WaGJUeGhibmsrSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiVHhoYm5rK0tIdGNiaUFnSUNBZ0lGOXpkR0Z5ZENocGJEb2dTVzUwWlhKdVlXeE1hWE4wWlc1bGNqeGhibmsrS1NCN0lHbHNMbDlqS0NrN0lIMHNYRzRnSUNBZ0lDQmZjM1J2Y0RvZ2JtOXZjQ3hjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ1UzUnlaV0Z0SUhSb1lYUWdhVzF0WldScFlYUmxiSGtnWlcxcGRITWdZVzRnWENKbGNuSnZjbHdpSUc1dmRHbG1hV05oZEdsdmJpQjNhWFJvSUhSb1pWeHVJQ0FnS2lCMllXeDFaU0I1YjNVZ2NHRnpjMlZrSUdGeklIUm9aU0JnWlhKeWIzSmdJR0Z5WjNWdFpXNTBJSGRvWlc0Z2RHaGxJSE4wY21WaGJTQnpkR0Z5ZEhNc0lHRnVaQ0IwYUdGMEozTmNiaUFnSUNvZ2FYUXVYRzRnSUNBcVhHNGdJQ0FxSUUxaGNtSnNaU0JrYVdGbmNtRnRPbHh1SUNBZ0tseHVJQ0FnS2lCZ1lHQjBaWGgwWEc0Z0lDQXFJSFJvY205M0tGZ3BYRzRnSUNBcUlDMVlYRzRnSUNBcUlHQmdZRnh1SUNBZ0tseHVJQ0FnS2lCQVptRmpkRzl5ZVNCMGNuVmxYRzRnSUNBcUlFQndZWEpoYlNCbGNuSnZjaUJVYUdVZ1pYSnliM0lnWlhabGJuUWdkRzhnWlcxcGRDQnZiaUIwYUdVZ1kzSmxZWFJsWkNCemRISmxZVzB1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMU4wY21WaGJYMWNiaUFnSUNvdlhHNGdJSE4wWVhScFl5QjBhSEp2ZHlobGNuSnZjam9nWVc1NUtUb2dVM1J5WldGdFBHRnVlVDRnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRQR0Z1ZVQ0b2UxeHVJQ0FnSUNBZ1gzTjBZWEowS0dsc09pQkpiblJsY201aGJFeHBjM1JsYm1WeVBHRnVlVDRwSUhzZ2FXd3VYMlVvWlhKeWIzSXBPeUI5TEZ4dUlDQWdJQ0FnWDNOMGIzQTZJRzV2YjNBc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJSE4wY21WaGJTQm1jbTl0SUdGdUlFRnljbUY1TENCUWNtOXRhWE5sTENCdmNpQmhiaUJQWW5ObGNuWmhZbXhsTGx4dUlDQWdLbHh1SUNBZ0tpQkFabUZqZEc5eWVTQjBjblZsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOFVISnZiV2x6WlV4cGEyVjhUMkp6WlhKMllXSnNaWDBnYVc1d2RYUWdWR2hsSUdsdWNIVjBJSFJ2SUcxaGEyVWdZU0J6ZEhKbFlXMGdabkp2YlM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3VTNSeVpXRnRmVnh1SUNBZ0tpOWNiaUFnYzNSaGRHbGpJR1p5YjIwOFZENG9hVzV3ZFhRNklGQnliMjFwYzJWTWFXdGxQRlErSUh3Z1UzUnlaV0Z0UEZRK0lId2dRWEp5WVhrOFZENGdmQ0JQWW5ObGNuWmhZbXhsUEZRK0tUb2dVM1J5WldGdFBGUStJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR2x1Y0hWMFd5UWtiMkp6WlhKMllXSnNaVjBnUFQwOUlDZG1kVzVqZEdsdmJpY3BYRzRnSUNBZ0lDQnlaWFIxY200Z1UzUnlaV0Z0TG1aeWIyMVBZbk5sY25aaFlteGxQRlErS0dsdWNIVjBJR0Z6SUU5aWMyVnlkbUZpYkdVOFZENHBPeUJsYkhObFhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlBb2FXNXdkWFFnWVhNZ1VISnZiV2x6WlV4cGEyVThWRDRwTG5Sb1pXNGdQVDA5SUNkbWRXNWpkR2x2YmljcFhHNGdJQ0FnSUNCeVpYUjFjbTRnVTNSeVpXRnRMbVp5YjIxUWNtOXRhWE5sUEZRK0tHbHVjSFYwSUdGeklGQnliMjFwYzJWTWFXdGxQRlErS1RzZ1pXeHpaVnh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHbHVjSFYwS1NsY2JpQWdJQ0FnSUhKbGRIVnliaUJUZEhKbFlXMHVabkp2YlVGeWNtRjVQRlErS0dsdWNIVjBLVHRjYmx4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWUZSNWNHVWdiMllnYVc1d2RYUWdkRzhnWm5KdmJTZ3BJRzExYzNRZ1ltVWdZVzRnUVhKeVlYa3NJRkJ5YjIxcGMyVXNJRzl5SUU5aWMyVnlkbUZpYkdWZ0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnVTNSeVpXRnRJSFJvWVhRZ2FXMXRaV1JwWVhSbGJIa2daVzFwZEhNZ2RHaGxJR0Z5WjNWdFpXNTBjeUIwYUdGMElIbHZkU0JuYVhabElIUnZYRzRnSUNBcUlDcHZaaW9zSUhSb1pXNGdZMjl0Y0d4bGRHVnpMbHh1SUNBZ0tseHVJQ0FnS2lCTllYSmliR1VnWkdsaFozSmhiVHBjYmlBZ0lDcGNiaUFnSUNvZ1lHQmdkR1Y0ZEZ4dUlDQWdLaUJ2WmlneExESXNNeWxjYmlBZ0lDb2dNVEl6ZkZ4dUlDQWdLaUJnWUdCY2JpQWdJQ3BjYmlBZ0lDb2dRR1poWTNSdmNua2dkSEoxWlZ4dUlDQWdLaUJBY0dGeVlXMGdZU0JVYUdVZ1ptbHljM1FnZG1Gc2RXVWdlVzkxSUhkaGJuUWdkRzhnWlcxcGRDQmhjeUJoYmlCbGRtVnVkQ0J2YmlCMGFHVWdjM1J5WldGdExseHVJQ0FnS2lCQWNHRnlZVzBnWWlCVWFHVWdjMlZqYjI1a0lIWmhiSFZsSUhsdmRTQjNZVzUwSUhSdklHVnRhWFFnWVhNZ1lXNGdaWFpsYm5RZ2IyNGdkR2hsSUhOMGNtVmhiUzRnVDI1bFhHNGdJQ0FxSUc5eUlHMXZjbVVnYjJZZ2RHaGxjMlVnZG1Gc2RXVnpJRzFoZVNCaVpTQm5hWFpsYmlCaGN5QmhjbWQxYldWdWRITXVYRzRnSUNBcUlFQnlaWFIxY200Z2UxTjBjbVZoYlgxY2JpQWdJQ292WEc0Z0lITjBZWFJwWXlCdlpqeFVQaWd1TGk1cGRHVnRjem9nUVhKeVlYazhWRDRwT2lCVGRISmxZVzA4VkQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUJUZEhKbFlXMHVabkp2YlVGeWNtRjVQRlErS0dsMFpXMXpLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGIyNTJaWEowY3lCaGJpQmhjbkpoZVNCMGJ5QmhJSE4wY21WaGJTNGdWR2hsSUhKbGRIVnlibVZrSUhOMGNtVmhiU0IzYVd4c0lHVnRhWFFnYzNsdVkyaHliMjV2ZFhOc2VWeHVJQ0FnS2lCaGJHd2dkR2hsSUdsMFpXMXpJR2x1SUhSb1pTQmhjbkpoZVN3Z1lXNWtJSFJvWlc0Z1kyOXRjR3hsZEdVdVhHNGdJQ0FxWEc0Z0lDQXFJRTFoY21Kc1pTQmthV0ZuY21GdE9seHVJQ0FnS2x4dUlDQWdLaUJnWUdCMFpYaDBYRzRnSUNBcUlHWnliMjFCY25KaGVTaGJNU3d5TEROZEtWeHVJQ0FnS2lBeE1qTjhYRzRnSUNBcUlHQmdZRnh1SUNBZ0tseHVJQ0FnS2lCQVptRmpkRzl5ZVNCMGNuVmxYRzRnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdGeWNtRjVJRlJvWlNCaGNuSmhlU0IwYnlCaVpTQmpiMjUyWlhKMFpXUWdZWE1nWVNCemRISmxZVzB1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMU4wY21WaGJYMWNiaUFnSUNvdlhHNGdJSE4wWVhScFl5Qm1jbTl0UVhKeVlYazhWRDRvWVhKeVlYazZJRUZ5Y21GNVBGUStLVG9nVTNSeVpXRnRQRlErSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiVHhVUGlodVpYY2dSbkp2YlVGeWNtRjVQRlErS0dGeWNtRjVLU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EyOXVkbVZ5ZEhNZ1lTQndjbTl0YVhObElIUnZJR0VnYzNSeVpXRnRMaUJVYUdVZ2NtVjBkWEp1WldRZ2MzUnlaV0Z0SUhkcGJHd2daVzFwZENCMGFHVWdjbVZ6YjJ4MlpXUmNiaUFnSUNvZ2RtRnNkV1VnYjJZZ2RHaGxJSEJ5YjIxcGMyVXNJR0Z1WkNCMGFHVnVJR052YlhCc1pYUmxMaUJJYjNkbGRtVnlMQ0JwWmlCMGFHVWdjSEp2YldselpTQnBjMXh1SUNBZ0tpQnlaV3BsWTNSbFpDd2dkR2hsSUhOMGNtVmhiU0IzYVd4c0lHVnRhWFFnZEdobElHTnZjbkpsYzNCdmJtUnBibWNnWlhKeWIzSXVYRzRnSUNBcVhHNGdJQ0FxSUUxaGNtSnNaU0JrYVdGbmNtRnRPbHh1SUNBZ0tseHVJQ0FnS2lCZ1lHQjBaWGgwWEc0Z0lDQXFJR1p5YjIxUWNtOXRhWE5sS0NBdExTMHRORElnS1Z4dUlDQWdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMVFF5ZkZ4dUlDQWdLaUJnWUdCY2JpQWdJQ3BjYmlBZ0lDb2dRR1poWTNSdmNua2dkSEoxWlZ4dUlDQWdLaUJBY0dGeVlXMGdlMUJ5YjIxcGMyVk1hV3RsZlNCd2NtOXRhWE5sSUZSb1pTQndjbTl0YVhObElIUnZJR0psSUdOdmJuWmxjblJsWkNCaGN5QmhJSE4wY21WaGJTNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1UzUnlaV0Z0ZlZ4dUlDQWdLaTljYmlBZ2MzUmhkR2xqSUdaeWIyMVFjbTl0YVhObFBGUStLSEJ5YjIxcGMyVTZJRkJ5YjIxcGMyVk1hV3RsUEZRK0tUb2dVM1J5WldGdFBGUStJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk4wY21WaGJUeFVQaWh1WlhjZ1JuSnZiVkJ5YjIxcGMyVThWRDRvY0hKdmJXbHpaU2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnZiblpsY25SeklHRnVJRTlpYzJWeWRtRmliR1VnYVc1MGJ5QmhJRk4wY21WaGJTNWNiaUFnSUNwY2JpQWdJQ29nUUdaaFkzUnZjbmtnZEhKMVpWeHVJQ0FnS2lCQWNHRnlZVzBnZTJGdWVYMGdiMkp6WlhKMllXSnNaU0JVYUdVZ2IySnpaWEoyWVdKc1pTQjBieUJpWlNCamIyNTJaWEowWldRZ1lYTWdZU0J6ZEhKbFlXMHVYRzRnSUNBcUlFQnlaWFIxY200Z2UxTjBjbVZoYlgxY2JpQWdJQ292WEc0Z0lITjBZWFJwWXlCbWNtOXRUMkp6WlhKMllXSnNaVHhVUGlodlluTTZJSHR6ZFdKelkzSnBZbVU2SUdGdWVYMHBPaUJUZEhKbFlXMDhWRDRnZTF4dUlDQWdJR2xtSUNnb2IySnpJR0Z6SUZOMGNtVmhiVHhVUGlrdVpXNWtWMmhsYmlrZ2NtVjBkWEp1SUc5aWN5QmhjeUJUZEhKbFlXMDhWRDQ3WEc0Z0lDQWdZMjl1YzNRZ2J5QTlJSFI1Y0dWdlppQnZZbk5iSkNSdlluTmxjblpoWW14bFhTQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lHOWljMXNrSkc5aWMyVnlkbUZpYkdWZEtDa2dPaUJ2WW5NN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVGRISmxZVzA4VkQ0b2JtVjNJRVp5YjIxUFluTmxjblpoWW14bEtHOHBLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2MzUnlaV0Z0SUhSb1lYUWdjR1Z5YVc5a2FXTmhiR3g1SUdWdGFYUnpJR2x1WTNKbGJXVnVkR0ZzSUc1MWJXSmxjbk1zSUdWMlpYSjVYRzRnSUNBcUlHQndaWEpwYjJSZ0lHMXBiR3hwYzJWamIyNWtjeTVjYmlBZ0lDcGNiaUFnSUNvZ1RXRnlZbXhsSUdScFlXZHlZVzA2WEc0Z0lDQXFYRzRnSUNBcUlHQmdZSFJsZUhSY2JpQWdJQ29nSUNBZ0lIQmxjbWx2WkdsaktERXdNREFwWEc0Z0lDQXFJQzB0TFRBdExTMHhMUzB0TWkwdExUTXRMUzAwTFMwdExpNHVYRzRnSUNBcUlHQmdZRnh1SUNBZ0tseHVJQ0FnS2lCQVptRmpkRzl5ZVNCMGNuVmxYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCd1pYSnBiMlFnVkdobElHbHVkR1Z5ZG1Gc0lHbHVJRzFwYkd4cGMyVmpiMjVrY3lCMGJ5QjFjMlVnWVhNZ1lTQnlZWFJsSUc5bVhHNGdJQ0FxSUdWdGFYTnphVzl1TGx4dUlDQWdLaUJBY21WMGRYSnVJSHRUZEhKbFlXMTlYRzRnSUNBcUwxeHVJQ0J6ZEdGMGFXTWdjR1Z5YVc5a2FXTW9jR1Z5YVc5a09pQnVkVzFpWlhJcE9pQlRkSEpsWVcwOGJuVnRZbVZ5UGlCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVGRISmxZVzA4Ym5WdFltVnlQaWh1WlhjZ1VHVnlhVzlrYVdNb2NHVnlhVzlrS1NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRbXhsYm1SeklHMTFiSFJwY0d4bElITjBjbVZoYlhNZ2RHOW5aWFJvWlhJc0lHVnRhWFIwYVc1bklHVjJaVzUwY3lCbWNtOXRJR0ZzYkNCdlppQjBhR1Z0WEc0Z0lDQXFJR052Ym1OMWNuSmxiblJzZVM1Y2JpQWdJQ3BjYmlBZ0lDb2dLbTFsY21kbEtpQjBZV3RsY3lCdGRXeDBhWEJzWlNCemRISmxZVzF6SUdGeklHRnlaM1Z0Wlc1MGN5d2dZVzVrSUdOeVpXRjBaWE1nWVNCemRISmxZVzBnZEdoaGRGeHVJQ0FnS2lCaVpXaGhkbVZ6SUd4cGEyVWdaV0ZqYUNCdlppQjBhR1VnWVhKbmRXMWxiblFnYzNSeVpXRnRjeXdnYVc0Z2NHRnlZV3hzWld3dVhHNGdJQ0FxWEc0Z0lDQXFJRTFoY21Kc1pTQmthV0ZuY21GdE9seHVJQ0FnS2x4dUlDQWdLaUJnWUdCMFpYaDBYRzRnSUNBcUlDMHRNUzB0TFMweUxTMHRMUzB6TFMwdExTMHRMUzAwTFMwdFhHNGdJQ0FxSUMwdExTMWhMUzB0TFMxaUxTMHRMV010TFMxa0xTMHRMUzB0WEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnYldWeVoyVmNiaUFnSUNvZ0xTMHhMV0V0TFRJdExXSXRMVE10WXkwdExXUXRMVFF0TFMxY2JpQWdJQ29nWUdCZ1hHNGdJQ0FxWEc0Z0lDQXFJRUJtWVdOMGIzSjVJSFJ5ZFdWY2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKbFlXMTlJSE4wY21WaGJURWdRU0J6ZEhKbFlXMGdkRzhnYldWeVoyVWdkRzluWlhSb1pYSWdkMmwwYUNCdmRHaGxjaUJ6ZEhKbFlXMXpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbVZoYlgwZ2MzUnlaV0Z0TWlCQklITjBjbVZoYlNCMGJ5QnRaWEpuWlNCMGIyZGxkR2hsY2lCM2FYUm9JRzkwYUdWeUlITjBjbVZoYlhNdUlGUjNiMXh1SUNBZ0tpQnZjaUJ0YjNKbElITjBjbVZoYlhNZ2JXRjVJR0psSUdkcGRtVnVJR0Z6SUdGeVozVnRaVzUwY3k1Y2JpQWdJQ29nUUhKbGRIVnliaUI3VTNSeVpXRnRmVnh1SUNBZ0tpOWNiaUFnYzNSaGRHbGpJRzFsY21kbE9pQk5aWEpuWlZOcFoyNWhkSFZ5WlNBOUlHWjFibU4wYVc5dUlHMWxjbWRsS0M0dUxuTjBjbVZoYlhNNklFRnljbUY1UEZOMGNtVmhiVHhoYm5rK1Bpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVM1J5WldGdFBHRnVlVDRvYm1WM0lFMWxjbWRsS0hOMGNtVmhiWE1wS1R0Y2JpQWdmU0JoY3lCTlpYSm5aVk5wWjI1aGRIVnlaVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMjl0WW1sdVpYTWdiWFZzZEdsd2JHVWdhVzV3ZFhRZ2MzUnlaV0Z0Y3lCMGIyZGxkR2hsY2lCMGJ5QnlaWFIxY200Z1lTQnpkSEpsWVcwZ2QyaHZjMlVnWlhabGJuUnpYRzRnSUNBcUlHRnlaU0JoY25KaGVYTWdkR2hoZENCamIyeHNaV04wSUhSb1pTQnNZWFJsYzNRZ1pYWmxiblJ6SUdaeWIyMGdaV0ZqYUNCcGJuQjFkQ0J6ZEhKbFlXMHVYRzRnSUNBcVhHNGdJQ0FxSUNwamIyMWlhVzVsS2lCcGJuUmxjbTVoYkd4NUlISmxiV1Z0WW1WeWN5QjBhR1VnYlc5emRDQnlaV05sYm5RZ1pYWmxiblFnWm5KdmJTQmxZV05vSUc5bUlIUm9aU0JwYm5CMWRGeHVJQ0FnS2lCemRISmxZVzF6TGlCWGFHVnVJR0Z1ZVNCdlppQjBhR1VnYVc1d2RYUWdjM1J5WldGdGN5QmxiV2wwY3lCaGJpQmxkbVZ1ZEN3Z2RHaGhkQ0JsZG1WdWRDQjBiMmRsZEdobGNseHVJQ0FnS2lCM2FYUm9JR0ZzYkNCMGFHVWdiM1JvWlhJZ2MyRjJaV1FnWlhabGJuUnpJR0Z5WlNCamIyMWlhVzVsWkNCcGJuUnZJR0Z1SUdGeWNtRjVMaUJVYUdGMElHRnljbUY1SUhkcGJHeGNiaUFnSUNvZ1ltVWdaVzFwZEhSbFpDQnZiaUIwYUdVZ2IzVjBjSFYwSUhOMGNtVmhiUzRnU1hRbmN5QmxjM05sYm5ScFlXeHNlU0JoSUhkaGVTQnZaaUJxYjJsdWFXNW5JSFJ2WjJWMGFHVnlYRzRnSUNBcUlIUm9aU0JsZG1WdWRITWdabkp2YlNCdGRXeDBhWEJzWlNCemRISmxZVzF6TGx4dUlDQWdLbHh1SUNBZ0tpQk5ZWEppYkdVZ1pHbGhaM0poYlRwY2JpQWdJQ3BjYmlBZ0lDb2dZR0JnZEdWNGRGeHVJQ0FnS2lBdExURXRMUzB0TWkwdExTMHRNeTB0TFMwdExTMHROQzB0TFZ4dUlDQWdLaUF0TFMwdFlTMHRMUzB0WWkwdExTMHRZeTB0WkMwdExTMHRMVnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQmpiMjFpYVc1bFhHNGdJQ0FxSUMwdExTMHhZUzB5WVMweVlpMHpZaTB6WXkwelpDMDBaQzB0WEc0Z0lDQXFJR0JnWUZ4dUlDQWdLbHh1SUNBZ0tpQkFabUZqZEc5eWVTQjBjblZsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVM1J5WldGdGZTQnpkSEpsWVcweElFRWdjM1J5WldGdElIUnZJR052YldKcGJtVWdkRzluWlhSb1pYSWdkMmwwYUNCdmRHaGxjaUJ6ZEhKbFlXMXpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbVZoYlgwZ2MzUnlaV0Z0TWlCQklITjBjbVZoYlNCMGJ5QmpiMjFpYVc1bElIUnZaMlYwYUdWeUlIZHBkR2dnYjNSb1pYSWdjM1J5WldGdGN5NWNiaUFnSUNvZ1RYVnNkR2x3YkdVZ2MzUnlaV0Z0Y3l3Z2JtOTBJR3AxYzNRZ2RIZHZMQ0J0WVhrZ1ltVWdaMmwyWlc0Z1lYTWdZWEpuZFcxbGJuUnpMbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFRkSEpsWVcxOVhHNGdJQ0FxTDF4dUlDQnpkR0YwYVdNZ1kyOXRZbWx1WlRvZ1EyOXRZbWx1WlZOcFoyNWhkSFZ5WlNBOUlHWjFibU4wYVc5dUlHTnZiV0pwYm1Vb0xpNHVjM1J5WldGdGN6b2dRWEp5WVhrOFUzUnlaV0Z0UEdGdWVUNCtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJUZEhKbFlXMDhRWEp5WVhrOFlXNTVQajRvYm1WM0lFTnZiV0pwYm1VOFlXNTVQaWh6ZEhKbFlXMXpLU2s3WEc0Z0lIMGdZWE1nUTI5dFltbHVaVk5wWjI1aGRIVnlaVHRjYmx4dUlDQndjbTkwWldOMFpXUWdYMjFoY0R4VlBpaHdjbTlxWldOME9pQW9kRG9nVkNrZ1BUNGdWU2s2SUZOMGNtVmhiVHhWUGlCOElFMWxiVzl5ZVZOMGNtVmhiVHhWUGlCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlBb2RHaHBjeTVqZEc5eUtDa3BQRlUrS0c1bGR5Qk5ZWEJQY0R4VUxDQlZQaWh3Y205cVpXTjBMQ0IwYUdsektTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVkhKaGJuTm1iM0p0Y3lCbFlXTm9JR1YyWlc1MElHWnliMjBnZEdobElHbHVjSFYwSUZOMGNtVmhiU0IwYUhKdmRXZG9JR0VnWUhCeWIycGxZM1JnSUdaMWJtTjBhVzl1TEZ4dUlDQWdLaUIwYnlCblpYUWdZU0JUZEhKbFlXMGdkR2hoZENCbGJXbDBjeUIwYUc5elpTQjBjbUZ1YzJadmNtMWxaQ0JsZG1WdWRITXVYRzRnSUNBcVhHNGdJQ0FxSUUxaGNtSnNaU0JrYVdGbmNtRnRPbHh1SUNBZ0tseHVJQ0FnS2lCZ1lHQjBaWGgwWEc0Z0lDQXFJQzB0TVMwdExUTXRMVFV0TFMwdExUY3RMUzB0TFMxY2JpQWdJQ29nSUNBZ2JXRndLR2tnUFQ0Z2FTQXFJREV3S1Z4dUlDQWdLaUF0TFRFd0xTMHpNQzAxTUMwdExTMDNNQzB0TFMwdFhHNGdJQ0FxSUdCZ1lGeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J3Y205cVpXTjBJRUVnWm5WdVkzUnBiMjRnYjJZZ2RIbHdaU0JnS0hRNklGUXBJRDArSUZWZ0lIUm9ZWFFnZEdGclpYTWdaWFpsYm5SY2JpQWdJQ29nWUhSZ0lHOW1JSFI1Y0dVZ1lGUmdJR1p5YjIwZ2RHaGxJR2x1Y0hWMElGTjBjbVZoYlNCaGJtUWdjSEp2WkhWalpYTWdZVzRnWlhabGJuUWdiMllnZEhsd1pTQmdWV0FzSUhSdlhHNGdJQ0FxSUdKbElHVnRhWFIwWldRZ2IyNGdkR2hsSUc5MWRIQjFkQ0JUZEhKbFlXMHVYRzRnSUNBcUlFQnlaWFIxY200Z2UxTjBjbVZoYlgxY2JpQWdJQ292WEc0Z0lHMWhjRHhWUGlod2NtOXFaV04wT2lBb2REb2dWQ2tnUFQ0Z1ZTazZJRk4wY21WaGJUeFZQaUI3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDIxaGNDaHdjbTlxWldOMEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKZENkeklHeHBhMlVnWUcxaGNHQXNJR0oxZENCMGNtRnVjMlp2Y20xeklHVmhZMmdnYVc1d2RYUWdaWFpsYm5RZ2RHOGdZV3gzWVhseklIUm9aU0J6WVcxbFhHNGdJQ0FxSUdOdmJuTjBZVzUwSUhaaGJIVmxJRzl1SUhSb1pTQnZkWFJ3ZFhRZ1UzUnlaV0Z0TGx4dUlDQWdLbHh1SUNBZ0tpQk5ZWEppYkdVZ1pHbGhaM0poYlRwY2JpQWdJQ3BjYmlBZ0lDb2dZR0JnZEdWNGRGeHVJQ0FnS2lBdExURXRMUzB6TFMwMUxTMHRMUzAzTFMwdExTMWNiaUFnSUNvZ0lDQWdJQ0FnYldGd1ZHOG9NVEFwWEc0Z0lDQXFJQzB0TVRBdExURXdMVEV3TFMwdExURXdMUzB0TFZ4dUlDQWdLaUJnWUdCY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIQnliMnBsWTNSbFpGWmhiSFZsSUVFZ2RtRnNkV1VnZEc4Z1pXMXBkQ0J2YmlCMGFHVWdiM1YwY0hWMElGTjBjbVZoYlNCM2FHVnVaWFpsY2lCMGFHVmNiaUFnSUNvZ2FXNXdkWFFnVTNSeVpXRnRJR1Z0YVhSeklHRnVlU0IyWVd4MVpTNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1UzUnlaV0Z0ZlZ4dUlDQWdLaTljYmlBZ2JXRndWRzg4VlQ0b2NISnZhbVZqZEdWa1ZtRnNkV1U2SUZVcE9pQlRkSEpsWVcwOFZUNGdlMXh1SUNBZ0lHTnZibk4wSUhNZ1BTQjBhR2x6TG0xaGNDZ29LU0E5UGlCd2NtOXFaV04wWldSV1lXeDFaU2s3WEc0Z0lDQWdZMjl1YzNRZ2IzQTZJRTl3WlhKaGRHOXlQRlFzSUZVK0lEMGdjeTVmY0hKdlpDQmhjeUJQY0dWeVlYUnZjanhVTENCVlBqdGNiaUFnSUNCdmNDNTBlWEJsSUQwZ0oyMWhjRlJ2Snp0Y2JpQWdJQ0J5WlhSMWNtNGdjenRjYmlBZ2ZWeHVYRzRnSUdacGJIUmxjanhUSUdWNGRHVnVaSE1nVkQ0b2NHRnpjMlZ6T2lBb2REb2dWQ2tnUFQ0Z2RDQnBjeUJUS1RvZ1UzUnlaV0Z0UEZNK08xeHVJQ0JtYVd4MFpYSW9jR0Z6YzJWek9pQW9kRG9nVkNrZ1BUNGdZbTl2YkdWaGJpazZJRk4wY21WaGJUeFVQanRjYmlBZ0x5b3FYRzRnSUNBcUlFOXViSGtnWVd4c2IzZHpJR1YyWlc1MGN5QjBhR0YwSUhCaGMzTWdkR2hsSUhSbGMzUWdaMmwyWlc0Z1lua2dkR2hsSUdCd1lYTnpaWE5nSUdGeVozVnRaVzUwTGx4dUlDQWdLbHh1SUNBZ0tpQkZZV05vSUdWMlpXNTBJR1p5YjIwZ2RHaGxJR2x1Y0hWMElITjBjbVZoYlNCcGN5Qm5hWFpsYmlCMGJ5QjBhR1VnWUhCaGMzTmxjMkFnWm5WdVkzUnBiMjR1SUVsbUlIUm9aVnh1SUNBZ0tpQm1kVzVqZEdsdmJpQnlaWFIxY201eklHQjBjblZsWUN3Z2RHaGxJR1YyWlc1MElHbHpJR1p2Y25kaGNtUmxaQ0IwYnlCMGFHVWdiM1YwY0hWMElITjBjbVZoYlN4Y2JpQWdJQ29nYjNSb1pYSjNhWE5sSUdsMElHbHpJR2xuYm05eVpXUWdZVzVrSUc1dmRDQm1iM0ozWVhKa1pXUXVYRzRnSUNBcVhHNGdJQ0FxSUUxaGNtSnNaU0JrYVdGbmNtRnRPbHh1SUNBZ0tseHVJQ0FnS2lCZ1lHQjBaWGgwWEc0Z0lDQXFJQzB0TVMwdExUSXRMVE10TFMwdExUUXRMUzB0TFRVdExTMDJMUzAzTFRndExWeHVJQ0FnS2lBZ0lDQWdabWxzZEdWeUtHa2dQVDRnYVNBbElESWdQVDA5SURBcFhHNGdJQ0FxSUMwdExTMHRMVEl0TFMwdExTMHRMVFF0TFMwdExTMHRMUzAyTFMwdExUZ3RMVnh1SUNBZ0tpQmdZR0JjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ2NHRnpjMlZ6SUVFZ1puVnVZM1JwYjI0Z2IyWWdkSGx3WlNCZ0tIUTZJRlFwSUQwK0lHSnZiMnhsWVc1Z0lIUm9ZWFFnZEdGclpYTmNiaUFnSUNvZ1lXNGdaWFpsYm5RZ1puSnZiU0IwYUdVZ2FXNXdkWFFnYzNSeVpXRnRJR0Z1WkNCamFHVmphM01nYVdZZ2FYUWdjR0Z6YzJWekxDQmllU0J5WlhSMWNtNXBibWNnWVZ4dUlDQWdLaUJpYjI5c1pXRnVMbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFRkSEpsWVcxOVhHNGdJQ0FxTDF4dUlDQm1hV3gwWlhJb2NHRnpjMlZ6T2lBb2REb2dWQ2tnUFQ0Z1ltOXZiR1ZoYmlrNklGTjBjbVZoYlR4VVBpQjdYRzRnSUNBZ1kyOXVjM1FnY0NBOUlIUm9hWE11WDNCeWIyUTdYRzRnSUNBZ2FXWWdLSEFnYVc1emRHRnVZMlZ2WmlCR2FXeDBaWElwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZOMGNtVmhiVHhVUGlodVpYY2dSbWxzZEdWeVBGUStLRnh1SUNBZ0lDQWdJQ0JoYm1Rb0tIQWdZWE1nUm1sc2RHVnlQRlErS1M1bUxDQndZWE56WlhNcExGeHVJQ0FnSUNBZ0lDQW9jQ0JoY3lCR2FXeDBaWEk4VkQ0cExtbHVjMXh1SUNBZ0lDQWdLU2s3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJUZEhKbFlXMDhWRDRvYm1WM0lFWnBiSFJsY2p4VVBpaHdZWE56WlhNc0lIUm9hWE1wS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk1aWFJ6SUhSb1pTQm1hWEp6ZENCZ1lXMXZkVzUwWUNCdFlXNTVJR1YyWlc1MGN5Qm1jbTl0SUhSb1pTQnBibkIxZENCemRISmxZVzBnY0dGemN5QjBieUIwYUdWY2JpQWdJQ29nYjNWMGNIVjBJSE4wY21WaGJTd2dkR2hsYmlCdFlXdGxjeUIwYUdVZ2IzVjBjSFYwSUhOMGNtVmhiU0JqYjIxd2JHVjBaUzVjYmlBZ0lDcGNiaUFnSUNvZ1RXRnlZbXhsSUdScFlXZHlZVzA2WEc0Z0lDQXFYRzRnSUNBcUlHQmdZSFJsZUhSY2JpQWdJQ29nTFMxaExTMHRZaTB0WXkwdExTMWtMUzB0WlMwdFhHNGdJQ0FxSUNBZ0lIUmhhMlVvTXlsY2JpQWdJQ29nTFMxaExTMHRZaTB0WTN4Y2JpQWdJQ29nWUdCZ1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmhiVzkxYm5RZ1NHOTNJRzFoYm5rZ1pYWmxiblJ6SUhSdklHRnNiRzkzSUdaeWIyMGdkR2hsSUdsdWNIVjBJSE4wY21WaGJWeHVJQ0FnS2lCaVpXWnZjbVVnWTI5dGNHeGxkR2x1WnlCMGFHVWdiM1YwY0hWMElITjBjbVZoYlM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3VTNSeVpXRnRmVnh1SUNBZ0tpOWNiaUFnZEdGclpTaGhiVzkxYm5RNklHNTFiV0psY2lrNklGTjBjbVZoYlR4VVBpQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QW9kR2hwY3k1amRHOXlLQ2twUEZRK0tHNWxkeUJVWVd0bFBGUStLR0Z0YjNWdWRDd2dkR2hwY3lrcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWxuYm05eVpYTWdkR2hsSUdacGNuTjBJR0JoYlc5MWJuUmdJRzFoYm5rZ1pYWmxiblJ6SUdaeWIyMGdkR2hsSUdsdWNIVjBJSE4wY21WaGJTd2dZVzVrSUhSb1pXNWNiaUFnSUNvZ1lXWjBaWElnZEdoaGRDQnpkR0Z5ZEhNZ1ptOXlkMkZ5WkdsdVp5QmxkbVZ1ZEhNZ1puSnZiU0IwYUdVZ2FXNXdkWFFnYzNSeVpXRnRJSFJ2SUhSb1pTQnZkWFJ3ZFhSY2JpQWdJQ29nYzNSeVpXRnRMbHh1SUNBZ0tseHVJQ0FnS2lCTllYSmliR1VnWkdsaFozSmhiVHBjYmlBZ0lDcGNiaUFnSUNvZ1lHQmdkR1Y0ZEZ4dUlDQWdLaUF0TFdFdExTMWlMUzFqTFMwdExXUXRMUzFsTFMxY2JpQWdJQ29nSUNBZ0lDQWdaSEp2Y0NnektWeHVJQ0FnS2lBdExTMHRMUzB0TFMwdExTMHRMV1F0TFMxbExTMWNiaUFnSUNvZ1lHQmdYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JoYlc5MWJuUWdTRzkzSUcxaGJua2daWFpsYm5SeklIUnZJR2xuYm05eVpTQm1jbTl0SUhSb1pTQnBibkIxZENCemRISmxZVzFjYmlBZ0lDb2dZbVZtYjNKbElHWnZjbmRoY21ScGJtY2dZV3hzSUdWMlpXNTBjeUJtY205dElIUm9aU0JwYm5CMWRDQnpkSEpsWVcwZ2RHOGdkR2hsSUc5MWRIQjFkQ0J6ZEhKbFlXMHVYRzRnSUNBcUlFQnlaWFIxY200Z2UxTjBjbVZoYlgxY2JpQWdJQ292WEc0Z0lHUnliM0FvWVcxdmRXNTBPaUJ1ZFcxaVpYSXBPaUJUZEhKbFlXMDhWRDRnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVTNSeVpXRnRQRlErS0c1bGR5QkVjbTl3UEZRK0tHRnRiM1Z1ZEN3Z2RHaHBjeWtwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGZG9aVzRnZEdobElHbHVjSFYwSUhOMGNtVmhiU0JqYjIxd2JHVjBaWE1zSUhSb1pTQnZkWFJ3ZFhRZ2MzUnlaV0Z0SUhkcGJHd2daVzFwZENCMGFHVWdiR0Z6ZENCbGRtVnVkRnh1SUNBZ0tpQmxiV2wwZEdWa0lHSjVJSFJvWlNCcGJuQjFkQ0J6ZEhKbFlXMHNJR0Z1WkNCMGFHVnVJSGRwYkd3Z1lXeHpieUJqYjIxd2JHVjBaUzVjYmlBZ0lDcGNiaUFnSUNvZ1RXRnlZbXhsSUdScFlXZHlZVzA2WEc0Z0lDQXFYRzRnSUNBcUlHQmdZSFJsZUhSY2JpQWdJQ29nTFMxaExTMHRZaTB0WXkwdFpDMHRMUzE4WEc0Z0lDQXFJQ0FnSUNBZ0lHeGhjM1FvS1Z4dUlDQWdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMV1I4WEc0Z0lDQXFJR0JnWUZ4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFRkSEpsWVcxOVhHNGdJQ0FxTDF4dUlDQnNZWE4wS0NrNklGTjBjbVZoYlR4VVBpQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlRkSEpsWVcwOFZENG9ibVYzSUV4aGMzUThWRDRvZEdocGN5a3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCeVpYQmxibVJ6SUhSb1pTQm5hWFpsYmlCZ2FXNXBkR2xoYkdBZ2RtRnNkV1VnZEc4Z2RHaGxJSE5sY1hWbGJtTmxJRzltSUdWMlpXNTBjeUJsYldsMGRHVmtJR0o1SUhSb1pWeHVJQ0FnS2lCcGJuQjFkQ0J6ZEhKbFlXMHVJRlJvWlNCeVpYUjFjbTVsWkNCemRISmxZVzBnYVhNZ1lTQk5aVzF2Y25sVGRISmxZVzBzSUhkb2FXTm9JRzFsWVc1eklHbDBJR2x6WEc0Z0lDQXFJR0ZzY21WaFpIa2dZSEpsYldWdFltVnlLQ2xnSjJRdVhHNGdJQ0FxWEc0Z0lDQXFJRTFoY21Kc1pTQmthV0ZuY21GdE9seHVJQ0FnS2x4dUlDQWdLaUJnWUdCMFpYaDBYRzRnSUNBcUlDMHRMVEV0TFMweUxTMHRMUzB6TFMwdFhHNGdJQ0FxSUNBZ2MzUmhjblJYYVhSb0tEQXBYRzRnSUNBcUlEQXRMVEV0TFMweUxTMHRMUzB6TFMwdFhHNGdJQ0FxSUdCZ1lGeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdhVzVwZEdsaGJDQlVhR1VnZG1Gc2RXVWdiM0lnWlhabGJuUWdkRzhnY0hKbGNHVnVaQzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdUV1Z0YjNKNVUzUnlaV0Z0ZlZ4dUlDQWdLaTljYmlBZ2MzUmhjblJYYVhSb0tHbHVhWFJwWVd3NklGUXBPaUJOWlcxdmNubFRkSEpsWVcwOFZENGdlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z0YjNKNVUzUnlaV0Z0UEZRK0tHNWxkeUJUZEdGeWRGZHBkR2c4VkQ0b2RHaHBjeXdnYVc1cGRHbGhiQ2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVnpaWE1nWVc1dmRHaGxjaUJ6ZEhKbFlXMGdkRzhnWkdWMFpYSnRhVzVsSUhkb1pXNGdkRzhnWTI5dGNHeGxkR1VnZEdobElHTjFjbkpsYm5RZ2MzUnlaV0Z0TGx4dUlDQWdLbHh1SUNBZ0tpQlhhR1Z1SUhSb1pTQm5hWFpsYmlCZ2IzUm9aWEpnSUhOMGNtVmhiU0JsYldsMGN5QmhiaUJsZG1WdWRDQnZjaUJqYjIxd2JHVjBaWE1zSUhSb1pTQnZkWFJ3ZFhSY2JpQWdJQ29nYzNSeVpXRnRJSGRwYkd3Z1kyOXRjR3hsZEdVdUlFSmxabTl5WlNCMGFHRjBJR2hoY0hCbGJuTXNJSFJvWlNCdmRYUndkWFFnYzNSeVpXRnRJSGRwYkd3Z1ltVm9ZWFpsYzF4dUlDQWdLaUJzYVd0bElIUm9aU0JwYm5CMWRDQnpkSEpsWVcwdVhHNGdJQ0FxWEc0Z0lDQXFJRTFoY21Kc1pTQmthV0ZuY21GdE9seHVJQ0FnS2x4dUlDQWdLaUJnWUdCMFpYaDBYRzRnSUNBcUlDMHRMVEV0TFMweUxTMHRMUzB6TFMwMExTMHRMVFV0TFMwdE5pMHRMVnh1SUNBZ0tpQWdJR1Z1WkZkb1pXNG9JQzB0TFMwdExTMHRZUzB0WWkwdGZDQXBYRzRnSUNBcUlDMHRMVEV0TFMweUxTMHRMUzB6TFMwMExTMThYRzRnSUNBcUlHQmdZRnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnYjNSb1pYSWdVMjl0WlNCdmRHaGxjaUJ6ZEhKbFlXMGdkR2hoZENCcGN5QjFjMlZrSUhSdklHdHViM2NnZDJobGJpQnphRzkxYkdRZ2RHaGxJRzkxZEhCMWRGeHVJQ0FnS2lCemRISmxZVzBnYjJZZ2RHaHBjeUJ2Y0dWeVlYUnZjaUJqYjIxd2JHVjBaUzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVM1J5WldGdGZWeHVJQ0FnS2k5Y2JpQWdaVzVrVjJobGJpaHZkR2hsY2pvZ1UzUnlaV0Z0UEdGdWVUNHBPaUJUZEhKbFlXMDhWRDRnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnS0hSb2FYTXVZM1J2Y2lncEtUeFVQaWh1WlhjZ1JXNWtWMmhsYmp4VVBpaHZkR2hsY2l3Z2RHaHBjeWtwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGd2lSbTlzWkhOY0lpQjBhR1VnYzNSeVpXRnRJRzl1ZEc4Z2FYUnpaV3htTGx4dUlDQWdLbHh1SUNBZ0tpQkRiMjFpYVc1bGN5QmxkbVZ1ZEhNZ1puSnZiU0IwYUdVZ2NHRnpkQ0IwYUhKdmRXZG9iM1YwWEc0Z0lDQXFJSFJvWlNCbGJuUnBjbVVnWlhobFkzVjBhVzl1SUc5bUlIUm9aU0JwYm5CMWRDQnpkSEpsWVcwc0lHRnNiRzkzYVc1bklIbHZkU0IwYnlCaFkyTjFiWFZzWVhSbElIUm9aVzFjYmlBZ0lDb2dkRzluWlhSb1pYSXVJRWwwSjNNZ1pYTnpaVzUwYVdGc2JIa2diR2xyWlNCZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5KbFpIVmpaV0F1SUZSb1pTQnlaWFIxY201bFpGeHVJQ0FnS2lCemRISmxZVzBnYVhNZ1lTQk5aVzF2Y25sVGRISmxZVzBzSUhkb2FXTm9JRzFsWVc1eklHbDBJR2x6SUdGc2NtVmhaSGtnWUhKbGJXVnRZbVZ5S0NsZ0oyUXVYRzRnSUNBcVhHNGdJQ0FxSUZSb1pTQnZkWFJ3ZFhRZ2MzUnlaV0Z0SUhOMFlYSjBjeUJpZVNCbGJXbDBkR2x1WnlCMGFHVWdZSE5sWldSZ0lIZG9hV05vSUhsdmRTQm5hWFpsSUdGeklHRnlaM1Z0Wlc1MExseHVJQ0FnS2lCVWFHVnVMQ0IzYUdWdUlHRnVJR1YyWlc1MElHaGhjSEJsYm5NZ2IyNGdkR2hsSUdsdWNIVjBJSE4wY21WaGJTd2dhWFFnYVhNZ1kyOXRZbWx1WldRZ2QybDBhQ0IwYUdGMFhHNGdJQ0FxSUhObFpXUWdkbUZzZFdVZ2RHaHliM1ZuYUNCMGFHVWdZR0ZqWTNWdGRXeGhkR1ZnSUdaMWJtTjBhVzl1TENCaGJtUWdkR2hsSUc5MWRIQjFkQ0IyWVd4MVpTQnBjMXh1SUNBZ0tpQmxiV2wwZEdWa0lHOXVJSFJvWlNCdmRYUndkWFFnYzNSeVpXRnRMaUJnWm05c1pHQWdjbVZ0WlcxaVpYSnpJSFJvWVhRZ2IzVjBjSFYwSUhaaGJIVmxJR0Z6SUdCaFkyTmdYRzRnSUNBcUlDaGNJbUZqWTNWdGRXeGhkRzl5WENJcExDQmhibVFnZEdobGJpQjNhR1Z1SUdFZ2JtVjNJR2x1Y0hWMElHVjJaVzUwSUdCMFlDQm9ZWEJ3Wlc1ekxDQmdZV05qWUNCM2FXeHNJR0psWEc0Z0lDQXFJR052YldKcGJtVmtJSGRwZEdnZ2RHaGhkQ0IwYnlCd2NtOWtkV05sSUhSb1pTQnVaWGNnWUdGalkyQWdZVzVrSUhOdklHWnZjblJvTGx4dUlDQWdLbHh1SUNBZ0tpQk5ZWEppYkdVZ1pHbGhaM0poYlRwY2JpQWdJQ3BjYmlBZ0lDb2dZR0JnZEdWNGRGeHVJQ0FnS2lBdExTMHRMUzB4TFMwdExTMHhMUzB5TFMwdExURXRMUzB0TVMwdExTMHRMVnh1SUNBZ0tpQWdJR1p2YkdRb0tHRmpZeXdnZUNrZ1BUNGdZV05qSUNzZ2VDd2dNeWxjYmlBZ0lDb2dNeTB0TFMwdE5DMHRMUzB0TlMwdE55MHRMUzA0TFMwdExUa3RMUzB0TFMxY2JpQWdJQ29nWUdCZ1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR0ZqWTNWdGRXeGhkR1VnUVNCbWRXNWpkR2x2YmlCdlppQjBlWEJsSUdBb1lXTmpPaUJTTENCME9pQlVLU0E5UGlCU1lDQjBhR0YwWEc0Z0lDQXFJSFJoYTJWeklIUm9aU0J3Y21WMmFXOTFjeUJoWTJOMWJYVnNZWFJsWkNCMllXeDFaU0JnWVdOallDQmhibVFnZEdobElHbHVZMjl0YVc1bklHVjJaVzUwSUdaeWIyMGdkR2hsWEc0Z0lDQXFJR2x1Y0hWMElITjBjbVZoYlNCaGJtUWdjSEp2WkhWalpYTWdkR2hsSUc1bGR5QmhZMk4xYlhWc1lYUmxaQ0IyWVd4MVpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUhObFpXUWdWR2hsSUdsdWFYUnBZV3dnWVdOamRXMTFiR0YwWldRZ2RtRnNkV1VzSUc5bUlIUjVjR1VnWUZKZ0xseHVJQ0FnS2lCQWNtVjBkWEp1SUh0TlpXMXZjbmxUZEhKbFlXMTlYRzRnSUNBcUwxeHVJQ0JtYjJ4a1BGSStLR0ZqWTNWdGRXeGhkR1U2SUNoaFkyTTZJRklzSUhRNklGUXBJRDArSUZJc0lITmxaV1E2SUZJcE9pQk5aVzF2Y25sVGRISmxZVzA4VWo0Z2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnRiM0o1VTNSeVpXRnRQRkkrS0c1bGR5QkdiMnhrUEZRc0lGSStLR0ZqWTNWdGRXeGhkR1VzSUhObFpXUXNJSFJvYVhNcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhCc1lXTmxjeUJoYmlCbGNuSnZjaUIzYVhSb0lHRnViM1JvWlhJZ2MzUnlaV0Z0TGx4dUlDQWdLbHh1SUNBZ0tpQlhhR1Z1SUNoaGJtUWdhV1lwSUdGdUlHVnljbTl5SUdoaGNIQmxibk1nYjI0Z2RHaGxJR2x1Y0hWMElITjBjbVZoYlN3Z2FXNXpkR1ZoWkNCdlppQm1iM0ozWVhKa2FXNW5YRzRnSUNBcUlIUm9ZWFFnWlhKeWIzSWdkRzhnZEdobElHOTFkSEIxZENCemRISmxZVzBzSUNweVpYQnNZV05sUlhKeWIzSXFJSGRwYkd3Z1kyRnNiQ0IwYUdVZ1lISmxjR3hoWTJWZ1hHNGdJQ0FxSUdaMWJtTjBhVzl1SUhkb2FXTm9JSEpsZEhWeWJuTWdkR2hsSUhOMGNtVmhiU0IwYUdGMElIUm9aU0J2ZFhSd2RYUWdjM1J5WldGdElIZHBiR3dnY21Wd2JHbGpZWFJsTGx4dUlDQWdLaUJCYm1Rc0lHbHVJR05oYzJVZ2RHaGhkQ0J1WlhjZ2MzUnlaV0Z0SUdGc2MyOGdaVzFwZEhNZ1lXNGdaWEp5YjNJc0lHQnlaWEJzWVdObFlDQjNhV3hzSUdKbElHTmhiR3hsWkZ4dUlDQWdLaUJoWjJGcGJpQjBieUJuWlhRZ1lXNXZkR2hsY2lCemRISmxZVzBnZEc4Z2MzUmhjblFnY21Wd2JHbGpZWFJwYm1jdVhHNGdJQ0FxWEc0Z0lDQXFJRTFoY21Kc1pTQmthV0ZuY21GdE9seHVJQ0FnS2x4dUlDQWdLaUJnWUdCMFpYaDBYRzRnSUNBcUlDMHRNUzB0TFRJdExTMHRMVE10TFRRdExTMHRMVmhjYmlBZ0lDb2dJQ0J5WlhCc1lXTmxSWEp5YjNJb0lDZ3BJRDArSUMwdE1UQXRMWHdnS1Z4dUlDQWdLaUF0TFRFdExTMHlMUzB0TFMwekxTMDBMUzB0TFMwdExTMHhNQzB0ZkZ4dUlDQWdLaUJnWUdCY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdjbVZ3YkdGalpTQkJJR1oxYm1OMGFXOXVJRzltSUhSNWNHVWdZQ2hsY25JcElEMCtJRk4wY21WaGJXQWdkR2hoZENCMFlXdGxjMXh1SUNBZ0tpQjBhR1VnWlhKeWIzSWdkR2hoZENCdlkyTjFjbkpsWkNCdmJpQjBhR1VnYVc1d2RYUWdjM1J5WldGdElHOXlJRzl1SUhSb1pTQndjbVYyYVc5MWN5QnlaWEJzWVdObGJXVnVkRnh1SUNBZ0tpQnpkSEpsWVcwZ1lXNWtJSEpsZEhWeWJuTWdZU0J1WlhjZ2MzUnlaV0Z0TGlCVWFHVWdiM1YwY0hWMElITjBjbVZoYlNCM2FXeHNJR0psYUdGMlpTQnNhV3RsSUhSb1pWeHVJQ0FnS2lCemRISmxZVzBnZEdoaGRDQjBhR2x6SUdaMWJtTjBhVzl1SUhKbGRIVnlibk11WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMU4wY21WaGJYMWNiaUFnSUNvdlhHNGdJSEpsY0d4aFkyVkZjbkp2Y2loeVpYQnNZV05sT2lBb1pYSnlPaUJoYm5rcElEMCtJRk4wY21WaGJUeFVQaWs2SUZOMGNtVmhiVHhVUGlCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlBb2RHaHBjeTVqZEc5eUtDa3BQRlErS0c1bGR5QlNaWEJzWVdObFJYSnliM0k4VkQ0b2NtVndiR0ZqWlN3Z2RHaHBjeWtwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWnNZWFIwWlc1eklHRWdYQ0p6ZEhKbFlXMGdiMllnYzNSeVpXRnRjMXdpTENCb1lXNWtiR2x1WnlCdmJteDVJRzl1WlNCdVpYTjBaV1FnYzNSeVpXRnRJR0YwSUdFZ2RHbHRaVnh1SUNBZ0tpQW9ibThnWTI5dVkzVnljbVZ1WTNrcExseHVJQ0FnS2x4dUlDQWdLaUJKWmlCMGFHVWdhVzV3ZFhRZ2MzUnlaV0Z0SUdseklHRWdjM1J5WldGdElIUm9ZWFFnWlcxcGRITWdjM1J5WldGdGN5d2dkR2hsYmlCMGFHbHpJRzl3WlhKaGRHOXlJSGRwYkd4Y2JpQWdJQ29nY21WMGRYSnVJR0Z1SUc5MWRIQjFkQ0J6ZEhKbFlXMGdkMmhwWTJnZ2FYTWdZU0JtYkdGMElITjBjbVZoYlRvZ1pXMXBkSE1nY21WbmRXeGhjaUJsZG1WdWRITXVJRlJvWlZ4dUlDQWdLaUJtYkdGMGRHVnVhVzVuSUdoaGNIQmxibk1nZDJsMGFHOTFkQ0JqYjI1amRYSnlaVzVqZVM0Z1NYUWdkMjl5YTNNZ2JHbHJaU0IwYUdsek9pQjNhR1Z1SUhSb1pTQnBibkIxZEZ4dUlDQWdLaUJ6ZEhKbFlXMGdaVzFwZEhNZ1lTQnVaWE4wWldRZ2MzUnlaV0Z0TENBcVpteGhkSFJsYmlvZ2QybHNiQ0J6ZEdGeWRDQnBiV2wwWVhScGJtY2dkR2hoZENCdVpYTjBaV1JjYmlBZ0lDb2diMjVsTGlCSWIzZGxkbVZ5TENCaGN5QnpiMjl1SUdGeklIUm9aU0J1WlhoMElHNWxjM1JsWkNCemRISmxZVzBnYVhNZ1pXMXBkSFJsWkNCdmJpQjBhR1VnYVc1d2RYUmNiaUFnSUNvZ2MzUnlaV0Z0TENBcVpteGhkSFJsYmlvZ2QybHNiQ0JtYjNKblpYUWdkR2hsSUhCeVpYWnBiM1Z6SUc1bGMzUmxaQ0J2Ym1VZ2FYUWdkMkZ6SUdsdGFYUmhkR2x1Wnl3Z1lXNWtYRzRnSUNBcUlIZHBiR3dnYzNSaGNuUWdhVzFwZEdGMGFXNW5JSFJvWlNCdVpYY2dibVZ6ZEdWa0lHOXVaUzVjYmlBZ0lDcGNiaUFnSUNvZ1RXRnlZbXhsSUdScFlXZHlZVzA2WEc0Z0lDQXFYRzRnSUNBcUlHQmdZSFJsZUhSY2JpQWdJQ29nTFMwckxTMHRMUzB0TFMwckxTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0lDQXFJQ0FnWEZ3Z0lDQWdJQ0FnSUZ4Y1hHNGdJQ0FxSUNBZ0lGeGNJQ0FnSUNBZ0lDMHRMUzB4TFMwdExUSXRMUzB6TFMxY2JpQWdJQ29nSUNBZ0xTMWhMUzFpTFMwdExXTXRMUzB0WkMwdExTMHRMUzB0WEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0JtYkdGMGRHVnVYRzRnSUNBcUlDMHRMUzB0WVMwdFlpMHRMUzB0TFRFdExTMHRNaTB0TFRNdExWeHVJQ0FnS2lCZ1lHQmNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3VTNSeVpXRnRmVnh1SUNBZ0tpOWNiaUFnWm14aGRIUmxianhTUGloMGFHbHpPaUJUZEhKbFlXMDhVM1J5WldGdFBGSStQaWs2SUZRZ2UxeHVJQ0FnSUdOdmJuTjBJSEFnUFNCMGFHbHpMbDl3Y205a08xeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1UzUnlaV0Z0UEZJK0tHNWxkeUJHYkdGMGRHVnVLSFJvYVhNcEtTQmhjeUJVSUNZZ1UzUnlaV0Z0UEZJK08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkJoYzNObGN5QjBhR1VnYVc1d2RYUWdjM1J5WldGdElIUnZJR0VnWTNWemRHOXRJRzl3WlhKaGRHOXlMQ0IwYnlCd2NtOWtkV05sSUdGdUlHOTFkSEIxZENCemRISmxZVzB1WEc0Z0lDQXFYRzRnSUNBcUlDcGpiMjF3YjNObEtpQnBjeUJoSUdoaGJtUjVJSGRoZVNCdlppQjFjMmx1WnlCaGJpQmxlR2x6ZEdsdVp5Qm1kVzVqZEdsdmJpQnBiaUJoSUdOb1lXbHVaV1FnYzNSNWJHVXVYRzRnSUNBcUlFbHVjM1JsWVdRZ2IyWWdkM0pwZEdsdVp5QmdiM1YwVTNSeVpXRnRJRDBnWmlocGJsTjBjbVZoYlNsZ0lIbHZkU0JqWVc0Z2QzSnBkR1ZjYmlBZ0lDb2dZRzkxZEZOMGNtVmhiU0E5SUdsdVUzUnlaV0Z0TG1OdmJYQnZjMlVvWmlsZ0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0J2Y0dWeVlYUnZjaUJCSUdaMWJtTjBhVzl1SUhSb1lYUWdkR0ZyWlhNZ1lTQnpkSEpsWVcwZ1lYTWdhVzV3ZFhRZ1lXNWtYRzRnSUNBcUlISmxkSFZ5Ym5NZ1lTQnpkSEpsWVcwZ1lYTWdkMlZzYkM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3VTNSeVpXRnRmVnh1SUNBZ0tpOWNiaUFnWTI5dGNHOXpaVHhWUGlodmNHVnlZWFJ2Y2pvZ0tITjBjbVZoYlRvZ1UzUnlaV0Z0UEZRK0tTQTlQaUJWS1RvZ1ZTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5d1pYSmhkRzl5S0hSb2FYTXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVc0Z2IzVjBjSFYwSUhOMGNtVmhiU0IwYUdGMElHSmxhR0YyWlhNZ2JHbHJaU0IwYUdVZ2FXNXdkWFFnYzNSeVpXRnRMQ0JpZFhRZ1lXeHpiMXh1SUNBZ0tpQnlaVzFsYldKbGNuTWdkR2hsSUcxdmMzUWdjbVZqWlc1MElHVjJaVzUwSUhSb1lYUWdhR0Z3Y0dWdWN5QnZiaUIwYUdVZ2FXNXdkWFFnYzNSeVpXRnRMQ0J6YnlCMGFHRjBJR0ZjYmlBZ0lDb2dibVYzYkhrZ1lXUmtaV1FnYkdsemRHVnVaWElnZDJsc2JDQnBiVzFsWkdsaGRHVnNlU0J5WldObGFYWmxJSFJvWVhRZ2JXVnRiM0pwYzJWa0lHVjJaVzUwTGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdE5aVzF2Y25sVGRISmxZVzE5WEc0Z0lDQXFMMXh1SUNCeVpXMWxiV0psY2lncE9pQk5aVzF2Y25sVGRISmxZVzA4VkQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnRiM0o1VTNSeVpXRnRQRlErS0c1bGR5QlNaVzFsYldKbGNqeFVQaWgwYUdsektTazdYRzRnSUgxY2JseHVJQ0JrWldKMVp5Z3BPaUJUZEhKbFlXMDhWRDQ3WEc0Z0lHUmxZblZuS0d4aFltVnNUM0pUY0hrNklITjBjbWx1WnlrNklGTjBjbVZoYlR4VVBqdGNiaUFnWkdWaWRXY29iR0ZpWld4UGNsTndlVG9nS0hRNklGUXBJRDArSUdGdWVTazZJRk4wY21WaGJUeFVQanRjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lXNGdiM1YwY0hWMElITjBjbVZoYlNCMGFHRjBJR2xrWlc1MGFXTmhiR3g1SUdKbGFHRjJaWE1nYkdsclpTQjBhR1VnYVc1d2RYUWdjM1J5WldGdExGeHVJQ0FnS2lCaWRYUWdZV3h6YnlCeWRXNXpJR0VnWUhOd2VXQWdablZ1WTNScGIyNGdabTl5SUdWaFkyZ2daWFpsYm5Rc0lIUnZJR2hsYkhBZ2VXOTFJR1JsWW5WbklIbHZkWElnWVhCd0xseHVJQ0FnS2x4dUlDQWdLaUFxWkdWaWRXY3FJSFJoYTJWeklHRWdZSE53ZVdBZ1puVnVZM1JwYjI0Z1lYTWdZWEpuZFcxbGJuUXNJR0Z1WkNCeWRXNXpJSFJvWVhRZ1ptOXlJR1ZoWTJnZ1pYWmxiblJjYmlBZ0lDb2dhR0Z3Y0dWdWFXNW5JRzl1SUhSb1pTQnBibkIxZENCemRISmxZVzB1SUVsbUlIbHZkU0JrYjI0bmRDQndjbTkyYVdSbElIUm9aU0JnYzNCNVlDQmhjbWQxYldWdWRDeGNiaUFnSUNvZ2RHaGxiaUFxWkdWaWRXY3FJSGRwYkd3Z2FuVnpkQ0JnWTI5dWMyOXNaUzVzYjJkZ0lHVmhZMmdnWlhabGJuUXVJRlJvYVhNZ2FHVnNjSE1nZVc5MUlIUnZYRzRnSUNBcUlIVnVaR1Z5YzNSaGJtUWdkR2hsSUdac2IzY2diMllnWlhabGJuUnpJSFJvY205MVoyZ2djMjl0WlNCdmNHVnlZWFJ2Y2lCamFHRnBiaTVjYmlBZ0lDcGNiaUFnSUNvZ1VHeGxZWE5sSUc1dmRHVWdkR2hoZENCcFppQjBhR1VnYjNWMGNIVjBJSE4wY21WaGJTQm9ZWE1nYm04Z2JHbHpkR1Z1WlhKekxDQjBhR1Z1SUdsMElIZHBiR3dnYm05MFhHNGdJQ0FxSUhOMFlYSjBMQ0IzYUdsamFDQnRaV0Z1Y3lCZ2MzQjVZQ0IzYVd4c0lHNWxkbVZ5SUhKMWJpQmlaV05oZFhObElHNXZJR0ZqZEhWaGJDQmxkbVZ1ZENCb1lYQndaVzV6SUdsdVhHNGdJQ0FxSUhSb1lYUWdZMkZ6WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dUV0Z5WW14bElHUnBZV2R5WVcwNlhHNGdJQ0FxWEc0Z0lDQXFJR0JnWUhSbGVIUmNiaUFnSUNvZ0xTMHhMUzB0TFRJdExTMHRMVE10TFMwdExUUXRMVnh1SUNBZ0tpQWdJQ0FnSUNBZ0lHUmxZblZuWEc0Z0lDQXFJQzB0TVMwdExTMHlMUzB0TFMwekxTMHRMUzAwTFMxY2JpQWdJQ29nWUdCZ1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR3hoWW1Wc1QzSlRjSGtnUVNCemRISnBibWNnZEc4Z2RYTmxJR0Z6SUhSb1pTQnNZV0psYkNCM2FHVnVJSEJ5YVc1MGFXNW5YRzRnSUNBcUlHUmxZblZuSUdsdVptOXliV0YwYVc5dUlHOXVJSFJvWlNCamIyNXpiMnhsTENCdmNpQmhJQ2R6Y0hrbklHWjFibU4wYVc5dUlIUm9ZWFFnZEdGclpYTWdZVzRnWlhabGJuUmNiaUFnSUNvZ1lYTWdZWEpuZFcxbGJuUXNJR0Z1WkNCa2IyVnpJRzV2ZENCdVpXVmtJSFJ2SUhKbGRIVnliaUJoYm5sMGFHbHVaeTVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVM1J5WldGdGZWeHVJQ0FnS2k5Y2JpQWdaR1ZpZFdjb2JHRmlaV3hQY2xOd2VUODZJSE4wY21sdVp5QjhJQ2dvZERvZ1ZDa2dQVDRnWVc1NUtTazZJRk4wY21WaGJUeFVQaUI3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUFvZEdocGN5NWpkRzl5S0NrcFBGUStLRzVsZHlCRVpXSjFaenhVUGloMGFHbHpMQ0JzWVdKbGJFOXlVM0I1S1NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dLbWx0YVhSaGRHVXFJR05vWVc1blpYTWdkR2hwY3lCamRYSnlaVzUwSUZOMGNtVmhiU0IwYnlCbGJXbDBJSFJvWlNCellXMWxJR1YyWlc1MGN5QjBhR0YwSUhSb1pWeHVJQ0FnS2lCZ2IzUm9aWEpnSUdkcGRtVnVJRk4wY21WaGJTQmtiMlZ6TGlCVWFHbHpJRzFsZEdodlpDQnlaWFIxY201eklHNXZkR2hwYm1jdVhHNGdJQ0FxWEc0Z0lDQXFJRlJvYVhNZ2JXVjBhRzlrSUdWNGFYTjBjeUIwYnlCaGJHeHZkeUJ2Ym1VZ2RHaHBibWM2SUNvcVkybHlZM1ZzWVhJZ1pHVndaVzVrWlc1amVTQnZaaUJ6ZEhKbFlXMXpLaW91WEc0Z0lDQXFJRVp2Y2lCcGJuTjBZVzVqWlN3Z2JHVjBKM01nYVcxaFoybHVaU0IwYUdGMElHWnZjaUJ6YjIxbElISmxZWE52YmlCNWIzVWdibVZsWkNCMGJ5QmpjbVZoZEdVZ1lWeHVJQ0FnS2lCamFYSmpkV3hoY2lCa1pYQmxibVJsYm1ONUlIZG9aWEpsSUhOMGNtVmhiU0JnWm1seWMzUWtZQ0JrWlhCbGJtUnpJRzl1SUhOMGNtVmhiU0JnYzJWamIyNWtKR0JjYmlBZ0lDb2dkMmhwWTJnZ2FXNGdkSFZ5YmlCa1pYQmxibVJ6SUc5dUlHQm1hWEp6ZENSZ09seHVJQ0FnS2x4dUlDQWdLaUE4SVMwdElITnJhWEF0WlhoaGJYQnNaU0F0TFQ1Y2JpQWdJQ29nWUdCZ2FuTmNiaUFnSUNvZ2FXMXdiM0owSUdSbGJHRjVJR1p5YjIwZ0ozaHpkSEpsWVcwdlpYaDBjbUV2WkdWc1lYa25YRzRnSUNBcVhHNGdJQ0FxSUhaaGNpQm1hWEp6ZENRZ1BTQnpaV052Ym1Ra0xtMWhjQ2g0SUQwK0lIZ2dLaUF4TUNrdWRHRnJaU2d6S1R0Y2JpQWdJQ29nZG1GeUlITmxZMjl1WkNRZ1BTQm1hWEp6ZENRdWJXRndLSGdnUFQ0Z2VDQXJJREVwTG5OMFlYSjBWMmwwYUNneEtTNWpiMjF3YjNObEtHUmxiR0Y1S0RFd01Da3BPMXh1SUNBZ0tpQmdZR0JjYmlBZ0lDcGNiaUFnSUNvZ1NHOTNaWFpsY2l3Z2RHaGhkQ0JwY3lCcGJuWmhiR2xrSUVwaGRtRlRZM0pwY0hRc0lHSmxZMkYxYzJVZ1lITmxZMjl1WkNSZ0lHbHpJSFZ1WkdWbWFXNWxaRnh1SUNBZ0tpQnZiaUIwYUdVZ1ptbHljM1FnYkdsdVpTNGdWR2hwY3lCcGN5Qm9iM2NnS21sdGFYUmhkR1VxSUdOaGJpQm9aV3h3SUhOdmJIWmxJR2wwT2x4dUlDQWdLbHh1SUNBZ0tpQmdZR0JxYzF4dUlDQWdLaUJwYlhCdmNuUWdaR1ZzWVhrZ1puSnZiU0FuZUhOMGNtVmhiUzlsZUhSeVlTOWtaV3hoZVNkY2JpQWdJQ3BjYmlBZ0lDb2dkbUZ5SUhObFkyOXVaRkJ5YjNoNUpDQTlJSGh6TG1OeVpXRjBaU2dwTzF4dUlDQWdLaUIyWVhJZ1ptbHljM1FrSUQwZ2MyVmpiMjVrVUhKdmVIa2tMbTFoY0NoNElEMCtJSGdnS2lBeE1Da3VkR0ZyWlNnektUdGNiaUFnSUNvZ2RtRnlJSE5sWTI5dVpDUWdQU0JtYVhKemRDUXViV0Z3S0hnZ1BUNGdlQ0FySURFcExuTjBZWEowVjJsMGFDZ3hLUzVqYjIxd2IzTmxLR1JsYkdGNUtERXdNQ2twTzF4dUlDQWdLaUJ6WldOdmJtUlFjbTk0ZVNRdWFXMXBkR0YwWlNoelpXTnZibVFrS1R0Y2JpQWdJQ29nWUdCZ1hHNGdJQ0FxWEc0Z0lDQXFJRmRsSUdOeVpXRjBaU0JnYzJWamIyNWtVSEp2ZUhra1lDQmlaV1p2Y21VZ2RHaGxJRzkwYUdWeWN5d2djMjhnYVhRZ1kyRnVJR0psSUhWelpXUWdhVzRnZEdobFhHNGdJQ0FxSUdSbFkyeGhjbUYwYVc5dUlHOW1JR0JtYVhKemRDUmdMaUJVYUdWdUxDQmhablJsY2lCaWIzUm9JR0JtYVhKemRDUmdJR0Z1WkNCZ2MyVmpiMjVrSkdBZ1lYSmxYRzRnSUNBcUlHUmxabWx1WldRc0lIZGxJR2h2YjJzZ1lITmxZMjl1WkZCeWIzaDVKR0FnZDJsMGFDQmdjMlZqYjI1a0pHQWdkMmwwYUNCZ2FXMXBkR0YwWlNncFlDQjBieUIwWld4c1hHNGdJQ0FxSUhSb1lYUWdkR2hsZVNCaGNtVWdYQ0owYUdVZ2MyRnRaVndpTGlCZ2FXMXBkR0YwWldBZ2QybHNiQ0J1YjNRZ2RISnBaMmRsY2lCMGFHVWdjM1JoY25RZ2IyWWdZVzU1WEc0Z0lDQXFJSE4wY21WaGJTd2dhWFFnYW5WemRDQmlhVzVrY3lCZ2MyVmpiMjVrVUhKdmVIa2tZQ0JoYm1RZ1lITmxZMjl1WkNSZ0lIUnZaMlYwYUdWeUxseHVJQ0FnS2x4dUlDQWdLaUJVYUdVZ1ptOXNiRzkzYVc1bklHbHpJR0Z1SUdWNFlXMXdiR1VnZDJobGNtVWdZR2x0YVhSaGRHVW9LV0FnYVhNZ2FXMXdiM0owWVc1MElHbHVJRU41WTJ4bExtcHpYRzRnSUNBcUlHRndjR3hwWTJGMGFXOXVjeTRnUVNCd1lYSmxiblFnWTI5dGNHOXVaVzUwSUdOdmJuUmhhVzV6SUhOdmJXVWdZMmhwYkdRZ1kyOXRjRzl1Wlc1MGN5NGdRU0JqYUdsc1pGeHVJQ0FnS2lCb1lYTWdZVzRnWVdOMGFXOXVJSE4wY21WaGJTQjNhR2xqYUNCcGN5Qm5hWFpsYmlCMGJ5QjBhR1VnY0dGeVpXNTBJSFJ2SUdSbFptbHVaU0JwZEhNZ2MzUmhkR1U2WEc0Z0lDQXFYRzRnSUNBcUlEd2hMUzBnYzJ0cGNDMWxlR0Z0Y0d4bElDMHRQbHh1SUNBZ0tpQmdZR0JxYzF4dUlDQWdLaUJqYjI1emRDQmphR2xzWkVGamRHbHZibEJ5YjNoNUpDQTlJSGh6TG1OeVpXRjBaU2dwTzF4dUlDQWdLaUJqYjI1emRDQndZWEpsYm5RZ1BTQlFZWEpsYm5Rb2V5NHVMbk52ZFhKalpYTXNJR05vYVd4a1FXTjBhVzl1SkRvZ1kyaHBiR1JCWTNScGIyNVFjbTk0ZVNSOUtUdGNiaUFnSUNvZ1kyOXVjM1FnWTJocGJHUkJZM1JwYjI0a0lEMGdjR0Z5Wlc1MExuTjBZWFJsSkM1dFlYQW9jeUE5UGlCekxtTm9hV3hrTG1GamRHbHZiaVFwTG1ac1lYUjBaVzRvS1R0Y2JpQWdJQ29nWTJocGJHUkJZM1JwYjI1UWNtOTRlU1F1YVcxcGRHRjBaU2hqYUdsc1pFRmpkR2x2YmlRcE8xeHVJQ0FnS2lCZ1lHQmNiaUFnSUNwY2JpQWdJQ29nVG05MFpTd2dkR2h2ZFdkb0xDQjBhR0YwSUNvcVlHbHRhWFJoZEdVb0tXQWdaRzlsY3lCdWIzUWdjM1Z3Y0c5eWRDQk5aVzF2Y25sVGRISmxZVzF6S2lvdUlFbG1JSGRsWEc0Z0lDQXFJSGR2ZFd4a0lHRjBkR1Z0Y0hRZ2RHOGdhVzFwZEdGMFpTQmhJRTFsYlc5eWVWTjBjbVZoYlNCcGJpQmhJR05wY21OMWJHRnlJR1JsY0dWdVpHVnVZM2tzSUhkbElIZHZkV3hrWEc0Z0lDQXFJR1ZwZEdobGNpQm5aWFFnWVNCeVlXTmxJR052Ym1ScGRHbHZiaUFvZDJobGNtVWdkR2hsSUhONWJYQjBiMjBnZDI5MWJHUWdZbVVnWENKdWIzUm9hVzVuSUdoaGNIQmxibk5jSWlsY2JpQWdJQ29nYjNJZ1lXNGdhVzVtYVc1cGRHVWdZM2xqYkdsaklHVnRhWE56YVc5dUlHOW1JSFpoYkhWbGN5NGdTWFFuY3lCMWMyVm1kV3dnZEc4Z2RHaHBibXNnWVdKdmRYUmNiaUFnSUNvZ1RXVnRiM0o1VTNSeVpXRnRjeUJoY3lCalpXeHNjeUJwYmlCaElITndjbVZoWkhOb1pXVjBMaUJKZENCa2IyVnpiaWQwSUcxaGEyVWdZVzU1SUhObGJuTmxJSFJ2WEc0Z0lDQXFJR1JsWm1sdVpTQmhJSE53Y21WaFpITm9aV1YwSUdObGJHd2dZRUV4WUNCM2FYUm9JR0VnWm05eWJYVnNZU0IwYUdGMElHUmxjR1Z1WkhNZ2IyNGdZRUl4WUNCaGJtUmNiaUFnSUNvZ1kyVnNiQ0JnUWpGZ0lHUmxabWx1WldRZ2QybDBhQ0JoSUdadmNtMTFiR0VnZEdoaGRDQmtaWEJsYm1SeklHOXVJR0JCTVdBdVhHNGdJQ0FxWEc0Z0lDQXFJRWxtSUhsdmRTQm1hVzVrSUhsdmRYSnpaV3htSUhkaGJuUnBibWNnZEc4Z2RYTmxJR0JwYldsMFlYUmxLQ2xnSUhkcGRHZ2dZVnh1SUNBZ0tpQk5aVzF2Y25sVGRISmxZVzBzSUhsdmRTQnphRzkxYkdRZ2NtVjNiM0pySUhsdmRYSWdZMjlrWlNCaGNtOTFibVFnWUdsdGFYUmhkR1VvS1dBZ2RHOGdkWE5sSUdGY2JpQWdJQ29nVTNSeVpXRnRJR2x1YzNSbFlXUXVJRXh2YjJzZ1ptOXlJSFJvWlNCemRISmxZVzBnYVc0Z2RHaGxJR05wY21OMWJHRnlJR1JsY0dWdVpHVnVZM2tnZEdoaGRGeHVJQ0FnS2lCeVpYQnlaWE5sYm5SeklHRnVJR1YyWlc1MElITjBjbVZoYlN3Z1lXNWtJSFJvWVhRZ2QyOTFiR1FnWW1VZ1lTQmpZVzVrYVdSaGRHVWdabTl5SUdOeVpXRjBhVzVuSUdGY2JpQWdJQ29nY0hKdmVIa2dVM1J5WldGdElIZG9hV05vSUhSb1pXNGdhVzFwZEdGMFpYTWdkR2hsSUhSaGNtZGxkQ0JUZEhKbFlXMHVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VTNSeVpXRnRmU0IwWVhKblpYUWdWR2hsSUc5MGFHVnlJSE4wY21WaGJTQjBieUJwYldsMFlYUmxJRzl1SUhSb1pTQmpkWEp5Wlc1MElHOXVaUzRnVFhWemRGeHVJQ0FnS2lCdWIzUWdZbVVnWVNCTlpXMXZjbmxUZEhKbFlXMHVYRzRnSUNBcUwxeHVJQ0JwYldsMFlYUmxLSFJoY21kbGREb2dVM1J5WldGdFBGUStLVG9nZG05cFpDQjdYRzRnSUNBZ2FXWWdLSFJoY21kbGRDQnBibk4wWVc1alpXOW1JRTFsYlc5eWVWTjBjbVZoYlNsY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduUVNCTlpXMXZjbmxUZEhKbFlXMGdkMkZ6SUdkcGRtVnVJSFJ2SUdsdGFYUmhkR1VvS1N3Z1luVjBJR2wwSUc5dWJIa2dKeUFyWEc0Z0lDQWdJQ0FuYzNWd2NHOXlkSE1nWVNCVGRISmxZVzB1SUZKbFlXUWdiVzl5WlNCaFltOTFkQ0IwYUdseklISmxjM1J5YVdOMGFXOXVJR2hsY21VNklDY2dLMXh1SUNBZ0lDQWdKMmgwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl6ZEdGc2RIb3ZlSE4wY21WaGJTTm1ZWEVuS1R0Y2JpQWdJQ0IwYUdsekxsOTBZWEpuWlhRZ1BTQjBZWEpuWlhRN1hHNGdJQ0FnWm05eUlDaHNaWFFnYVd4eklEMGdkR2hwY3k1ZmFXeHpMQ0JPSUQwZ2FXeHpMbXhsYm1kMGFDd2dhU0E5SURBN0lHa2dQQ0JPT3lCcEt5c3BJSFJoY21kbGRDNWZZV1JrS0dsc2MxdHBYU2s3WEc0Z0lDQWdkR2hwY3k1ZmFXeHpJRDBnVzEwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSbTl5WTJWeklIUm9aU0JUZEhKbFlXMGdkRzhnWlcxcGRDQjBhR1VnWjJsMlpXNGdkbUZzZFdVZ2RHOGdhWFJ6SUd4cGMzUmxibVZ5Y3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRWE1nZEdobElHNWhiV1VnYVc1a2FXTmhkR1Z6TENCcFppQjViM1VnZFhObElIUm9hWE1zSUhsdmRTQmhjbVVnYlc5emRDQnNhV3RsYkhrZ1pHOXBibWNnYzI5dFpYUm9hVzVuWEc0Z0lDQXFJRlJvWlNCWGNtOXVaeUJYWVhrdUlGQnNaV0Z6WlNCMGNua2dkRzhnZFc1a1pYSnpkR0Z1WkNCMGFHVWdjbVZoWTNScGRtVWdkMkY1SUdKbFptOXlaU0IxYzJsdVp5QjBhR2x6WEc0Z0lDQXFJRzFsZEdodlpDNGdWWE5sSUdsMElHOXViSGtnZDJobGJpQjViM1VnYTI1dmR5QjNhR0YwSUhsdmRTQmhjbVVnWkc5cGJtY3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQlVhR1VnWENKdVpYaDBYQ0lnZG1Gc2RXVWdlVzkxSUhkaGJuUWdkRzhnWW5KdllXUmpZWE4wSUhSdklHRnNiQ0JzYVhOMFpXNWxjbk1nYjJaY2JpQWdJQ29nZEdocGN5QlRkSEpsWVcwdVhHNGdJQ0FxTDF4dUlDQnphR0Z0WldaMWJHeDVVMlZ1WkU1bGVIUW9kbUZzZFdVNklGUXBJSHRjYmlBZ0lDQjBhR2x6TGw5dUtIWmhiSFZsS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkdiM0pqWlhNZ2RHaGxJRk4wY21WaGJTQjBieUJsYldsMElIUm9aU0JuYVhabGJpQmxjbkp2Y2lCMGJ5QnBkSE1nYkdsemRHVnVaWEp6TGx4dUlDQWdLbHh1SUNBZ0tpQkJjeUIwYUdVZ2JtRnRaU0JwYm1ScFkyRjBaWE1zSUdsbUlIbHZkU0IxYzJVZ2RHaHBjeXdnZVc5MUlHRnlaU0J0YjNOMElHeHBhMlZzZVNCa2IybHVaeUJ6YjIxbGRHaHBibWRjYmlBZ0lDb2dWR2hsSUZkeWIyNW5JRmRoZVM0Z1VHeGxZWE5sSUhSeWVTQjBieUIxYm1SbGNuTjBZVzVrSUhSb1pTQnlaV0ZqZEdsMlpTQjNZWGtnWW1WbWIzSmxJSFZ6YVc1bklIUm9hWE5jYmlBZ0lDb2diV1YwYUc5a0xpQlZjMlVnYVhRZ2IyNXNlU0IzYUdWdUlIbHZkU0JyYm05M0lIZG9ZWFFnZVc5MUlHRnlaU0JrYjJsdVp5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRoYm5sOUlHVnljbTl5SUZSb1pTQmxjbkp2Y2lCNWIzVWdkMkZ1ZENCMGJ5QmljbTloWkdOaGMzUWdkRzhnWVd4c0lIUm9aU0JzYVhOMFpXNWxjbk1nYjJaY2JpQWdJQ29nZEdocGN5QlRkSEpsWVcwdVhHNGdJQ0FxTDF4dUlDQnphR0Z0WldaMWJHeDVVMlZ1WkVWeWNtOXlLR1Z5Y205eU9pQmhibmtwSUh0Y2JpQWdJQ0IwYUdsekxsOWxLR1Z5Y205eUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJHYjNKalpYTWdkR2hsSUZOMGNtVmhiU0IwYnlCbGJXbDBJSFJvWlNCY0ltTnZiWEJzWlhSbFpGd2lJR1YyWlc1MElIUnZJR2wwY3lCc2FYTjBaVzVsY25NdVhHNGdJQ0FxWEc0Z0lDQXFJRUZ6SUhSb1pTQnVZVzFsSUdsdVpHbGpZWFJsY3l3Z2FXWWdlVzkxSUhWelpTQjBhR2x6TENCNWIzVWdZWEpsSUcxdmMzUWdiR2xyWld4NUlHUnZhVzVuSUhOdmJXVjBhR2x1WjF4dUlDQWdLaUJVYUdVZ1YzSnZibWNnVjJGNUxpQlFiR1ZoYzJVZ2RISjVJSFJ2SUhWdVpHVnljM1JoYm1RZ2RHaGxJSEpsWVdOMGFYWmxJSGRoZVNCaVpXWnZjbVVnZFhOcGJtY2dkR2hwYzF4dUlDQWdLaUJ0WlhSb2IyUXVJRlZ6WlNCcGRDQnZibXg1SUhkb1pXNGdlVzkxSUd0dWIzY2dkMmhoZENCNWIzVWdZWEpsSUdSdmFXNW5MbHh1SUNBZ0tpOWNiaUFnYzJoaGJXVm1kV3hzZVZObGJtUkRiMjF3YkdWMFpTZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5aktDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVdSa2N5QmhJRndpWkdWaWRXZGNJaUJzYVhOMFpXNWxjaUIwYnlCMGFHVWdjM1J5WldGdExpQlVhR1Z5WlNCallXNGdiMjVzZVNCaVpTQnZibVVnWkdWaWRXZGNiaUFnSUNvZ2JHbHpkR1Z1WlhJc0lIUm9ZWFFuY3lCM2FIa2dkR2hwY3lCcGN5QW5jMlYwUkdWaWRXZE1hWE4wWlc1bGNpY3VJRlJ2SUhKbGJXOTJaU0IwYUdVZ1pHVmlkV2RjYmlBZ0lDb2diR2x6ZEdWdVpYSXNJR3AxYzNRZ1kyRnNiQ0J6WlhSRVpXSjFaMHhwYzNSbGJtVnlLRzUxYkd3cExseHVJQ0FnS2x4dUlDQWdLaUJCSUdSbFluVm5JR3hwYzNSbGJtVnlJR2x6SUd4cGEyVWdZVzU1SUc5MGFHVnlJR3hwYzNSbGJtVnlMaUJVYUdVZ2IyNXNlU0JrYVdabVpYSmxibU5sSUdseklIUm9ZWFFnWVZ4dUlDQWdLaUJrWldKMVp5QnNhWE4wWlc1bGNpQnBjeUJjSW5OMFpXRnNkR2g1WENJNklHbDBjeUJ3Y21WelpXNWpaUzloWW5ObGJtTmxJR1J2WlhNZ2JtOTBJSFJ5YVdkblpYSWdkR2hsWEc0Z0lDQXFJSE4wWVhKMEwzTjBiM0FnYjJZZ2RHaGxJSE4wY21WaGJTQW9iM0lnZEdobElIQnliMlIxWTJWeUlHbHVjMmxrWlNCMGFHVWdjM1J5WldGdEtTNGdWR2hwY3lCcGMxeHVJQ0FnS2lCMWMyVm1kV3dnYzI4Z2VXOTFJR05oYmlCcGJuTndaV04wSUhkb1lYUWdhWE1nWjI5cGJtY2diMjRnZDJsMGFHOTFkQ0JqYUdGdVoybHVaeUIwYUdVZ1ltVm9ZWFpwYjNKY2JpQWdJQ29nYjJZZ2RHaGxJSEJ5YjJkeVlXMHVJRWxtSUhsdmRTQm9ZWFpsSUdGdUlHbGtiR1VnYzNSeVpXRnRJR0Z1WkNCNWIzVWdZV1JrSUdFZ2JtOXliV0ZzSUd4cGMzUmxibVZ5SUhSdlhHNGdJQ0FxSUdsMExDQjBhR1VnYzNSeVpXRnRJSGRwYkd3Z2MzUmhjblFnWlhobFkzVjBhVzVuTGlCQ2RYUWdhV1lnZVc5MUlITmxkQ0JoSUdSbFluVm5JR3hwYzNSbGJtVnlJRzl1SUdGdVhHNGdJQ0FxSUdsa2JHVWdjM1J5WldGdExDQnBkQ0IzYjI0bmRDQnpkR0Z5ZENCbGVHVmpkWFJwYm1jZ0tHNXZkQ0IxYm5ScGJDQjBhR1VnWm1seWMzUWdibTl5YldGc0lHeHBjM1JsYm1WeVhHNGdJQ0FxSUdseklHRmtaR1ZrS1M1Y2JpQWdJQ3BjYmlBZ0lDb2dRWE1nZEdobElHNWhiV1VnYVc1a2FXTmhkR1Z6TENCM1pTQmtiMjRuZENCeVpXTnZiVzFsYm1RZ2RYTnBibWNnZEdocGN5QnRaWFJvYjJRZ2RHOGdZblZwYkdRZ1lYQndYRzRnSUNBcUlHeHZaMmxqTGlCSmJpQm1ZV04wTENCcGJpQnRiM04wSUdOaGMyVnpJSFJvWlNCa1pXSjFaeUJ2Y0dWeVlYUnZjaUIzYjNKcmN5QnFkWE4wSUdacGJtVXVJRTl1YkhrZ2RYTmxYRzRnSUNBcUlIUm9hWE1nYjI1bElHbG1JSGx2ZFNCcmJtOTNJSGRvWVhRZ2VXOTFKM0psSUdSdmFXNW5MbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTB4cGMzUmxibVZ5UEZRK2ZTQnNhWE4wWlc1bGNseHVJQ0FnS2k5Y2JpQWdjMlYwUkdWaWRXZE1hWE4wWlc1bGNpaHNhWE4wWlc1bGNqb2dVR0Z5ZEdsaGJEeE1hWE4wWlc1bGNqeFVQajRnZkNCdWRXeHNJSHdnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnYVdZZ0tDRnNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2RHaHBjeTVmWkd3Z1BTQk9UeUJoY3lCSmJuUmxjbTVoYkV4cGMzUmxibVZ5UEZRK08xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDaHNhWE4wWlc1bGNpQmhjeUJKYm5SbGNtNWhiRXhwYzNSbGJtVnlQRlErS1M1ZmJpQTlJR3hwYzNSbGJtVnlMbTVsZUhRZ2ZId2dibTl2Y0R0Y2JpQWdJQ0FnSUNoc2FYTjBaVzVsY2lCaGN5QkpiblJsY201aGJFeHBjM1JsYm1WeVBGUStLUzVmWlNBOUlHeHBjM1JsYm1WeUxtVnljbTl5SUh4OElHNXZiM0E3WEc0Z0lDQWdJQ0FvYkdsemRHVnVaWElnWVhNZ1NXNTBaWEp1WVd4TWFYTjBaVzVsY2p4VVBpa3VYMk1nUFNCc2FYTjBaVzVsY2k1amIyMXdiR1YwWlNCOGZDQnViMjl3TzF4dUlDQWdJQ0FnZEdocGN5NWZaR3dnUFNCc2FYTjBaVzVsY2lCaGN5QkpiblJsY201aGJFeHBjM1JsYm1WeVBGUStPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1RXVnRiM0o1VTNSeVpXRnRQRlErSUdWNGRHVnVaSE1nVTNSeVpXRnRQRlErSUh0Y2JpQWdjSEpwZG1GMFpTQmZkam9nVkR0Y2JpQWdjSEpwZG1GMFpTQmZhR0Z6T2lCaWIyOXNaV0Z1SUQwZ1ptRnNjMlU3WEc0Z0lHTnZibk4wY25WamRHOXlLSEJ5YjJSMVkyVnlPaUJKYm5SbGNtNWhiRkJ5YjJSMVkyVnlQRlErS1NCN1hHNGdJQ0FnYzNWd1pYSW9jSEp2WkhWalpYSXBPMXh1SUNCOVhHNWNiaUFnWDI0b2VEb2dWQ2tnZTF4dUlDQWdJSFJvYVhNdVgzWWdQU0I0TzF4dUlDQWdJSFJvYVhNdVgyaGhjeUE5SUhSeWRXVTdYRzRnSUNBZ2MzVndaWEl1WDI0b2VDazdYRzRnSUgxY2JseHVJQ0JmWVdSa0tHbHNPaUJKYm5SbGNtNWhiRXhwYzNSbGJtVnlQRlErS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdZMjl1YzNRZ2RHRWdQU0IwYUdsekxsOTBZWEpuWlhRN1hHNGdJQ0FnYVdZZ0tIUmhJQ0U5UFNCT1R5a2djbVYwZFhKdUlIUmhMbDloWkdRb2FXd3BPMXh1SUNBZ0lHTnZibk4wSUdFZ1BTQjBhR2x6TGw5cGJITTdYRzRnSUNBZ1lTNXdkWE5vS0dsc0tUdGNiaUFnSUNCcFppQW9ZUzVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZmFHRnpLU0JwYkM1ZmJpaDBhR2x6TGw5MktUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM04wYjNCSlJDQWhQVDBnVGs4cElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOW9ZWE1wSUdsc0xsOXVLSFJvYVhNdVgzWXBPMXh1SUNBZ0lDQWdZMnhsWVhKVWFXMWxiM1YwS0hSb2FYTXVYM04wYjNCSlJDazdYRzRnSUNBZ0lDQjBhR2x6TGw5emRHOXdTVVFnUFNCT1R6dGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDJoaGN5a2dhV3d1WDI0b2RHaHBjeTVmZGlrN0lHVnNjMlVnZTF4dUlDQWdJQ0FnWTI5dWMzUWdjQ0E5SUhSb2FYTXVYM0J5YjJRN1hHNGdJQ0FnSUNCcFppQW9jQ0FoUFQwZ1RrOHBJSEF1WDNOMFlYSjBLSFJvYVhNcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lGOXpkRzl3VG05M0tDa2dlMXh1SUNBZ0lIUm9hWE11WDJoaGN5QTlJR1poYkhObE8xeHVJQ0FnSUhOMWNHVnlMbDl6ZEc5d1RtOTNLQ2s3WEc0Z0lIMWNibHh1SUNCZmVDZ3BPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbDlvWVhNZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0J6ZFhCbGNpNWZlQ2dwTzF4dUlDQjlYRzVjYmlBZ2JXRndQRlUrS0hCeWIycGxZM1E2SUNoME9pQlVLU0E5UGlCVktUb2dUV1Z0YjNKNVUzUnlaV0Z0UEZVK0lIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZiV0Z3S0hCeWIycGxZM1FwSUdGeklFMWxiVzl5ZVZOMGNtVmhiVHhWUGp0Y2JpQWdmVnh1WEc0Z0lHMWhjRlJ2UEZVK0tIQnliMnBsWTNSbFpGWmhiSFZsT2lCVktUb2dUV1Z0YjNKNVUzUnlaV0Z0UEZVK0lIdGNiaUFnSUNCeVpYUjFjbTRnYzNWd1pYSXViV0Z3Vkc4b2NISnZhbVZqZEdWa1ZtRnNkV1VwSUdGeklFMWxiVzl5ZVZOMGNtVmhiVHhWUGp0Y2JpQWdmVnh1WEc0Z0lIUmhhMlVvWVcxdmRXNTBPaUJ1ZFcxaVpYSXBPaUJOWlcxdmNubFRkSEpsWVcwOFZENGdlMXh1SUNBZ0lISmxkSFZ5YmlCemRYQmxjaTUwWVd0bEtHRnRiM1Z1ZENrZ1lYTWdUV1Z0YjNKNVUzUnlaV0Z0UEZRK08xeHVJQ0I5WEc1Y2JpQWdaVzVrVjJobGJpaHZkR2hsY2pvZ1UzUnlaV0Z0UEdGdWVUNHBPaUJOWlcxdmNubFRkSEpsWVcwOFZENGdlMXh1SUNBZ0lISmxkSFZ5YmlCemRYQmxjaTVsYm1SWGFHVnVLRzkwYUdWeUtTQmhjeUJOWlcxdmNubFRkSEpsWVcwOFZENDdYRzRnSUgxY2JseHVJQ0J5WlhCc1lXTmxSWEp5YjNJb2NtVndiR0ZqWlRvZ0tHVnljam9nWVc1NUtTQTlQaUJUZEhKbFlXMDhWRDRwT2lCTlpXMXZjbmxUZEhKbFlXMDhWRDRnZTF4dUlDQWdJSEpsZEhWeWJpQnpkWEJsY2k1eVpYQnNZV05sUlhKeWIzSW9jbVZ3YkdGalpTa2dZWE1nVFdWdGIzSjVVM1J5WldGdFBGUStPMXh1SUNCOVhHNWNiaUFnY21WdFpXMWlaWElvS1RvZ1RXVnRiM0o1VTNSeVpXRnRQRlErSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVnh1WEc0Z0lHUmxZblZuS0NrNklFMWxiVzl5ZVZOMGNtVmhiVHhVUGp0Y2JpQWdaR1ZpZFdjb2JHRmlaV3hQY2xOd2VUb2djM1J5YVc1bktUb2dUV1Z0YjNKNVUzUnlaV0Z0UEZRK08xeHVJQ0JrWldKMVp5aHNZV0psYkU5eVUzQjVPaUFvZERvZ1ZDa2dQVDRnWVc1NUtUb2dUV1Z0YjNKNVUzUnlaV0Z0UEZRK08xeHVJQ0JrWldKMVp5aHNZV0psYkU5eVUzQjVQem9nYzNSeWFXNW5JSHdnS0NoME9pQlVLU0E5UGlCaGJua3BJSHdnZFc1a1pXWnBibVZrS1RvZ1RXVnRiM0o1VTNSeVpXRnRQRlErSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdVpHVmlkV2NvYkdGaVpXeFBjbE53ZVNCaGN5QmhibmtwSUdGeklFMWxiVzl5ZVZOMGNtVmhiVHhVUGp0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ2UwNVBMQ0JPVDE5SlRIMDdYRzVqYjI1emRDQjRjeUE5SUZOMGNtVmhiVHRjYm5SNWNHVWdlSE04VkQ0Z1BTQlRkSEpsWVcwOFZENDdYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjRjenRjYmlKZGZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgICB2YXIgZ2xvYmFsT2JqO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBnbG9iYWxPYmogPSB3aW5kb3c7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGdsb2JhbE9iaiA9IGdsb2JhbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdsb2JhbE9iaiA9IHRoaXM7XG4gICAgfVxuICAgIGdsb2JhbE9iai5DeWNsZWpzID0gZ2xvYmFsT2JqLkN5Y2xlanMgfHwge307XG4gICAgZ2xvYmFsT2JqID0gZ2xvYmFsT2JqLkN5Y2xlanM7XG4gICAgZ2xvYmFsT2JqLmFkYXB0U3RyZWFtID0gZ2xvYmFsT2JqLmFkYXB0U3RyZWFtIHx8IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geDsgfSk7XG4gICAgcmV0dXJuIGdsb2JhbE9iajtcbn1cbmZ1bmN0aW9uIHNldEFkYXB0KGYpIHtcbiAgICBnZXRHbG9iYWwoKS5hZGFwdFN0cmVhbSA9IGY7XG59XG5leHBvcnRzLnNldEFkYXB0ID0gc2V0QWRhcHQ7XG5mdW5jdGlvbiBhZGFwdChzdHJlYW0pIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsKCkuYWRhcHRTdHJlYW0oc3RyZWFtKTtcbn1cbmV4cG9ydHMuYWRhcHQgPSBhZGFwdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkYXB0LmpzLm1hcCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHZub2RlXzEgPSByZXF1aXJlKFwiLi92bm9kZVwiKTtcbnZhciBpcyA9IHJlcXVpcmUoXCIuL2lzXCIpO1xuZnVuY3Rpb24gYWRkTlMoZGF0YSwgY2hpbGRyZW4sIHNlbCkge1xuICAgIGRhdGEubnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuICAgIGlmIChzZWwgIT09ICdmb3JlaWduT2JqZWN0JyAmJiBjaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZERhdGEgPSBjaGlsZHJlbltpXS5kYXRhO1xuICAgICAgICAgICAgaWYgKGNoaWxkRGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYWRkTlMoY2hpbGREYXRhLCBjaGlsZHJlbltpXS5jaGlsZHJlbiwgY2hpbGRyZW5baV0uc2VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGgoc2VsLCBiLCBjKSB7XG4gICAgdmFyIGRhdGEgPSB7fSwgY2hpbGRyZW4sIHRleHQsIGk7XG4gICAgaWYgKGMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkYXRhID0gYjtcbiAgICAgICAgaWYgKGlzLmFycmF5KGMpKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXMucHJpbWl0aXZlKGMpKSB7XG4gICAgICAgICAgICB0ZXh0ID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjICYmIGMuc2VsKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGlzLmFycmF5KGIpKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXMucHJpbWl0aXZlKGIpKSB7XG4gICAgICAgICAgICB0ZXh0ID0gYjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiICYmIGIuc2VsKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtiXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGlzLnByaW1pdGl2ZShjaGlsZHJlbltpXSkpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5baV0gPSB2bm9kZV8xLnZub2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNoaWxkcmVuW2ldLCB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZWxbMF0gPT09ICdzJyAmJiBzZWxbMV0gPT09ICd2JyAmJiBzZWxbMl0gPT09ICdnJyAmJlxuICAgICAgICAoc2VsLmxlbmd0aCA9PT0gMyB8fCBzZWxbM10gPT09ICcuJyB8fCBzZWxbM10gPT09ICcjJykpIHtcbiAgICAgICAgYWRkTlMoZGF0YSwgY2hpbGRyZW4sIHNlbCk7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZV8xLnZub2RlKHNlbCwgZGF0YSwgY2hpbGRyZW4sIHRleHQsIHVuZGVmaW5lZCk7XG59XG5leHBvcnRzLmggPSBoO1xuO1xuZXhwb3J0cy5kZWZhdWx0ID0gaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWguanMubWFwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciByb290O1xuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJvb3QgPSBzZWxmO1xufVxuZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByb290ID0gd2luZG93O1xufVxuZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByb290ID0gZ2xvYmFsO1xufVxuZWxzZSB7XG4gICAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG52YXIgcGFyZW50U3ltYm9sO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwYXJlbnRTeW1ib2wgPSBTeW1ib2woJ3BhcmVudCcpO1xufVxuZWxzZSB7XG4gICAgcGFyZW50U3ltYm9sID0gJ0BAc25hYmJkb20tc2VsZWN0b3ItcGFyZW50Jztcbn1cbmV4cG9ydCBkZWZhdWx0IHBhcmVudFN5bWJvbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcmVudC1zeW1ib2wuanMubWFwIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gdm5vZGUoc2VsLCBkYXRhLCBjaGlsZHJlbiwgdGV4dCwgZWxtKSB7XG4gICAgdmFyIGtleSA9IGRhdGEgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGRhdGEua2V5O1xuICAgIHJldHVybiB7IHNlbDogc2VsLCBkYXRhOiBkYXRhLCBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIHRleHQ6IHRleHQsIGVsbTogZWxtLCBrZXk6IGtleSB9O1xufVxuZXhwb3J0cy52bm9kZSA9IHZub2RlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm5vZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12bm9kZS5qcy5tYXAiLCIvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wb3J0LXNpZGUtZWZmZWN0XG5pbXBvcnQgJ3NldGltbWVkaWF0ZSc7XG5mdW5jdGlvbiBwcm9jZXNzRXZlbnQoYXJncykge1xuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzLnNjaGVkdWxlciwgZG9uZSA9IGFyZ3MuZG9uZSwgY3VycmVudFRpbWUgPSBhcmdzLmN1cnJlbnRUaW1lLCBzZXRUaW1lID0gYXJncy5zZXRUaW1lLCB0aW1lVG9SdW5UbyA9IGFyZ3MudGltZVRvUnVuVG87XG4gICAgdmFyIG5leHRFdmVudCA9IHNjaGVkdWxlci5wZWVrKCk7XG4gICAgdmFyIG91dE9mVGltZSA9IG5leHRFdmVudCAmJiB0aW1lVG9SdW5UbyAmJiBuZXh0RXZlbnQudGltZSA+PSB0aW1lVG9SdW5UbztcbiAgICBpZiAoIW5leHRFdmVudCB8fCBvdXRPZlRpbWUpIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBldmVudFRvUHJvY2VzcyA9IHNjaGVkdWxlci5zaGlmdE5leHRFbnRyeSgpO1xuICAgIGlmIChldmVudFRvUHJvY2Vzcy5jYW5jZWxsZWQpIHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKHByb2Nlc3NFdmVudCwgYXJncyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWUgPSBldmVudFRvUHJvY2Vzcy50aW1lO1xuICAgIHNldFRpbWUodGltZSk7XG4gICAgaWYgKGV2ZW50VG9Qcm9jZXNzLmYpIHtcbiAgICAgICAgZXZlbnRUb1Byb2Nlc3MuZihldmVudFRvUHJvY2VzcywgdGltZSwgc2NoZWR1bGVyLmFkZCwgY3VycmVudFRpbWUpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRUb1Byb2Nlc3MudHlwZSA9PT0gJ25leHQnKSB7XG4gICAgICAgIGV2ZW50VG9Qcm9jZXNzLnN0cmVhbS5zaGFtZWZ1bGx5U2VuZE5leHQoZXZlbnRUb1Byb2Nlc3MudmFsdWUpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRUb1Byb2Nlc3MudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICBldmVudFRvUHJvY2Vzcy5zdHJlYW0uc2hhbWVmdWxseVNlbmRFcnJvcihldmVudFRvUHJvY2Vzcy5lcnJvcik7XG4gICAgfVxuICAgIGlmIChldmVudFRvUHJvY2Vzcy50eXBlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGV2ZW50VG9Qcm9jZXNzLnN0cmVhbS5zaGFtZWZ1bGx5U2VuZENvbXBsZXRlKCk7XG4gICAgfVxuICAgIHNldEltbWVkaWF0ZShwcm9jZXNzRXZlbnQsIGFyZ3MpO1xufVxuZnVuY3Rpb24gcnVuVmlydHVhbGx5KHNjaGVkdWxlciwgZG9uZSwgY3VycmVudFRpbWUsIHNldFRpbWUsIHRpbWVUb1J1blRvKSB7XG4gICAgaWYgKHRpbWVUb1J1blRvID09PSB2b2lkIDApIHsgdGltZVRvUnVuVG8gPSAwOyB9XG4gICAgdmFyIGFyZ3MgPSB7IHNjaGVkdWxlcjogc2NoZWR1bGVyLCBkb25lOiBkb25lLCBjdXJyZW50VGltZTogY3VycmVudFRpbWUsIHNldFRpbWU6IHNldFRpbWUsIHRpbWVUb1J1blRvOiB0aW1lVG9SdW5UbyB9O1xuICAgIHNldEltbWVkaWF0ZShwcm9jZXNzRXZlbnQsIGFyZ3MpO1xufVxuZXhwb3J0IHsgcnVuVmlydHVhbGx5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW4tdmlydHVhbGx5LmpzLm1hcCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsInZhciBub3cgPSByZXF1aXJlKCdwZXJmb3JtYW5jZS1ub3cnKVxuICAsIHJvb3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvd1xuICAsIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXVxuICAsIHN1ZmZpeCA9ICdBbmltYXRpb25GcmFtZSdcbiAgLCByYWYgPSByb290WydyZXF1ZXN0JyArIHN1ZmZpeF1cbiAgLCBjYWYgPSByb290WydjYW5jZWwnICsgc3VmZml4XSB8fCByb290WydjYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cblxuZm9yKHZhciBpID0gMDsgIXJhZiAmJiBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICByYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnUmVxdWVzdCcgKyBzdWZmaXhdXG4gIGNhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWwnICsgc3VmZml4XVxuICAgICAgfHwgcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxufVxuXG4vLyBTb21lIHZlcnNpb25zIG9mIEZGIGhhdmUgckFGIGJ1dCBub3QgY0FGXG5pZighcmFmIHx8ICFjYWYpIHtcbiAgdmFyIGxhc3QgPSAwXG4gICAgLCBpZCA9IDBcbiAgICAsIHF1ZXVlID0gW11cbiAgICAsIGZyYW1lRHVyYXRpb24gPSAxMDAwIC8gNjBcblxuICByYWYgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFyIF9ub3cgPSBub3coKVxuICAgICAgICAsIG5leHQgPSBNYXRoLm1heCgwLCBmcmFtZUR1cmF0aW9uIC0gKF9ub3cgLSBsYXN0KSlcbiAgICAgIGxhc3QgPSBuZXh0ICsgX25vd1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNwID0gcXVldWUuc2xpY2UoMClcbiAgICAgICAgLy8gQ2xlYXIgcXVldWUgaGVyZSB0byBwcmV2ZW50XG4gICAgICAgIC8vIGNhbGxiYWNrcyBmcm9tIGFwcGVuZGluZyBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgZnJhbWUncyBxdWV1ZVxuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmKCFjcFtpXS5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgY3BbaV0uY2FsbGJhY2sobGFzdClcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aHJvdyBlIH0sIDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBNYXRoLnJvdW5kKG5leHQpKVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKHtcbiAgICAgIGhhbmRsZTogKytpZCxcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgIGNhbmNlbGxlZDogZmFsc2VcbiAgICB9KVxuICAgIHJldHVybiBpZFxuICB9XG5cbiAgY2FmID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZihxdWV1ZVtpXS5oYW5kbGUgPT09IGhhbmRsZSkge1xuICAgICAgICBxdWV1ZVtpXS5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgLy8gV3JhcCBpbiBhIG5ldyBmdW5jdGlvbiB0byBwcmV2ZW50XG4gIC8vIGBjYW5jZWxgIHBvdGVudGlhbGx5IGJlaW5nIGFzc2lnbmVkXG4gIC8vIHRvIHRoZSBuYXRpdmUgckFGIGZ1bmN0aW9uXG4gIHJldHVybiByYWYuY2FsbChyb290LCBmbilcbn1cbm1vZHVsZS5leHBvcnRzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICBjYWYuYXBwbHkocm9vdCwgYXJndW1lbnRzKVxufVxubW9kdWxlLmV4cG9ydHMucG9seWZpbGwgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICBvYmplY3QgPSByb290O1xuICB9XG4gIG9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByYWZcbiAgb2JqZWN0LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2FmXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGNvbnN0cnVjdG9yUmVnZXggPSAvXlxccypjbGFzc1xcYi87XG52YXIgaXNFUzZDbGFzc0ZuID0gZnVuY3Rpb24gaXNFUzZDbGFzc0Z1bmN0aW9uKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGZuU3RyID0gZm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KGZuU3RyKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTsgLy8gbm90IGEgZnVuY3Rpb25cblx0fVxufTtcblxudmFyIHRyeUZ1bmN0aW9uT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RnVuY3Rpb25Ub1N0cih2YWx1ZSkge1xuXHR0cnkge1xuXHRcdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZuVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZuQ2xhc3MgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xudmFyIGdlbkNsYXNzID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYWxsYWJsZSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgIXZhbHVlLnByb3RvdHlwZSkgeyByZXR1cm4gdHJ1ZTsgfVxuXHRpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfVxuXHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0dmFyIHN0ckNsYXNzID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHJldHVybiBzdHJDbGFzcyA9PT0gZm5DbGFzcyB8fCBzdHJDbGFzcyA9PT0gZ2VuQ2xhc3M7XG59O1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaGFzID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuXG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG5cdGlmICgkYXNzaWduKSB7XG5cdFx0cmV0dXJuICRhc3NpZ24odGFyZ2V0LCBzb3VyY2UpO1xuXHR9XG5cblx0Zm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuXHRcdGlmIChoYXMoc291cmNlLCBrZXkpKSB7XG5cdFx0XHR0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gdXBkYXRlQ2xhc3Mob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIGN1ciwgbmFtZSwgZWxtID0gdm5vZGUuZWxtLCBvbGRDbGFzcyA9IG9sZFZub2RlLmRhdGEuY2xhc3MsIGtsYXNzID0gdm5vZGUuZGF0YS5jbGFzcztcbiAgICBpZiAoIW9sZENsYXNzICYmICFrbGFzcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvbGRDbGFzcyA9PT0ga2xhc3MpXG4gICAgICAgIHJldHVybjtcbiAgICBvbGRDbGFzcyA9IG9sZENsYXNzIHx8IHt9O1xuICAgIGtsYXNzID0ga2xhc3MgfHwge307XG4gICAgZm9yIChuYW1lIGluIG9sZENsYXNzKSB7XG4gICAgICAgIGlmICgha2xhc3NbbmFtZV0pIHtcbiAgICAgICAgICAgIGVsbS5jbGFzc0xpc3QucmVtb3ZlKG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAobmFtZSBpbiBrbGFzcykge1xuICAgICAgICBjdXIgPSBrbGFzc1tuYW1lXTtcbiAgICAgICAgaWYgKGN1ciAhPT0gb2xkQ2xhc3NbbmFtZV0pIHtcbiAgICAgICAgICAgIGVsbS5jbGFzc0xpc3RbY3VyID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmNsYXNzTW9kdWxlID0geyBjcmVhdGU6IHVwZGF0ZUNsYXNzLCB1cGRhdGU6IHVwZGF0ZUNsYXNzIH07XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmNsYXNzTW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xhc3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiB1cGRhdGVQcm9wcyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIga2V5LCBjdXIsIG9sZCwgZWxtID0gdm5vZGUuZWxtLCBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEucHJvcHMsIHByb3BzID0gdm5vZGUuZGF0YS5wcm9wcztcbiAgICBpZiAoIW9sZFByb3BzICYmICFwcm9wcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvbGRQcm9wcyA9PT0gcHJvcHMpXG4gICAgICAgIHJldHVybjtcbiAgICBvbGRQcm9wcyA9IG9sZFByb3BzIHx8IHt9O1xuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICAgICAgaWYgKCFwcm9wc1trZXldKSB7XG4gICAgICAgICAgICBkZWxldGUgZWxtW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAgICAgb2xkID0gb2xkUHJvcHNba2V5XTtcbiAgICAgICAgaWYgKG9sZCAhPT0gY3VyICYmIChrZXkgIT09ICd2YWx1ZScgfHwgZWxtW2tleV0gIT09IGN1cikpIHtcbiAgICAgICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5wcm9wc01vZHVsZSA9IHsgY3JlYXRlOiB1cGRhdGVQcm9wcywgdXBkYXRlOiB1cGRhdGVQcm9wcyB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5wcm9wc01vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG52YXIgeG1sTlMgPSAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJztcbnZhciBjb2xvbkNoYXIgPSA1ODtcbnZhciB4Q2hhciA9IDEyMDtcbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBrZXksIGVsbSA9IHZub2RlLmVsbSwgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzLCBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnM7XG4gICAgaWYgKCFvbGRBdHRycyAmJiAhYXR0cnMpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAob2xkQXR0cnMgPT09IGF0dHJzKVxuICAgICAgICByZXR1cm47XG4gICAgb2xkQXR0cnMgPSBvbGRBdHRycyB8fCB7fTtcbiAgICBhdHRycyA9IGF0dHJzIHx8IHt9O1xuICAgIC8vIHVwZGF0ZSBtb2RpZmllZCBhdHRyaWJ1dGVzLCBhZGQgbmV3IGF0dHJpYnV0ZXNcbiAgICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgICAgICB2YXIgY3VyID0gYXR0cnNba2V5XTtcbiAgICAgICAgdmFyIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgICAgICAgaWYgKGN1ciA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5LCBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1ciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LmNoYXJDb2RlQXQoMCkgIT09IHhDaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5LCBjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkuY2hhckNvZGVBdCgzKSA9PT0gY29sb25DaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtZSB4bWwgbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGVOUyh4bWxOUywga2V5LCBjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkuY2hhckNvZGVBdCg1KSA9PT0gY29sb25DaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtZSB4bGluayBuYW1lc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoa2V5LCBjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyByZW1vdmUgcmVtb3ZlZCBhdHRyaWJ1dGVzXG4gICAgLy8gdXNlIGBpbmAgb3BlcmF0b3Igc2luY2UgdGhlIHByZXZpb3VzIGBmb3JgIGl0ZXJhdGlvbiB1c2VzIGl0ICguaS5lLiBhZGQgZXZlbiBhdHRyaWJ1dGVzIHdpdGggdW5kZWZpbmVkIHZhbHVlKVxuICAgIC8vIHRoZSBvdGhlciBvcHRpb24gaXMgdG8gcmVtb3ZlIGFsbCBhdHRyaWJ1dGVzIHdpdGggdmFsdWUgPT0gdW5kZWZpbmVkXG4gICAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGF0dHJzKSkge1xuICAgICAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5hdHRyaWJ1dGVzTW9kdWxlID0geyBjcmVhdGU6IHVwZGF0ZUF0dHJzLCB1cGRhdGU6IHVwZGF0ZUF0dHJzIH07XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmF0dHJpYnV0ZXNNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdHRyaWJ1dGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJhZiA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB8fCBzZXRUaW1lb3V0O1xudmFyIG5leHRGcmFtZSA9IGZ1bmN0aW9uIChmbikgeyByYWYoZnVuY3Rpb24gKCkgeyByYWYoZm4pOyB9KTsgfTtcbnZhciByZWZsb3dGb3JjZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNldE5leHRGcmFtZShvYmosIHByb3AsIHZhbCkge1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7IG9ialtwcm9wXSA9IHZhbDsgfSk7XG59XG5mdW5jdGlvbiB1cGRhdGVTdHlsZShvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgY3VyLCBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIG9sZFN0eWxlID0gb2xkVm5vZGUuZGF0YS5zdHlsZSwgc3R5bGUgPSB2bm9kZS5kYXRhLnN0eWxlO1xuICAgIGlmICghb2xkU3R5bGUgJiYgIXN0eWxlKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKG9sZFN0eWxlID09PSBzdHlsZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIG9sZFN0eWxlID0gb2xkU3R5bGUgfHwge307XG4gICAgc3R5bGUgPSBzdHlsZSB8fCB7fTtcbiAgICB2YXIgb2xkSGFzRGVsID0gJ2RlbGF5ZWQnIGluIG9sZFN0eWxlO1xuICAgIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgICAgICBpZiAoIXN0eWxlW25hbWVdKSB7XG4gICAgICAgICAgICBpZiAobmFtZVswXSA9PT0gJy0nICYmIG5hbWVbMV0gPT09ICctJykge1xuICAgICAgICAgICAgICAgIGVsbS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsbS5zdHlsZVtuYW1lXSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICBjdXIgPSBzdHlsZVtuYW1lXTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdkZWxheWVkJyAmJiBzdHlsZS5kZWxheWVkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lMiBpbiBzdHlsZS5kZWxheWVkKSB7XG4gICAgICAgICAgICAgICAgY3VyID0gc3R5bGUuZGVsYXllZFtuYW1lMl07XG4gICAgICAgICAgICAgICAgaWYgKCFvbGRIYXNEZWwgfHwgY3VyICE9PSBvbGRTdHlsZS5kZWxheWVkW25hbWUyXSkge1xuICAgICAgICAgICAgICAgICAgICBzZXROZXh0RnJhbWUoZWxtLnN0eWxlLCBuYW1lMiwgY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSAhPT0gJ3JlbW92ZScgJiYgY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgICAgICAgaWYgKG5hbWVbMF0gPT09ICctJyAmJiBuYW1lWzFdID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgY3VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsbS5zdHlsZVtuYW1lXSA9IGN1cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGx5RGVzdHJveVN0eWxlKHZub2RlKSB7XG4gICAgdmFyIHN0eWxlLCBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIHMgPSB2bm9kZS5kYXRhLnN0eWxlO1xuICAgIGlmICghcyB8fCAhKHN0eWxlID0gcy5kZXN0cm95KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGZvciAobmFtZSBpbiBzdHlsZSkge1xuICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSBzdHlsZVtuYW1lXTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcHBseVJlbW92ZVN0eWxlKHZub2RlLCBybSkge1xuICAgIHZhciBzID0gdm5vZGUuZGF0YS5zdHlsZTtcbiAgICBpZiAoIXMgfHwgIXMucmVtb3ZlKSB7XG4gICAgICAgIHJtKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFyZWZsb3dGb3JjZWQpIHtcbiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KS50cmFuc2Zvcm07XG4gICAgICAgIHJlZmxvd0ZvcmNlZCA9IHRydWU7XG4gICAgfVxuICAgIHZhciBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIGkgPSAwLCBjb21wU3R5bGUsIHN0eWxlID0gcy5yZW1vdmUsIGFtb3VudCA9IDAsIGFwcGxpZWQgPSBbXTtcbiAgICBmb3IgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgYXBwbGllZC5wdXNoKG5hbWUpO1xuICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSBzdHlsZVtuYW1lXTtcbiAgICB9XG4gICAgY29tcFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbG0pO1xuICAgIHZhciBwcm9wcyA9IGNvbXBTdHlsZVsndHJhbnNpdGlvbi1wcm9wZXJ0eSddLnNwbGl0KCcsICcpO1xuICAgIGZvciAoOyBpIDwgcHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGFwcGxpZWQuaW5kZXhPZihwcm9wc1tpXSkgIT09IC0xKVxuICAgICAgICAgICAgYW1vdW50Kys7XG4gICAgfVxuICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmIChldi50YXJnZXQgPT09IGVsbSlcbiAgICAgICAgICAgIC0tYW1vdW50O1xuICAgICAgICBpZiAoYW1vdW50ID09PSAwKVxuICAgICAgICAgICAgcm0oKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZvcmNlUmVmbG93KCkge1xuICAgIHJlZmxvd0ZvcmNlZCA9IGZhbHNlO1xufVxuZXhwb3J0cy5zdHlsZU1vZHVsZSA9IHtcbiAgICBwcmU6IGZvcmNlUmVmbG93LFxuICAgIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gICAgdXBkYXRlOiB1cGRhdGVTdHlsZSxcbiAgICBkZXN0cm95OiBhcHBseURlc3Ryb3lTdHlsZSxcbiAgICByZW1vdmU6IGFwcGx5UmVtb3ZlU3R5bGVcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlTW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ0FQU19SRUdFWCA9IC9bQS1aXS9nO1xuZnVuY3Rpb24gdXBkYXRlRGF0YXNldChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtLCBvbGREYXRhc2V0ID0gb2xkVm5vZGUuZGF0YS5kYXRhc2V0LCBkYXRhc2V0ID0gdm5vZGUuZGF0YS5kYXRhc2V0LCBrZXk7XG4gICAgaWYgKCFvbGREYXRhc2V0ICYmICFkYXRhc2V0KVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKG9sZERhdGFzZXQgPT09IGRhdGFzZXQpXG4gICAgICAgIHJldHVybjtcbiAgICBvbGREYXRhc2V0ID0gb2xkRGF0YXNldCB8fCB7fTtcbiAgICBkYXRhc2V0ID0gZGF0YXNldCB8fCB7fTtcbiAgICB2YXIgZCA9IGVsbS5kYXRhc2V0O1xuICAgIGZvciAoa2V5IGluIG9sZERhdGFzZXQpIHtcbiAgICAgICAgaWYgKCFkYXRhc2V0W2tleV0pIHtcbiAgICAgICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS0nICsga2V5LnJlcGxhY2UoQ0FQU19SRUdFWCwgJy0kJicpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoa2V5IGluIGRhdGFzZXQpIHtcbiAgICAgICAgaWYgKG9sZERhdGFzZXRba2V5XSAhPT0gZGF0YXNldFtrZXldKSB7XG4gICAgICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgICAgIGRba2V5XSA9IGRhdGFzZXRba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGtleS5yZXBsYWNlKENBUFNfUkVHRVgsICctJCYnKS50b0xvd2VyQ2FzZSgpLCBkYXRhc2V0W2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kYXRhc2V0TW9kdWxlID0geyBjcmVhdGU6IHVwZGF0ZURhdGFzZXQsIHVwZGF0ZTogdXBkYXRlRGF0YXNldCB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5kYXRhc2V0TW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YXNldC5qcy5tYXAiLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuMlxuKGZ1bmN0aW9uKCkge1xuICB2YXIgZ2V0TmFub1NlY29uZHMsIGhydGltZSwgbG9hZFRpbWUsIG1vZHVsZUxvYWRUaW1lLCBub2RlTG9hZFRpbWUsIHVwVGltZTtcblxuICBpZiAoKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwZXJmb3JtYW5jZSAhPT0gbnVsbCkgJiYgcGVyZm9ybWFuY2Uubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKCh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcm9jZXNzICE9PSBudWxsKSAmJiBwcm9jZXNzLmhydGltZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKGdldE5hbm9TZWNvbmRzKCkgLSBub2RlTG9hZFRpbWUpIC8gMWU2O1xuICAgIH07XG4gICAgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWU7XG4gICAgZ2V0TmFub1NlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBocjtcbiAgICAgIGhyID0gaHJ0aW1lKCk7XG4gICAgICByZXR1cm4gaHJbMF0gKiAxZTkgKyBoclsxXTtcbiAgICB9O1xuICAgIG1vZHVsZUxvYWRUaW1lID0gZ2V0TmFub1NlY29uZHMoKTtcbiAgICB1cFRpbWUgPSBwcm9jZXNzLnVwdGltZSgpICogMWU5O1xuICAgIG5vZGVMb2FkVGltZSA9IG1vZHVsZUxvYWRUaW1lIC0gdXBUaW1lO1xuICB9IGVsc2UgaWYgKERhdGUubm93KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IERhdGUubm93KCk7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxvYWRUaW1lO1xuICAgIH07XG4gICAgbG9hZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZXJmb3JtYW5jZS1ub3cuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB2bm9kZV8xID0gcmVxdWlyZShcIi4vdm5vZGVcIik7XG52YXIgaHRtbGRvbWFwaV8xID0gcmVxdWlyZShcIi4vaHRtbGRvbWFwaVwiKTtcbmZ1bmN0aW9uIHRvVk5vZGUobm9kZSwgZG9tQXBpKSB7XG4gICAgdmFyIGFwaSA9IGRvbUFwaSAhPT0gdW5kZWZpbmVkID8gZG9tQXBpIDogaHRtbGRvbWFwaV8xLmRlZmF1bHQ7XG4gICAgdmFyIHRleHQ7XG4gICAgaWYgKGFwaS5pc0VsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgdmFyIGlkID0gbm9kZS5pZCA/ICcjJyArIG5vZGUuaWQgOiAnJztcbiAgICAgICAgdmFyIGNuID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgICAgIHZhciBjID0gY24gPyAnLicgKyBjbi5zcGxpdCgnICcpLmpvaW4oJy4nKSA6ICcnO1xuICAgICAgICB2YXIgc2VsID0gYXBpLnRhZ05hbWUobm9kZSkudG9Mb3dlckNhc2UoKSArIGlkICsgYztcbiAgICAgICAgdmFyIGF0dHJzID0ge307XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgICB2YXIgbmFtZV8xO1xuICAgICAgICB2YXIgaSA9IHZvaWQgMCwgbiA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGVsbUF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgZWxtQ2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXM7XG4gICAgICAgIGZvciAoaSA9IDAsIG4gPSBlbG1BdHRycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIG5hbWVfMSA9IGVsbUF0dHJzW2ldLm5vZGVOYW1lO1xuICAgICAgICAgICAgaWYgKG5hbWVfMSAhPT0gJ2lkJyAmJiBuYW1lXzEgIT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1tuYW1lXzFdID0gZWxtQXR0cnNbaV0ubm9kZVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDAsIG4gPSBlbG1DaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godG9WTm9kZShlbG1DaGlsZHJlbltpXSwgZG9tQXBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZub2RlXzEuZGVmYXVsdChzZWwsIHsgYXR0cnM6IGF0dHJzIH0sIGNoaWxkcmVuLCB1bmRlZmluZWQsIG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhcGkuaXNUZXh0KG5vZGUpKSB7XG4gICAgICAgIHRleHQgPSBhcGkuZ2V0VGV4dENvbnRlbnQobm9kZSk7XG4gICAgICAgIHJldHVybiB2bm9kZV8xLmRlZmF1bHQodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGV4dCwgbm9kZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFwaS5pc0NvbW1lbnQobm9kZSkpIHtcbiAgICAgICAgdGV4dCA9IGFwaS5nZXRUZXh0Q29udGVudChub2RlKTtcbiAgICAgICAgcmV0dXJuIHZub2RlXzEuZGVmYXVsdCgnIScsIHt9LCBbXSwgdGV4dCwgbm9kZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdm5vZGVfMS5kZWZhdWx0KCcnLCB7fSwgW10sIHVuZGVmaW5lZCwgbm9kZSk7XG4gICAgfVxufVxuZXhwb3J0cy50b1ZOb2RlID0gdG9WTm9kZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvVk5vZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3Zub2RlLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuLy8gY29tcGFyZSBhbmQgaXNCdWZmZXIgdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iLzY4MGU5ZTVlNDg4ZjIyYWFjMjc1OTlhNTdkYzg0NGE2MzE1OTI4ZGQvaW5kZXguanNcbi8vIG9yaWdpbmFsIG5vdGljZTpcblxuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldO1xuICAgICAgeSA9IGJbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKHkgPCB4KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBpc0J1ZmZlcihiKSB7XG4gIGlmIChnbG9iYWwuQnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIoYik7XG4gIH1cbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcik7XG59XG5cbi8vIGJhc2VkIG9uIG5vZGUgYXNzZXJ0LCBvcmlnaW5hbCBub3RpY2U6XG5cbi8vIGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1VuaXRfVGVzdGluZy8xLjBcbi8vXG4vLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghXG4vL1xuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7XG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbygpIHt9Lm5hbWUgPT09ICdmb28nO1xufSgpKTtcbmZ1bmN0aW9uIHBUb1N0cmluZyAob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcbn1cbmZ1bmN0aW9uIGlzVmlldyhhcnJidWYpIHtcbiAgaWYgKGlzQnVmZmVyKGFycmJ1ZikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KGFycmJ1Zik7XG4gIH1cbiAgaWYgKCFhcnJidWYpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGFycmJ1ZiBpbnN0YW5jZW9mIERhdGFWaWV3KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGFycmJ1Zi5idWZmZXIgJiYgYXJyYnVmLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuLy8gMS4gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXG5cbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xuXG4vLyAyLiBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBhc3NlcnQuXG4vLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQgfSlcblxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW15cXChcXHNdKilcXHMqLztcbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvYmxvYi9hZGVlZWVjOGJmY2M2MDY4YjE4N2Q3ZDlmYjNkNWJiMWQzYTMwODk5L2ltcGxlbWVudGF0aW9uLmpzXG5mdW5jdGlvbiBnZXROYW1lKGZ1bmMpIHtcbiAgaWYgKCF1dGlsLmlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xuICAgIHJldHVybiBmdW5jLm5hbWU7XG4gIH1cbiAgdmFyIHN0ciA9IGZ1bmMudG9TdHJpbmcoKTtcbiAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdO1xufVxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsO1xuICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgdGhpcy5vcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3I7XG4gIGlmIChvcHRpb25zLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG4gIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vbiB2OCBicm93c2VycyBzbyB3ZSBjYW4gaGF2ZSBhIHN0YWNrdHJhY2VcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKGVyci5zdGFjaykge1xuICAgICAgdmFyIG91dCA9IGVyci5zdGFjaztcblxuICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzXG4gICAgICB2YXIgZm5fbmFtZSA9IGdldE5hbWUoc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXFxuJyArIGZuX25hbWUpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZVxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0cmlwIG91dCBldmVyeXRoaW5nIGJlZm9yZSBpdCAoYW5kIGl0cyBsaW5lKVxuICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xcbicsIGlkeCArIDEpO1xuICAgICAgICBvdXQgPSBvdXQuc3Vic3RyaW5nKG5leHRfbGluZSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrID0gb3V0O1xuICAgIH1cbiAgfVxufTtcblxuLy8gYXNzZXJ0LkFzc2VydGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3JcbnV0aWwuaW5oZXJpdHMoYXNzZXJ0LkFzc2VydGlvbkVycm9yLCBFcnJvcik7XG5cbmZ1bmN0aW9uIHRydW5jYXRlKHMsIG4pIHtcbiAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuZnVuY3Rpb24gaW5zcGVjdChzb21ldGhpbmcpIHtcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyB8fCAhdXRpbC5pc0Z1bmN0aW9uKHNvbWV0aGluZykpIHtcbiAgICByZXR1cm4gdXRpbC5pbnNwZWN0KHNvbWV0aGluZyk7XG4gIH1cbiAgdmFyIHJhd25hbWUgPSBnZXROYW1lKHNvbWV0aGluZyk7XG4gIHZhciBuYW1lID0gcmF3bmFtZSA/ICc6ICcgKyByYXduYW1lIDogJyc7XG4gIHJldHVybiAnW0Z1bmN0aW9uJyArICBuYW1lICsgJ10nO1xufVxuZnVuY3Rpb24gZ2V0TWVzc2FnZShzZWxmKSB7XG4gIHJldHVybiB0cnVuY2F0ZShpbnNwZWN0KHNlbGYuYWN0dWFsKSwgMTI4KSArICcgJyArXG4gICAgICAgICBzZWxmLm9wZXJhdG9yICsgJyAnICtcbiAgICAgICAgIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5leHBlY3RlZCksIDEyOCk7XG59XG5cbi8vIEF0IHByZXNlbnQgb25seSB0aGUgdGhyZWUga2V5cyBtZW50aW9uZWQgYWJvdmUgYXJlIHVzZWQgYW5kXG4vLyB1bmRlcnN0b29kIGJ5IHRoZSBzcGVjLiBJbXBsZW1lbnRhdGlvbnMgb3Igc3ViIG1vZHVsZXMgY2FuIHBhc3Ncbi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmVcbi8vIGlnbm9yZWQuXG5cbi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXG4vLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuLy8gbWF5IGJlIHVuZGVmaW5lZCBpZiBub3QgcHJvdmlkZWQuICBBbGwgYXNzZXJ0aW9uIG1ldGhvZHMgcHJvdmlkZVxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3Jcbi8vIGRpc3BsYXkgcHVycG9zZXMuXG5cbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikge1xuICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGFjdHVhbDogYWN0dWFsLFxuICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb25cbiAgfSk7XG59XG5cbi8vIEVYVEVOU0lPTiEgYWxsb3dzIGZvciB3ZWxsIGJlaGF2ZWQgZXJyb3JzIGRlZmluZWQgZWxzZXdoZXJlLlxuYXNzZXJ0LmZhaWwgPSBmYWlsO1xuXG4vLyA0LiBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIWd1YXJkLlxuLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7XG4vLyBUaGlzIHN0YXRlbWVudCBpcyBlcXVpdmFsZW50IHRvIGFzc2VydC5lcXVhbCh0cnVlLCAhIWd1YXJkLFxuLy8gbWVzc2FnZV9vcHQpOy4gVG8gdGVzdCBzdHJpY3RseSBmb3IgdGhlIHZhbHVlIHRydWUsIHVzZVxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LlxuXG5mdW5jdGlvbiBvayh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spO1xufVxuYXNzZXJ0Lm9rID0gb2s7XG5cbi8vIDUuIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aFxuLy8gPT0uXG4vLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTtcbn07XG5cbi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWxcbi8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT0nLCBhc3NlcnQubm90RXF1YWwpO1xuICB9XG59O1xuXG4vLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cbi8vIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBFcXVhbCcsIGFzc2VydC5kZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcFN0cmljdEVxdWFsJywgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcykge1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICYmIGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBjb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQpID09PSAwO1xuXG4gIC8vIDcuMi4gSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgRGF0ZSBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgRGF0ZSBvYmplY3QgdGhhdCByZWZlcnMgdG8gdGhlIHNhbWUgdGltZS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzRGF0ZShhY3R1YWwpICYmIHV0aWwuaXNEYXRlKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXNcbiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgUmVnRXhwIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmRcbiAgLy8gcHJvcGVydGllcyAoYGdsb2JhbGAsIGBtdWx0aWxpbmVgLCBgbGFzdEluZGV4YCwgYGlnbm9yZUNhc2VgKS5cbiAgfSBlbHNlIGlmICh1dGlsLmlzUmVnRXhwKGFjdHVhbCkgJiYgdXRpbC5pc1JlZ0V4cChleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmXG4gICAgICAgICAgIGFjdHVhbC5nbG9iYWwgPT09IGV4cGVjdGVkLmdsb2JhbCAmJlxuICAgICAgICAgICBhY3R1YWwubXVsdGlsaW5lID09PSBleHBlY3RlZC5tdWx0aWxpbmUgJiZcbiAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmXG4gICAgICAgICAgIGFjdHVhbC5pZ25vcmVDYXNlID09PSBleHBlY3RlZC5pZ25vcmVDYXNlO1xuXG4gIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgfSBlbHNlIGlmICgoYWN0dWFsID09PSBudWxsIHx8IHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnKSAmJlxuICAgICAgICAgICAgIChleHBlY3RlZCA9PT0gbnVsbCB8fCB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiBzdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIElmIGJvdGggdmFsdWVzIGFyZSBpbnN0YW5jZXMgb2YgdHlwZWQgYXJyYXlzLCB3cmFwIHRoZWlyIHVuZGVybHlpbmdcbiAgLy8gQXJyYXlCdWZmZXJzIGluIGEgQnVmZmVyIGVhY2ggdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2VcbiAgLy8gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhlIGFycmF5cyB0byBoYXZlIHRoZSBzYW1lIHR5cGUgYXMgY2hlY2tlZCBieVxuICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIChha2EgcFRvU3RyaW5nKS4gTmV2ZXIgcGVyZm9ybSBiaW5hcnlcbiAgLy8gY29tcGFyaXNvbnMgZm9yIEZsb2F0KkFycmF5cywgdGhvdWdoLCBzaW5jZSBlLmcuICswID09PSAtMCBidXQgdGhlaXJcbiAgLy8gYml0IHBhdHRlcm5zIGFyZSBub3QgaWRlbnRpY2FsLlxuICB9IGVsc2UgaWYgKGlzVmlldyhhY3R1YWwpICYmIGlzVmlldyhleHBlY3RlZCkgJiZcbiAgICAgICAgICAgICBwVG9TdHJpbmcoYWN0dWFsKSA9PT0gcFRvU3RyaW5nKGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgICEoYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG4gICAgICAgICAgICAgICBhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUobmV3IFVpbnQ4QXJyYXkoYWN0dWFsLmJ1ZmZlciksXG4gICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZXhwZWN0ZWQuYnVmZmVyKSkgPT09IDA7XG5cbiAgLy8gNy41IEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIGlmIChpc0J1ZmZlcihhY3R1YWwpICE9PSBpc0J1ZmZlcihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbWVtb3MgPSBtZW1vcyB8fCB7YWN0dWFsOiBbXSwgZXhwZWN0ZWQ6IFtdfTtcblxuICAgIHZhciBhY3R1YWxJbmRleCA9IG1lbW9zLmFjdHVhbC5pbmRleE9mKGFjdHVhbCk7XG4gICAgaWYgKGFjdHVhbEluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGFjdHVhbEluZGV4ID09PSBtZW1vcy5leHBlY3RlZC5pbmRleE9mKGV4cGVjdGVkKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vcy5hY3R1YWwucHVzaChhY3R1YWwpO1xuICAgIG1lbW9zLmV4cGVjdGVkLnB1c2goZXhwZWN0ZWQpO1xuXG4gICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIHN0cmljdCwgbWVtb3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpIHtcbiAgaWYgKGEgPT09IG51bGwgfHwgYSA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lXG4gIGlmICh1dGlsLmlzUHJpbWl0aXZlKGEpIHx8IHV0aWwuaXNQcmltaXRpdmUoYikpXG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIGlmIChzdHJpY3QgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGEpICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB2YXIgYUlzQXJncyA9IGlzQXJndW1lbnRzKGEpO1xuICB2YXIgYklzQXJncyA9IGlzQXJndW1lbnRzKGIpO1xuICBpZiAoKGFJc0FyZ3MgJiYgIWJJc0FyZ3MpIHx8ICghYUlzQXJncyAmJiBiSXNBcmdzKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChhSXNBcmdzKSB7XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gX2RlZXBFcXVhbChhLCBiLCBzdHJpY3QpO1xuICB9XG4gIHZhciBrYSA9IG9iamVjdEtleXMoYSk7XG4gIHZhciBrYiA9IG9iamVjdEtleXMoYik7XG4gIHZhciBrZXksIGk7XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcbiAgLy8gaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT09IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9PSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuLy8gYXNzZXJ0Lm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBmYWxzZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbCA9IG5vdERlZXBTdHJpY3RFcXVhbDtcbmZ1bmN0aW9uIG5vdERlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHRydWUpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcFN0cmljdEVxdWFsJywgbm90RGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufVxuXG5cbi8vIDkuIFRoZSBzdHJpY3QgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHN0cmljdCBlcXVhbGl0eSwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT09JywgYXNzZXJ0LnN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuLy8gMTAuIFRoZSBzdHJpY3Qgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igc3RyaWN0IGluZXF1YWxpdHksIGFzXG4vLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPT0nLCBhc3NlcnQubm90U3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XG4gIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZXhwZWN0ZWQpID09ICdbb2JqZWN0IFJlZ0V4cF0nKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUuICBUaGUgaW5zdGFuY2VvZiBjaGVjayBkb2Vzbid0IHdvcmsgZm9yIGFycm93IGZ1bmN0aW9ucy5cbiAgfVxuXG4gIGlmIChFcnJvci5pc1Byb3RvdHlwZU9mKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xufVxuXG5mdW5jdGlvbiBfdHJ5QmxvY2soYmxvY2spIHtcbiAgdmFyIGVycm9yO1xuICB0cnkge1xuICAgIGJsb2NrKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH1cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBfdGhyb3dzKHNob3VsZFRocm93LCBibG9jaywgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGFjdHVhbDtcblxuICBpZiAodHlwZW9mIGJsb2NrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJibG9ja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7XG4gICAgZXhwZWN0ZWQgPSBudWxsO1xuICB9XG5cbiAgYWN0dWFsID0gX3RyeUJsb2NrKGJsb2NrKTtcblxuICBtZXNzYWdlID0gKGV4cGVjdGVkICYmIGV4cGVjdGVkLm5hbWUgPyAnICgnICsgZXhwZWN0ZWQubmFtZSArICcpLicgOiAnLicpICtcbiAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7XG5cbiAgaWYgKHNob3VsZFRocm93ICYmICFhY3R1YWwpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIHZhciB1c2VyUHJvdmlkZWRNZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnO1xuICB2YXIgaXNVbndhbnRlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiB1dGlsLmlzRXJyb3IoYWN0dWFsKTtcbiAgdmFyIGlzVW5leHBlY3RlZEV4Y2VwdGlvbiA9ICFzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgIWV4cGVjdGVkO1xuXG4gIGlmICgoaXNVbndhbnRlZEV4Y2VwdGlvbiAmJlxuICAgICAgdXNlclByb3ZpZGVkTWVzc2FnZSAmJlxuICAgICAgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8XG4gICAgICBpc1VuZXhwZWN0ZWRFeGNlcHRpb24pIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdHb3QgdW53YW50ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgaWYgKChzaG91bGRUaHJvdyAmJiBhY3R1YWwgJiYgZXhwZWN0ZWQgJiZcbiAgICAgICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHwgKCFzaG91bGRUaHJvdyAmJiBhY3R1YWwpKSB7XG4gICAgdGhyb3cgYWN0dWFsO1xuICB9XG59XG5cbi8vIDExLiBFeHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvcjpcbi8vIGFzc2VydC50aHJvd3MoYmxvY2ssIEVycm9yX29wdCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3ModHJ1ZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcbn07XG5cbi8vIEVYVEVOU0lPTiEgVGhpcyBpcyBhbm5veWluZyB0byB3cml0ZSBvdXRzaWRlIHRoaXMgbW9kdWxlLlxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzKGZhbHNlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikgdGhyb3cgZXJyOyB9O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgaXNBcnJheSA9IGZ1bmN0aW9uIGlzQXJyYXkoYXJyKSB7XG5cdGlmICh0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KGFycik7XG5cdH1cblxuXHRyZXR1cm4gdG9TdHIuY2FsbChhcnIpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxudmFyIGlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuXHRpZiAoIW9iaiB8fCB0b1N0ci5jYWxsKG9iaikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGhhc093bkNvbnN0cnVjdG9yID0gaGFzT3duLmNhbGwob2JqLCAnY29uc3RydWN0b3InKTtcblx0dmFyIGhhc0lzUHJvdG90eXBlT2YgPSBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAnaXNQcm90b3R5cGVPZicpO1xuXHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdGlmIChvYmouY29uc3RydWN0b3IgJiYgIWhhc093bkNvbnN0cnVjdG9yICYmICFoYXNJc1Byb3RvdHlwZU9mKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXHR2YXIga2V5O1xuXHRmb3IgKGtleSBpbiBvYmopIHsgLyoqLyB9XG5cblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn07XG5cbi8vIElmIG5hbWUgaXMgJ19fcHJvdG9fXycsIGFuZCBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgYXZhaWxhYmxlLCBkZWZpbmUgX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eSBvbiB0YXJnZXRcbnZhciBzZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIHNldFByb3BlcnR5KHRhcmdldCwgb3B0aW9ucykge1xuXHRpZiAoZGVmaW5lUHJvcGVydHkgJiYgb3B0aW9ucy5uYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGRlZmluZVByb3BlcnR5KHRhcmdldCwgb3B0aW9ucy5uYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IG9wdGlvbnMubmV3VmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHRhcmdldFtvcHRpb25zLm5hbWVdID0gb3B0aW9ucy5uZXdWYWx1ZTtcblx0fVxufTtcblxuLy8gUmV0dXJuIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIF9fcHJvdG9fXyBpZiAnX19wcm90b19fJyBpcyBub3QgYW4gb3duIHByb3BlcnR5XG52YXIgZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eShvYmosIG5hbWUpIHtcblx0aWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0aWYgKCFoYXNPd24uY2FsbChvYmosIG5hbWUpKSB7XG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xuXHRcdH0gZWxzZSBpZiAoZ09QRCkge1xuXHRcdFx0Ly8gSW4gZWFybHkgdmVyc2lvbnMgb2Ygbm9kZSwgb2JqWydfX3Byb3RvX18nXSBpcyBidWdneSB3aGVuIG9iaiBoYXNcblx0XHRcdC8vIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB3b3Jrcy5cblx0XHRcdHJldHVybiBnT1BEKG9iaiwgbmFtZSkudmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9ialtuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmU7XG5cdHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF07XG5cdHZhciBpID0gMTtcblx0dmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdHZhciBkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMV0gfHwge307XG5cdFx0Ly8gc2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdGkgPSAyO1xuXHR9XG5cdGlmICh0YXJnZXQgPT0gbnVsbCB8fCAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzW2ldO1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAob3B0aW9ucyAhPSBudWxsKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRzcmMgPSBnZXRQcm9wZXJ0eSh0YXJnZXQsIG5hbWUpO1xuXHRcdFx0XHRjb3B5ID0gZ2V0UHJvcGVydHkob3B0aW9ucywgbmFtZSk7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAodGFyZ2V0ICE9PSBjb3B5KSB7XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBpc0FycmF5KGNvcHkpKSkpIHtcblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KSB9KTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBjb3B5ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBjb3B5IH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG51bGwgIT09IG9iaiAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woJ2ZvbycpID09PSAnc3ltYm9sJztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIG9yaWdEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgb2JqID0ge307XG5cdHRyeSB7XG5cdFx0b3JpZ0RlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycywgbm8tcmVzdHJpY3RlZC1zeW50YXhcblx0XHRmb3IgKHZhciBfIGluIG9iaikgeyAvLyBqc2NzOmlnbm9yZSBkaXNhbGxvd1VudXNlZFZhcmlhYmxlc1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gb2JqLnggPT09IG9iajtcblx0fSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIElFIDguICovXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSBvcmlnRGVmaW5lUHJvcGVydHkgJiYgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCgpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCB2YWx1ZSwgcHJlZGljYXRlKSB7XG5cdGlmIChuYW1lIGluIG9iamVjdCAmJiAoIWlzRnVuY3Rpb24ocHJlZGljYXRlKSB8fCAhcHJlZGljYXRlKCkpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0b3JpZ0RlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdG9iamVjdFtuYW1lXSA9IHZhbHVlO1xuXHR9XG59O1xuXG52YXIgZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmplY3QsIG1hcCkge1xuXHR2YXIgcHJlZGljYXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDoge307XG5cdHZhciBwcm9wcyA9IGtleXMobWFwKTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRwcm9wcyA9IGNvbmNhdC5jYWxsKHByb3BzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG1hcCkpO1xuXHR9XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BzW2ldLCBtYXBbcHJvcHNbaV1dLCBwcmVkaWNhdGVzW3Byb3BzW2ldXSk7XG5cdH1cbn07XG5cbmRlZmluZVByb3BlcnRpZXMuc3VwcG9ydHNEZXNjcmlwdG9ycyA9ICEhc3VwcG9ydHNEZXNjcmlwdG9ycztcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0aWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9lczIwMTcnKTtcblxudmFyIFRocm93Q29tcGxldGlvbiA9IGZ1bmN0aW9uIFRocm93KGVycm9yKSB7XG5cdHRocm93IGVycm9yO1xufTtcblxudmFyIGxlZ2FjeUFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbihvYmosIGVudHJpZXMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0dmFyIGVudHJ5ID0gZW50cmllc1tpXTtcblx0XHRpZiAoRVMuVHlwZShlbnRyeSkgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciByZXR1cm5lZCBhIG5vbi1vYmplY3Q7IGVudHJ5IGV4cGVjdGVkJyk7XG5cdFx0fVxuXG5cdFx0dmFyIGtleSA9IEVTLkdldChlbnRyeSwgJzAnKTtcblx0XHR2YXIgdmFsdWUgPSBFUy5HZXQoZW50cnksICcxJyk7XG5cdFx0dmFyIHByb3BlcnR5S2V5ID0gRVMuVG9Qcm9wZXJ0eUtleShrZXkpO1xuXHRcdEVTLkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cob2JqLCBwcm9wZXJ0eUtleSwgdmFsdWUpO1xuXHR9XG59O1xuXG4vKiBnbG9iYWwgU3ltYm9sICovXG5cbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcblx0RVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZShpdGVyYWJsZSk7XG5cblx0dmFyIG9iaiA9IHt9O1xuXG5cdC8vIHRoaXMgcGFydCBpc24ndCBpbiB0aGUgc3BlYywgaXQncyBmb3IgYSByZWFzb25hYmxlIGZhbGxiYWNrIGZvciBwcmUtRVM2IGVudmlyb25tZW50c1xuXHRpZiAoIWhhc1N5bWJvbHMpIHtcblx0XHRpZiAoIUVTLklzQXJyYXkoaXRlcmFibGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGVudmlyb25tZW50IGxhY2tzIG5hdGl2ZSBTeW1ib2xzLCBhbmQgY2FuIG5vdCBzdXBwb3J0IG5vbi1BcnJheSBpdGVyYWJsZXMnKTtcblx0XHR9XG5cdFx0bGVnYWN5QXNzaWduKG9iaiwgaXRlcmFibGUpO1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblxuXHQvKlxuXHRyZXR1cm4gRVMuQWRkRW50cmllc0Zyb21JdGVyYWJsZShvYmosIGl0ZXJhYmxlLCBFUy5DcmVhdGVCdWlsdGluRnVuY3Rpb24oJ0NyZWF0ZURhdGFQcm9wZXJ0eU9uT2JqZWN0JykpO1xuXHRmdW5jdGlvbiBhZGRlcihrZXksIHZhbHVlKSB7XG5cdFx0dmFyIE8gPSB0aGlzO1xuXHRcdHZhciBwcm9wZXJ0eUtleSA9IEVTLlRvUHJvcGVydHlLZXkoa2V5KTtcblx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KE8sIHByb3BlcnR5S2V5LCB2YWx1ZSk7XG5cdH1cblx0Ki9cblxuXHR2YXIgaXRlciA9IEVTLkdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0d2hpbGUgKHRydWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHR2YXIgbmV4dCA9IEVTLkl0ZXJhdG9yU3RlcChpdGVyKTtcblx0XHRpZiAobmV4dCA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXG5cdFx0dmFyIG5leHRJdGVtID0gRVMuSXRlcmF0b3JWYWx1ZShuZXh0KTtcblx0XHRpZiAoRVMuVHlwZShuZXh0SXRlbSkgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR2YXIgZXJyb3IgPSBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciByZXR1cm5lZCBhIG5vbi1vYmplY3Q7IGVudHJ5IGV4cGVjdGVkJyk7XG5cdFx0XHRyZXR1cm4gRVMuSXRlcmF0b3JDbG9zZShpdGVyLCBUaHJvd0NvbXBsZXRpb24oZXJyb3IpKTtcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIGtleSA9IEVTLkdldChuZXh0SXRlbSwgJzAnKTtcblx0XHRcdHZhciB2YWx1ZSA9IEVTLkdldChuZXh0SXRlbSwgJzEnKTtcblx0XHRcdHZhciBwcm9wZXJ0eUtleSA9IEVTLlRvUHJvcGVydHlLZXkoa2V5KTtcblx0XHRcdEVTLkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cob2JqLCBwcm9wZXJ0eUtleSwgdmFsdWUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBFUy5JdGVyYXRvckNsb3NlKGl0ZXIsIFRocm93Q29tcGxldGlvbihlKSk7XG5cdFx0fVxuXHR9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbHNcblx0U2V0LFxuXHRNYXAsXG5cdFdlYWtTZXQsXG5cdFdlYWtNYXAsXG5cblx0UHJvbWlzZSxcblxuXHRTeW1ib2wsXG5cdFByb3h5LFxuXG5cdEF0b21pY3MsXG5cdFNoYXJlZEFycmF5QnVmZmVyLFxuXG5cdEFycmF5QnVmZmVyLFxuXHREYXRhVmlldyxcblx0VWludDhBcnJheSxcblx0RmxvYXQzMkFycmF5LFxuXHRGbG9hdDY0QXJyYXksXG5cdEludDhBcnJheSxcblx0SW50MTZBcnJheSxcblx0SW50MzJBcnJheSxcblx0VWludDhDbGFtcGVkQXJyYXksXG5cdFVpbnQxNkFycmF5LFxuXHRVaW50MzJBcnJheSxcbiovXG5cbnZhciB1bmRlZmluZWQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcblxudmFyIFRocm93VHlwZUVycm9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvclxuXHQ/IChmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJ2NhbGxlZScpLmdldDsgfSgpKVxuXHQ6IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyB9O1xuXG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCc7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxudmFyIGdlbmVyYXRvcjsgLy8gPSBmdW5jdGlvbiAqICgpIHt9O1xudmFyIGdlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yID8gZ2V0UHJvdG8oZ2VuZXJhdG9yKSA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0ZuOyAvLyBhc3luYyBmdW5jdGlvbigpIHt9O1xudmFyIGFzeW5jRnVuY3Rpb24gPSBhc3luY0ZuID8gYXN5bmNGbi5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0dlbjsgLy8gYXN5bmMgZnVuY3Rpb24gKiAoKSB7fTtcbnZhciBhc3luY0dlbkZ1bmN0aW9uID0gYXN5bmNHZW4gPyBnZXRQcm90byhhc3luY0dlbikgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNHZW5JdGVyYXRvciA9IGFzeW5jR2VuID8gYXN5bmNHZW4oKSA6IHVuZGVmaW5lZDtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBnZXRQcm90byhVaW50OEFycmF5KTtcblxudmFyIElOVFJJTlNJQ1MgPSB7XG5cdCckICVBcnJheSUnOiBBcnJheSxcblx0JyQgJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyQgJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlci5wcm90b3R5cGUsXG5cdCckICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJCAlQXJyYXlQcm90b3R5cGUlJzogQXJyYXkucHJvdG90eXBlLFxuXHQnJCAlQXJyYXlQcm90b19lbnRyaWVzJSc6IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzLFxuXHQnJCAlQXJyYXlQcm90b19mb3JFYWNoJSc6IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLFxuXHQnJCAlQXJyYXlQcm90b19rZXlzJSc6IEFycmF5LnByb3RvdHlwZS5rZXlzLFxuXHQnJCAlQXJyYXlQcm90b192YWx1ZXMlJzogQXJyYXkucHJvdG90eXBlLnZhbHVlcyxcblx0JyQgJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCckICVBc3luY0Z1bmN0aW9uJSc6IGFzeW5jRnVuY3Rpb24sXG5cdCckICVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IGFzeW5jRnVuY3Rpb24gPyBhc3luY0Z1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyQgJUFzeW5jR2VuZXJhdG9yJSc6IGFzeW5jR2VuID8gZ2V0UHJvdG8oYXN5bmNHZW5JdGVyYXRvcikgOiB1bmRlZmluZWQsXG5cdCckICVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJSc6IGFzeW5jR2VuRnVuY3Rpb24sXG5cdCckICVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBhc3luY0dlbkZ1bmN0aW9uID8gYXN5bmNHZW5GdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCckICVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IGFzeW5jR2VuSXRlcmF0b3IgJiYgaGFzU3ltYm9scyAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvciA/IGFzeW5jR2VuSXRlcmF0b3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkgOiB1bmRlZmluZWQsXG5cdCckICVBdG9taWNzJSc6IHR5cGVvZiBBdG9taWNzID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEF0b21pY3MsXG5cdCckICVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCckICVCb29sZWFuUHJvdG90eXBlJSc6IEJvb2xlYW4ucHJvdG90eXBlLFxuXHQnJCAlRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJCAlRGF0YVZpZXdQcm90b3R5cGUlJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LnByb3RvdHlwZSxcblx0JyQgJURhdGUlJzogRGF0ZSxcblx0JyQgJURhdGVQcm90b3R5cGUlJzogRGF0ZS5wcm90b3R5cGUsXG5cdCckICVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJCAlZGVjb2RlVVJJQ29tcG9uZW50JSc6IGRlY29kZVVSSUNvbXBvbmVudCxcblx0JyQgJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCckICVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJCAlRXJyb3IlJzogRXJyb3IsXG5cdCckICVFcnJvclByb3RvdHlwZSUnOiBFcnJvci5wcm90b3R5cGUsXG5cdCckICVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJCAlRXZhbEVycm9yJSc6IEV2YWxFcnJvcixcblx0JyQgJUV2YWxFcnJvclByb3RvdHlwZSUnOiBFdmFsRXJyb3IucHJvdG90eXBlLFxuXHQnJCAlRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJCAlRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LnByb3RvdHlwZSxcblx0JyQgJUZsb2F0NjRBcnJheSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheSxcblx0JyQgJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheS5wcm90b3R5cGUsXG5cdCckICVGdW5jdGlvbiUnOiBGdW5jdGlvbixcblx0JyQgJUZ1bmN0aW9uUHJvdG90eXBlJSc6IEZ1bmN0aW9uLnByb3RvdHlwZSxcblx0JyQgJUdlbmVyYXRvciUnOiBnZW5lcmF0b3IgPyBnZXRQcm90byhnZW5lcmF0b3IoKSkgOiB1bmRlZmluZWQsXG5cdCckICVHZW5lcmF0b3JGdW5jdGlvbiUnOiBnZW5lcmF0b3JGdW5jdGlvbixcblx0JyQgJUdlbmVyYXRvclByb3RvdHlwZSUnOiBnZW5lcmF0b3JGdW5jdGlvbiA/IGdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyQgJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyQgJUludDhBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheS5wcm90b3R5cGUsXG5cdCckICVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCckICVJbnQxNkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheS5wcm90b3R5cGUsXG5cdCckICVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCckICVJbnQzMkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJCAlaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCckICVpc05hTiUnOiBpc05hTixcblx0JyQgJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyQgJUpTT04lJzogSlNPTixcblx0JyQgJUpTT05QYXJzZSUnOiBKU09OLnBhcnNlLFxuXHQnJCAlTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJCAlTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgTWFwKClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyQgJU1hcFByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcC5wcm90b3R5cGUsXG5cdCckICVNYXRoJSc6IE1hdGgsXG5cdCckICVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJCAlTnVtYmVyUHJvdG90eXBlJSc6IE51bWJlci5wcm90b3R5cGUsXG5cdCckICVPYmplY3QlJzogT2JqZWN0LFxuXHQnJCAlT2JqZWN0UHJvdG90eXBlJSc6IE9iamVjdC5wcm90b3R5cGUsXG5cdCckICVPYmpQcm90b190b1N0cmluZyUnOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHQnJCAlT2JqUHJvdG9fdmFsdWVPZiUnOiBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YsXG5cdCckICVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCckICVwYXJzZUludCUnOiBwYXJzZUludCxcblx0JyQgJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyQgJVByb21pc2VQcm90b3R5cGUlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5wcm90b3R5cGUsXG5cdCckICVQcm9taXNlUHJvdG9fdGhlbiUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnByb3RvdHlwZS50aGVuLFxuXHQnJCAlUHJvbWlzZV9hbGwlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5hbGwsXG5cdCckICVQcm9taXNlX3JlamVjdCUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnJlamVjdCxcblx0JyQgJVByb21pc2VfcmVzb2x2ZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnJlc29sdmUsXG5cdCckICVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCckICVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCckICVSYW5nZUVycm9yUHJvdG90eXBlJSc6IFJhbmdlRXJyb3IucHJvdG90eXBlLFxuXHQnJCAlUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCckICVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBSZWZlcmVuY2VFcnJvci5wcm90b3R5cGUsXG5cdCckICVSZWZsZWN0JSc6IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFJlZmxlY3QsXG5cdCckICVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJCAlUmVnRXhwUHJvdG90eXBlJSc6IFJlZ0V4cC5wcm90b3R5cGUsXG5cdCckICVTZXQlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQsXG5cdCckICVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJCAlU2V0UHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LnByb3RvdHlwZSxcblx0JyQgJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyQgJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlci5wcm90b3R5cGUsXG5cdCckICVTdHJpbmclJzogU3RyaW5nLFxuXHQnJCAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCckICVTdHJpbmdQcm90b3R5cGUlJzogU3RyaW5nLnByb3RvdHlwZSxcblx0JyQgJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJCAlU3ltYm9sUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJCAlU3ludGF4RXJyb3IlJzogU3ludGF4RXJyb3IsXG5cdCckICVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBTeW50YXhFcnJvci5wcm90b3R5cGUsXG5cdCckICVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyQgJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyQgJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogVHlwZWRBcnJheSA/IFR5cGVkQXJyYXkucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJCAlVHlwZUVycm9yJSc6IFR5cGVFcnJvcixcblx0JyQgJVR5cGVFcnJvclByb3RvdHlwZSUnOiBUeXBlRXJyb3IucHJvdG90eXBlLFxuXHQnJCAlVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJCAlVWludDhBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LnByb3RvdHlwZSxcblx0JyQgJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyQgJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheS5wcm90b3R5cGUsXG5cdCckICVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCckICVVaW50MTZBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXkucHJvdG90eXBlLFxuXHQnJCAlVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJCAlVWludDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LnByb3RvdHlwZSxcblx0JyQgJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJCAlVVJJRXJyb3JQcm90b3R5cGUlJzogVVJJRXJyb3IucHJvdG90eXBlLFxuXHQnJCAlV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJCAlV2Vha01hcFByb3RvdHlwZSUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLnByb3RvdHlwZSxcblx0JyQgJVdlYWtTZXQlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldCxcblx0JyQgJVdlYWtTZXRQcm90b3R5cGUlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldC5wcm90b3R5cGVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIGtleSA9ICckICcgKyBuYW1lO1xuXHRpZiAoIShrZXkgaW4gSU5UUklOU0lDUykpIHtcblx0XHR0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG5cdH1cblxuXHQvLyBpc3RhbmJ1bCBpZ25vcmUgaWYgLy8gaG9wZWZ1bGx5IHRoaXMgaXMgaW1wb3NzaWJsZSB0byB0ZXN0IDotKVxuXHRpZiAodHlwZW9mIElOVFJJTlNJQ1Nba2V5XSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdH1cblx0cmV0dXJuIElOVFJJTlNJQ1Nba2V5XTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBpc05hTihhKSB7XG5cdHJldHVybiBhICE9PSBhO1xufTtcbiIsInZhciAkaXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgIT09IGE7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB0eXBlb2YgeCA9PT0gJ251bWJlcicgJiYgISRpc05hTih4KSAmJiB4ICE9PSBJbmZpbml0eSAmJiB4ICE9PSAtSW5maW5pdHk7IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNpZ24obnVtYmVyKSB7XG5cdHJldHVybiBudW1iZXIgPj0gMCA/IDEgOiAtMTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1vZChudW1iZXIsIG1vZHVsbykge1xuXHR2YXIgcmVtYWluID0gbnVtYmVyICUgbW9kdWxvO1xuXHRyZXR1cm4gTWF0aC5mbG9vcihyZW1haW4gPj0gMCA/IHJlbWFpbiA6IHJlbWFpbiArIG1vZHVsbyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LmZyb21FbnRyaWVzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmZyb21FbnRyaWVzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gbWljcm90YXNrKCkge1xuICAgIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIG5vZGVfMSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgdmFyIHF1ZXVlXzEgPSBbXTtcbiAgICAgICAgdmFyIGlfMSA9IDA7XG4gICAgICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdoaWxlIChxdWV1ZV8xLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHF1ZXVlXzEuc2hpZnQoKSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5vYnNlcnZlKG5vZGVfMSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZV8xLnB1c2goZm4pO1xuICAgICAgICAgICAgbm9kZV8xLmRhdGEgPSBpXzEgPSAxIC0gaV8xO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gc2V0SW1tZWRpYXRlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2s7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBtaWNyb3Rhc2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJmdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gICAgdmFyIGdsb2JhbE9iajtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZ2xvYmFsT2JqID0gd2luZG93O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBnbG9iYWxPYmogPSBnbG9iYWw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnbG9iYWxPYmogPSB0aGlzO1xuICAgIH1cbiAgICBnbG9iYWxPYmouQ3ljbGVqcyA9IGdsb2JhbE9iai5DeWNsZWpzIHx8IHt9O1xuICAgIGdsb2JhbE9iaiA9IGdsb2JhbE9iai5DeWNsZWpzO1xuICAgIGdsb2JhbE9iai5hZGFwdFN0cmVhbSA9IGdsb2JhbE9iai5hZGFwdFN0cmVhbSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIHJldHVybiBnbG9iYWxPYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0QWRhcHQoZikge1xuICAgIGdldEdsb2JhbCgpLmFkYXB0U3RyZWFtID0gZjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGFwdChzdHJlYW0pIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsKCkuYWRhcHRTdHJlYW0oc3RyZWFtKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkYXB0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGluZGV4XzEgPSByZXF1aXJlKFwiLi4vaW5kZXhcIik7XG52YXIgQ29uY2F0UHJvZHVjZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uY2F0UHJvZHVjZXIoc3RyZWFtcykge1xuICAgICAgICB0aGlzLnN0cmVhbXMgPSBzdHJlYW1zO1xuICAgICAgICB0aGlzLnR5cGUgPSAnY29uY2F0JztcbiAgICAgICAgdGhpcy5vdXQgPSBudWxsO1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgIH1cbiAgICBDb25jYXRQcm9kdWNlci5wcm90b3R5cGUuX3N0YXJ0ID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICB0aGlzLm91dCA9IG91dDtcbiAgICAgICAgdGhpcy5zdHJlYW1zW3RoaXMuaV0uX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIENvbmNhdFByb2R1Y2VyLnByb3RvdHlwZS5fc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0cmVhbXMgPSB0aGlzLnN0cmVhbXM7XG4gICAgICAgIGlmICh0aGlzLmkgPCBzdHJlYW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RyZWFtc1t0aGlzLmldLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pID0gMDtcbiAgICAgICAgdGhpcy5vdXQgPSBudWxsO1xuICAgIH07XG4gICAgQ29uY2F0UHJvZHVjZXIucHJvdG90eXBlLl9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKCF1KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB1Ll9uKHQpO1xuICAgIH07XG4gICAgQ29uY2F0UHJvZHVjZXIucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgdSA9IHRoaXMub3V0O1xuICAgICAgICBpZiAoIXUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHUuX2UoZXJyKTtcbiAgICB9O1xuICAgIENvbmNhdFByb2R1Y2VyLnByb3RvdHlwZS5fYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHUgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKCF1KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgc3RyZWFtcyA9IHRoaXMuc3RyZWFtcztcbiAgICAgICAgc3RyZWFtc1t0aGlzLmldLl9yZW1vdmUodGhpcyk7XG4gICAgICAgIGlmICgrK3RoaXMuaSA8IHN0cmVhbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzdHJlYW1zW3RoaXMuaV0uX2FkZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHUuX2MoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENvbmNhdFByb2R1Y2VyO1xufSgpKTtcbi8qKlxuICogUHV0cyBvbmUgc3RyZWFtIGFmdGVyIHRoZSBvdGhlci4gKmNvbmNhdCogaXMgYSBmYWN0b3J5IHRoYXQgdGFrZXMgbXVsdGlwbGVcbiAqIHN0cmVhbXMgYXMgYXJndW1lbnRzLCBhbmQgc3RhcnRzIHRoZSBgbisxYC10aCBzdHJlYW0gb25seSB3aGVuIHRoZSBgbmAtdGhcbiAqIHN0cmVhbSBoYXMgY29tcGxldGVkLiBJdCBjb25jYXRlbmF0ZXMgdGhvc2Ugc3RyZWFtcyB0b2dldGhlci5cbiAqXG4gKiBNYXJibGUgZGlhZ3JhbTpcbiAqXG4gKiBgYGB0ZXh0XG4gKiAtLTEtLTItLS0zLS0tNC18XG4gKiAuLi4uLi4uLi4uLi4uLi4tLWEtYi1jLS1kLXxcbiAqICAgICAgICAgICBjb25jYXRcbiAqIC0tMS0tMi0tLTMtLS00LS0tYS1iLWMtLWQtfFxuICogYGBgXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IGNvbmNhdCBmcm9tICd4c3RyZWFtL2V4dHJhL2NvbmNhdCdcbiAqXG4gKiBjb25zdCBzdHJlYW1BID0geHMub2YoJ2EnLCAnYicsICdjJylcbiAqIGNvbnN0IHN0cmVhbUIgPSB4cy5vZigxMCwgMjAsIDMwKVxuICogY29uc3Qgc3RyZWFtQyA9IHhzLm9mKCdYJywgJ1knLCAnWicpXG4gKlxuICogY29uc3Qgb3V0cHV0U3RyZWFtID0gY29uY2F0KHN0cmVhbUEsIHN0cmVhbUIsIHN0cmVhbUMpXG4gKlxuICogb3V0cHV0U3RyZWFtLmFkZExpc3RlbmVyKHtcbiAqICAgbmV4dDogKHgpID0+IGNvbnNvbGUubG9nKHgpLFxuICogICBlcnJvcjogKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpLFxuICogICBjb21wbGV0ZTogKCkgPT4gY29uc29sZS5sb2coJ2NvbmNhdCBjb21wbGV0ZWQnKSxcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAZmFjdG9yeSB0cnVlXG4gKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtMSBBIHN0cmVhbSB0byBjb25jYXRlbmF0ZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuXG4gKiBAcGFyYW0ge1N0cmVhbX0gc3RyZWFtMiBBIHN0cmVhbSB0byBjb25jYXRlbmF0ZSB0b2dldGhlciB3aXRoIG90aGVyIHN0cmVhbXMuIFR3b1xuICogb3IgbW9yZSBzdHJlYW1zIG1heSBiZSBnaXZlbiBhcyBhcmd1bWVudHMuXG4gKiBAcmV0dXJuIHtTdHJlYW19XG4gKi9cbmZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgc3RyZWFtcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHN0cmVhbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBpbmRleF8xLlN0cmVhbShuZXcgQ29uY2F0UHJvZHVjZXIoc3RyZWFtcykpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gY29uY2F0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTI5dVkyRjBMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDJWNGRISmhMMk52Ym1OaGRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxHdERRVUVyUlR0QlFVVXZSVHRKUVV0RkxIZENRVUZ0UWl4UFFVRjVRanRSUVVGNlFpeFpRVUZQTEVkQlFWQXNUMEZCVHl4RFFVRnJRanRSUVVweVF5eFRRVUZKTEVkQlFVY3NVVUZCVVN4RFFVRkRPMUZCUTJoQ0xGRkJRVWNzUjBGQll5eEpRVUZYTEVOQlFVTTdVVUZETlVJc1RVRkJReXhIUVVGWExFTkJRVU1zUTBGQlF6dEpRVWQwUWl4RFFVRkRPMGxCUlVRc0swSkJRVTBzUjBGQlRpeFZRVUZQTEVkQlFXTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZEWml4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRGJFTXNRMEZCUXp0SlFVVkVMRGhDUVVGTExFZEJRVXc3VVVGRFJTeEpRVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRE8xRkJRemRDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTzFsQlF6TkNMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJReTlDTzFGQlEwUXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRFdDeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWxCUVZjc1EwRkJRenRKUVVONlFpeERRVUZETzBsQlJVUXNNa0pCUVVVc1IwRkJSaXhWUVVGSExFTkJRVWs3VVVGRFRDeEpRVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUVVVc1QwRkJUenRSUVVObUxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRWaXhEUVVGRE8wbEJSVVFzTWtKQlFVVXNSMEZCUml4VlFVRkhMRWRCUVZFN1VVRkRWQ3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eERRVUZETzFsQlFVVXNUMEZCVHp0UlFVTm1MRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEV2l4RFFVRkRPMGxCUlVRc01rSkJRVVVzUjBGQlJqdFJRVU5GTEVsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRGJrSXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkJSU3hQUVVGUE8xRkJRMllzU1VGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVNM1FpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTTVRaXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRk8xbEJRemRDTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUXpWQ08yRkJRVTA3V1VGRFRDeERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1UwRkRVanRKUVVOSUxFTkJRVU03U1VGRFNDeHhRa0ZCUXp0QlFVRkVMRU5CUVVNc1FVRTNRMFFzU1VFMlEwTTdRVUZGUkRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SFFYRkRSenRCUVVOSU8wbEJRV3RETEdsQ1FVRTBRanRUUVVFMVFpeFZRVUUwUWl4RlFVRTFRaXh4UWtGQk5FSXNSVUZCTlVJc1NVRkJORUk3VVVGQk5VSXNORUpCUVRSQ096dEpRVU0xUkN4UFFVRlBMRWxCUVVrc1kwRkJUU3hEUVVGSkxFbEJRVWtzWTBGQll5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRjRVFzUTBGQlF6dEJRVVpFTEhsQ1FVVkRJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHRUZEhKbFlXMHNJRWx1ZEdWeWJtRnNVSEp2WkhWalpYSXNJRWx1ZEdWeWJtRnNUR2x6ZEdWdVpYSXNJRTkxZEZObGJtUmxjbjBnWm5KdmJTQW5MaTR2YVc1a1pYZ25PMXh1WEc1amJHRnpjeUJEYjI1allYUlFjbTlrZFdObGNqeFVQaUJwYlhCc1pXMWxiblJ6SUVsdWRHVnlibUZzVUhKdlpIVmpaWEk4VkQ0c0lFbHVkR1Z5Ym1Gc1RHbHpkR1Z1WlhJOFZENHNJRTkxZEZObGJtUmxjanhVUGlCN1hHNGdJSEIxWW14cFl5QjBlWEJsSUQwZ0oyTnZibU5oZENjN1hHNGdJSEIxWW14cFl5QnZkWFE2SUZOMGNtVmhiVHhVUGlBOUlHNTFiR3dnWVhNZ1lXNTVPMXh1SUNCd2NtbDJZWFJsSUdrNklHNTFiV0psY2lBOUlEQTdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jSFZpYkdsaklITjBjbVZoYlhNNklFRnljbUY1UEZOMGNtVmhiVHhVUGo0cElIdGNiaUFnZlZ4dVhHNGdJRjl6ZEdGeWRDaHZkWFE2SUZOMGNtVmhiVHhVUGlrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdWIzVjBJRDBnYjNWME8xeHVJQ0FnSUhSb2FYTXVjM1J5WldGdGMxdDBhR2x6TG1sZExsOWhaR1FvZEdocGN5azdYRzRnSUgxY2JseHVJQ0JmYzNSdmNDZ3BPaUIyYjJsa0lIdGNiaUFnSUNCamIyNXpkQ0J6ZEhKbFlXMXpJRDBnZEdocGN5NXpkSEpsWVcxek8xeHVJQ0FnSUdsbUlDaDBhR2x6TG1rZ1BDQnpkSEpsWVcxekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2MzUnlaV0Z0YzF0MGFHbHpMbWxkTGw5eVpXMXZkbVVvZEdocGN5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVhU0E5SURBN1hHNGdJQ0FnZEdocGN5NXZkWFFnUFNCdWRXeHNJR0Z6SUdGdWVUdGNiaUFnZlZ4dVhHNGdJRjl1S0hRNklGUXBJSHRjYmlBZ0lDQmpiMjV6ZENCMUlEMGdkR2hwY3k1dmRYUTdYRzRnSUNBZ2FXWWdLQ0YxS1NCeVpYUjFjbTQ3WEc0Z0lDQWdkUzVmYmloMEtUdGNiaUFnZlZ4dVhHNGdJRjlsS0dWeWNqb2dZVzU1S1NCN1hHNGdJQ0FnWTI5dWMzUWdkU0E5SUhSb2FYTXViM1YwTzF4dUlDQWdJR2xtSUNnaGRTa2djbVYwZFhKdU8xeHVJQ0FnSUhVdVgyVW9aWEp5S1R0Y2JpQWdmVnh1WEc0Z0lGOWpLQ2tnZTF4dUlDQWdJR052Ym5OMElIVWdQU0IwYUdsekxtOTFkRHRjYmlBZ0lDQnBaaUFvSVhVcElISmxkSFZ5Ymp0Y2JpQWdJQ0JqYjI1emRDQnpkSEpsWVcxeklEMGdkR2hwY3k1emRISmxZVzF6TzF4dUlDQWdJSE4wY21WaGJYTmJkR2hwY3k1cFhTNWZjbVZ0YjNabEtIUm9hWE1wTzF4dUlDQWdJR2xtSUNnckszUm9hWE11YVNBOElITjBjbVZoYlhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCemRISmxZVzF6VzNSb2FYTXVhVjB1WDJGa1pDaDBhR2x6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkUzVmWXlncE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGQjFkSE1nYjI1bElITjBjbVZoYlNCaFpuUmxjaUIwYUdVZ2IzUm9aWEl1SUNwamIyNWpZWFFxSUdseklHRWdabUZqZEc5eWVTQjBhR0YwSUhSaGEyVnpJRzExYkhScGNHeGxYRzRnS2lCemRISmxZVzF6SUdGeklHRnlaM1Z0Wlc1MGN5d2dZVzVrSUhOMFlYSjBjeUIwYUdVZ1lHNHJNV0F0ZEdnZ2MzUnlaV0Z0SUc5dWJIa2dkMmhsYmlCMGFHVWdZRzVnTFhSb1hHNGdLaUJ6ZEhKbFlXMGdhR0Z6SUdOdmJYQnNaWFJsWkM0Z1NYUWdZMjl1WTJGMFpXNWhkR1Z6SUhSb2IzTmxJSE4wY21WaGJYTWdkRzluWlhSb1pYSXVYRzRnS2x4dUlDb2dUV0Z5WW14bElHUnBZV2R5WVcwNlhHNGdLbHh1SUNvZ1lHQmdkR1Y0ZEZ4dUlDb2dMUzB4TFMweUxTMHRNeTB0TFRRdGZGeHVJQ29nTGk0dUxpNHVMaTR1TGk0dUxpNHVMUzFoTFdJdFl5MHRaQzE4WEc0Z0tpQWdJQ0FnSUNBZ0lDQWdZMjl1WTJGMFhHNGdLaUF0TFRFdExUSXRMUzB6TFMwdE5DMHRMV0V0WWkxakxTMWtMWHhjYmlBcUlHQmdZRnh1SUNwY2JpQXFJRVY0WVcxd2JHVTZYRzRnS2x4dUlDb2dZR0JnYW5OY2JpQXFJR2x0Y0c5eWRDQmpiMjVqWVhRZ1puSnZiU0FuZUhOMGNtVmhiUzlsZUhSeVlTOWpiMjVqWVhRblhHNGdLbHh1SUNvZ1kyOXVjM1FnYzNSeVpXRnRRU0E5SUhoekxtOW1LQ2RoSnl3Z0oySW5MQ0FuWXljcFhHNGdLaUJqYjI1emRDQnpkSEpsWVcxQ0lEMGdlSE11YjJZb01UQXNJREl3TENBek1DbGNiaUFxSUdOdmJuTjBJSE4wY21WaGJVTWdQU0I0Y3k1dlppZ25XQ2NzSUNkWkp5d2dKMW9uS1Z4dUlDcGNiaUFxSUdOdmJuTjBJRzkxZEhCMWRGTjBjbVZoYlNBOUlHTnZibU5oZENoemRISmxZVzFCTENCemRISmxZVzFDTENCemRISmxZVzFES1Z4dUlDcGNiaUFxSUc5MWRIQjFkRk4wY21WaGJTNWhaR1JNYVhOMFpXNWxjaWg3WEc0Z0tpQWdJRzVsZUhRNklDaDRLU0E5UGlCamIyNXpiMnhsTG14dlp5aDRLU3hjYmlBcUlDQWdaWEp5YjNJNklDaGxjbklwSUQwK0lHTnZibk52YkdVdVpYSnliM0lvWlhKeUtTeGNiaUFxSUNBZ1kyOXRjR3hsZEdVNklDZ3BJRDArSUdOdmJuTnZiR1V1Ykc5bktDZGpiMjVqWVhRZ1kyOXRjR3hsZEdWa0p5a3NYRzRnS2lCOUtWeHVJQ29nWUdCZ1hHNGdLbHh1SUNvZ1FHWmhZM1J2Y25rZ2RISjFaVnh1SUNvZ1FIQmhjbUZ0SUh0VGRISmxZVzE5SUhOMGNtVmhiVEVnUVNCemRISmxZVzBnZEc4Z1kyOXVZMkYwWlc1aGRHVWdkRzluWlhSb1pYSWdkMmwwYUNCdmRHaGxjaUJ6ZEhKbFlXMXpMbHh1SUNvZ1FIQmhjbUZ0SUh0VGRISmxZVzE5SUhOMGNtVmhiVElnUVNCemRISmxZVzBnZEc4Z1kyOXVZMkYwWlc1aGRHVWdkRzluWlhSb1pYSWdkMmwwYUNCdmRHaGxjaUJ6ZEhKbFlXMXpMaUJVZDI5Y2JpQXFJRzl5SUcxdmNtVWdjM1J5WldGdGN5QnRZWGtnWW1VZ1oybDJaVzRnWVhNZ1lYSm5kVzFsYm5SekxseHVJQ29nUUhKbGRIVnliaUI3VTNSeVpXRnRmVnh1SUNvdlhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCamIyNWpZWFE4VkQ0b0xpNHVjM1J5WldGdGN6b2dRWEp5WVhrOFUzUnlaV0Z0UEZRK1BpazZJRk4wY21WaGJUeFVQaUI3WEc0Z0lISmxkSFZ5YmlCdVpYY2dVM1J5WldGdFBGUStLRzVsZHlCRGIyNWpZWFJRY205a2RXTmxjaWh6ZEhKbFlXMXpLU2s3WEc1OVhHNGlYWDA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9pbmRleFwiKTtcbnZhciBOTyA9IHt9O1xudmFyIFNhbXBsZUNvbWJpbmVMaXN0ZW5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTYW1wbGVDb21iaW5lTGlzdGVuZXIoaSwgcCkge1xuICAgICAgICB0aGlzLmkgPSBpO1xuICAgICAgICB0aGlzLnAgPSBwO1xuICAgICAgICBwLmlsc1tpXSA9IHRoaXM7XG4gICAgfVxuICAgIFNhbXBsZUNvbWJpbmVMaXN0ZW5lci5wcm90b3R5cGUuX24gPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgcCA9IHRoaXMucDtcbiAgICAgICAgaWYgKHAub3V0ID09PSBOTylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcC51cCh0LCB0aGlzLmkpO1xuICAgIH07XG4gICAgU2FtcGxlQ29tYmluZUxpc3RlbmVyLnByb3RvdHlwZS5fZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5wLl9lKGVycik7XG4gICAgfTtcbiAgICBTYW1wbGVDb21iaW5lTGlzdGVuZXIucHJvdG90eXBlLl9jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnAuZG93bih0aGlzLmksIHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIFNhbXBsZUNvbWJpbmVMaXN0ZW5lcjtcbn0oKSk7XG5leHBvcnRzLlNhbXBsZUNvbWJpbmVMaXN0ZW5lciA9IFNhbXBsZUNvbWJpbmVMaXN0ZW5lcjtcbnZhciBTYW1wbGVDb21iaW5lT3BlcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2FtcGxlQ29tYmluZU9wZXJhdG9yKGlucywgc3RyZWFtcykge1xuICAgICAgICB0aGlzLnR5cGUgPSAnc2FtcGxlQ29tYmluZSc7XG4gICAgICAgIHRoaXMuaW5zID0gaW5zO1xuICAgICAgICB0aGlzLm90aGVycyA9IHN0cmVhbXM7XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMuaWxzID0gW107XG4gICAgICAgIHRoaXMuTm4gPSAwO1xuICAgICAgICB0aGlzLnZhbHMgPSBbXTtcbiAgICB9XG4gICAgU2FtcGxlQ29tYmluZU9wZXJhdG9yLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHRoaXMub3V0ID0gb3V0O1xuICAgICAgICB2YXIgcyA9IHRoaXMub3RoZXJzO1xuICAgICAgICB2YXIgbiA9IHRoaXMuTm4gPSBzLmxlbmd0aDtcbiAgICAgICAgdmFyIHZhbHMgPSB0aGlzLnZhbHMgPSBuZXcgQXJyYXkobik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICB2YWxzW2ldID0gTk87XG4gICAgICAgICAgICBzW2ldLl9hZGQobmV3IFNhbXBsZUNvbWJpbmVMaXN0ZW5lcihpLCB0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnMuX2FkZCh0aGlzKTtcbiAgICB9O1xuICAgIFNhbXBsZUNvbWJpbmVPcGVyYXRvci5wcm90b3R5cGUuX3N0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzID0gdGhpcy5vdGhlcnM7XG4gICAgICAgIHZhciBuID0gcy5sZW5ndGg7XG4gICAgICAgIHZhciBpbHMgPSB0aGlzLmlscztcbiAgICAgICAgdGhpcy5pbnMuX3JlbW92ZSh0aGlzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHNbaV0uX3JlbW92ZShpbHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3V0ID0gTk87XG4gICAgICAgIHRoaXMudmFscyA9IFtdO1xuICAgICAgICB0aGlzLmlscyA9IFtdO1xuICAgIH07XG4gICAgU2FtcGxlQ29tYmluZU9wZXJhdG9yLnByb3RvdHlwZS5fbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBvdXQgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKG91dCA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLk5uID4gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0Ll9uKFt0XS5jb25jYXQodGhpcy52YWxzKSk7XG4gICAgfTtcbiAgICBTYW1wbGVDb21iaW5lT3BlcmF0b3IucHJvdG90eXBlLl9lID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgb3V0ID0gdGhpcy5vdXQ7XG4gICAgICAgIGlmIChvdXQgPT09IE5PKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXQuX2UoZXJyKTtcbiAgICB9O1xuICAgIFNhbXBsZUNvbWJpbmVPcGVyYXRvci5wcm90b3R5cGUuX2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSB0aGlzLm91dDtcbiAgICAgICAgaWYgKG91dCA9PT0gTk8pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIG91dC5fYygpO1xuICAgIH07XG4gICAgU2FtcGxlQ29tYmluZU9wZXJhdG9yLnByb3RvdHlwZS51cCA9IGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgIHZhciB2ID0gdGhpcy52YWxzW2ldO1xuICAgICAgICBpZiAodGhpcy5ObiA+IDAgJiYgdiA9PT0gTk8pIHtcbiAgICAgICAgICAgIHRoaXMuTm4tLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHNbaV0gPSB0O1xuICAgIH07XG4gICAgU2FtcGxlQ29tYmluZU9wZXJhdG9yLnByb3RvdHlwZS5kb3duID0gZnVuY3Rpb24gKGksIGwpIHtcbiAgICAgICAgdGhpcy5vdGhlcnNbaV0uX3JlbW92ZShsKTtcbiAgICB9O1xuICAgIHJldHVybiBTYW1wbGVDb21iaW5lT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5TYW1wbGVDb21iaW5lT3BlcmF0b3IgPSBTYW1wbGVDb21iaW5lT3BlcmF0b3I7XG52YXIgc2FtcGxlQ29tYmluZTtcbi8qKlxuICpcbiAqIENvbWJpbmVzIGEgc291cmNlIHN0cmVhbSB3aXRoIG11bHRpcGxlIG90aGVyIHN0cmVhbXMuIFRoZSByZXN1bHQgc3RyZWFtXG4gKiB3aWxsIGVtaXQgdGhlIGxhdGVzdCBldmVudHMgZnJvbSBhbGwgaW5wdXQgc3RyZWFtcywgYnV0IG9ubHkgd2hlbiB0aGVcbiAqIHNvdXJjZSBzdHJlYW0gZW1pdHMuXG4gKlxuICogSWYgdGhlIHNvdXJjZSwgb3IgYW55IGlucHV0IHN0cmVhbSwgdGhyb3dzIGFuIGVycm9yLCB0aGUgcmVzdWx0IHN0cmVhbVxuICogd2lsbCBwcm9wYWdhdGUgdGhlIGVycm9yLiBJZiBhbnkgaW5wdXQgc3RyZWFtcyBlbmQsIHRoZWlyIGZpbmFsIGVtaXR0ZWRcbiAqIHZhbHVlIHdpbGwgcmVtYWluIGluIHRoZSBhcnJheSBvZiBhbnkgc3Vic2VxdWVudCBldmVudHMgZnJvbSB0aGUgcmVzdWx0XG4gKiBzdHJlYW0uXG4gKlxuICogVGhlIHJlc3VsdCBzdHJlYW0gd2lsbCBvbmx5IGNvbXBsZXRlIHVwb24gY29tcGxldGlvbiBvZiB0aGUgc291cmNlIHN0cmVhbS5cbiAqXG4gKiBNYXJibGUgZGlhZ3JhbTpcbiAqXG4gKiBgYGB0ZXh0XG4gKiAtLTEtLS0tMi0tLS0tMy0tLS0tLS0tNC0tLSAoc291cmNlKVxuICogLS0tLWEtLS0tLWItLS0tLWMtLWQtLS0tLS0gKG90aGVyKVxuICogICAgICBzYW1wbGVDb21iaW5lXG4gKiAtLS0tLS0tMmEtLS0tM2ItLS0tLS0tNGQtLVxuICogYGBgXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCBzYW1wbGVDb21iaW5lIGZyb20gJ3hzdHJlYW0vZXh0cmEvc2FtcGxlQ29tYmluZSdcbiAqIGltcG9ydCB4cyBmcm9tICd4c3RyZWFtJ1xuICpcbiAqIGNvbnN0IHNhbXBsZXIgPSB4cy5wZXJpb2RpYygxMDAwKS50YWtlKDMpXG4gKiBjb25zdCBvdGhlciA9IHhzLnBlcmlvZGljKDEwMClcbiAqXG4gKiBjb25zdCBzdHJlYW0gPSBzYW1wbGVyLmNvbXBvc2Uoc2FtcGxlQ29tYmluZShvdGhlcikpXG4gKlxuICogc3RyZWFtLmFkZExpc3RlbmVyKHtcbiAqICAgbmV4dDogaSA9PiBjb25zb2xlLmxvZyhpKSxcbiAqICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmVycm9yKGVyciksXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnY29tcGxldGVkJylcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBgYGB0ZXh0XG4gKiA+IFswLCA4XVxuICogPiBbMSwgMThdXG4gKiA+IFsyLCAyOF1cbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgc2FtcGxlQ29tYmluZSBmcm9tICd4c3RyZWFtL2V4dHJhL3NhbXBsZUNvbWJpbmUnXG4gKiBpbXBvcnQgeHMgZnJvbSAneHN0cmVhbSdcbiAqXG4gKiBjb25zdCBzYW1wbGVyID0geHMucGVyaW9kaWMoMTAwMCkudGFrZSgzKVxuICogY29uc3Qgb3RoZXIgPSB4cy5wZXJpb2RpYygxMDApLnRha2UoMilcbiAqXG4gKiBjb25zdCBzdHJlYW0gPSBzYW1wbGVyLmNvbXBvc2Uoc2FtcGxlQ29tYmluZShvdGhlcikpXG4gKlxuICogc3RyZWFtLmFkZExpc3RlbmVyKHtcbiAqICAgbmV4dDogaSA9PiBjb25zb2xlLmxvZyhpKSxcbiAqICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmVycm9yKGVyciksXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnY29tcGxldGVkJylcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBgYGB0ZXh0XG4gKiA+IFswLCAxXVxuICogPiBbMSwgMV1cbiAqID4gWzIsIDFdXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gey4uLlN0cmVhbX0gc3RyZWFtcyBPbmUgb3IgbW9yZSBzdHJlYW1zIHRvIGNvbWJpbmUgd2l0aCB0aGUgc2FtcGxlclxuICogc3RyZWFtLlxuICogQHJldHVybiB7U3RyZWFtfVxuICovXG5zYW1wbGVDb21iaW5lID0gZnVuY3Rpb24gc2FtcGxlQ29tYmluZSgpIHtcbiAgICB2YXIgc3RyZWFtcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHN0cmVhbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNhbXBsZUNvbWJpbmVPcGVyYXRvcihzYW1wbGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgaW5kZXhfMS5TdHJlYW0obmV3IFNhbXBsZUNvbWJpbmVPcGVyYXRvcihzYW1wbGVyLCBzdHJlYW1zKSk7XG4gICAgfTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBzYW1wbGVDb21iaW5lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJGdGNHeGxRMjl0WW1sdVpTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlsZUhSeVlTOXpZVzF3YkdWRGIyMWlhVzVsTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzYTBOQlFUUkVPMEZCYTBRMVJDeEpRVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkZaRHRKUVVORkxDdENRVUZ2UWl4RFFVRlRMRVZCUVZVc1EwRkJOa0k3VVVGQmFFUXNUVUZCUXl4SFFVRkVMRU5CUVVNc1EwRkJVVHRSUVVGVkxFMUJRVU1zUjBGQlJDeERRVUZETEVOQlFUUkNPMUZCUTJ4RkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRMnhDTEVOQlFVTTdTVUZGUkN4clEwRkJSU3hIUVVGR0xGVkJRVWNzUTBGQlNUdFJRVU5NTEVsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGFrSXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFVkJRVVU3V1VGQlJTeFBRVUZQTzFGQlEzcENMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOc1FpeERRVUZETzBsQlJVUXNhME5CUVVVc1IwRkJSaXhWUVVGSExFZEJRVkU3VVVGRFZDeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU5xUWl4RFFVRkRPMGxCUlVRc2EwTkJRVVVzUjBGQlJqdFJRVU5GTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkROVUlzUTBGQlF6dEpRVU5JTERSQ1FVRkRPMEZCUVVRc1EwRkJReXhCUVd4Q1JDeEpRV3RDUXp0QlFXeENXU3h6UkVGQmNVSTdRVUZ2UW14RE8wbEJVMFVzSzBKQlFWa3NSMEZCWXl4RlFVRkZMRTlCUVRKQ08xRkJVbWhFTEZOQlFVa3NSMEZCUnl4bFFVRmxMRU5CUVVNN1VVRlROVUlzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRaaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEU5QlFVOHNRMEZCUXp0UlFVTjBRaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFYZENMRU5CUVVNN1VVRkRjRU1zU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRaQ3hKUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTmFMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzBsQlEycENMRU5CUVVNN1NVRkZSQ3h6UTBGQlRTeEhRVUZPTEZWQlFVOHNSMEZCZFVJN1VVRkROVUlzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRaaXhKUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTNSQ0xFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU0zUWl4SlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM1JETEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1dVRkRNVUlzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRaUVVOaUxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3h4UWtGQmNVSXNRMEZCVFN4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU53UkR0UlFVTkVMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTNSQ0xFTkJRVU03U1VGRlJDeHhRMEZCU3l4SFFVRk1PMUZCUTBVc1NVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0UlFVTjBRaXhKUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUTI1Q0xFbEJRVTBzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRja0lzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGRrSXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVNeFFpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUTNSQ08xRkJRMFFzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRjNRaXhEUVVGRE8xRkJRM0JETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMllzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNN1NVRkRhRUlzUTBGQlF6dEpRVVZFTEd0RFFVRkZMRWRCUVVZc1ZVRkJSeXhEUVVGSk8xRkJRMHdzU1VGQlRTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVOeVFpeEpRVUZKTEVkQlFVY3NTMEZCU3l4RlFVRkZPMWxCUVVVc1QwRkJUenRSUVVOMlFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJRenRaUVVGRkxFOUJRVTg3VVVGRGVFSXNSMEZCUnl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExGTkJRVXNzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMGxCUXpWQ0xFTkJRVU03U1VGRlJDeHJRMEZCUlN4SFFVRkdMRlZCUVVjc1IwRkJVVHRSUVVOVUxFbEJRVTBzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRja0lzU1VGQlNTeEhRVUZITEV0QlFVc3NSVUZCUlR0WlFVRkZMRTlCUVU4N1VVRkRka0lzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOa0xFTkJRVU03U1VGRlJDeHJRMEZCUlN4SFFVRkdPMUZCUTBVc1NVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXp0UlFVTnlRaXhKUVVGSkxFZEJRVWNzUzBGQlN5eEZRVUZGTzFsQlFVVXNUMEZCVHp0UlFVTjJRaXhIUVVGSExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdTVUZEV0N4RFFVRkRPMGxCUlVRc2EwTkJRVVVzUjBGQlJpeFZRVUZITEVOQlFVMHNSVUZCUlN4RFFVRlRPMUZCUTJ4Q0xFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRrSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZPMWxCUXpOQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0VFFVTllPMUZCUTBRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRia0lzUTBGQlF6dEpRVVZFTEc5RFFVRkpMRWRCUVVvc1ZVRkJTeXhEUVVGVExFVkJRVVVzUTBGQk5rSTdVVUZETTBNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE5VSXNRMEZCUXp0SlFVTklMRFJDUVVGRE8wRkJRVVFzUTBGQlF5eEJRWHBGUkN4SlFYbEZRenRCUVhwRldTeHpSRUZCY1VJN1FVRXlSV3hETEVsQlFVa3NZVUZCY1VNc1EwRkJRenRCUVVVeFF6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1IwRjFSVWM3UVVGRFNDeGhRVUZoTEVkQlFVYzdTVUZCZFVJc2FVSkJRVGhDTzFOQlFUbENMRlZCUVRoQ0xFVkJRVGxDTEhGQ1FVRTRRaXhGUVVFNVFpeEpRVUU0UWp0UlFVRTVRaXcwUWtGQk9FSTdPMGxCUTI1RkxFOUJRVThzSzBKQlFTdENMRTlCUVc5Q08xRkJRM2hFTEU5QlFVOHNTVUZCU1N4alFVRk5MRU5CUVdFc1NVRkJTU3h4UWtGQmNVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU0zUlN4RFFVRkRMRU5CUVVNN1FVRkRTaXhEUVVFeVFpeERRVUZETzBGQlJUVkNMR3RDUVVGbExHRkJRV0VzUTBGQlF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdTVzUwWlhKdVlXeE1hWE4wWlc1bGNpd2dUM0JsY21GMGIzSXNJRk4wY21WaGJYMGdabkp2YlNBbkxpNHZhVzVrWlhnbk8xeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRk5oYlhCc1pVTnZiV0pwYm1WVGFXZHVZWFIxY21VZ2UxeHVJQ0FvS1RvZ1BGUStLSE02SUZOMGNtVmhiVHhVUGlrZ1BUNGdVM1J5WldGdFBGdFVYVDQ3WEc0Z0lEeFVNVDRvY3pFNklGTjBjbVZoYlR4VU1UNHBPaUE4VkQ0b2N6b2dVM1J5WldGdFBGUStLU0E5UGlCVGRISmxZVzA4VzFRc0lGUXhYVDQ3WEc0Z0lEeFVNU3dnVkRJK0tGeHVJQ0FnSUhNeE9pQlRkSEpsWVcwOFZERStMRnh1SUNBZ0lITXlPaUJUZEhKbFlXMDhWREkrS1RvZ1BGUStLSE02SUZOMGNtVmhiVHhVUGlrZ1BUNGdVM1J5WldGdFBGdFVMQ0JVTVN3Z1ZESmRQanRjYmlBZ1BGUXhMQ0JVTWl3Z1ZETStLRnh1SUNBZ0lITXhPaUJUZEhKbFlXMDhWREUrTEZ4dUlDQWdJSE15T2lCVGRISmxZVzA4VkRJK0xGeHVJQ0FnSUhNek9pQlRkSEpsWVcwOFZETStLVG9nUEZRK0tITTZJRk4wY21WaGJUeFVQaWtnUFQ0Z1UzUnlaV0Z0UEZ0VUxDQlVNU3dnVkRJc0lGUXpYVDQ3WEc0Z0lEeFVNU3dnVkRJc0lGUXpMQ0JVTkQ0b1hHNGdJQ0FnY3pFNklGTjBjbVZoYlR4VU1UNHNYRzRnSUNBZ2N6STZJRk4wY21WaGJUeFVNajRzWEc0Z0lDQWdjek02SUZOMGNtVmhiVHhVTXo0c1hHNGdJQ0FnY3pRNklGTjBjbVZoYlR4VU5ENHBPaUE4VkQ0b2N6b2dVM1J5WldGdFBGUStLU0E5UGlCVGRISmxZVzA4VzFRc0lGUXhMQ0JVTWl3Z1ZETXNJRlEwWFQ0N1hHNGdJRHhVTVN3Z1ZESXNJRlF6TENCVU5Dd2dWRFUrS0Z4dUlDQWdJSE14T2lCVGRISmxZVzA4VkRFK0xGeHVJQ0FnSUhNeU9pQlRkSEpsWVcwOFZESStMRnh1SUNBZ0lITXpPaUJUZEhKbFlXMDhWRE0rTEZ4dUlDQWdJSE0wT2lCVGRISmxZVzA4VkRRK0xGeHVJQ0FnSUhNMU9pQlRkSEpsWVcwOFZEVStLVG9nUEZRK0tITTZJRk4wY21WaGJUeFVQaWtnUFQ0Z1UzUnlaV0Z0UEZ0VUxDQlVNU3dnVkRJc0lGUXpMQ0JVTkN3Z1ZEVmRQanRjYmlBZ1BGUXhMQ0JVTWl3Z1ZETXNJRlEwTENCVU5Td2dWRFkrS0Z4dUlDQWdJSE14T2lCVGRISmxZVzA4VkRFK0xGeHVJQ0FnSUhNeU9pQlRkSEpsWVcwOFZESStMRnh1SUNBZ0lITXpPaUJUZEhKbFlXMDhWRE0rTEZ4dUlDQWdJSE0wT2lCVGRISmxZVzA4VkRRK0xGeHVJQ0FnSUhNMU9pQlRkSEpsWVcwOFZEVStMRnh1SUNBZ0lITTJPaUJUZEhKbFlXMDhWRFkrS1RvZ1BGUStLSE02SUZOMGNtVmhiVHhVUGlrZ1BUNGdVM1J5WldGdFBGdFVMQ0JVTVN3Z1ZESXNJRlF6TENCVU5Dd2dWRFVzSUZRMlhUNDdYRzRnSUR4VU1Td2dWRElzSUZRekxDQlVOQ3dnVkRVc0lGUTJMQ0JVTno0b1hHNGdJQ0FnY3pFNklGTjBjbVZoYlR4VU1UNHNYRzRnSUNBZ2N6STZJRk4wY21WaGJUeFVNajRzWEc0Z0lDQWdjek02SUZOMGNtVmhiVHhVTXo0c1hHNGdJQ0FnY3pRNklGTjBjbVZoYlR4VU5ENHNYRzRnSUNBZ2N6VTZJRk4wY21WaGJUeFVOVDRzWEc0Z0lDQWdjelk2SUZOMGNtVmhiVHhVTmo0c1hHNGdJQ0FnY3pjNklGTjBjbVZoYlR4VU56NHBPaUE4VkQ0b2N6b2dVM1J5WldGdFBGUStLU0E5UGlCVGRISmxZVzA4VzFRc0lGUXhMQ0JVTWl3Z1ZETXNJRlEwTENCVU5Td2dWRFlzSUZRM1hUNDdYRzRnSUR4VU1Td2dWRElzSUZRekxDQlVOQ3dnVkRVc0lGUTJMQ0JVTnl3Z1ZEZytLRnh1SUNBZ0lITXhPaUJUZEhKbFlXMDhWREUrTEZ4dUlDQWdJSE15T2lCVGRISmxZVzA4VkRJK0xGeHVJQ0FnSUhNek9pQlRkSEpsWVcwOFZETStMRnh1SUNBZ0lITTBPaUJUZEhKbFlXMDhWRFErTEZ4dUlDQWdJSE0xT2lCVGRISmxZVzA4VkRVK0xGeHVJQ0FnSUhNMk9pQlRkSEpsWVcwOFZEWStMRnh1SUNBZ0lITTNPaUJUZEhKbFlXMDhWRGMrTEZ4dUlDQWdJSE00T2lCVGRISmxZVzA4VkRnK0tUb2dQRlErS0hNNklGTjBjbVZoYlR4VVBpa2dQVDRnVTNSeVpXRnRQRnRVTENCVU1Td2dWRElzSUZRekxDQlVOQ3dnVkRVc0lGUTJMQ0JVTnl3Z1ZEaGRQanRjYmlBZ0tDNHVMbk4wY21WaGJYTTZJRUZ5Y21GNVBGTjBjbVZoYlR4aGJuaytQaWs2SUNoek9pQlRkSEpsWVcwOFlXNTVQaWtnUFQ0Z1UzUnlaV0Z0UEVGeWNtRjVQR0Z1ZVQ0K08xeHVmVnh1WEc1amIyNXpkQ0JPVHlBOUlIdDlPMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVMkZ0Y0d4bFEyOXRZbWx1WlV4cGMzUmxibVZ5UEZRK0lHbHRjR3hsYldWdWRITWdTVzUwWlhKdVlXeE1hWE4wWlc1bGNqeFVQaUI3WEc0Z0lHTnZibk4wY25WamRHOXlLSEJ5YVhaaGRHVWdhVG9nYm5WdFltVnlMQ0J3Y21sMllYUmxJSEE2SUZOaGJYQnNaVU52YldKcGJtVlBjR1Z5WVhSdmNqeGhibmsrS1NCN1hHNGdJQ0FnY0M1cGJITmJhVjBnUFNCMGFHbHpPMXh1SUNCOVhHNWNiaUFnWDI0b2REb2dWQ2s2SUhadmFXUWdlMXh1SUNBZ0lHTnZibk4wSUhBZ1BTQjBhR2x6TG5BN1hHNGdJQ0FnYVdZZ0tIQXViM1YwSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lIQXVkWEFvZEN3Z2RHaHBjeTVwS1R0Y2JpQWdmVnh1WEc0Z0lGOWxLR1Z5Y2pvZ1lXNTVLVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTV3TGw5bEtHVnljaWs3WEc0Z0lIMWNibHh1SUNCZll5Z3BPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbkF1Wkc5M2JpaDBhR2x6TG1rc0lIUm9hWE1wTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJUWVcxd2JHVkRiMjFpYVc1bFQzQmxjbUYwYjNJOFZENGdhVzF3YkdWdFpXNTBjeUJQY0dWeVlYUnZjanhVTENCQmNuSmhlVHhoYm5rK1BpQjdYRzRnSUhCMVlteHBZeUIwZVhCbElEMGdKM05oYlhCc1pVTnZiV0pwYm1Vbk8xeHVJQ0J3ZFdKc2FXTWdhVzV6T2lCVGRISmxZVzA4VkQ0N1hHNGdJSEIxWW14cFl5QnZkR2hsY25NNklFRnljbUY1UEZOMGNtVmhiVHhoYm5rK1BqdGNiaUFnY0hWaWJHbGpJRzkxZERvZ1UzUnlaV0Z0UEVGeWNtRjVQR0Z1ZVQ0K08xeHVJQ0J3ZFdKc2FXTWdhV3h6T2lCQmNuSmhlVHhUWVcxd2JHVkRiMjFpYVc1bFRHbHpkR1Z1WlhJOFlXNTVQajQ3WEc0Z0lIQjFZbXhwWXlCT2Jqb2diblZ0WW1WeU95QXZMeUFxVGlwMWJXSmxjaUJ2WmlCemRISmxZVzF6SUhOMGFXeHNJSFJ2SUhObGJtUWdLbTRxWlhoMFhHNGdJSEIxWW14cFl5QjJZV3h6T2lCQmNuSmhlVHhoYm5rK08xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHbHVjem9nVTNSeVpXRnRQRlErTENCemRISmxZVzF6T2lCQmNuSmhlVHhUZEhKbFlXMDhZVzU1UGo0cElIdGNiaUFnSUNCMGFHbHpMbWx1Y3lBOUlHbHVjenRjYmlBZ0lDQjBhR2x6TG05MGFHVnljeUE5SUhOMGNtVmhiWE03WEc0Z0lDQWdkR2hwY3k1dmRYUWdQU0JPVHlCaGN5QlRkSEpsWVcwOFFYSnlZWGs4WVc1NVBqNDdYRzRnSUNBZ2RHaHBjeTVwYkhNZ1BTQmJYVHRjYmlBZ0lDQjBhR2x6TGs1dUlEMGdNRHRjYmlBZ0lDQjBhR2x6TG5aaGJITWdQU0JiWFR0Y2JpQWdmVnh1WEc0Z0lGOXpkR0Z5ZENodmRYUTZJRk4wY21WaGJUeEJjbkpoZVR4aGJuaytQaWs2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11YjNWMElEMGdiM1YwTzF4dUlDQWdJR052Ym5OMElITWdQU0IwYUdsekxtOTBhR1Z5Y3p0Y2JpQWdJQ0JqYjI1emRDQnVJRDBnZEdocGN5NU9iaUE5SUhNdWJHVnVaM1JvTzF4dUlDQWdJR052Ym5OMElIWmhiSE1nUFNCMGFHbHpMblpoYkhNZ1BTQnVaWGNnUVhKeVlYa29iaWs3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFpoYkhOYmFWMGdQU0JPVHp0Y2JpQWdJQ0FnSUhOYmFWMHVYMkZrWkNodVpYY2dVMkZ0Y0d4bFEyOXRZbWx1WlV4cGMzUmxibVZ5UEdGdWVUNG9hU3dnZEdocGN5a3BPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbWx1Y3k1ZllXUmtLSFJvYVhNcE8xeHVJQ0I5WEc1Y2JpQWdYM04wYjNBb0tUb2dkbTlwWkNCN1hHNGdJQ0FnWTI5dWMzUWdjeUE5SUhSb2FYTXViM1JvWlhKek8xeHVJQ0FnSUdOdmJuTjBJRzRnUFNCekxteGxibWQwYUR0Y2JpQWdJQ0JqYjI1emRDQnBiSE1nUFNCMGFHbHpMbWxzY3p0Y2JpQWdJQ0IwYUdsekxtbHVjeTVmY21WdGIzWmxLSFJvYVhNcE8xeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2Jqc2dhU3NyS1NCN1hHNGdJQ0FnSUNCelcybGRMbDl5WlcxdmRtVW9hV3h6VzJsZEtUdGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXZkWFFnUFNCT1R5QmhjeUJUZEhKbFlXMDhRWEp5WVhrOFlXNTVQajQ3WEc0Z0lDQWdkR2hwY3k1MllXeHpJRDBnVzEwN1hHNGdJQ0FnZEdocGN5NXBiSE1nUFNCYlhUdGNiaUFnZlZ4dVhHNGdJRjl1S0hRNklGUXBPaUIyYjJsa0lIdGNiaUFnSUNCamIyNXpkQ0J2ZFhRZ1BTQjBhR2x6TG05MWREdGNiaUFnSUNCcFppQW9iM1YwSUQwOVBTQk9UeWtnY21WMGRYSnVPMXh1SUNBZ0lHbG1JQ2gwYUdsekxrNXVJRDRnTUNrZ2NtVjBkWEp1TzF4dUlDQWdJRzkxZEM1ZmJpaGJkQ3dnTGk0dWRHaHBjeTUyWVd4elhTazdYRzRnSUgxY2JseHVJQ0JmWlNobGNuSTZJR0Z1ZVNrNklIWnZhV1FnZTF4dUlDQWdJR052Ym5OMElHOTFkQ0E5SUhSb2FYTXViM1YwTzF4dUlDQWdJR2xtSUNodmRYUWdQVDA5SUU1UEtTQnlaWFIxY200N1hHNGdJQ0FnYjNWMExsOWxLR1Z5Y2lrN1hHNGdJSDFjYmx4dUlDQmZZeWdwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCdmRYUWdQU0IwYUdsekxtOTFkRHRjYmlBZ0lDQnBaaUFvYjNWMElEMDlQU0JPVHlrZ2NtVjBkWEp1TzF4dUlDQWdJRzkxZEM1Zll5Z3BPMXh1SUNCOVhHNWNiaUFnZFhBb2REb2dZVzU1TENCcE9pQnVkVzFpWlhJcE9pQjJiMmxrSUh0Y2JpQWdJQ0JqYjI1emRDQjJJRDBnZEdocGN5NTJZV3h6VzJsZE8xeHVJQ0FnSUdsbUlDaDBhR2x6TGs1dUlENGdNQ0FtSmlCMklEMDlQU0JPVHlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVPYmkwdE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxuWmhiSE5iYVYwZ1BTQjBPMXh1SUNCOVhHNWNiaUFnWkc5M2JpaHBPaUJ1ZFcxaVpYSXNJR3c2SUZOaGJYQnNaVU52YldKcGJtVk1hWE4wWlc1bGNqeGhibmsrS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1dmRHaGxjbk5iYVYwdVgzSmxiVzkyWlNoc0tUdGNiaUFnZlZ4dWZWeHVYRzVzWlhRZ2MyRnRjR3hsUTI5dFltbHVaVG9nVTJGdGNHeGxRMjl0WW1sdVpWTnBaMjVoZEhWeVpUdGNibHh1THlvcVhHNGdLbHh1SUNvZ1EyOXRZbWx1WlhNZ1lTQnpiM1Z5WTJVZ2MzUnlaV0Z0SUhkcGRHZ2diWFZzZEdsd2JHVWdiM1JvWlhJZ2MzUnlaV0Z0Y3k0Z1ZHaGxJSEpsYzNWc2RDQnpkSEpsWVcxY2JpQXFJSGRwYkd3Z1pXMXBkQ0IwYUdVZ2JHRjBaWE4wSUdWMlpXNTBjeUJtY205dElHRnNiQ0JwYm5CMWRDQnpkSEpsWVcxekxDQmlkWFFnYjI1c2VTQjNhR1Z1SUhSb1pWeHVJQ29nYzI5MWNtTmxJSE4wY21WaGJTQmxiV2wwY3k1Y2JpQXFYRzRnS2lCSlppQjBhR1VnYzI5MWNtTmxMQ0J2Y2lCaGJua2dhVzV3ZFhRZ2MzUnlaV0Z0TENCMGFISnZkM01nWVc0Z1pYSnliM0lzSUhSb1pTQnlaWE4xYkhRZ2MzUnlaV0Z0WEc0Z0tpQjNhV3hzSUhCeWIzQmhaMkYwWlNCMGFHVWdaWEp5YjNJdUlFbG1JR0Z1ZVNCcGJuQjFkQ0J6ZEhKbFlXMXpJR1Z1WkN3Z2RHaGxhWElnWm1sdVlXd2daVzFwZEhSbFpGeHVJQ29nZG1Gc2RXVWdkMmxzYkNCeVpXMWhhVzRnYVc0Z2RHaGxJR0Z5Y21GNUlHOW1JR0Z1ZVNCemRXSnpaWEYxWlc1MElHVjJaVzUwY3lCbWNtOXRJSFJvWlNCeVpYTjFiSFJjYmlBcUlITjBjbVZoYlM1Y2JpQXFYRzRnS2lCVWFHVWdjbVZ6ZFd4MElITjBjbVZoYlNCM2FXeHNJRzl1YkhrZ1kyOXRjR3hsZEdVZ2RYQnZiaUJqYjIxd2JHVjBhVzl1SUc5bUlIUm9aU0J6YjNWeVkyVWdjM1J5WldGdExseHVJQ3BjYmlBcUlFMWhjbUpzWlNCa2FXRm5jbUZ0T2x4dUlDcGNiaUFxSUdCZ1lIUmxlSFJjYmlBcUlDMHRNUzB0TFMweUxTMHRMUzB6TFMwdExTMHRMUzAwTFMwdElDaHpiM1Z5WTJVcFhHNGdLaUF0TFMwdFlTMHRMUzB0WWkwdExTMHRZeTB0WkMwdExTMHRMU0FvYjNSb1pYSXBYRzRnS2lBZ0lDQWdJSE5oYlhCc1pVTnZiV0pwYm1WY2JpQXFJQzB0TFMwdExTMHlZUzB0TFMwellpMHRMUzB0TFMwMFpDMHRYRzRnS2lCZ1lHQmNiaUFxWEc0Z0tpQkZlR0Z0Y0d4bGN6cGNiaUFxWEc0Z0tpQmdZR0JxYzF4dUlDb2dhVzF3YjNKMElITmhiWEJzWlVOdmJXSnBibVVnWm5KdmJTQW5lSE4wY21WaGJTOWxlSFJ5WVM5ellXMXdiR1ZEYjIxaWFXNWxKMXh1SUNvZ2FXMXdiM0owSUhoeklHWnliMjBnSjNoemRISmxZVzBuWEc0Z0tseHVJQ29nWTI5dWMzUWdjMkZ0Y0d4bGNpQTlJSGh6TG5CbGNtbHZaR2xqS0RFd01EQXBMblJoYTJVb015bGNiaUFxSUdOdmJuTjBJRzkwYUdWeUlEMGdlSE11Y0dWeWFXOWthV01vTVRBd0tWeHVJQ3BjYmlBcUlHTnZibk4wSUhOMGNtVmhiU0E5SUhOaGJYQnNaWEl1WTI5dGNHOXpaU2h6WVcxd2JHVkRiMjFpYVc1bEtHOTBhR1Z5S1NsY2JpQXFYRzRnS2lCemRISmxZVzB1WVdSa1RHbHpkR1Z1WlhJb2UxeHVJQ29nSUNCdVpYaDBPaUJwSUQwK0lHTnZibk52YkdVdWJHOW5LR2twTEZ4dUlDb2dJQ0JsY25KdmNqb2daWEp5SUQwK0lHTnZibk52YkdVdVpYSnliM0lvWlhKeUtTeGNiaUFxSUNBZ1kyOXRjR3hsZEdVNklDZ3BJRDArSUdOdmJuTnZiR1V1Ykc5bktDZGpiMjF3YkdWMFpXUW5LVnh1SUNvZ2ZTbGNiaUFxSUdCZ1lGeHVJQ3BjYmlBcUlHQmdZSFJsZUhSY2JpQXFJRDRnV3pBc0lEaGRYRzRnS2lBK0lGc3hMQ0F4T0YxY2JpQXFJRDRnV3pJc0lESTRYVnh1SUNvZ1lHQmdYRzRnS2x4dUlDb2dZR0JnYW5OY2JpQXFJR2x0Y0c5eWRDQnpZVzF3YkdWRGIyMWlhVzVsSUdaeWIyMGdKM2h6ZEhKbFlXMHZaWGgwY21FdmMyRnRjR3hsUTI5dFltbHVaU2RjYmlBcUlHbHRjRzl5ZENCNGN5Qm1jbTl0SUNkNGMzUnlaV0Z0SjF4dUlDcGNiaUFxSUdOdmJuTjBJSE5oYlhCc1pYSWdQU0I0Y3k1d1pYSnBiMlJwWXlneE1EQXdLUzUwWVd0bEtETXBYRzRnS2lCamIyNXpkQ0J2ZEdobGNpQTlJSGh6TG5CbGNtbHZaR2xqS0RFd01Da3VkR0ZyWlNneUtWeHVJQ3BjYmlBcUlHTnZibk4wSUhOMGNtVmhiU0E5SUhOaGJYQnNaWEl1WTI5dGNHOXpaU2h6WVcxd2JHVkRiMjFpYVc1bEtHOTBhR1Z5S1NsY2JpQXFYRzRnS2lCemRISmxZVzB1WVdSa1RHbHpkR1Z1WlhJb2UxeHVJQ29nSUNCdVpYaDBPaUJwSUQwK0lHTnZibk52YkdVdWJHOW5LR2twTEZ4dUlDb2dJQ0JsY25KdmNqb2daWEp5SUQwK0lHTnZibk52YkdVdVpYSnliM0lvWlhKeUtTeGNiaUFxSUNBZ1kyOXRjR3hsZEdVNklDZ3BJRDArSUdOdmJuTnZiR1V1Ykc5bktDZGpiMjF3YkdWMFpXUW5LVnh1SUNvZ2ZTbGNiaUFxSUdCZ1lGeHVJQ3BjYmlBcUlHQmdZSFJsZUhSY2JpQXFJRDRnV3pBc0lERmRYRzRnS2lBK0lGc3hMQ0F4WFZ4dUlDb2dQaUJiTWl3Z01WMWNiaUFxSUdCZ1lGeHVJQ3BjYmlBcUlFQndZWEpoYlNCN0xpNHVVM1J5WldGdGZTQnpkSEpsWVcxeklFOXVaU0J2Y2lCdGIzSmxJSE4wY21WaGJYTWdkRzhnWTI5dFltbHVaU0IzYVhSb0lIUm9aU0J6WVcxd2JHVnlYRzRnS2lCemRISmxZVzB1WEc0Z0tpQkFjbVYwZFhKdUlIdFRkSEpsWVcxOVhHNGdLaTljYm5OaGJYQnNaVU52YldKcGJtVWdQU0JtZFc1amRHbHZiaUJ6WVcxd2JHVkRiMjFpYVc1bEtDNHVMbk4wY21WaGJYTTZJRUZ5Y21GNVBGTjBjbVZoYlR4aGJuaytQaWtnZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2MyRnRjR3hsUTI5dFltbHVaVTl3WlhKaGRHOXlLSE5oYlhCc1pYSTZJRk4wY21WaGJUeGhibmsrS1RvZ1UzUnlaV0Z0UEVGeWNtRjVQR0Z1ZVQ0K0lIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGTjBjbVZoYlR4QmNuSmhlVHhoYm5rK1BpaHVaWGNnVTJGdGNHeGxRMjl0WW1sdVpVOXdaWEpoZEc5eUtITmhiWEJzWlhJc0lITjBjbVZoYlhNcEtUdGNiaUFnZlR0Y2JuMGdZWE1nVTJGdGNHeGxRMjl0WW1sdVpWTnBaMjVoZEhWeVpUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdjMkZ0Y0d4bFEyOXRZbWx1WlRzaVhYMD0iLCIvKipcbiAqIFJvb3QgcmVmZXJlbmNlIGZvciBpZnJhbWVzLlxuICovXG5cbnZhciByb290O1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IC8vIEJyb3dzZXIgd2luZG93XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgeyAvLyBXZWIgV29ya2VyXG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIHsgLy8gT3RoZXIgZW52aXJvbm1lbnRzXG4gIGNvbnNvbGUud2FybihcIlVzaW5nIGJyb3dzZXItb25seSB2ZXJzaW9uIG9mIHN1cGVyYWdlbnQgaW4gbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG4gIHJvb3QgPSB0aGlzO1xufVxuXG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgUmVxdWVzdEJhc2UgPSByZXF1aXJlKCcuL3JlcXVlc3QtYmFzZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pcy1vYmplY3QnKTtcbnZhciBSZXNwb25zZUJhc2UgPSByZXF1aXJlKCcuL3Jlc3BvbnNlLWJhc2UnKTtcbnZhciBBZ2VudCA9IHJlcXVpcmUoJy4vYWdlbnQtYmFzZScpO1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gbm9vcCgpe307XG5cbi8qKlxuICogRXhwb3NlIGByZXF1ZXN0YC5cbiAqL1xuXG52YXIgcmVxdWVzdCA9IGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsKSB7XG4gIC8vIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiB1cmwpIHtcbiAgICByZXR1cm4gbmV3IGV4cG9ydHMuUmVxdWVzdCgnR0VUJywgbWV0aG9kKS5lbmQodXJsKTtcbiAgfVxuXG4gIC8vIHVybCBmaXJzdFxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyBleHBvcnRzLlJlcXVlc3QoJ0dFVCcsIG1ldGhvZCk7XG4gIH1cblxuICByZXR1cm4gbmV3IGV4cG9ydHMuUmVxdWVzdChtZXRob2QsIHVybCk7XG59XG5cbmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRGV0ZXJtaW5lIFhIUi5cbiAqL1xuXG5yZXF1ZXN0LmdldFhIUiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHJvb3QuWE1MSHR0cFJlcXVlc3RcbiAgICAgICYmICghcm9vdC5sb2NhdGlvbiB8fCAnZmlsZTonICE9IHJvb3QubG9jYXRpb24ucHJvdG9jb2xcbiAgICAgICAgICB8fCAhcm9vdC5BY3RpdmVYT2JqZWN0KSkge1xuICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3Q7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpOyB9IGNhdGNoKGUpIHt9XG4gICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUC42LjAnKTsgfSBjYXRjaChlKSB7fVxuICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTXN4bWwyLlhNTEhUVFAuMy4wJyk7IH0gY2F0Y2goZSkge31cbiAgICB0cnkgeyByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJyk7IH0gY2F0Y2goZSkge31cbiAgfVxuICB0aHJvdyBFcnJvcihcIkJyb3dzZXItb25seSB2ZXJzaW9uIG9mIHN1cGVyYWdlbnQgY291bGQgbm90IGZpbmQgWEhSXCIpO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGFkZGVkIHRvIHN1cHBvcnQgSUUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciB0cmltID0gJycudHJpbVxuICA/IGZ1bmN0aW9uKHMpIHsgcmV0dXJuIHMudHJpbSgpOyB9XG4gIDogZnVuY3Rpb24ocykgeyByZXR1cm4gcy5yZXBsYWNlKC8oXlxccyp8XFxzKiQpL2csICcnKTsgfTtcblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIGdpdmVuIGBvYmpgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShvYmopIHtcbiAgaWYgKCFpc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICB2YXIgcGFpcnMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIHB1c2hFbmNvZGVkS2V5VmFsdWVQYWlyKHBhaXJzLCBrZXksIG9ialtrZXldKTtcbiAgfVxuICByZXR1cm4gcGFpcnMuam9pbignJicpO1xufVxuXG4vKipcbiAqIEhlbHBzICdzZXJpYWxpemUnIHdpdGggc2VyaWFsaXppbmcgYXJyYXlzLlxuICogTXV0YXRlcyB0aGUgcGFpcnMgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFpcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICovXG5cbmZ1bmN0aW9uIHB1c2hFbmNvZGVkS2V5VmFsdWVQYWlyKHBhaXJzLCBrZXksIHZhbCkge1xuICBpZiAodmFsICE9IG51bGwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbih2KSB7XG4gICAgICAgIHB1c2hFbmNvZGVkS2V5VmFsdWVQYWlyKHBhaXJzLCBrZXksIHYpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICBmb3IodmFyIHN1YmtleSBpbiB2YWwpIHtcbiAgICAgICAgcHVzaEVuY29kZWRLZXlWYWx1ZVBhaXIocGFpcnMsIGtleSArICdbJyArIHN1YmtleSArICddJywgdmFsW3N1YmtleV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYWlycy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpXG4gICAgICAgICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICBwYWlycy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpKTtcbiAgfVxufVxuXG4vKipcbiAqIEV4cG9zZSBzZXJpYWxpemF0aW9uIG1ldGhvZC5cbiAqL1xuXG5yZXF1ZXN0LnNlcmlhbGl6ZU9iamVjdCA9IHNlcmlhbGl6ZTtcblxuLyoqXG4gICogUGFyc2UgdGhlIGdpdmVuIHgtd3d3LWZvcm0tdXJsZW5jb2RlZCBgc3RyYC5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICogQGFwaSBwcml2YXRlXG4gICovXG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nKHN0cikge1xuICB2YXIgb2JqID0ge307XG4gIHZhciBwYWlycyA9IHN0ci5zcGxpdCgnJicpO1xuICB2YXIgcGFpcjtcbiAgdmFyIHBvcztcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFpcnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgcG9zID0gcGFpci5pbmRleE9mKCc9Jyk7XG4gICAgaWYgKHBvcyA9PSAtMSkge1xuICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChwYWlyKV0gPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChwYWlyLnNsaWNlKDAsIHBvcykpXSA9XG4gICAgICAgIGRlY29kZVVSSUNvbXBvbmVudChwYWlyLnNsaWNlKHBvcyArIDEpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEV4cG9zZSBwYXJzZXIuXG4gKi9cblxucmVxdWVzdC5wYXJzZVN0cmluZyA9IHBhcnNlU3RyaW5nO1xuXG4vKipcbiAqIERlZmF1bHQgTUlNRSB0eXBlIG1hcC5cbiAqXG4gKiAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKi9cblxucmVxdWVzdC50eXBlcyA9IHtcbiAgaHRtbDogJ3RleHQvaHRtbCcsXG4gIGpzb246ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgeG1sOiAndGV4dC94bWwnLFxuICB1cmxlbmNvZGVkOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgJ2Zvcm0nOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgJ2Zvcm0tZGF0YSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG4vKipcbiAqIERlZmF1bHQgc2VyaWFsaXphdGlvbiBtYXAuXG4gKlxuICogICAgIHN1cGVyYWdlbnQuc2VyaWFsaXplWydhcHBsaWNhdGlvbi94bWwnXSA9IGZ1bmN0aW9uKG9iail7XG4gKiAgICAgICByZXR1cm4gJ2dlbmVyYXRlZCB4bWwgaGVyZSc7XG4gKiAgICAgfTtcbiAqXG4gKi9cblxucmVxdWVzdC5zZXJpYWxpemUgPSB7XG4gICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOiBzZXJpYWxpemUsXG4gICdhcHBsaWNhdGlvbi9qc29uJzogSlNPTi5zdHJpbmdpZnlcbn07XG5cbi8qKlxuICAqIERlZmF1bHQgcGFyc2Vycy5cbiAgKlxuICAqICAgICBzdXBlcmFnZW50LnBhcnNlWydhcHBsaWNhdGlvbi94bWwnXSA9IGZ1bmN0aW9uKHN0cil7XG4gICogICAgICAgcmV0dXJuIHsgb2JqZWN0IHBhcnNlZCBmcm9tIHN0ciB9O1xuICAqICAgICB9O1xuICAqXG4gICovXG5cbnJlcXVlc3QucGFyc2UgPSB7XG4gICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOiBwYXJzZVN0cmluZyxcbiAgJ2FwcGxpY2F0aW9uL2pzb24nOiBKU09OLnBhcnNlXG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBoZWFkZXIgYHN0cmAgaW50b1xuICogYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1hcHBlZCBmaWVsZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXIoc3RyKSB7XG4gIHZhciBsaW5lcyA9IHN0ci5zcGxpdCgvXFxyP1xcbi8pO1xuICB2YXIgZmllbGRzID0ge307XG4gIHZhciBpbmRleDtcbiAgdmFyIGxpbmU7XG4gIHZhciBmaWVsZDtcbiAgdmFyIHZhbDtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGluZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBsaW5lID0gbGluZXNbaV07XG4gICAgaW5kZXggPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7IC8vIGNvdWxkIGJlIGVtcHR5IGxpbmUsIGp1c3Qgc2tpcCBpdFxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZpZWxkID0gbGluZS5zbGljZSgwLCBpbmRleCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB0cmltKGxpbmUuc2xpY2UoaW5kZXggKyAxKSk7XG4gICAgZmllbGRzW2ZpZWxkXSA9IHZhbDtcbiAgfVxuXG4gIHJldHVybiBmaWVsZHM7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYG1pbWVgIGlzIGpzb24gb3IgaGFzICtqc29uIHN0cnVjdHVyZWQgc3ludGF4IHN1ZmZpeC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWltZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzSlNPTihtaW1lKSB7XG4gIC8vIHNob3VsZCBtYXRjaCAvanNvbiBvciAranNvblxuICAvLyBidXQgbm90IC9qc29uLXNlcVxuICByZXR1cm4gL1tcXC8rXWpzb24oJHxbXi1cXHddKS8udGVzdChtaW1lKTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBSZXNwb25zZWAgd2l0aCB0aGUgZ2l2ZW4gYHhocmAuXG4gKlxuICogIC0gc2V0IGZsYWdzICgub2ssIC5lcnJvciwgZXRjKVxuICogIC0gcGFyc2UgaGVhZGVyXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogIEFsaWFzaW5nIGBzdXBlcmFnZW50YCBhcyBgcmVxdWVzdGAgaXMgbmljZTpcbiAqXG4gKiAgICAgIHJlcXVlc3QgPSBzdXBlcmFnZW50O1xuICpcbiAqICBXZSBjYW4gdXNlIHRoZSBwcm9taXNlLWxpa2UgQVBJLCBvciBwYXNzIGNhbGxiYWNrczpcbiAqXG4gKiAgICAgIHJlcXVlc3QuZ2V0KCcvJykuZW5kKGZ1bmN0aW9uKHJlcyl7fSk7XG4gKiAgICAgIHJlcXVlc3QuZ2V0KCcvJywgZnVuY3Rpb24ocmVzKXt9KTtcbiAqXG4gKiAgU2VuZGluZyBkYXRhIGNhbiBiZSBjaGFpbmVkOlxuICpcbiAqICAgICAgcmVxdWVzdFxuICogICAgICAgIC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgLmVuZChmdW5jdGlvbihyZXMpe30pO1xuICpcbiAqICBPciBwYXNzZWQgdG8gYC5zZW5kKClgOlxuICpcbiAqICAgICAgcmVxdWVzdFxuICogICAgICAgIC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0sIGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogIE9yIHBhc3NlZCB0byBgLnBvc3QoKWA6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJywgeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgLmVuZChmdW5jdGlvbihyZXMpe30pO1xuICpcbiAqIE9yIGZ1cnRoZXIgcmVkdWNlZCB0byBhIHNpbmdsZSBjYWxsIGZvciBzaW1wbGUgY2FzZXM6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJywgeyBuYW1lOiAndGonIH0sIGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogQHBhcmFtIHtYTUxIVFRQUmVxdWVzdH0geGhyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gUmVzcG9uc2UocmVxKSB7XG4gIHRoaXMucmVxID0gcmVxO1xuICB0aGlzLnhociA9IHRoaXMucmVxLnhocjtcbiAgLy8gcmVzcG9uc2VUZXh0IGlzIGFjY2Vzc2libGUgb25seSBpZiByZXNwb25zZVR5cGUgaXMgJycgb3IgJ3RleHQnIGFuZCBvbiBvbGRlciBicm93c2Vyc1xuICB0aGlzLnRleHQgPSAoKHRoaXMucmVxLm1ldGhvZCAhPSdIRUFEJyAmJiAodGhpcy54aHIucmVzcG9uc2VUeXBlID09PSAnJyB8fCB0aGlzLnhoci5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JykpIHx8IHR5cGVvZiB0aGlzLnhoci5yZXNwb25zZVR5cGUgPT09ICd1bmRlZmluZWQnKVxuICAgICA/IHRoaXMueGhyLnJlc3BvbnNlVGV4dFxuICAgICA6IG51bGw7XG4gIHRoaXMuc3RhdHVzVGV4dCA9IHRoaXMucmVxLnhoci5zdGF0dXNUZXh0O1xuICB2YXIgc3RhdHVzID0gdGhpcy54aHIuc3RhdHVzO1xuICAvLyBoYW5kbGUgSUU5IGJ1ZzogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDA0Njk3Mi9tc2llLXJldHVybnMtc3RhdHVzLWNvZGUtb2YtMTIyMy1mb3ItYWpheC1yZXF1ZXN0XG4gIGlmIChzdGF0dXMgPT09IDEyMjMpIHtcbiAgICBzdGF0dXMgPSAyMDQ7XG4gIH1cbiAgdGhpcy5fc2V0U3RhdHVzUHJvcGVydGllcyhzdGF0dXMpO1xuICB0aGlzLmhlYWRlciA9IHRoaXMuaGVhZGVycyA9IHBhcnNlSGVhZGVyKHRoaXMueGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKTtcbiAgLy8gZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIHNvbWV0aW1lcyBmYWxzZWx5IHJldHVybnMgXCJcIiBmb3IgQ09SUyByZXF1ZXN0cywgYnV0XG4gIC8vIGdldFJlc3BvbnNlSGVhZGVyIHN0aWxsIHdvcmtzLiBzbyB3ZSBnZXQgY29udGVudC10eXBlIGV2ZW4gaWYgZ2V0dGluZ1xuICAvLyBvdGhlciBoZWFkZXJzIGZhaWxzLlxuICB0aGlzLmhlYWRlclsnY29udGVudC10eXBlJ10gPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJyk7XG4gIHRoaXMuX3NldEhlYWRlclByb3BlcnRpZXModGhpcy5oZWFkZXIpO1xuXG4gIGlmIChudWxsID09PSB0aGlzLnRleHQgJiYgcmVxLl9yZXNwb25zZVR5cGUpIHtcbiAgICB0aGlzLmJvZHkgPSB0aGlzLnhoci5yZXNwb25zZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmJvZHkgPSB0aGlzLnJlcS5tZXRob2QgIT0gJ0hFQUQnXG4gICAgICA/IHRoaXMuX3BhcnNlQm9keSh0aGlzLnRleHQgPyB0aGlzLnRleHQgOiB0aGlzLnhoci5yZXNwb25zZSlcbiAgICAgIDogbnVsbDtcbiAgfVxufVxuXG5SZXNwb25zZUJhc2UoUmVzcG9uc2UucHJvdG90eXBlKTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYm9keSBgc3RyYC5cbiAqXG4gKiBVc2VkIGZvciBhdXRvLXBhcnNpbmcgb2YgYm9kaWVzLiBQYXJzZXJzXG4gKiBhcmUgZGVmaW5lZCBvbiB0aGUgYHN1cGVyYWdlbnQucGFyc2VgIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS5fcGFyc2VCb2R5ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciBwYXJzZSA9IHJlcXVlc3QucGFyc2VbdGhpcy50eXBlXTtcbiAgaWYgKHRoaXMucmVxLl9wYXJzZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZXEuX3BhcnNlcih0aGlzLCBzdHIpO1xuICB9XG4gIGlmICghcGFyc2UgJiYgaXNKU09OKHRoaXMudHlwZSkpIHtcbiAgICBwYXJzZSA9IHJlcXVlc3QucGFyc2VbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgfVxuICByZXR1cm4gcGFyc2UgJiYgc3RyICYmIChzdHIubGVuZ3RoIHx8IHN0ciBpbnN0YW5jZW9mIE9iamVjdClcbiAgICA/IHBhcnNlKHN0cilcbiAgICA6IG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybiBhbiBgRXJyb3JgIHJlcHJlc2VudGF0aXZlIG9mIHRoaXMgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybiB7RXJyb3J9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS50b0Vycm9yID0gZnVuY3Rpb24oKXtcbiAgdmFyIHJlcSA9IHRoaXMucmVxO1xuICB2YXIgbWV0aG9kID0gcmVxLm1ldGhvZDtcbiAgdmFyIHVybCA9IHJlcS51cmw7XG5cbiAgdmFyIG1zZyA9ICdjYW5ub3QgJyArIG1ldGhvZCArICcgJyArIHVybCArICcgKCcgKyB0aGlzLnN0YXR1cyArICcpJztcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICBlcnIuc3RhdHVzID0gdGhpcy5zdGF0dXM7XG4gIGVyci5tZXRob2QgPSBtZXRob2Q7XG4gIGVyci51cmwgPSB1cmw7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZWAuXG4gKi9cblxucmVxdWVzdC5SZXNwb25zZSA9IFJlc3BvbnNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlcXVlc3RgIHdpdGggdGhlIGdpdmVuIGBtZXRob2RgIGFuZCBgdXJsYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9xdWVyeSA9IHRoaXMuX3F1ZXJ5IHx8IFtdO1xuICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgdGhpcy51cmwgPSB1cmw7XG4gIHRoaXMuaGVhZGVyID0ge307IC8vIHByZXNlcnZlcyBoZWFkZXIgbmFtZSBjYXNlXG4gIHRoaXMuX2hlYWRlciA9IHt9OyAvLyBjb2VyY2VzIGhlYWRlciBuYW1lcyB0byBsb3dlcmNhc2VcbiAgdGhpcy5vbignZW5kJywgZnVuY3Rpb24oKXtcbiAgICB2YXIgZXJyID0gbnVsbDtcbiAgICB2YXIgcmVzID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICByZXMgPSBuZXcgUmVzcG9uc2Uoc2VsZik7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBlcnIgPSBuZXcgRXJyb3IoJ1BhcnNlciBpcyB1bmFibGUgdG8gcGFyc2UgdGhlIHJlc3BvbnNlJyk7XG4gICAgICBlcnIucGFyc2UgPSB0cnVlO1xuICAgICAgZXJyLm9yaWdpbmFsID0gZTtcbiAgICAgIC8vIGlzc3VlICM2NzU6IHJldHVybiB0aGUgcmF3IHJlc3BvbnNlIGlmIHRoZSByZXNwb25zZSBwYXJzaW5nIGZhaWxzXG4gICAgICBpZiAoc2VsZi54aHIpIHtcbiAgICAgICAgLy8gaWU5IGRvZXNuJ3QgaGF2ZSAncmVzcG9uc2UnIHByb3BlcnR5XG4gICAgICAgIGVyci5yYXdSZXNwb25zZSA9IHR5cGVvZiBzZWxmLnhoci5yZXNwb25zZVR5cGUgPT0gJ3VuZGVmaW5lZCcgPyBzZWxmLnhoci5yZXNwb25zZVRleHQgOiBzZWxmLnhoci5yZXNwb25zZTtcbiAgICAgICAgLy8gaXNzdWUgIzg3NjogcmV0dXJuIHRoZSBodHRwIHN0YXR1cyBjb2RlIGlmIHRoZSByZXNwb25zZSBwYXJzaW5nIGZhaWxzXG4gICAgICAgIGVyci5zdGF0dXMgPSBzZWxmLnhoci5zdGF0dXMgPyBzZWxmLnhoci5zdGF0dXMgOiBudWxsO1xuICAgICAgICBlcnIuc3RhdHVzQ29kZSA9IGVyci5zdGF0dXM7IC8vIGJhY2t3YXJkcy1jb21wYXQgb25seVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyLnJhd1Jlc3BvbnNlID0gbnVsbDtcbiAgICAgICAgZXJyLnN0YXR1cyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmLmNhbGxiYWNrKGVycik7XG4gICAgfVxuXG4gICAgc2VsZi5lbWl0KCdyZXNwb25zZScsIHJlcyk7XG5cbiAgICB2YXIgbmV3X2VycjtcbiAgICB0cnkge1xuICAgICAgaWYgKCFzZWxmLl9pc1Jlc3BvbnNlT0socmVzKSkge1xuICAgICAgICBuZXdfZXJyID0gbmV3IEVycm9yKHJlcy5zdGF0dXNUZXh0IHx8ICdVbnN1Y2Nlc3NmdWwgSFRUUCByZXNwb25zZScpO1xuICAgICAgfVxuICAgIH0gY2F0Y2goY3VzdG9tX2Vycikge1xuICAgICAgbmV3X2VyciA9IGN1c3RvbV9lcnI7IC8vIG9rKCkgY2FsbGJhY2sgY2FuIHRocm93XG4gICAgfVxuXG4gICAgLy8gIzEwMDAgZG9uJ3QgY2F0Y2ggZXJyb3JzIGZyb20gdGhlIGNhbGxiYWNrIHRvIGF2b2lkIGRvdWJsZSBjYWxsaW5nIGl0XG4gICAgaWYgKG5ld19lcnIpIHtcbiAgICAgIG5ld19lcnIub3JpZ2luYWwgPSBlcnI7XG4gICAgICBuZXdfZXJyLnJlc3BvbnNlID0gcmVzO1xuICAgICAgbmV3X2Vyci5zdGF0dXMgPSByZXMuc3RhdHVzO1xuICAgICAgc2VsZi5jYWxsYmFjayhuZXdfZXJyLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmNhbGxiYWNrKG51bGwsIHJlcyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBNaXhpbiBgRW1pdHRlcmAgYW5kIGBSZXF1ZXN0QmFzZWAuXG4gKi9cblxuRW1pdHRlcihSZXF1ZXN0LnByb3RvdHlwZSk7XG5SZXF1ZXN0QmFzZShSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU2V0IENvbnRlbnQtVHlwZSB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKiAgICAgIHJlcXVlc3QucG9zdCgnLycpXG4gKiAgICAgICAgLnR5cGUoJ3htbCcpXG4gKiAgICAgICAgLnNlbmQoeG1sc3RyaW5nKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqICAgICAgcmVxdWVzdC5wb3N0KCcvJylcbiAqICAgICAgICAudHlwZSgnYXBwbGljYXRpb24veG1sJylcbiAqICAgICAgICAuc2VuZCh4bWxzdHJpbmcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS50eXBlID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdDb250ZW50LVR5cGUnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEFjY2VwdCB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy5qc29uID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICpcbiAqICAgICAgcmVxdWVzdC5nZXQoJy9hZ2VudCcpXG4gKiAgICAgICAgLmFjY2VwdCgnanNvbicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXF1ZXN0LmdldCgnL2FnZW50JylcbiAqICAgICAgICAuYWNjZXB0KCdhcHBsaWNhdGlvbi9qc29uJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWNjZXB0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdBY2NlcHQnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEF1dGhvcml6YXRpb24gZmllbGQgdmFsdWUgd2l0aCBgdXNlcmAgYW5kIGBwYXNzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXNlclxuICogQHBhcmFtIHtTdHJpbmd9IFtwYXNzXSBvcHRpb25hbCBpbiBjYXNlIG9mIHVzaW5nICdiZWFyZXInIGFzIHR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHdpdGggJ3R5cGUnIHByb3BlcnR5ICdhdXRvJywgJ2Jhc2ljJyBvciAnYmVhcmVyJyAoZGVmYXVsdCAnYmFzaWMnKVxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmF1dGggPSBmdW5jdGlvbih1c2VyLCBwYXNzLCBvcHRpb25zKXtcbiAgaWYgKDEgPT09IGFyZ3VtZW50cy5sZW5ndGgpIHBhc3MgPSAnJztcbiAgaWYgKHR5cGVvZiBwYXNzID09PSAnb2JqZWN0JyAmJiBwYXNzICE9PSBudWxsKSB7IC8vIHBhc3MgaXMgb3B0aW9uYWwgYW5kIGNhbiBiZSByZXBsYWNlZCB3aXRoIG9wdGlvbnNcbiAgICBvcHRpb25zID0gcGFzcztcbiAgICBwYXNzID0gJyc7XG4gIH1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHR5cGU6ICdmdW5jdGlvbicgPT09IHR5cGVvZiBidG9hID8gJ2Jhc2ljJyA6ICdhdXRvJyxcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVuY29kZXIgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGJ0b2EpIHtcbiAgICAgIHJldHVybiBidG9hKHN0cmluZyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSBiYXNpYyBhdXRoLCBidG9hIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH07XG5cbiAgcmV0dXJuIHRoaXMuX2F1dGgodXNlciwgcGFzcywgb3B0aW9ucywgZW5jb2Rlcik7XG59O1xuXG4vKipcbiAqIEFkZCBxdWVyeS1zdHJpbmcgYHZhbGAuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICByZXF1ZXN0LmdldCgnL3Nob2VzJylcbiAqICAgICAucXVlcnkoJ3NpemU9MTAnKVxuICogICAgIC5xdWVyeSh7IGNvbG9yOiAnYmx1ZScgfSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IHZhbFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24odmFsKXtcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiB2YWwpIHZhbCA9IHNlcmlhbGl6ZSh2YWwpO1xuICBpZiAodmFsKSB0aGlzLl9xdWVyeS5wdXNoKHZhbCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBRdWV1ZSB0aGUgZ2l2ZW4gYGZpbGVgIGFzIGFuIGF0dGFjaG1lbnQgdG8gdGhlIHNwZWNpZmllZCBgZmllbGRgLFxuICogd2l0aCBvcHRpb25hbCBgb3B0aW9uc2AgKG9yIGZpbGVuYW1lKS5cbiAqXG4gKiBgYGAganNcbiAqIHJlcXVlc3QucG9zdCgnL3VwbG9hZCcpXG4gKiAgIC5hdHRhY2goJ2NvbnRlbnQnLCBuZXcgQmxvYihbJzxhIGlkPVwiYVwiPjxiIGlkPVwiYlwiPmhleSE8L2I+PC9hPiddLCB7IHR5cGU6IFwidGV4dC9odG1sXCJ9KSlcbiAqICAgLmVuZChjYWxsYmFjayk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEBwYXJhbSB7QmxvYnxGaWxlfSBmaWxlXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbihmaWVsZCwgZmlsZSwgb3B0aW9ucyl7XG4gIGlmIChmaWxlKSB7XG4gICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgIHRocm93IEVycm9yKFwic3VwZXJhZ2VudCBjYW4ndCBtaXggLnNlbmQoKSBhbmQgLmF0dGFjaCgpXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX2dldEZvcm1EYXRhKCkuYXBwZW5kKGZpZWxkLCBmaWxlLCBvcHRpb25zIHx8IGZpbGUubmFtZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5fZ2V0Rm9ybURhdGEgPSBmdW5jdGlvbigpe1xuICBpZiAoIXRoaXMuX2Zvcm1EYXRhKSB7XG4gICAgdGhpcy5fZm9ybURhdGEgPSBuZXcgcm9vdC5Gb3JtRGF0YSgpO1xuICB9XG4gIHJldHVybiB0aGlzLl9mb3JtRGF0YTtcbn07XG5cbi8qKlxuICogSW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIGBlcnJgIGFuZCBgcmVzYFxuICogYW5kIGhhbmRsZSBhcml0eSBjaGVjay5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2FsbGJhY2sgPSBmdW5jdGlvbihlcnIsIHJlcyl7XG4gIGlmICh0aGlzLl9zaG91bGRSZXRyeShlcnIsIHJlcykpIHtcbiAgICByZXR1cm4gdGhpcy5fcmV0cnkoKTtcbiAgfVxuXG4gIHZhciBmbiA9IHRoaXMuX2NhbGxiYWNrO1xuICB0aGlzLmNsZWFyVGltZW91dCgpO1xuXG4gIGlmIChlcnIpIHtcbiAgICBpZiAodGhpcy5fbWF4UmV0cmllcykgZXJyLnJldHJpZXMgPSB0aGlzLl9yZXRyaWVzIC0gMTtcbiAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGZuKGVyciwgcmVzKTtcbn07XG5cbi8qKlxuICogSW52b2tlIGNhbGxiYWNrIHdpdGggeC1kb21haW4gZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3Jvc3NEb21haW5FcnJvciA9IGZ1bmN0aW9uKCl7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1JlcXVlc3QgaGFzIGJlZW4gdGVybWluYXRlZFxcblBvc3NpYmxlIGNhdXNlczogdGhlIG5ldHdvcmsgaXMgb2ZmbGluZSwgT3JpZ2luIGlzIG5vdCBhbGxvd2VkIGJ5IEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiwgdGhlIHBhZ2UgaXMgYmVpbmcgdW5sb2FkZWQsIGV0Yy4nKTtcbiAgZXJyLmNyb3NzRG9tYWluID0gdHJ1ZTtcblxuICBlcnIuc3RhdHVzID0gdGhpcy5zdGF0dXM7XG4gIGVyci5tZXRob2QgPSB0aGlzLm1ldGhvZDtcbiAgZXJyLnVybCA9IHRoaXMudXJsO1xuXG4gIHRoaXMuY2FsbGJhY2soZXJyKTtcbn07XG5cbi8vIFRoaXMgb25seSB3YXJucywgYmVjYXVzZSB0aGUgcmVxdWVzdCBpcyBzdGlsbCBsaWtlbHkgdG8gd29ya1xuUmVxdWVzdC5wcm90b3R5cGUuYnVmZmVyID0gUmVxdWVzdC5wcm90b3R5cGUuY2EgPSBSZXF1ZXN0LnByb3RvdHlwZS5hZ2VudCA9IGZ1bmN0aW9uKCl7XG4gIGNvbnNvbGUud2FybihcIlRoaXMgaXMgbm90IHN1cHBvcnRlZCBpbiBicm93c2VyIHZlcnNpb24gb2Ygc3VwZXJhZ2VudFwiKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBUaGlzIHRocm93cywgYmVjYXVzZSBpdCBjYW4ndCBzZW5kL3JlY2VpdmUgZGF0YSBhcyBleHBlY3RlZFxuUmVxdWVzdC5wcm90b3R5cGUucGlwZSA9IFJlcXVlc3QucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oKXtcbiAgdGhyb3cgRXJyb3IoXCJTdHJlYW1pbmcgaXMgbm90IHN1cHBvcnRlZCBpbiBicm93c2VyIHZlcnNpb24gb2Ygc3VwZXJhZ2VudFwiKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBob3N0IG9iamVjdCxcbiAqIHdlIGRvbid0IHdhbnQgdG8gc2VyaWFsaXplIHRoZXNlIDopXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5SZXF1ZXN0LnByb3RvdHlwZS5faXNIb3N0ID0gZnVuY3Rpb24gX2lzSG9zdChvYmopIHtcbiAgLy8gTmF0aXZlIG9iamVjdHMgc3RyaW5naWZ5IHRvIFtvYmplY3QgRmlsZV0sIFtvYmplY3QgQmxvYl0sIFtvYmplY3QgRm9ybURhdGFdLCBldGMuXG4gIHJldHVybiBvYmogJiYgJ29iamVjdCcgPT09IHR5cGVvZiBvYmogJiYgIUFycmF5LmlzQXJyYXkob2JqKSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbi8qKlxuICogSW5pdGlhdGUgcmVxdWVzdCwgaW52b2tpbmcgY2FsbGJhY2sgYGZuKHJlcylgXG4gKiB3aXRoIGFuIGluc3RhbmNlb2YgYFJlc3BvbnNlYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGZuKXtcbiAgaWYgKHRoaXMuX2VuZENhbGxlZCkge1xuICAgIGNvbnNvbGUud2FybihcIldhcm5pbmc6IC5lbmQoKSB3YXMgY2FsbGVkIHR3aWNlLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gc3VwZXJhZ2VudFwiKTtcbiAgfVxuICB0aGlzLl9lbmRDYWxsZWQgPSB0cnVlO1xuXG4gIC8vIHN0b3JlIGNhbGxiYWNrXG4gIHRoaXMuX2NhbGxiYWNrID0gZm4gfHwgbm9vcDtcblxuICAvLyBxdWVyeXN0cmluZ1xuICB0aGlzLl9maW5hbGl6ZVF1ZXJ5U3RyaW5nKCk7XG5cbiAgcmV0dXJuIHRoaXMuX2VuZCgpO1xufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuX2VuZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB4aHIgPSAodGhpcy54aHIgPSByZXF1ZXN0LmdldFhIUigpKTtcbiAgdmFyIGRhdGEgPSB0aGlzLl9mb3JtRGF0YSB8fCB0aGlzLl9kYXRhO1xuXG4gIHRoaXMuX3NldFRpbWVvdXRzKCk7XG5cbiAgLy8gc3RhdGUgY2hhbmdlXG4gIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpe1xuICAgIHZhciByZWFkeVN0YXRlID0geGhyLnJlYWR5U3RhdGU7XG4gICAgaWYgKHJlYWR5U3RhdGUgPj0gMiAmJiBzZWxmLl9yZXNwb25zZVRpbWVvdXRUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3Jlc3BvbnNlVGltZW91dFRpbWVyKTtcbiAgICB9XG4gICAgaWYgKDQgIT0gcmVhZHlTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEluIElFOSwgcmVhZHMgdG8gYW55IHByb3BlcnR5IChlLmcuIHN0YXR1cykgb2ZmIG9mIGFuIGFib3J0ZWQgWEhSIHdpbGxcbiAgICAvLyByZXN1bHQgaW4gdGhlIGVycm9yIFwiQ291bGQgbm90IGNvbXBsZXRlIHRoZSBvcGVyYXRpb24gZHVlIHRvIGVycm9yIGMwMGMwMjNmXCJcbiAgICB2YXIgc3RhdHVzO1xuICAgIHRyeSB7IHN0YXR1cyA9IHhoci5zdGF0dXMgfSBjYXRjaChlKSB7IHN0YXR1cyA9IDA7IH1cblxuICAgIGlmICghc3RhdHVzKSB7XG4gICAgICBpZiAoc2VsZi50aW1lZG91dCB8fCBzZWxmLl9hYm9ydGVkKSByZXR1cm47XG4gICAgICByZXR1cm4gc2VsZi5jcm9zc0RvbWFpbkVycm9yKCk7XG4gICAgfVxuICAgIHNlbGYuZW1pdCgnZW5kJyk7XG4gIH07XG5cbiAgLy8gcHJvZ3Jlc3NcbiAgdmFyIGhhbmRsZVByb2dyZXNzID0gZnVuY3Rpb24oZGlyZWN0aW9uLCBlKSB7XG4gICAgaWYgKGUudG90YWwgPiAwKSB7XG4gICAgICBlLnBlcmNlbnQgPSBlLmxvYWRlZCAvIGUudG90YWwgKiAxMDA7XG4gICAgfVxuICAgIGUuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgIHNlbGYuZW1pdCgncHJvZ3Jlc3MnLCBlKTtcbiAgfTtcbiAgaWYgKHRoaXMuaGFzTGlzdGVuZXJzKCdwcm9ncmVzcycpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHhoci5vbnByb2dyZXNzID0gaGFuZGxlUHJvZ3Jlc3MuYmluZChudWxsLCAnZG93bmxvYWQnKTtcbiAgICAgIGlmICh4aHIudXBsb2FkKSB7XG4gICAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IGhhbmRsZVByb2dyZXNzLmJpbmQobnVsbCwgJ3VwbG9hZCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgLy8gQWNjZXNzaW5nIHhoci51cGxvYWQgZmFpbHMgaW4gSUUgZnJvbSBhIHdlYiB3b3JrZXIsIHNvIGp1c3QgcHJldGVuZCBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgLy8gUmVwb3J0ZWQgaGVyZTpcbiAgICAgIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvODM3MjQ1L3htbGh0dHByZXF1ZXN0LXVwbG9hZC10aHJvd3MtaW52YWxpZC1hcmd1bWVudC13aGVuLXVzZWQtZnJvbS13ZWItd29ya2VyLWNvbnRleHRcbiAgICB9XG4gIH1cblxuICAvLyBpbml0aWF0ZSByZXF1ZXN0XG4gIHRyeSB7XG4gICAgaWYgKHRoaXMudXNlcm5hbWUgJiYgdGhpcy5wYXNzd29yZCkge1xuICAgICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJsLCB0cnVlLCB0aGlzLnVzZXJuYW1lLCB0aGlzLnBhc3N3b3JkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJsLCB0cnVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIHNlZSAjMTE0OVxuICAgIHJldHVybiB0aGlzLmNhbGxiYWNrKGVycik7XG4gIH1cblxuICAvLyBDT1JTXG4gIGlmICh0aGlzLl93aXRoQ3JlZGVudGlhbHMpIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuXG4gIC8vIGJvZHlcbiAgaWYgKCF0aGlzLl9mb3JtRGF0YSAmJiAnR0VUJyAhPSB0aGlzLm1ldGhvZCAmJiAnSEVBRCcgIT0gdGhpcy5tZXRob2QgJiYgJ3N0cmluZycgIT0gdHlwZW9mIGRhdGEgJiYgIXRoaXMuX2lzSG9zdChkYXRhKSkge1xuICAgIC8vIHNlcmlhbGl6ZSBzdHVmZlxuICAgIHZhciBjb250ZW50VHlwZSA9IHRoaXMuX2hlYWRlclsnY29udGVudC10eXBlJ107XG4gICAgdmFyIHNlcmlhbGl6ZSA9IHRoaXMuX3NlcmlhbGl6ZXIgfHwgcmVxdWVzdC5zZXJpYWxpemVbY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpWzBdIDogJyddO1xuICAgIGlmICghc2VyaWFsaXplICYmIGlzSlNPTihjb250ZW50VHlwZSkpIHtcbiAgICAgIHNlcmlhbGl6ZSA9IHJlcXVlc3Quc2VyaWFsaXplWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgfVxuICAgIGlmIChzZXJpYWxpemUpIGRhdGEgPSBzZXJpYWxpemUoZGF0YSk7XG4gIH1cblxuICAvLyBzZXQgaGVhZGVyIGZpZWxkc1xuICBmb3IgKHZhciBmaWVsZCBpbiB0aGlzLmhlYWRlcikge1xuICAgIGlmIChudWxsID09IHRoaXMuaGVhZGVyW2ZpZWxkXSkgY29udGludWU7XG5cbiAgICBpZiAodGhpcy5oZWFkZXIuaGFzT3duUHJvcGVydHkoZmllbGQpKVxuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoZmllbGQsIHRoaXMuaGVhZGVyW2ZpZWxkXSk7XG4gIH1cblxuICBpZiAodGhpcy5fcmVzcG9uc2VUeXBlKSB7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9IHRoaXMuX3Jlc3BvbnNlVHlwZTtcbiAgfVxuXG4gIC8vIHNlbmQgc3R1ZmZcbiAgdGhpcy5lbWl0KCdyZXF1ZXN0JywgdGhpcyk7XG5cbiAgLy8gSUUxMSB4aHIuc2VuZCh1bmRlZmluZWQpIHNlbmRzICd1bmRlZmluZWQnIHN0cmluZyBhcyBQT1NUIHBheWxvYWQgKGluc3RlYWQgb2Ygbm90aGluZylcbiAgLy8gV2UgbmVlZCBudWxsIGhlcmUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgeGhyLnNlbmQodHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnID8gZGF0YSA6IG51bGwpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnJlcXVlc3QuYWdlbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBBZ2VudCgpO1xufTtcblxuW1wiR0VUXCIsIFwiUE9TVFwiLCBcIk9QVElPTlNcIiwgXCJQQVRDSFwiLCBcIlBVVFwiLCBcIkRFTEVURVwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBBZ2VudC5wcm90b3R5cGVbbWV0aG9kLnRvTG93ZXJDYXNlKCldID0gZnVuY3Rpb24odXJsLCBmbikge1xuICAgIHZhciByZXEgPSBuZXcgcmVxdWVzdC5SZXF1ZXN0KG1ldGhvZCwgdXJsKTtcbiAgICB0aGlzLl9zZXREZWZhdWx0cyhyZXEpO1xuICAgIGlmIChmbikge1xuICAgICAgcmVxLmVuZChmbik7XG4gICAgfVxuICAgIHJldHVybiByZXE7XG4gIH07XG59KTtcblxuQWdlbnQucHJvdG90eXBlLmRlbCA9IEFnZW50LnByb3RvdHlwZVsnZGVsZXRlJ107XG5cbi8qKlxuICogR0VUIGB1cmxgIHdpdGggb3B0aW9uYWwgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IFtkYXRhXSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5nZXQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKSB7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdHRVQnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgKGZuID0gZGF0YSksIChkYXRhID0gbnVsbCk7XG4gIGlmIChkYXRhKSByZXEucXVlcnkoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIEhFQUQgYHVybGAgd2l0aCBvcHRpb25hbCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZHxGdW5jdGlvbn0gW2RhdGFdIG9yIGZuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LmhlYWQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKSB7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdIRUFEJywgdXJsKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIChmbiA9IGRhdGEpLCAoZGF0YSA9IG51bGwpO1xuICBpZiAoZGF0YSkgcmVxLnF1ZXJ5KGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBPUFRJT05TIHF1ZXJ5IHRvIGB1cmxgIHdpdGggb3B0aW9uYWwgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IFtkYXRhXSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5vcHRpb25zID0gZnVuY3Rpb24odXJsLCBkYXRhLCBmbikge1xuICB2YXIgcmVxID0gcmVxdWVzdCgnT1BUSU9OUycsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSAoZm4gPSBkYXRhKSwgKGRhdGEgPSBudWxsKTtcbiAgaWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBERUxFVEUgYHVybGAgd2l0aCBvcHRpb25hbCBgZGF0YWAgYW5kIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfSBbZGF0YV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlbCh1cmwsIGRhdGEsIGZuKSB7XG4gIHZhciByZXEgPSByZXF1ZXN0KCdERUxFVEUnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgKGZuID0gZGF0YSksIChkYXRhID0gbnVsbCk7XG4gIGlmIChkYXRhKSByZXEuc2VuZChkYXRhKTtcbiAgaWYgKGZuKSByZXEuZW5kKGZuKTtcbiAgcmV0dXJuIHJlcTtcbn1cblxucmVxdWVzdFsnZGVsJ10gPSBkZWw7XG5yZXF1ZXN0WydkZWxldGUnXSA9IGRlbDtcblxuLyoqXG4gKiBQQVRDSCBgdXJsYCB3aXRoIG9wdGlvbmFsIGBkYXRhYCBhbmQgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR9IFtkYXRhXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5wYXRjaCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pIHtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BBVENIJywgdXJsKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIChmbiA9IGRhdGEpLCAoZGF0YSA9IG51bGwpO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIFBPU1QgYHVybGAgd2l0aCBvcHRpb25hbCBgZGF0YWAgYW5kIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfSBbZGF0YV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl1cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnJlcXVlc3QucG9zdCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pIHtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BPU1QnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgKGZuID0gZGF0YSksIChkYXRhID0gbnVsbCk7XG4gIGlmIChkYXRhKSByZXEuc2VuZChkYXRhKTtcbiAgaWYgKGZuKSByZXEuZW5kKGZuKTtcbiAgcmV0dXJuIHJlcTtcbn07XG5cbi8qKlxuICogUFVUIGB1cmxgIHdpdGggb3B0aW9uYWwgYGRhdGFgIGFuZCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZHxGdW5jdGlvbn0gW2RhdGFdIG9yIGZuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LnB1dCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pIHtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BVVCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSAoZm4gPSBkYXRhKSwgKGRhdGEgPSBudWxsKTtcbiAgaWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbWFrZUFjY3VtdWxhdG9yO1xudmFyIGRlZmF1bHRDb21wYXJhdG9yID0gZnVuY3Rpb24gZGVmYXVsdENvbXBhcmF0b3IoYSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICBpZiAoYSA8IGIpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKGEgPT0gYikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiAxO1xuICB9O1xufTtcblxudmFyIGdlbmVyYXRlQ29tcGFyYXRvckZvcktleSA9IGZ1bmN0aW9uIGdlbmVyYXRlQ29tcGFyYXRvckZvcktleShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIHggPSBrZXkoYSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHZhciB5ID0ga2V5KGIpO1xuXG4gICAgICBpZiAoeCA8IHkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHggPT0geSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxO1xuICAgIH07XG4gIH07XG59O1xuXG5mdW5jdGlvbiBtYWtlQWNjdW11bGF0b3IoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIGNvbXBhcmF0b3IgPSBfcmVmLmNvbXBhcmF0b3IsXG4gICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgIF9yZWYkdW5pcXVlID0gX3JlZi51bmlxdWUsXG4gICAgICB1bmlxdWUgPSBfcmVmJHVuaXF1ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkdW5pcXVlO1xuXG4gIHZhciB1bmlxdWVJc0Z1bmN0aW9uID0gdHlwZW9mIHVuaXF1ZSA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAoY29tcGFyYXRvciAmJiBrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCb3RoIGNvbXBhcmF0b3IgYW5kIGtleSBjYW5ub3QgYmUgZGVmaW5lZFwiKTtcbiAgfVxuXG4gIGlmIChrZXkpIHtcbiAgICBjb21wYXJhdG9yID0gZ2VuZXJhdGVDb21wYXJhdG9yRm9yS2V5KGtleSk7XG4gIH0gZWxzZSBpZiAoIWNvbXBhcmF0b3IpIHtcbiAgICBjb21wYXJhdG9yID0gZGVmYXVsdENvbXBhcmF0b3I7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGxpc3QsIHZhbHVlKSB7XG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICB9XG5cbiAgICB2YXIgc2VlZGVkQ29tcGFyYXRvciA9IGNvbXBhcmF0b3IodmFsdWUpO1xuICAgIHZhciBsb3cgPSAtMSxcbiAgICAgICAgaGlnaCA9IGxpc3QubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxvdyAhPT0gaGlnaCAtIDEpIHtcbiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChoaWdoIC0gbG93KSAvIDIgKyBsb3cpO1xuICAgICAgdmFyIGNvbXBhcmlzb24gPSBzZWVkZWRDb21wYXJhdG9yKGxpc3RbbWlkXSk7XG5cbiAgICAgIGlmIChjb21wYXJpc29uID4gMCkge1xuICAgICAgICBsb3cgPSBtaWQ7XG4gICAgICB9IGVsc2UgaWYgKGNvbXBhcmlzb24gPT09IDApIHtcbiAgICAgICAgaWYgKHVuaXF1ZSkge1xuICAgICAgICAgIHZhciBuZXdMaXN0ID0gbGlzdC5zbGljZSgwKTtcbiAgICAgICAgICBuZXdMaXN0W21pZF0gPSB1bmlxdWVJc0Z1bmN0aW9uID8gdW5pcXVlKGxpc3RbbWlkXSwgdmFsdWUpIDogdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIG5ld0xpc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3Quc2xpY2UoMCwgbWlkKS5jb25jYXQoW3ZhbHVlXSkuY29uY2F0KGxpc3Quc2xpY2UobWlkKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3Quc2xpY2UoMCwgaGlnaCkuY29uY2F0KFt2YWx1ZV0pLmNvbmNhdChsaXN0LnNsaWNlKGhpZ2gpKTtcbiAgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJyk7XG52YXIgb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgdHlwZUNvbG9ycyA9IHtcbiAgbW9kaWZpZWQ6ICd5ZWxsb3cnLFxuICBhZGRlZDogJ2dyZWVuJyxcbiAgcmVtb3ZlZDogJ3JlZCdcbn07XG5cbnZhciBvcHRpb25zID0ge1xuICBpbmRlbnQ6IDIsXG4gIGluZGVudENoYXI6ICcgJyxcbiAgbmV3TGluZUNoYXI6ICdcXG4nLFxuICB3cmFwOiBmdW5jdGlvbiB3cmFwKHR5cGUsIHRleHQpIHtcbiAgICByZXR1cm4gY2hhbGtbdHlwZUNvbG9yc1t0eXBlXV0odGV4dCk7XG4gIH1cbn07XG5cbnZhciBpbmRlbnQgPSAnJztcbmZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5pbmRlbnQ7IGkrKykge1xuICBpbmRlbnQgKz0gb3B0aW9ucy5pbmRlbnRDaGFyO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAmJiAhQXJyYXkuaXNBcnJheShvYmopO1xufVxuXG5mdW5jdGlvbiBwcmludFZhcih2YXJpYWJsZSkge1xuICBpZiAodHlwZW9mIHZhcmlhYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhcmlhYmxlLnRvU3RyaW5nKCkucmVwbGFjZSgvXFx7LitcXH0vLCd7fScpO1xuICB9IGVsc2UgaWYoKHR5cGVvZiB2YXJpYWJsZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhcmlhYmxlID09PSAnc3RyaW5nJykgJiYgISh2YXJpYWJsZSBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFyaWFibGUpO1xuICB9XG5cbiAgcmV0dXJuICcnICsgdmFyaWFibGU7XG59XG5cbmZ1bmN0aW9uIGluZGVudFN1Ykl0ZW0odGV4dCkge1xuICByZXR1cm4gdGV4dC5zcGxpdChvcHRpb25zLm5ld0xpbmVDaGFyKS5tYXAoZnVuY3Rpb24gb25NYXAobGluZSwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZW50ICsgbGluZTtcbiAgfSkuam9pbihvcHRpb25zLm5ld0xpbmVDaGFyKTtcbn1cblxuZnVuY3Rpb24ga2V5Q2hhbmdlZChrZXksIHRleHQpIHtcbiAgcmV0dXJuIGluZGVudCArIGtleSArICc6ICcgKyBpbmRlbnRTdWJJdGVtKHRleHQpICsgb3B0aW9ucy5uZXdMaW5lQ2hhclxufVxuXG5mdW5jdGlvbiBrZXlSZW1vdmVkKGtleSwgdmFyaWFibGUpIHtcbiAgcmV0dXJuIG9wdGlvbnMud3JhcCgncmVtb3ZlZCcsICctICcgKyBrZXkgKyAnOiAnICsgcHJpbnRWYXIodmFyaWFibGUpKSArIG9wdGlvbnMubmV3TGluZUNoYXI7XG59XG5cbmZ1bmN0aW9uIGtleUFkZGVkKGtleSwgdmFyaWFibGUpIHtcbiAgcmV0dXJuIG9wdGlvbnMud3JhcCgnYWRkZWQnLCAnKyAnICsga2V5ICsgJzogJyArIHByaW50VmFyKHZhcmlhYmxlKSkgKyBvcHRpb25zLm5ld0xpbmVDaGFyO1xufVxuXG5mdW5jdGlvbiBkaWZmKGxlZnQsIHJpZ2h0KSB7XG4gIHZhciB0ZXh0ID0gJyc7XG4gIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gIHZhciBpdGVtRGlmZjtcbiAgdmFyIGtleXM7XG4gIHZhciBzdWJPdXRwdXQgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShsZWZ0KSAmJiBBcnJheS5pc0FycmF5KHJpZ2h0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVmdC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGkgPCByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgaXRlbURpZmYgPSBkaWZmKGxlZnRbaV0sIHJpZ2h0W2ldKTtcbiAgICAgICAgaWYgKGl0ZW1EaWZmLmNoYW5nZWQpIHtcbiAgICAgICAgICBzdWJPdXRwdXQgKz0ga2V5Q2hhbmdlZChpLCBpdGVtRGlmZi50ZXh0KTtcbiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3ViT3V0cHV0ICs9IGtleVJlbW92ZWQoaSwgbGVmdFtpXSk7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmlnaHQubGVuZ3RoID4gbGVmdC5sZW5ndGgpIHtcbiAgICAgIGZvciAoOyBpIDwgcmlnaHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3ViT3V0cHV0ICs9ICBrZXlBZGRlZChpLCByaWdodFtpXSk7XG4gICAgICB9XG4gICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRleHQgPSAnWycgKyBvcHRpb25zLm5ld0xpbmVDaGFyICsgc3ViT3V0cHV0ICsgJ10nO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChsZWZ0KSAmJiBpc09iamVjdChyaWdodCkpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXMobGVmdCk7XG4gICAgdmFyIHJpZ2h0T2JqID0gb2JqZWN0QXNzaWduKHt9LCByaWdodCk7XG4gICAgdmFyIGtleTtcbiAgICBrZXlzLnNvcnQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAocmlnaHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBpdGVtRGlmZiA9IGRpZmYobGVmdFtrZXldLCByaWdodFtrZXldKTtcbiAgICAgICAgaWYgKGl0ZW1EaWZmLmNoYW5nZWQpIHtcbiAgICAgICAgICBzdWJPdXRwdXQgKz0ga2V5Q2hhbmdlZChrZXksIGl0ZW1EaWZmLnRleHQpO1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSByaWdodE9ialtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3ViT3V0cHV0ICs9IGtleVJlbW92ZWQoa2V5LCBsZWZ0W2tleV0pO1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkZWRLZXlzID0gT2JqZWN0LmtleXMocmlnaHRPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWRkZWRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdWJPdXRwdXQgKz0ga2V5QWRkZWQoYWRkZWRLZXlzW2ldLCByaWdodFthZGRlZEtleXNbaV1dKTtcbiAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0ZXh0ID0gJ3snICsgb3B0aW9ucy5uZXdMaW5lQ2hhciArIHN1Yk91dHB1dCArICd9JztcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChsZWZ0ICE9PSByaWdodCkge1xuICAgIHRleHQgPSBvcHRpb25zLndyYXAoJ21vZGlmaWVkJywgcHJpbnRWYXIobGVmdCkgKyAnID0+ICcgKyBwcmludFZhcihyaWdodCkpO1xuICAgIGNoYW5nZWQgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjaGFuZ2VkOiBjaGFuZ2VkLFxuICAgIHRleHQ6IHRleHRcbiAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmY7IiwiJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogTW9kdWxlIERlcGVuZGVuY2llc1xuICovXG5cbnZhciBDdXN0b20gPSByZXF1aXJlKCdjdXN0b20tZXJyb3ItaW5zdGFuY2UnKVxudmFyIHVuaXEgPSByZXF1aXJlKCdsb2Rhc2gudW5pcWJ5JylcblxuLyoqXG4gKiBVc2UgYSBjdXN0b20gZXJyb3IgdHlwZVxuICovXG5cbnZhciBNdWx0aUVycm9yID0gQ3VzdG9tKCdNdWx0aUVycm9yJylcblxuLyoqXG4gKiBFeHBvcnQgYEVycm9yYFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXJyb3JcblxuLyoqXG4gKiBJbml0aWFsaXplIGFuIGVycm9yXG4gKi9cblxuZnVuY3Rpb24gZXJyb3IgKGVycm9ycykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgZXJyb3IpKSByZXR1cm4gbmV3IGVycm9yKGVycm9ycylcbiAgZXJyb3JzID0gQXJyYXkuaXNBcnJheShlcnJvcnMpID8gZXJyb3JzIDogWyBlcnJvcnMgXVxuICBlcnJvcnMgPSB1bmlxKGVycm9ycywgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXJyLnN0YWNrIH0pXG4gIGlmIChlcnJvcnMubGVuZ3RoID09PSAxKSByZXR1cm4gZXJyb3JzWzBdXG4gIHZhciBtdWx0aWVycm9yID0gbmV3IE11bHRpRXJyb3Ioe1xuICAgIG1lc3NhZ2U6IGVycm9ycy5tYXAoZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXJyLm1lc3NhZ2UgfSkuam9pbignOyAnKSxcbiAgICBlcnJvcnM6IGVycm9ycy5yZWR1Y2UoZnVuY3Rpb24gKGVycnMsIGVycikgeyByZXR1cm4gZXJycy5jb25jYXQoZXJyLmVycm9ycyB8fCBlcnIpIH0sIFtdKSxcbiAgfSlcblxuICAvLyBsYXppbHkgZ2V0L3NldCB0aGUgc3RhY2tcbiAgbXVsdGllcnJvci5fX2RlZmluZUdldHRlcl9fKCdzdGFjaycsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGVyci5zdGFjayB9KS5qb2luKCdcXG5cXG4nKVxuICB9KVxuXG4gIG11bHRpZXJyb3IuX19kZWZpbmVTZXR0ZXJfXygnc3RhY2snLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBbdmFsdWVdLmNvbmNhdChtdWx0aWVycm9yLnN0YWNrKS5qb2luKCdcXG5cXG4nKVxuICB9KVxuXG4gIHJldHVybiBtdWx0aWVycm9yXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIHByaW1pdGl2ZShzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLnByaW1pdGl2ZSA9IHByaW1pdGl2ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWdOYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpO1xufVxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUodGV4dCkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQodGV4dCkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpO1xufVxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkKG5vZGUsIGNoaWxkKSB7XG4gICAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5mdW5jdGlvbiBhcHBlbmRDaGlsZChub2RlLCBjaGlsZCkge1xuICAgIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuZnVuY3Rpb24gcGFyZW50Tm9kZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZTtcbn1cbmZ1bmN0aW9uIG5leHRTaWJsaW5nKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbn1cbmZ1bmN0aW9uIHRhZ05hbWUoZWxtKSB7XG4gICAgcmV0dXJuIGVsbS50YWdOYW1lO1xufVxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQobm9kZSwgdGV4dCkge1xuICAgIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnRleHRDb250ZW50O1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGlzVGV4dChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDM7XG59XG5mdW5jdGlvbiBpc0NvbW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSA4O1xufVxuZXhwb3J0cy5odG1sRG9tQXBpID0ge1xuICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXG4gICAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gICAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICAgIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gICAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gICAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICAgIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICAgIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgICBnZXRUZXh0Q29udGVudDogZ2V0VGV4dENvbnRlbnQsXG4gICAgaXNFbGVtZW50OiBpc0VsZW1lbnQsXG4gICAgaXNUZXh0OiBpc1RleHQsXG4gICAgaXNDb21tZW50OiBpc0NvbW1lbnQsXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5odG1sRG9tQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHRtbGRvbWFwaS5qcy5tYXAiLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIG9mIG1peGVkLWluIGZ1bmN0aW9ucyBzaGFyZWQgYmV0d2VlbiBub2RlIGFuZCBjbGllbnQgY29kZVxuICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzLW9iamVjdCcpO1xuXG4vKipcbiAqIEV4cG9zZSBgUmVxdWVzdEJhc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVxdWVzdEJhc2U7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgUmVxdWVzdEJhc2VgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUmVxdWVzdEJhc2Uob2JqKSB7XG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xufVxuXG4vKipcbiAqIE1peGluIHRoZSBwcm90b3R5cGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcbiAgZm9yICh2YXIga2V5IGluIFJlcXVlc3RCYXNlLnByb3RvdHlwZSkge1xuICAgIG9ialtrZXldID0gUmVxdWVzdEJhc2UucHJvdG90eXBlW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBDbGVhciBwcmV2aW91cyB0aW1lb3V0LlxuICpcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24gX2NsZWFyVGltZW91dCgpe1xuICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICBjbGVhclRpbWVvdXQodGhpcy5fcmVzcG9uc2VUaW1lb3V0VGltZXIpO1xuICBkZWxldGUgdGhpcy5fdGltZXI7XG4gIGRlbGV0ZSB0aGlzLl9yZXNwb25zZVRpbWVvdXRUaW1lcjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlIGRlZmF1bHQgcmVzcG9uc2UgYm9keSBwYXJzZXJcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHRvIGNvbnZlcnQgaW5jb21pbmcgZGF0YSBpbnRvIHJlcXVlc3QuYm9keVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKGZuKXtcbiAgdGhpcy5fcGFyc2VyID0gZm47XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgZm9ybWF0IG9mIGJpbmFyeSByZXNwb25zZSBib2R5LlxuICogSW4gYnJvd3NlciB2YWxpZCBmb3JtYXRzIGFyZSAnYmxvYicgYW5kICdhcnJheWJ1ZmZlcicsXG4gKiB3aGljaCByZXR1cm4gQmxvYiBhbmQgQXJyYXlCdWZmZXIsIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBJbiBOb2RlIGFsbCB2YWx1ZXMgcmVzdWx0IGluIEJ1ZmZlci5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgIHJlcS5nZXQoJy8nKVxuICogICAgICAgIC5yZXNwb25zZVR5cGUoJ2Jsb2InKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUucmVzcG9uc2VUeXBlID0gZnVuY3Rpb24odmFsKXtcbiAgdGhpcy5fcmVzcG9uc2VUeXBlID0gdmFsO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3ZlcnJpZGUgZGVmYXVsdCByZXF1ZXN0IGJvZHkgc2VyaWFsaXplclxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgdG8gY29udmVydCBkYXRhIHNldCB2aWEgLnNlbmQgb3IgLmF0dGFjaCBpbnRvIHBheWxvYWQgdG8gc2VuZFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5zZXJpYWxpemUgPSBmdW5jdGlvbiBzZXJpYWxpemUoZm4pe1xuICB0aGlzLl9zZXJpYWxpemVyID0gZm47XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGltZW91dHMuXG4gKlxuICogLSByZXNwb25zZSB0aW1lb3V0IGlzIHRpbWUgYmV0d2VlbiBzZW5kaW5nIHJlcXVlc3QgYW5kIHJlY2VpdmluZyB0aGUgZmlyc3QgYnl0ZSBvZiB0aGUgcmVzcG9uc2UuIEluY2x1ZGVzIEROUyBhbmQgY29ubmVjdGlvbiB0aW1lLlxuICogLSBkZWFkbGluZSBpcyB0aGUgdGltZSBmcm9tIHN0YXJ0IG9mIHRoZSByZXF1ZXN0IHRvIHJlY2VpdmluZyByZXNwb25zZSBib2R5IGluIGZ1bGwuIElmIHRoZSBkZWFkbGluZSBpcyB0b28gc2hvcnQgbGFyZ2UgZmlsZXMgbWF5IG5vdCBsb2FkIGF0IGFsbCBvbiBzbG93IGNvbm5lY3Rpb25zLlxuICpcbiAqIFZhbHVlIG9mIDAgb3IgZmFsc2UgbWVhbnMgbm8gdGltZW91dC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IG1zIG9yIHtyZXNwb25zZSwgZGVhZGxpbmV9XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiB0aW1lb3V0KG9wdGlvbnMpe1xuICBpZiAoIW9wdGlvbnMgfHwgJ29iamVjdCcgIT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgdGhpcy5fdGltZW91dCA9IG9wdGlvbnM7XG4gICAgdGhpcy5fcmVzcG9uc2VUaW1lb3V0ID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZvcih2YXIgb3B0aW9uIGluIG9wdGlvbnMpIHtcbiAgICBzd2l0Y2gob3B0aW9uKSB7XG4gICAgICBjYXNlICdkZWFkbGluZSc6XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSBvcHRpb25zLmRlYWRsaW5lO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Jlc3BvbnNlJzpcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VUaW1lb3V0ID0gb3B0aW9ucy5yZXNwb25zZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zb2xlLndhcm4oXCJVbmtub3duIHRpbWVvdXQgb3B0aW9uXCIsIG9wdGlvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgbnVtYmVyIG9mIHJldHJ5IGF0dGVtcHRzIG9uIGVycm9yLlxuICpcbiAqIEZhaWxlZCByZXF1ZXN0cyB3aWxsIGJlIHJldHJpZWQgJ2NvdW50JyB0aW1lcyBpZiB0aW1lb3V0IG9yIGVyci5jb2RlID49IDUwMC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gY291bnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl1cbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUucmV0cnkgPSBmdW5jdGlvbiByZXRyeShjb3VudCwgZm4pe1xuICAvLyBEZWZhdWx0IHRvIDEgaWYgbm8gY291bnQgcGFzc2VkIG9yIHRydWVcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgY291bnQgPT09IHRydWUpIGNvdW50ID0gMTtcbiAgaWYgKGNvdW50IDw9IDApIGNvdW50ID0gMDtcbiAgdGhpcy5fbWF4UmV0cmllcyA9IGNvdW50O1xuICB0aGlzLl9yZXRyaWVzID0gMDtcbiAgdGhpcy5fcmV0cnlDYWxsYmFjayA9IGZuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnZhciBFUlJPUl9DT0RFUyA9IFtcbiAgJ0VDT05OUkVTRVQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VBRERSSU5GTycsXG4gICdFU09DS0VUVElNRURPVVQnXG5dO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHJlcXVlc3Qgc2hvdWxkIGJlIHJldHJpZWQuXG4gKiAoQm9ycm93ZWQgZnJvbSBzZWdtZW50aW8vc3VwZXJhZ2VudC1yZXRyeSlcbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IFtyZXNdXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9zaG91bGRSZXRyeSA9IGZ1bmN0aW9uKGVyciwgcmVzKSB7XG4gIGlmICghdGhpcy5fbWF4UmV0cmllcyB8fCB0aGlzLl9yZXRyaWVzKysgPj0gdGhpcy5fbWF4UmV0cmllcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodGhpcy5fcmV0cnlDYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICB2YXIgb3ZlcnJpZGUgPSB0aGlzLl9yZXRyeUNhbGxiYWNrKGVyciwgcmVzKTtcbiAgICAgIGlmIChvdmVycmlkZSA9PT0gdHJ1ZSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAob3ZlcnJpZGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAvLyB1bmRlZmluZWQgZmFsbHMgYmFjayB0byBkZWZhdWx0c1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHJlcyAmJiByZXMuc3RhdHVzICYmIHJlcy5zdGF0dXMgPj0gNTAwICYmIHJlcy5zdGF0dXMgIT0gNTAxKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKGVycikge1xuICAgIGlmIChlcnIuY29kZSAmJiB+RVJST1JfQ09ERVMuaW5kZXhPZihlcnIuY29kZSkpIHJldHVybiB0cnVlO1xuICAgIC8vIFN1cGVyYWdlbnQgdGltZW91dFxuICAgIGlmIChlcnIudGltZW91dCAmJiBlcnIuY29kZSA9PSAnRUNPTk5BQk9SVEVEJykgcmV0dXJuIHRydWU7XG4gICAgaWYgKGVyci5jcm9zc0RvbWFpbikgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXRyeSByZXF1ZXN0XG4gKlxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX3JldHJ5ID0gZnVuY3Rpb24oKSB7XG5cbiAgdGhpcy5jbGVhclRpbWVvdXQoKTtcblxuICAvLyBub2RlXG4gIGlmICh0aGlzLnJlcSkge1xuICAgIHRoaXMucmVxID0gbnVsbDtcbiAgICB0aGlzLnJlcSA9IHRoaXMucmVxdWVzdCgpO1xuICB9XG5cbiAgdGhpcy5fYWJvcnRlZCA9IGZhbHNlO1xuICB0aGlzLnRpbWVkb3V0ID0gZmFsc2U7XG5cbiAgcmV0dXJuIHRoaXMuX2VuZCgpO1xufTtcblxuLyoqXG4gKiBQcm9taXNlIHN1cHBvcnRcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVqZWN0XVxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIHRoZW4ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gIGlmICghdGhpcy5fZnVsbGZpbGxlZFByb21pc2UpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHRoaXMuX2VuZENhbGxlZCkge1xuICAgICAgY29uc29sZS53YXJuKFwiV2FybmluZzogc3VwZXJhZ2VudCByZXF1ZXN0IHdhcyBzZW50IHR3aWNlLCBiZWNhdXNlIGJvdGggLmVuZCgpIGFuZCAudGhlbigpIHdlcmUgY2FsbGVkLiBOZXZlciBjYWxsIC5lbmQoKSBpZiB5b3UgdXNlIHByb21pc2VzXCIpO1xuICAgIH1cbiAgICB0aGlzLl9mdWxsZmlsbGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKGlubmVyUmVzb2x2ZSwgaW5uZXJSZWplY3QpIHtcbiAgICAgIHNlbGYuZW5kKGZ1bmN0aW9uKGVyciwgcmVzKSB7XG4gICAgICAgIGlmIChlcnIpIGlubmVyUmVqZWN0KGVycik7XG4gICAgICAgIGVsc2UgaW5uZXJSZXNvbHZlKHJlcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdGhpcy5fZnVsbGZpbGxlZFByb21pc2UudGhlbihyZXNvbHZlLCByZWplY3QpO1xufTtcblxuUmVxdWVzdEJhc2UucHJvdG90eXBlWydjYXRjaCddID0gZnVuY3Rpb24oY2IpIHtcbiAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIGNiKTtcbn07XG5cbi8qKlxuICogQWxsb3cgZm9yIGV4dGVuc2lvblxuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZm4pIHtcbiAgZm4odGhpcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLm9rID0gZnVuY3Rpb24oY2IpIHtcbiAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiBjYikgdGhyb3cgRXJyb3IoXCJDYWxsYmFjayByZXF1aXJlZFwiKTtcbiAgdGhpcy5fb2tDYWxsYmFjayA9IGNiO1xuICByZXR1cm4gdGhpcztcbn07XG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5faXNSZXNwb25zZU9LID0gZnVuY3Rpb24ocmVzKSB7XG4gIGlmICghcmVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX29rQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fb2tDYWxsYmFjayhyZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcy5zdGF0dXMgPj0gMjAwICYmIHJlcy5zdGF0dXMgPCAzMDA7XG59O1xuXG4vKipcbiAqIEdldCByZXF1ZXN0IGhlYWRlciBgZmllbGRgLlxuICogQ2FzZS1pbnNlbnNpdGl2ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGZpZWxkKXtcbiAgcmV0dXJuIHRoaXMuX2hlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXTtcbn07XG5cbi8qKlxuICogR2V0IGNhc2UtaW5zZW5zaXRpdmUgaGVhZGVyIGBmaWVsZGAgdmFsdWUuXG4gKiBUaGlzIGlzIGEgZGVwcmVjYXRlZCBpbnRlcm5hbCBBUEkuIFVzZSBgLmdldChmaWVsZClgIGluc3RlYWQuXG4gKlxuICogKGdldEhlYWRlciBpcyBubyBsb25nZXIgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBzdXBlcmFnZW50IGNvZGUgYmFzZSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICogQGRlcHJlY2F0ZWRcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuZ2V0SGVhZGVyID0gUmVxdWVzdEJhc2UucHJvdG90eXBlLmdldDtcblxuLyoqXG4gKiBTZXQgaGVhZGVyIGBmaWVsZGAgdG8gYHZhbGAsIG9yIG11bHRpcGxlIGZpZWxkcyB3aXRoIG9uZSBvYmplY3QuXG4gKiBDYXNlLWluc2Vuc2l0aXZlLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgcmVxLmdldCgnLycpXG4gKiAgICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICogICAgICAgIC5zZXQoJ1gtQVBJLUtleScsICdmb29iYXInKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqICAgICAgcmVxLmdldCgnLycpXG4gKiAgICAgICAgLnNldCh7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLCAnWC1BUEktS2V5JzogJ2Zvb2JhcicgfSlcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGZpZWxkXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGZpZWxkLCB2YWwpe1xuICBpZiAoaXNPYmplY3QoZmllbGQpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGZpZWxkKSB7XG4gICAgICB0aGlzLnNldChrZXksIGZpZWxkW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB0aGlzLl9oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV0gPSB2YWw7XG4gIHRoaXMuaGVhZGVyW2ZpZWxkXSA9IHZhbDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBoZWFkZXIgYGZpZWxkYC5cbiAqIENhc2UtaW5zZW5zaXRpdmUuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgIHJlcS5nZXQoJy8nKVxuICogICAgICAgIC51bnNldCgnVXNlci1BZ2VudCcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS51bnNldCA9IGZ1bmN0aW9uKGZpZWxkKXtcbiAgZGVsZXRlIHRoaXMuX2hlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXTtcbiAgZGVsZXRlIHRoaXMuaGVhZGVyW2ZpZWxkXTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFdyaXRlIHRoZSBmaWVsZCBgbmFtZWAgYW5kIGB2YWxgLCBvciBtdWx0aXBsZSBmaWVsZHMgd2l0aCBvbmUgb2JqZWN0XG4gKiBmb3IgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIgcmVxdWVzdCBib2RpZXMuXG4gKlxuICogYGBgIGpzXG4gKiByZXF1ZXN0LnBvc3QoJy91cGxvYWQnKVxuICogICAuZmllbGQoJ2ZvbycsICdiYXInKVxuICogICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiByZXF1ZXN0LnBvc3QoJy91cGxvYWQnKVxuICogICAuZmllbGQoeyBmb286ICdiYXInLCBiYXo6ICdxdXgnIH0pXG4gKiAgIC5lbmQoY2FsbGJhY2spO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBuYW1lXG4gKiBAcGFyYW0ge1N0cmluZ3xCbG9ifEZpbGV8QnVmZmVyfGZzLlJlYWRTdHJlYW19IHZhbFxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuZmllbGQgPSBmdW5jdGlvbihuYW1lLCB2YWwpIHtcbiAgLy8gbmFtZSBzaG91bGQgYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIG9iamVjdC5cbiAgaWYgKG51bGwgPT09IG5hbWUgfHwgdW5kZWZpbmVkID09PSBuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCcuZmllbGQobmFtZSwgdmFsKSBuYW1lIGNhbiBub3QgYmUgZW1wdHknKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9kYXRhKSB7XG4gICAgY29uc29sZS5lcnJvcihcIi5maWVsZCgpIGNhbid0IGJlIHVzZWQgaWYgLnNlbmQoKSBpcyB1c2VkLiBQbGVhc2UgdXNlIG9ubHkgLnNlbmQoKSBvciBvbmx5IC5maWVsZCgpICYgLmF0dGFjaCgpXCIpO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgIHRoaXMuZmllbGQoa2V5LCBuYW1lW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICBmb3IgKHZhciBpIGluIHZhbCkge1xuICAgICAgdGhpcy5maWVsZChuYW1lLCB2YWxbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHZhbCBzaG91bGQgYmUgZGVmaW5lZCBub3dcbiAgaWYgKG51bGwgPT09IHZhbCB8fCB1bmRlZmluZWQgPT09IHZhbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignLmZpZWxkKG5hbWUsIHZhbCkgdmFsIGNhbiBub3QgYmUgZW1wdHknKTtcbiAgfVxuICBpZiAoJ2Jvb2xlYW4nID09PSB0eXBlb2YgdmFsKSB7XG4gICAgdmFsID0gJycgKyB2YWw7XG4gIH1cbiAgdGhpcy5fZ2V0Rm9ybURhdGEoKS5hcHBlbmQobmFtZSwgdmFsKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFib3J0IHRoZSByZXF1ZXN0LCBhbmQgY2xlYXIgcG90ZW50aWFsIHRpbWVvdXQuXG4gKlxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCl7XG4gIGlmICh0aGlzLl9hYm9ydGVkKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdGhpcy5fYWJvcnRlZCA9IHRydWU7XG4gIHRoaXMueGhyICYmIHRoaXMueGhyLmFib3J0KCk7IC8vIGJyb3dzZXJcbiAgdGhpcy5yZXEgJiYgdGhpcy5yZXEuYWJvcnQoKTsgLy8gbm9kZVxuICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICB0aGlzLmVtaXQoJ2Fib3J0Jyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9hdXRoID0gZnVuY3Rpb24odXNlciwgcGFzcywgb3B0aW9ucywgYmFzZTY0RW5jb2Rlcikge1xuICBzd2l0Y2ggKG9wdGlvbnMudHlwZSkge1xuICAgIGNhc2UgJ2Jhc2ljJzpcbiAgICAgIHRoaXMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBiYXNlNjRFbmNvZGVyKHVzZXIgKyAnOicgKyBwYXNzKSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgdGhpcy51c2VybmFtZSA9IHVzZXI7XG4gICAgICB0aGlzLnBhc3N3b3JkID0gcGFzcztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYmVhcmVyJzogLy8gdXNhZ2Ugd291bGQgYmUgLmF1dGgoYWNjZXNzVG9rZW4sIHsgdHlwZTogJ2JlYXJlcicgfSlcbiAgICAgIHRoaXMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciAnICsgdXNlcik7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRW5hYmxlIHRyYW5zbWlzc2lvbiBvZiBjb29raWVzIHdpdGggeC1kb21haW4gcmVxdWVzdHMuXG4gKlxuICogTm90ZSB0aGF0IGZvciB0aGlzIHRvIHdvcmsgdGhlIG9yaWdpbiBtdXN0IG5vdCBiZVxuICogdXNpbmcgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiB3aXRoIGEgd2lsZGNhcmQsXG4gKiBhbmQgYWxzbyBtdXN0IHNldCBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXCJcbiAqIHRvIFwidHJ1ZVwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLndpdGhDcmVkZW50aWFscyA9IGZ1bmN0aW9uKG9uKSB7XG4gIC8vIFRoaXMgaXMgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uYWxpdHkuIE5vZGUgc2lkZSBpcyBuby1vcC5cbiAgaWYgKG9uID09IHVuZGVmaW5lZCkgb24gPSB0cnVlO1xuICB0aGlzLl93aXRoQ3JlZGVudGlhbHMgPSBvbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4IHJlZGlyZWN0cyB0byBgbmAuIERvZXMgbm90aW5nIGluIGJyb3dzZXIgWEhSIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdEJhc2UucHJvdG90eXBlLnJlZGlyZWN0cyA9IGZ1bmN0aW9uKG4pe1xuICB0aGlzLl9tYXhSZWRpcmVjdHMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogTWF4aW11bSBzaXplIG9mIGJ1ZmZlcmVkIHJlc3BvbnNlIGJvZHksIGluIGJ5dGVzLiBDb3VudHMgdW5jb21wcmVzc2VkIHNpemUuXG4gKiBEZWZhdWx0IDIwME1CLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqL1xuUmVxdWVzdEJhc2UucHJvdG90eXBlLm1heFJlc3BvbnNlU2l6ZSA9IGZ1bmN0aW9uKG4pe1xuICBpZiAoJ251bWJlcicgIT09IHR5cGVvZiBuKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiSW52YWxpZCBhcmd1bWVudFwiKTtcbiAgfVxuICB0aGlzLl9tYXhSZXNwb25zZVNpemUgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ29udmVydCB0byBhIHBsYWluIGphdmFzY3JpcHQgb2JqZWN0IChub3QgSlNPTiBzdHJpbmcpIG9mIHNjYWxhciBwcm9wZXJ0aWVzLlxuICogTm90ZSBhcyB0aGlzIG1ldGhvZCBpcyBkZXNpZ25lZCB0byByZXR1cm4gYSB1c2VmdWwgbm9uLXRoaXMgdmFsdWUsXG4gKiBpdCBjYW5ub3QgYmUgY2hhaW5lZC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlc2NyaWJpbmcgbWV0aG9kLCB1cmwsIGFuZCBkYXRhIG9mIHRoaXMgcmVxdWVzdFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiB0aGlzLm1ldGhvZCxcbiAgICB1cmw6IHRoaXMudXJsLFxuICAgIGRhdGE6IHRoaXMuX2RhdGEsXG4gICAgaGVhZGVyczogdGhpcy5faGVhZGVyLFxuICB9O1xufTtcblxuLyoqXG4gKiBTZW5kIGBkYXRhYCBhcyB0aGUgcmVxdWVzdCBib2R5LCBkZWZhdWx0aW5nIHRoZSBgLnR5cGUoKWAgdG8gXCJqc29uXCIgd2hlblxuICogYW4gb2JqZWN0IGlzIGdpdmVuLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgIC8vIG1hbnVhbCBqc29uXG4gKiAgICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAgLnR5cGUoJ2pzb24nKVxuICogICAgICAgICAuc2VuZCgne1wibmFtZVwiOlwidGpcIn0nKVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIGF1dG8ganNvblxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC5zZW5kKHsgbmFtZTogJ3RqJyB9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIG1hbnVhbCB4LXd3dy1mb3JtLXVybGVuY29kZWRcbiAqICAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgICAudHlwZSgnZm9ybScpXG4gKiAgICAgICAgIC5zZW5kKCduYW1lPXRqJylcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBhdXRvIHgtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC50eXBlKCdmb3JtJylcbiAqICAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gZGVmYXVsdHMgdG8geC13d3ctZm9ybS11cmxlbmNvZGVkXG4gKiAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICogICAgICAgIC5zZW5kKCduYW1lPXRvYmknKVxuICogICAgICAgIC5zZW5kKCdzcGVjaWVzPWZlcnJldCcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGRhdGFcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpe1xuICB2YXIgaXNPYmogPSBpc09iamVjdChkYXRhKTtcbiAgdmFyIHR5cGUgPSB0aGlzLl9oZWFkZXJbJ2NvbnRlbnQtdHlwZSddO1xuXG4gIGlmICh0aGlzLl9mb3JtRGF0YSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCIuc2VuZCgpIGNhbid0IGJlIHVzZWQgaWYgLmF0dGFjaCgpIG9yIC5maWVsZCgpIGlzIHVzZWQuIFBsZWFzZSB1c2Ugb25seSAuc2VuZCgpIG9yIG9ubHkgLmZpZWxkKCkgJiAuYXR0YWNoKClcIik7XG4gIH1cblxuICBpZiAoaXNPYmogJiYgIXRoaXMuX2RhdGEpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgdGhpcy5fZGF0YSA9IFtdO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzSG9zdChkYXRhKSkge1xuICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChkYXRhICYmIHRoaXMuX2RhdGEgJiYgdGhpcy5faXNIb3N0KHRoaXMuX2RhdGEpKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJDYW4ndCBtZXJnZSB0aGVzZSBzZW5kIGNhbGxzXCIpO1xuICB9XG5cbiAgLy8gbWVyZ2VcbiAgaWYgKGlzT2JqICYmIGlzT2JqZWN0KHRoaXMuX2RhdGEpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIHRoaXMuX2RhdGFba2V5XSA9IGRhdGFba2V5XTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGRhdGEpIHtcbiAgICAvLyBkZWZhdWx0IHRvIHgtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICAgIGlmICghdHlwZSkgdGhpcy50eXBlKCdmb3JtJyk7XG4gICAgdHlwZSA9IHRoaXMuX2hlYWRlclsnY29udGVudC10eXBlJ107XG4gICAgaWYgKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnID09IHR5cGUpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSB0aGlzLl9kYXRhXG4gICAgICAgID8gdGhpcy5fZGF0YSArICcmJyArIGRhdGFcbiAgICAgICAgOiBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kYXRhID0gKHRoaXMuX2RhdGEgfHwgJycpICsgZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIH1cblxuICBpZiAoIWlzT2JqIHx8IHRoaXMuX2lzSG9zdChkYXRhKSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZGVmYXVsdCB0byBqc29uXG4gIGlmICghdHlwZSkgdGhpcy50eXBlKCdqc29uJyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTb3J0IGBxdWVyeXN0cmluZ2AgYnkgdGhlIHNvcnQgZnVuY3Rpb25cbiAqXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICAgLy8gZGVmYXVsdCBvcmRlclxuICogICAgICAgcmVxdWVzdC5nZXQoJy91c2VyJylcbiAqICAgICAgICAgLnF1ZXJ5KCduYW1lPU5pY2snKVxuICogICAgICAgICAucXVlcnkoJ3NlYXJjaD1NYW5ueScpXG4gKiAgICAgICAgIC5zb3J0UXVlcnkoKVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIGN1c3RvbWl6ZWQgc29ydCBmdW5jdGlvblxuICogICAgICAgcmVxdWVzdC5nZXQoJy91c2VyJylcbiAqICAgICAgICAgLnF1ZXJ5KCduYW1lPU5pY2snKVxuICogICAgICAgICAucXVlcnkoJ3NlYXJjaD1NYW5ueScpXG4gKiAgICAgICAgIC5zb3J0UXVlcnkoZnVuY3Rpb24oYSwgYil7XG4gKiAgICAgICAgICAgcmV0dXJuIGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gKiAgICAgICAgIH0pXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNvcnRcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuc29ydFF1ZXJ5ID0gZnVuY3Rpb24oc29ydCkge1xuICAvLyBfc29ydCBkZWZhdWx0IHRvIHRydWUgYnV0IG90aGVyd2lzZSBjYW4gYmUgYSBmdW5jdGlvbiBvciBib29sZWFuXG4gIHRoaXMuX3NvcnQgPSB0eXBlb2Ygc29ydCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogc29ydDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENvbXBvc2UgcXVlcnlzdHJpbmcgdG8gYXBwZW5kIHRvIHJlcS51cmxcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuUmVxdWVzdEJhc2UucHJvdG90eXBlLl9maW5hbGl6ZVF1ZXJ5U3RyaW5nID0gZnVuY3Rpb24oKXtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5fcXVlcnkuam9pbignJicpO1xuICBpZiAocXVlcnkpIHtcbiAgICB0aGlzLnVybCArPSAodGhpcy51cmwuaW5kZXhPZignPycpID49IDAgPyAnJicgOiAnPycpICsgcXVlcnk7XG4gIH1cbiAgdGhpcy5fcXVlcnkubGVuZ3RoID0gMDsgLy8gTWFrZXMgdGhlIGNhbGwgaWRlbXBvdGVudFxuXG4gIGlmICh0aGlzLl9zb3J0KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy51cmwuaW5kZXhPZignPycpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgcXVlcnlBcnIgPSB0aGlzLnVybC5zdWJzdHJpbmcoaW5kZXggKyAxKS5zcGxpdCgnJicpO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiB0aGlzLl9zb3J0KSB7XG4gICAgICAgIHF1ZXJ5QXJyLnNvcnQodGhpcy5fc29ydCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyeUFyci5zb3J0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLnVybCA9IHRoaXMudXJsLnN1YnN0cmluZygwLCBpbmRleCkgKyAnPycgKyBxdWVyeUFyci5qb2luKCcmJyk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBGb3IgYmFja3dhcmRzIGNvbXBhdCBvbmx5XG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX2FwcGVuZFF1ZXJ5U3RyaW5nID0gZnVuY3Rpb24oKSB7Y29uc29sZS50cmFjZShcIlVuc3VwcG9ydGVkXCIpO31cblxuLyoqXG4gKiBJbnZva2UgY2FsbGJhY2sgd2l0aCB0aW1lb3V0IGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3RCYXNlLnByb3RvdHlwZS5fdGltZW91dEVycm9yID0gZnVuY3Rpb24ocmVhc29uLCB0aW1lb3V0LCBlcnJubyl7XG4gIGlmICh0aGlzLl9hYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IocmVhc29uICsgdGltZW91dCArICdtcyBleGNlZWRlZCcpO1xuICBlcnIudGltZW91dCA9IHRpbWVvdXQ7XG4gIGVyci5jb2RlID0gJ0VDT05OQUJPUlRFRCc7XG4gIGVyci5lcnJubyA9IGVycm5vO1xuICB0aGlzLnRpbWVkb3V0ID0gdHJ1ZTtcbiAgdGhpcy5hYm9ydCgpO1xuICB0aGlzLmNhbGxiYWNrKGVycik7XG59O1xuXG5SZXF1ZXN0QmFzZS5wcm90b3R5cGUuX3NldFRpbWVvdXRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBkZWFkbGluZVxuICBpZiAodGhpcy5fdGltZW91dCAmJiAhdGhpcy5fdGltZXIpIHtcbiAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHNlbGYuX3RpbWVvdXRFcnJvcignVGltZW91dCBvZiAnLCBzZWxmLl90aW1lb3V0LCAnRVRJTUUnKTtcbiAgICB9LCB0aGlzLl90aW1lb3V0KTtcbiAgfVxuICAvLyByZXNwb25zZSB0aW1lb3V0XG4gIGlmICh0aGlzLl9yZXNwb25zZVRpbWVvdXQgJiYgIXRoaXMuX3Jlc3BvbnNlVGltZW91dFRpbWVyKSB7XG4gICAgdGhpcy5fcmVzcG9uc2VUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBzZWxmLl90aW1lb3V0RXJyb3IoJ1Jlc3BvbnNlIHRpbWVvdXQgb2YgJywgc2VsZi5fcmVzcG9uc2VUaW1lb3V0LCAnRVRJTUVET1VUJyk7XG4gICAgfSwgdGhpcy5fcmVzcG9uc2VUaW1lb3V0KTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuLyoqXG4gKiBFeHBvc2UgYFJlc3BvbnNlQmFzZWAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSZXNwb25zZUJhc2U7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgUmVzcG9uc2VCYXNlYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFJlc3BvbnNlQmFzZShvYmopIHtcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XG59XG5cbi8qKlxuICogTWl4aW4gdGhlIHByb3RvdHlwZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1peGluKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gUmVzcG9uc2VCYXNlLnByb3RvdHlwZSkge1xuICAgIG9ialtrZXldID0gUmVzcG9uc2VCYXNlLnByb3RvdHlwZVtrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogR2V0IGNhc2UtaW5zZW5zaXRpdmUgYGZpZWxkYCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVzcG9uc2VCYXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihmaWVsZCkge1xuICByZXR1cm4gdGhpcy5oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG59O1xuXG4vKipcbiAqIFNldCBoZWFkZXIgcmVsYXRlZCBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBgLnR5cGVgIHRoZSBjb250ZW50IHR5cGUgd2l0aG91dCBwYXJhbXNcbiAqXG4gKiBBIHJlc3BvbnNlIG9mIFwiQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04XCJcbiAqIHdpbGwgcHJvdmlkZSB5b3Ugd2l0aCBhIGAudHlwZWAgb2YgXCJ0ZXh0L3BsYWluXCIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhlYWRlclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVzcG9uc2VCYXNlLnByb3RvdHlwZS5fc2V0SGVhZGVyUHJvcGVydGllcyA9IGZ1bmN0aW9uKGhlYWRlcil7XG4gICAgLy8gVE9ETzogbW9hciFcbiAgICAvLyBUT0RPOiBtYWtlIHRoaXMgYSB1dGlsXG5cbiAgICAvLyBjb250ZW50LXR5cGVcbiAgICB2YXIgY3QgPSBoZWFkZXJbJ2NvbnRlbnQtdHlwZSddIHx8ICcnO1xuICAgIHRoaXMudHlwZSA9IHV0aWxzLnR5cGUoY3QpO1xuXG4gICAgLy8gcGFyYW1zXG4gICAgdmFyIHBhcmFtcyA9IHV0aWxzLnBhcmFtcyhjdCk7XG4gICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykgdGhpc1trZXldID0gcGFyYW1zW2tleV07XG5cbiAgICB0aGlzLmxpbmtzID0ge307XG5cbiAgICAvLyBsaW5rc1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChoZWFkZXIubGluaykge1xuICAgICAgICAgICAgdGhpcy5saW5rcyA9IHV0aWxzLnBhcnNlTGlua3MoaGVhZGVyLmxpbmspO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIGlnbm9yZVxuICAgIH1cbn07XG5cbi8qKlxuICogU2V0IGZsYWdzIHN1Y2ggYXMgYC5va2AgYmFzZWQgb24gYHN0YXR1c2AuXG4gKlxuICogRm9yIGV4YW1wbGUgYSAyeHggcmVzcG9uc2Ugd2lsbCBnaXZlIHlvdSBhIGAub2tgIG9mIF9fdHJ1ZV9fXG4gKiB3aGVyZWFzIDV4eCB3aWxsIGJlIF9fZmFsc2VfXyBhbmQgYC5lcnJvcmAgd2lsbCBiZSBfX3RydWVfXy4gVGhlXG4gKiBgLmNsaWVudEVycm9yYCBhbmQgYC5zZXJ2ZXJFcnJvcmAgYXJlIGFsc28gYXZhaWxhYmxlIHRvIGJlIG1vcmVcbiAqIHNwZWNpZmljLCBhbmQgYC5zdGF0dXNUeXBlYCBpcyB0aGUgY2xhc3Mgb2YgZXJyb3IgcmFuZ2luZyBmcm9tIDEuLjVcbiAqIHNvbWV0aW1lcyB1c2VmdWwgZm9yIG1hcHBpbmcgcmVzcG9uZCBjb2xvcnMgZXRjLlxuICpcbiAqIFwic3VnYXJcIiBwcm9wZXJ0aWVzIGFyZSBhbHNvIGRlZmluZWQgZm9yIGNvbW1vbiBjYXNlcy4gQ3VycmVudGx5IHByb3ZpZGluZzpcbiAqXG4gKiAgIC0gLm5vQ29udGVudFxuICogICAtIC5iYWRSZXF1ZXN0XG4gKiAgIC0gLnVuYXV0aG9yaXplZFxuICogICAtIC5ub3RBY2NlcHRhYmxlXG4gKiAgIC0gLm5vdEZvdW5kXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVzcG9uc2VCYXNlLnByb3RvdHlwZS5fc2V0U3RhdHVzUHJvcGVydGllcyA9IGZ1bmN0aW9uKHN0YXR1cyl7XG4gICAgdmFyIHR5cGUgPSBzdGF0dXMgLyAxMDAgfCAwO1xuXG4gICAgLy8gc3RhdHVzIC8gY2xhc3NcbiAgICB0aGlzLnN0YXR1cyA9IHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1R5cGUgPSB0eXBlO1xuXG4gICAgLy8gYmFzaWNzXG4gICAgdGhpcy5pbmZvID0gMSA9PSB0eXBlO1xuICAgIHRoaXMub2sgPSAyID09IHR5cGU7XG4gICAgdGhpcy5yZWRpcmVjdCA9IDMgPT0gdHlwZTtcbiAgICB0aGlzLmNsaWVudEVycm9yID0gNCA9PSB0eXBlO1xuICAgIHRoaXMuc2VydmVyRXJyb3IgPSA1ID09IHR5cGU7XG4gICAgdGhpcy5lcnJvciA9ICg0ID09IHR5cGUgfHwgNSA9PSB0eXBlKVxuICAgICAgICA/IHRoaXMudG9FcnJvcigpXG4gICAgICAgIDogZmFsc2U7XG5cbiAgICAvLyBzdWdhclxuICAgIHRoaXMuY3JlYXRlZCA9IDIwMSA9PSBzdGF0dXM7XG4gICAgdGhpcy5hY2NlcHRlZCA9IDIwMiA9PSBzdGF0dXM7XG4gICAgdGhpcy5ub0NvbnRlbnQgPSAyMDQgPT0gc3RhdHVzO1xuICAgIHRoaXMuYmFkUmVxdWVzdCA9IDQwMCA9PSBzdGF0dXM7XG4gICAgdGhpcy51bmF1dGhvcml6ZWQgPSA0MDEgPT0gc3RhdHVzO1xuICAgIHRoaXMubm90QWNjZXB0YWJsZSA9IDQwNiA9PSBzdGF0dXM7XG4gICAgdGhpcy5mb3JiaWRkZW4gPSA0MDMgPT0gc3RhdHVzO1xuICAgIHRoaXMubm90Rm91bmQgPSA0MDQgPT0gc3RhdHVzO1xuICAgIHRoaXMudW5wcm9jZXNzYWJsZUVudGl0eSA9IDQyMiA9PSBzdGF0dXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJldHVybiB0aGUgbWltZSB0eXBlIGZvciB0aGUgZ2l2ZW4gYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy50eXBlID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5zcGxpdCgvICo7ICovKS5zaGlmdCgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gaGVhZGVyIGZpZWxkIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5wYXJhbXMgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnNwbGl0KC8gKjsgKi8pLnJlZHVjZShmdW5jdGlvbihvYmosIHN0cil7XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KC8gKj0gKi8pO1xuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpO1xuICAgIHZhciB2YWwgPSBwYXJ0cy5zaGlmdCgpO1xuXG4gICAgaWYgKGtleSAmJiB2YWwpIG9ialtrZXldID0gdmFsO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogUGFyc2UgTGluayBoZWFkZXIgZmllbGRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucGFyc2VMaW5rcyA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIuc3BsaXQoLyAqLCAqLykucmVkdWNlKGZ1bmN0aW9uKG9iaiwgc3RyKXtcbiAgICB2YXIgcGFydHMgPSBzdHIuc3BsaXQoLyAqOyAqLyk7XG4gICAgdmFyIHVybCA9IHBhcnRzWzBdLnNsaWNlKDEsIC0xKTtcbiAgICB2YXIgcmVsID0gcGFydHNbMV0uc3BsaXQoLyAqPSAqLylbMV0uc2xpY2UoMSwgLTEpO1xuICAgIG9ialtyZWxdID0gdXJsO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogU3RyaXAgY29udGVudCByZWxhdGVkIGZpZWxkcyBmcm9tIGBoZWFkZXJgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJcbiAqIEByZXR1cm4ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmNsZWFuSGVhZGVyID0gZnVuY3Rpb24oaGVhZGVyLCBjaGFuZ2VzT3JpZ2luKXtcbiAgZGVsZXRlIGhlYWRlclsnY29udGVudC10eXBlJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ2NvbnRlbnQtbGVuZ3RoJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ3RyYW5zZmVyLWVuY29kaW5nJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ2hvc3QnXTtcbiAgLy8gc2VjdWlydHlcbiAgaWYgKGNoYW5nZXNPcmlnaW4pIHtcbiAgICBkZWxldGUgaGVhZGVyWydhdXRob3JpemF0aW9uJ107XG4gICAgZGVsZXRlIGhlYWRlclsnY29va2llJ107XG4gIH1cbiAgcmV0dXJuIGhlYWRlcjtcbn07XG4iLCJmdW5jdGlvbiBBZ2VudCgpIHtcbiAgdGhpcy5fZGVmYXVsdHMgPSBbXTtcbn1cblxuW1widXNlXCIsIFwib25cIiwgXCJvbmNlXCIsIFwic2V0XCIsIFwicXVlcnlcIiwgXCJ0eXBlXCIsIFwiYWNjZXB0XCIsIFwiYXV0aFwiLCBcIndpdGhDcmVkZW50aWFsc1wiLCBcInNvcnRRdWVyeVwiLCBcInJldHJ5XCIsIFwib2tcIiwgXCJyZWRpcmVjdHNcIixcbiBcInRpbWVvdXRcIiwgXCJidWZmZXJcIiwgXCJzZXJpYWxpemVcIiwgXCJwYXJzZVwiLCBcImNhXCIsIFwia2V5XCIsIFwicGZ4XCIsIFwiY2VydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7XG4gIC8qKiBEZWZhdWx0IHNldHRpbmcgZm9yIGFsbCByZXF1ZXN0cyBmcm9tIHRoaXMgYWdlbnQgKi9cbiAgQWdlbnQucHJvdG90eXBlW2ZuXSA9IGZ1bmN0aW9uKC8qdmFyYXJncyovKSB7XG4gICAgdGhpcy5fZGVmYXVsdHMucHVzaCh7Zm46Zm4sIGFyZ3VtZW50czphcmd1bWVudHN9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cbkFnZW50LnByb3RvdHlwZS5fc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihyZXEpIHtcbiAgICB0aGlzLl9kZWZhdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKGRlZikge1xuICAgICAgcmVxW2RlZi5mbl0uYXBwbHkocmVxLCBkZWYuYXJndW1lbnRzKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWdlbnQ7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZXNjYXBlU3RyaW5nUmVnZXhwID0gcmVxdWlyZSgnZXNjYXBlLXN0cmluZy1yZWdleHAnKTtcbnZhciBhbnNpU3R5bGVzID0gcmVxdWlyZSgnYW5zaS1zdHlsZXMnKTtcbnZhciBzdHJpcEFuc2kgPSByZXF1aXJlKCdzdHJpcC1hbnNpJyk7XG52YXIgaGFzQW5zaSA9IHJlcXVpcmUoJ2hhcy1hbnNpJyk7XG52YXIgc3VwcG9ydHNDb2xvciA9IHJlcXVpcmUoJ3N1cHBvcnRzLWNvbG9yJyk7XG52YXIgZGVmaW5lUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBpc1NpbXBsZVdpbmRvd3NUZXJtID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyAmJiAhL154dGVybS9pLnRlc3QocHJvY2Vzcy5lbnYuVEVSTSk7XG5cbmZ1bmN0aW9uIENoYWxrKG9wdGlvbnMpIHtcblx0Ly8gZGV0ZWN0IG1vZGUgaWYgbm90IHNldCBtYW51YWxseVxuXHR0aGlzLmVuYWJsZWQgPSAhb3B0aW9ucyB8fCBvcHRpb25zLmVuYWJsZWQgPT09IHVuZGVmaW5lZCA/IHN1cHBvcnRzQ29sb3IgOiBvcHRpb25zLmVuYWJsZWQ7XG59XG5cbi8vIHVzZSBicmlnaHQgYmx1ZSBvbiBXaW5kb3dzIGFzIHRoZSBub3JtYWwgYmx1ZSBjb2xvciBpcyBpbGxlZ2libGVcbmlmIChpc1NpbXBsZVdpbmRvd3NUZXJtKSB7XG5cdGFuc2lTdHlsZXMuYmx1ZS5vcGVuID0gJ1xcdTAwMWJbOTRtJztcbn1cblxudmFyIHN0eWxlcyA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciByZXQgPSB7fTtcblxuXHRPYmplY3Qua2V5cyhhbnNpU3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRhbnNpU3R5bGVzW2tleV0uY2xvc2VSZSA9IG5ldyBSZWdFeHAoZXNjYXBlU3RyaW5nUmVnZXhwKGFuc2lTdHlsZXNba2V5XS5jbG9zZSksICdnJyk7XG5cblx0XHRyZXRba2V5XSA9IHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gYnVpbGQuY2FsbCh0aGlzLCB0aGlzLl9zdHlsZXMuY29uY2F0KGtleSkpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xuXG5cdHJldHVybiByZXQ7XG59KSgpO1xuXG52YXIgcHJvdG8gPSBkZWZpbmVQcm9wcyhmdW5jdGlvbiBjaGFsaygpIHt9LCBzdHlsZXMpO1xuXG5mdW5jdGlvbiBidWlsZChfc3R5bGVzKSB7XG5cdHZhciBidWlsZGVyID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBhcHBseVN0eWxlLmFwcGx5KGJ1aWxkZXIsIGFyZ3VtZW50cyk7XG5cdH07XG5cblx0YnVpbGRlci5fc3R5bGVzID0gX3N0eWxlcztcblx0YnVpbGRlci5lbmFibGVkID0gdGhpcy5lbmFibGVkO1xuXHQvLyBfX3Byb3RvX18gaXMgdXNlZCBiZWNhdXNlIHdlIG11c3QgcmV0dXJuIGEgZnVuY3Rpb24sIGJ1dCB0aGVyZSBpc1xuXHQvLyBubyB3YXkgdG8gY3JlYXRlIGEgZnVuY3Rpb24gd2l0aCBhIGRpZmZlcmVudCBwcm90b3R5cGUuXG5cdC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cdGJ1aWxkZXIuX19wcm90b19fID0gcHJvdG87XG5cblx0cmV0dXJuIGJ1aWxkZXI7XG59XG5cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoKSB7XG5cdC8vIHN1cHBvcnQgdmFyYWdzLCBidXQgc2ltcGx5IGNhc3QgdG8gc3RyaW5nIGluIGNhc2UgdGhlcmUncyBvbmx5IG9uZSBhcmdcblx0dmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdHZhciBhcmdzTGVuID0gYXJncy5sZW5ndGg7XG5cdHZhciBzdHIgPSBhcmdzTGVuICE9PSAwICYmIFN0cmluZyhhcmd1bWVudHNbMF0pO1xuXG5cdGlmIChhcmdzTGVuID4gMSkge1xuXHRcdC8vIGRvbid0IHNsaWNlIGBhcmd1bWVudHNgLCBpdCBwcmV2ZW50cyB2OCBvcHRpbWl6YXRpb25zXG5cdFx0Zm9yICh2YXIgYSA9IDE7IGEgPCBhcmdzTGVuOyBhKyspIHtcblx0XHRcdHN0ciArPSAnICcgKyBhcmdzW2FdO1xuXHRcdH1cblx0fVxuXG5cdGlmICghdGhpcy5lbmFibGVkIHx8ICFzdHIpIHtcblx0XHRyZXR1cm4gc3RyO1xuXHR9XG5cblx0dmFyIG5lc3RlZFN0eWxlcyA9IHRoaXMuX3N0eWxlcztcblx0dmFyIGkgPSBuZXN0ZWRTdHlsZXMubGVuZ3RoO1xuXG5cdC8vIFR1cm5zIG91dCB0aGF0IG9uIFdpbmRvd3MgZGltbWVkIGdyYXkgdGV4dCBiZWNvbWVzIGludmlzaWJsZSBpbiBjbWQuZXhlLFxuXHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYWxrL2NoYWxrL2lzc3Vlcy81OFxuXHQvLyBJZiB3ZSdyZSBvbiBXaW5kb3dzIGFuZCB3ZSdyZSBkZWFsaW5nIHdpdGggYSBncmF5IGNvbG9yLCB0ZW1wb3JhcmlseSBtYWtlICdkaW0nIGEgbm9vcC5cblx0dmFyIG9yaWdpbmFsRGltID0gYW5zaVN0eWxlcy5kaW0ub3Blbjtcblx0aWYgKGlzU2ltcGxlV2luZG93c1Rlcm0gJiYgKG5lc3RlZFN0eWxlcy5pbmRleE9mKCdncmF5JykgIT09IC0xIHx8IG5lc3RlZFN0eWxlcy5pbmRleE9mKCdncmV5JykgIT09IC0xKSkge1xuXHRcdGFuc2lTdHlsZXMuZGltLm9wZW4gPSAnJztcblx0fVxuXG5cdHdoaWxlIChpLS0pIHtcblx0XHR2YXIgY29kZSA9IGFuc2lTdHlsZXNbbmVzdGVkU3R5bGVzW2ldXTtcblxuXHRcdC8vIFJlcGxhY2UgYW55IGluc3RhbmNlcyBhbHJlYWR5IHByZXNlbnQgd2l0aCBhIHJlLW9wZW5pbmcgY29kZVxuXHRcdC8vIG90aGVyd2lzZSBvbmx5IHRoZSBwYXJ0IG9mIHRoZSBzdHJpbmcgdW50aWwgc2FpZCBjbG9zaW5nIGNvZGVcblx0XHQvLyB3aWxsIGJlIGNvbG9yZWQsIGFuZCB0aGUgcmVzdCB3aWxsIHNpbXBseSBiZSAncGxhaW4nLlxuXHRcdHN0ciA9IGNvZGUub3BlbiArIHN0ci5yZXBsYWNlKGNvZGUuY2xvc2VSZSwgY29kZS5vcGVuKSArIGNvZGUuY2xvc2U7XG5cdH1cblxuXHQvLyBSZXNldCB0aGUgb3JpZ2luYWwgJ2RpbScgaWYgd2UgY2hhbmdlZCBpdCB0byB3b3JrIGFyb3VuZCB0aGUgV2luZG93cyBkaW1tZWQgZ3JheSBpc3N1ZS5cblx0YW5zaVN0eWxlcy5kaW0ub3BlbiA9IG9yaWdpbmFsRGltO1xuXG5cdHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG5cdHZhciByZXQgPSB7fTtcblxuXHRPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRyZXRbbmFtZV0gPSB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIGJ1aWxkLmNhbGwodGhpcywgW25hbWVdKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcblxuXHRyZXR1cm4gcmV0O1xufVxuXG5kZWZpbmVQcm9wcyhDaGFsay5wcm90b3R5cGUsIGluaXQoKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENoYWxrKCk7XG5tb2R1bGUuZXhwb3J0cy5zdHlsZXMgPSBhbnNpU3R5bGVzO1xubW9kdWxlLmV4cG9ydHMuaGFzQ29sb3IgPSBoYXNBbnNpO1xubW9kdWxlLmV4cG9ydHMuc3RyaXBDb2xvciA9IHN0cmlwQW5zaTtcbm1vZHVsZS5leHBvcnRzLnN1cHBvcnRzQ29sb3IgPSBzdXBwb3J0c0NvbG9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWF0Y2hPcGVyYXRvcnNSZSA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG5cdH1cblxuXHRyZXR1cm4gc3RyLnJlcGxhY2UobWF0Y2hPcGVyYXRvcnNSZSwgJ1xcXFwkJicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXNzZW1ibGVTdHlsZXMgKCkge1xuXHR2YXIgc3R5bGVzID0ge1xuXHRcdG1vZGlmaWVyczoge1xuXHRcdFx0cmVzZXQ6IFswLCAwXSxcblx0XHRcdGJvbGQ6IFsxLCAyMl0sIC8vIDIxIGlzbid0IHdpZGVseSBzdXBwb3J0ZWQgYW5kIDIyIGRvZXMgdGhlIHNhbWUgdGhpbmdcblx0XHRcdGRpbTogWzIsIDIyXSxcblx0XHRcdGl0YWxpYzogWzMsIDIzXSxcblx0XHRcdHVuZGVybGluZTogWzQsIDI0XSxcblx0XHRcdGludmVyc2U6IFs3LCAyN10sXG5cdFx0XHRoaWRkZW46IFs4LCAyOF0sXG5cdFx0XHRzdHJpa2V0aHJvdWdoOiBbOSwgMjldXG5cdFx0fSxcblx0XHRjb2xvcnM6IHtcblx0XHRcdGJsYWNrOiBbMzAsIDM5XSxcblx0XHRcdHJlZDogWzMxLCAzOV0sXG5cdFx0XHRncmVlbjogWzMyLCAzOV0sXG5cdFx0XHR5ZWxsb3c6IFszMywgMzldLFxuXHRcdFx0Ymx1ZTogWzM0LCAzOV0sXG5cdFx0XHRtYWdlbnRhOiBbMzUsIDM5XSxcblx0XHRcdGN5YW46IFszNiwgMzldLFxuXHRcdFx0d2hpdGU6IFszNywgMzldLFxuXHRcdFx0Z3JheTogWzkwLCAzOV1cblx0XHR9LFxuXHRcdGJnQ29sb3JzOiB7XG5cdFx0XHRiZ0JsYWNrOiBbNDAsIDQ5XSxcblx0XHRcdGJnUmVkOiBbNDEsIDQ5XSxcblx0XHRcdGJnR3JlZW46IFs0MiwgNDldLFxuXHRcdFx0YmdZZWxsb3c6IFs0MywgNDldLFxuXHRcdFx0YmdCbHVlOiBbNDQsIDQ5XSxcblx0XHRcdGJnTWFnZW50YTogWzQ1LCA0OV0sXG5cdFx0XHRiZ0N5YW46IFs0NiwgNDldLFxuXHRcdFx0YmdXaGl0ZTogWzQ3LCA0OV1cblx0XHR9XG5cdH07XG5cblx0Ly8gZml4IGh1bWFuc1xuXHRzdHlsZXMuY29sb3JzLmdyZXkgPSBzdHlsZXMuY29sb3JzLmdyYXk7XG5cblx0T2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChncm91cE5hbWUpIHtcblx0XHR2YXIgZ3JvdXAgPSBzdHlsZXNbZ3JvdXBOYW1lXTtcblxuXHRcdE9iamVjdC5rZXlzKGdyb3VwKS5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcblx0XHRcdHZhciBzdHlsZSA9IGdyb3VwW3N0eWxlTmFtZV07XG5cblx0XHRcdHN0eWxlc1tzdHlsZU5hbWVdID0gZ3JvdXBbc3R5bGVOYW1lXSA9IHtcblx0XHRcdFx0b3BlbjogJ1xcdTAwMWJbJyArIHN0eWxlWzBdICsgJ20nLFxuXHRcdFx0XHRjbG9zZTogJ1xcdTAwMWJbJyArIHN0eWxlWzFdICsgJ20nXG5cdFx0XHR9O1xuXHRcdH0pO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHN0eWxlcywgZ3JvdXBOYW1lLCB7XG5cdFx0XHR2YWx1ZTogZ3JvdXAsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZVxuXHRcdH0pO1xuXHR9KTtcblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0Z2V0OiBhc3NlbWJsZVN0eWxlc1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5zaVJlZ2V4ID0gcmVxdWlyZSgnYW5zaS1yZWdleCcpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cikge1xuXHRyZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIucmVwbGFjZShhbnNpUmVnZXgsICcnKSA6IHN0cjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIC9bXFx1MDAxYlxcdTAwOWJdW1soKSM7P10qKD86WzAtOV17MSw0fSg/OjtbMC05XXswLDR9KSopP1swLTlBLVBSWmNmLW5xcnk9PjxdL2c7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuc2lSZWdleCA9IHJlcXVpcmUoJ2Fuc2ktcmVnZXgnKTtcbnZhciByZSA9IG5ldyBSZWdFeHAoYW5zaVJlZ2V4KCkuc291cmNlKTsgLy8gcmVtb3ZlIHRoZSBgZ2AgZmxhZ1xubW9kdWxlLmV4cG9ydHMgPSByZS50ZXN0LmJpbmQocmUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAvW1xcdTAwMWJcXHUwMDliXVtbKCkjOz9dKig/OlswLTldezEsNH0oPzo7WzAtOV17MCw0fSkqKT9bMC05QS1QUlpjZi1ucXJ5PT48XS9nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcmd2ID0gcHJvY2Vzcy5hcmd2O1xuXG52YXIgdGVybWluYXRvciA9IGFyZ3YuaW5kZXhPZignLS0nKTtcbnZhciBoYXNGbGFnID0gZnVuY3Rpb24gKGZsYWcpIHtcblx0ZmxhZyA9ICctLScgKyBmbGFnO1xuXHR2YXIgcG9zID0gYXJndi5pbmRleE9mKGZsYWcpO1xuXHRyZXR1cm4gcG9zICE9PSAtMSAmJiAodGVybWluYXRvciAhPT0gLTEgPyBwb3MgPCB0ZXJtaW5hdG9yIDogdHJ1ZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG5cdGlmICgnRk9SQ0VfQ09MT1InIGluIHByb2Nlc3MuZW52KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoaGFzRmxhZygnbm8tY29sb3InKSB8fFxuXHRcdGhhc0ZsYWcoJ25vLWNvbG9ycycpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9ZmFsc2UnKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcicpIHx8XG5cdFx0aGFzRmxhZygnY29sb3JzJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcj10cnVlJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcj1hbHdheXMnKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKHByb2Nlc3Muc3Rkb3V0ICYmICFwcm9jZXNzLnN0ZG91dC5pc1RUWSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoJ0NPTE9SVEVSTScgaW4gcHJvY2Vzcy5lbnYpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmIChwcm9jZXNzLmVudi5URVJNID09PSAnZHVtYicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoL15zY3JlZW58Xnh0ZXJtfF52dDEwMHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QocHJvY2Vzcy5lbnYuVEVSTSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn0pKCk7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYmluL2Vycm9yJyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBDdXN0b21FcnJvcjtcbkN1c3RvbUVycm9yLmZhY3RvcnkgPSByZXF1aXJlKCcuL2ZhY3Rvcmllcy5qcycpO1xuXG52YXIgRXJyID0gQ3VzdG9tRXJyb3IoJ0N1c3RvbUVycm9yJyk7XG5FcnIub3JkZXIgPSBDdXN0b21FcnJvcihFcnIsIHsgbWVzc2FnZTogJ0FyZ3VtZW50cyBvdXQgb2Ygb3JkZXIuJywgY29kZTogJ0VPQVJHJyB9KTtcblxuLyoqXG4gKiBDcmVhdGUgYSBjdXN0b20gZXJyb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV0gVGhlIG5hbWUgdG8gZ2l2ZSB0aGUgZXJyb3IuIERlZmF1bHRzIHRvIHRoZSBuYW1lIG9mIGl0J3MgcGFyZW50LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW3BhcmVudF0gVGhlIEVycm9yIG9yIEN1c3RvbUVycm9yIGNvbnN0cnVjdG9yIHRvIGluaGVyaXQgZnJvbS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcGVydGllc10gVGhlIGRlZmF1bHQgcHJvcGVydGllcyBmb3IgdGhlIGN1c3RvbSBlcnJvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtmYWN0b3J5XSBBIGZ1bmN0aW9uIHRvIGNhbGwgdG8gbW9kaWZ5IHRoZSBjdXN0b20gZXJyb3IgaW5zdGFuY2Ugd2hlbiBpdCBpcyBpbnN0YW50aWF0ZWQuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgYSBjb25zdHJ1Y3Rvci5cbiAqL1xuZnVuY3Rpb24gQ3VzdG9tRXJyb3IobmFtZSwgcGFyZW50LCBwcm9wZXJ0aWVzLCBmYWN0b3J5KSB7XG4gICAgdmFyIGNvbnN0cnVjdDtcbiAgICB2YXIgaXNSb290O1xuXG4gICAgLy8gbm9ybWFsaXplIGFyZ3VtZW50c1xuICAgIHBhcmVudCA9IGZpbmRBcmcoYXJndW1lbnRzLCAxLCBFcnJvciwgaXNQYXJlbnRBcmcsIFtpc1Byb3BlcnRpZXNBcmcsIGlzRmFjdG9yeUFyZ10pO1xuICAgIHByb3BlcnRpZXMgPSBmaW5kQXJnKGFyZ3VtZW50cywgMiwge30sIGlzUHJvcGVydGllc0FyZywgW2lzRmFjdG9yeUFyZ10pO1xuICAgIGZhY3RvcnkgPSBmaW5kQXJnKGFyZ3VtZW50cywgMywgbm9vcCwgaXNGYWN0b3J5QXJnLCBbXSk7XG4gICAgbmFtZSA9IGZpbmRBcmcoYXJndW1lbnRzLCAwLCBwYXJlbnQgPT09IEVycm9yID8gJ0Vycm9yJyA6IHBhcmVudC5wcm90b3R5cGUuQ3VzdG9tRXJyb3IubmFtZSwgaXNOYW1lQXJnLCBbaXNQYXJlbnRBcmcsIGlzUHJvcGVydGllc0FyZywgaXNGYWN0b3J5QXJnXSk7XG5cbiAgICAvLyBpZiB0aGlzIGlzIHRoZSByb290IGFuZCB0aGVpciBpcyBubyBmYWN0b3J5IHRoZW4gdXNlIHRoZSBkZWZhdWx0IHJvb3QgZmFjdG9yeVxuICAgIGlzUm9vdCA9IHBhcmVudCA9PT0gRXJyb3I7XG4gICAgaWYgKGlzUm9vdCAmJiBmYWN0b3J5ID09PSBub29wKSBmYWN0b3J5ID0gQ3VzdG9tRXJyb3IuZmFjdG9yeS5yb290O1xuXG4gICAgLy8gYnVpbGQgdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gICAgY29uc3RydWN0ID0gZnVuY3Rpb24obWVzc2FnZSwgY29uZmlndXJhdGlvbikge1xuICAgICAgICB2YXIgX3RoaXM7XG4gICAgICAgIHZhciBhcjtcbiAgICAgICAgdmFyIGZhY3RvcmllcztcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBpdGVtO1xuICAgICAgICB2YXIgcHJvcHM7XG5cbiAgICAgICAgLy8gZm9yY2UgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IGtleXdvcmRcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGNvbnN0cnVjdCkpIHJldHVybiBuZXcgY29uc3RydWN0KG1lc3NhZ2UsIGNvbmZpZ3VyYXRpb24pO1xuXG4gICAgICAgIC8vIHJlbmFtZSB0aGUgY29uc3RydWN0b3JcbiAgICAgICAgZGVsZXRlIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuY29uc3RydWN0b3IsICduYW1lJywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbmFtZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgbWVzc2FnZSBpcyBhbiBvYmplY3RcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykgbWVzc2FnZSA9IHsgbWVzc2FnZTogbWVzc2FnZSB9O1xuICAgICAgICBpZiAoIW1lc3NhZ2UpIG1lc3NhZ2UgPSB7fTtcblxuICAgICAgICAvLyBidWlsZCB0aGUgcHJvcGVydGllcyBvYmplY3RcbiAgICAgICAgYXIgPSB0aGlzLkN1c3RvbUVycm9yLmNoYWluLnNsaWNlKDApLnJldmVyc2UoKS5tYXAoZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlLnByb3BlcnRpZXMgfSk7XG4gICAgICAgIGFyLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIGFyLnVuc2hpZnQoe30pO1xuICAgICAgICBwcm9wcyA9IE9iamVjdC5hc3NpZ24uYXBwbHkoT2JqZWN0LCBhcik7XG5cbiAgICAgICAgLy8gYnVpbGQgdGhlIGZhY3RvcmllcyBjYWxsZXIgKGZvcmNpbmcgc2NvcGUgdG8gdGhpcylcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgICBmYWN0b3JpZXMgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoQ3VzdG9tRXJyb3IuZmFjdG9yeSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGZhY3Rvcmllc1trZXldID0gZnVuY3Rpb24ocHJvcHMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIEN1c3RvbUVycm9yLmZhY3Rvcnlba2V5XS5jYWxsKF90aGlzLCBwcm9wcywgY29uZmlnLCBmYWN0b3JpZXMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2FsbCBlYWNoIGZhY3RvcnkgaW4gdGhlIGNoYWluLCBzdGFydGluZyBhdCB0aGUgcm9vdFxuICAgICAgICBmb3IgKGkgPSB0aGlzLkN1c3RvbUVycm9yLmNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpdGVtID0gdGhpcy5DdXN0b21FcnJvci5jaGFpbltpXTtcbiAgICAgICAgICAgIGlmIChpdGVtLmZhY3RvcnkgIT09IG5vb3ApIHtcbiAgICAgICAgICAgICAgICBpdGVtLmZhY3RvcnkuY2FsbCh0aGlzLCBwcm9wcywgY29uZmlndXJhdGlvbiwgZmFjdG9yaWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBjYXVzZSB0aGUgZnVuY3Rpb24gcHJvdG90eXBlIHRvIGluaGVyaXQgZnJvbSBwYXJlbnQncyBwcm90b3R5cGVcbiAgICBjb25zdHJ1Y3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgICBjb25zdHJ1Y3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0O1xuXG4gICAgLy8gdXBkYXRlIGVycm9yIG5hbWVcbiAgICBjb25zdHJ1Y3QucHJvdG90eXBlLm5hbWUgPSBuYW1lO1xuXG4gICAgLy8gYWRkIGRldGFpbHMgYWJvdXQgdGhlIGN1c3RvbSBlcnJvciB0byB0aGUgcHJvdG90eXBlXG4gICAgY29uc3RydWN0LnByb3RvdHlwZS5DdXN0b21FcnJvciA9IHtcbiAgICAgICAgY2hhaW46IGlzUm9vdCA/IFtdIDogcGFyZW50LnByb3RvdHlwZS5DdXN0b21FcnJvci5jaGFpbi5zbGljZSgwKSxcbiAgICAgICAgZmFjdG9yeTogZmFjdG9yeSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIHByb3BlcnRpZXM6IHByb3BlcnRpZXNcbiAgICB9O1xuICAgIGNvbnN0cnVjdC5wcm90b3R5cGUuQ3VzdG9tRXJyb3IuY2hhaW4udW5zaGlmdChjb25zdHJ1Y3QucHJvdG90eXBlLkN1c3RvbUVycm9yKTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgdG9TdHJpbmcgbWV0aG9kIG9uIHRoZSBwcm90b3R5cGUgdG8gYWNjZXB0IGEgY29kZVxuICAgIGNvbnN0cnVjdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuQ3VzdG9tRXJyb3IuY2hhaW5bdGhpcy5DdXN0b21FcnJvci5jaGFpbi5sZW5ndGggLSAxXS5uYW1lO1xuICAgICAgICBpZiAodGhpcy5jb2RlKSByZXN1bHQgICs9ICcgJyArIHRoaXMuY29kZTtcbiAgICAgICAgaWYgKHRoaXMubWVzc2FnZSkgcmVzdWx0ICs9ICc6ICcgKyB0aGlzLm1lc3NhZ2U7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBjb25zdHJ1Y3Q7XG59XG5cblxuXG5cbmZ1bmN0aW9uIGZpbmRBcmcoYXJncywgaW5kZXgsIGRlZmF1bHRWYWx1ZSwgZmlsdGVyLCBhbnRpRmlsdGVycykge1xuICAgIHZhciBhbnRpID0gLTE7XG4gICAgdmFyIGZvdW5kID0gLTE7XG4gICAgdmFyIGk7XG4gICAgdmFyIGo7XG4gICAgdmFyIGxlbiA9IGluZGV4IDwgYXJncy5sZW5ndGggPyBpbmRleCA6IGFyZ3MubGVuZ3RoO1xuICAgIHZhciB2YWw7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhbCA9IGFyZ3NbaV07XG4gICAgICAgIGlmIChhbnRpID09PSAtMSkge1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGFudGlGaWx0ZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFudGlGaWx0ZXJzW2pdKHZhbCkpIGFudGkgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmb3VuZCA9PT0gLTEgJiYgZmlsdGVyKHZhbCkpIHtcbiAgICAgICAgICAgIGZvdW5kID0gaTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmb3VuZCAhPT0gLTEgJiYgYW50aSAhPT0gLTEgJiYgYW50aSA8IGZvdW5kKSB0aHJvdyBuZXcgRXJyLm9yZGVyKCk7XG4gICAgcmV0dXJuIGZvdW5kICE9PSAtMSA/YXJnc1tmb3VuZF0gOiBkZWZhdWx0VmFsdWU7XG59XG5cbmZ1bmN0aW9uIGlzRmFjdG9yeUFyZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdmFsdWUgIT09IEVycm9yICYmICF2YWx1ZS5wcm90b3R5cGUuQ3VzdG9tRXJyb3I7XG59XG5cbmZ1bmN0aW9uIGlzTmFtZUFyZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBpc1BhcmVudEFyZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgKHZhbHVlID09PSBFcnJvciB8fCB2YWx1ZS5wcm90b3R5cGUuQ3VzdG9tRXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpc1Byb3BlcnRpZXNBcmcodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuZXhwZWN0UmVjZWl2ZSA9IGZ1bmN0aW9uKHByb3BlcnRpZXMsIGNvbmZpZ3VyYXRpb24sIGZhY3RvcnkpIHtcbiAgICB2YXIgbWVzc2FnZTtcbiAgICBmYWN0b3J5LnJvb3QocHJvcGVydGllcywgY29uZmlndXJhdGlvbiwgZmFjdG9yeSk7XG5cbiAgICBtZXNzYWdlID0gdGhpcy5tZXNzYWdlO1xuICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCdleHBlY3RlZCcpKSBtZXNzYWdlICs9ICcgRXhwZWN0ZWQgJyArIHByb3BlcnRpZXMuZXhwZWN0ZWQgKyAnLic7XG4gICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoJ3JlY2VpdmVkJykpIG1lc3NhZ2UgKz0gJyBSZWNlaXZlZDogJyArIHByb3BlcnRpZXMucmVjZWl2ZWQgKyAnLic7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn07XG5cbmV4cG9ydHMucm9vdCA9IGZ1bmN0aW9uKHByb3BlcnRpZXMsIGNvbmZpZ3VyYXRpb24sIGZhY3Rvcmllcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGNvZGU7XG4gICAgdmFyIGNvbmZpZyA9IHsgc3RhY2tMZW5ndGg6IEVycm9yLnN0YWNrVHJhY2VMaW1pdCwgcm9vdE9ubHk6IHRydWUgfTtcbiAgICB2YXIgbWVzc2FnZVN0ciA9ICcnO1xuICAgIHZhciBvcmlnaW5hbFN0YWNrTGVuZ3RoID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0O1xuICAgIHZhciBzdGFjaztcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVN0YWNrKCkge1xuICAgICAgICBzdGFja1swXSA9IF90aGlzLnRvU3RyaW5nKCk7XG4gICAgICAgIF90aGlzLnN0YWNrID0gc3RhY2suam9pbignXFxuJyk7XG4gICAgfVxuXG4gICAgLy8gZ2V0IGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgIGlmICghY29uZmlndXJhdGlvbiB8fCB0eXBlb2YgY29uZmlndXJhdGlvbiAhPT0gJ29iamVjdCcpIGNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICBpZiAoY29uZmlndXJhdGlvbi5oYXNPd25Qcm9wZXJ0eSgnc3RhY2tMZW5ndGgnKSAmJlxuICAgICAgICB0eXBlb2YgY29uZmlndXJhdGlvbi5zdGFja0xlbmd0aCA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgIWlzTmFOKGNvbmZpZ3VyYXRpb24uc3RhY2tMZW5ndGgpICYmXG4gICAgICAgIGNvbmZpZ3VyYXRpb24uc3RhY2tMZW5ndGggPj0gMCkgY29uZmlnLnN0YWNrTGVuZ3RoID0gY29uZmlndXJhdGlvbi5zdGFja0xlbmd0aDtcbiAgICBpZiAoIWNvbmZpZ3VyYXRpb24uaGFzT3duUHJvcGVydHkoJ3Jvb3RPbmx5JykpIGNvbmZpZy5yb290T25seSA9IGNvbmZpZ3VyYXRpb24ucm9vdE9ubHk7XG5cbiAgICAvLyBjaGVjayBpZiB0aGlzIHNob3VsZCBvbmx5IGJlIHJ1biBhcyByb290XG4gICAgaWYgKCFjb25maWcucm9vdE9ubHkgfHwgdGhpcy5DdXN0b21FcnJvci5wYXJlbnQgPT09IEVycm9yKSB7XG5cbiAgICAgICAgLy8gY29weSBwcm9wZXJ0aWVzIG9udG8gdGhpcyBvYmplY3RcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHN3aXRjaChrZXkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjb2RlJzpcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IHByb3BlcnRpZXMuY29kZSB8fCB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21lc3NhZ2UnOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlU3RyID0gcHJvcGVydGllcy5tZXNzYWdlIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBfdGhpc1trZXldID0gcHJvcGVydGllc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBnZW5lcmF0ZSB0aGUgc3RhY2sgdHJhY2VcbiAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gY29uZmlnLnN0YWNrTGVuZ3RoICsgMjtcbiAgICAgICAgc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgc3RhY2suc3BsaWNlKDAsIDMpO1xuICAgICAgICBzdGFjay51bnNoaWZ0KCcnKTtcbiAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gb3JpZ2luYWxTdGFja0xlbmd0aDtcbiAgICAgICAgdGhpcy5zdGFjayA9IHN0YWNrLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29kZScsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdXBkYXRlU3RhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdtZXNzYWdlJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VTdHI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VTdHIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIHVwZGF0ZVN0YWNrKCk7XG5cbiAgICB9XG59OyIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xudmFyIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJ2xvZGFzaC5fYmFzZWl0ZXJhdGVlJyksXG4gICAgYmFzZVVuaXEgPSByZXF1aXJlKCdsb2Rhc2guX2Jhc2V1bmlxJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtpdGVyYXRlZT1fLmlkZW50aXR5XVxuICogIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gKiAvLyA9PiBbMi4xLCAxLjJdXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAqL1xuZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICA/IGJhc2VVbmlxKGFycmF5LCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUpKVxuICAgIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pcUJ5O1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG52YXIgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnbG9kYXNoLl9zdHJpbmd0b3BhdGgnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjb21wYXJpc29uIHN0eWxlcy4gKi9cbnZhciBVTk9SREVSRURfQ09NUEFSRV9GTEFHID0gMSxcbiAgICBQQVJUSUFMX0NPTVBBUkVfRkxBRyA9IDI7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqIFVzZWQgdG8gZGV0ZXJtaW5lIGlmIHZhbHVlcyBhcmUgb2YgdGhlIGxhbmd1YWdlIHR5cGUgYE9iamVjdGAuICovXG52YXIgb2JqZWN0VHlwZXMgPSB7XG4gICdmdW5jdGlvbic6IHRydWUsXG4gICdvYmplY3QnOiB0cnVlXG59O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gKG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlKVxuICA/IGV4cG9ydHNcbiAgOiB1bmRlZmluZWQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gKG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlKVxuICA/IG1vZHVsZVxuICA6IHVuZGVmaW5lZDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gY2hlY2tHbG9iYWwoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSAmJiB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSBjaGVja0dsb2JhbChvYmplY3RUeXBlc1t0eXBlb2Ygc2VsZl0gJiYgc2VsZik7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgd2luZG93YC4gKi9cbnZhciBmcmVlV2luZG93ID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93KTtcblxuLyoqIERldGVjdCBgdGhpc2AgYXMgdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgdGhpc0dsb2JhbCA9IGNoZWNrR2xvYmFsKG9iamVjdFR5cGVzW3R5cGVvZiB0aGlzXSAmJiB0aGlzKTtcblxuLyoqXG4gKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICpcbiAqIFRoZSBgdGhpc2AgdmFsdWUgaXMgdXNlZCBpZiBpdCdzIHRoZSBnbG9iYWwgb2JqZWN0IHRvIGF2b2lkIEdyZWFzZW1vbmtleSdzXG4gKiByZXN0cmljdGVkIGB3aW5kb3dgIG9iamVjdCwgb3RoZXJ3aXNlIHRoZSBgd2luZG93YCBvYmplY3QgaXMgdXNlZC5cbiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8XG4gICgoZnJlZVdpbmRvdyAhPT0gKHRoaXNHbG9iYWwgJiYgdGhpc0dsb2JhbC53aW5kb3cpKSAmJiBmcmVlV2luZG93KSB8fFxuICAgIGZyZWVTZWxmIHx8IHRoaXNHbG9iYWwgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGdsb2JhbCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge251bGx8T2JqZWN0fSBSZXR1cm5zIGB2YWx1ZWAgaWYgaXQncyBhIGdsb2JhbCBvYmplY3QsIGVsc2UgYG51bGxgLlxuICovXG5mdW5jdGlvbiBjaGVja0dsb2JhbCh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLk9iamVjdCA9PT0gT2JqZWN0KSA/IHZhbHVlIDogbnVsbDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSG9zdE9iamVjdCh2YWx1ZSkge1xuICAvLyBNYW55IGhvc3Qgb2JqZWN0cyBhcmUgYE9iamVjdGAgb2JqZWN0cyB0aGF0IGNhbiBjb2VyY2UgdG8gc3RyaW5nc1xuICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLlxuICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXksXG4gICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBuYXRpdmVLZXlzID0gT2JqZWN0LmtleXM7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPyB2YWx1ZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfX1snZGVsZXRlJ10oa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBjYWNoZSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChjYWNoZSBpbnN0YW5jZW9mIExpc3RDYWNoZSAmJiBjYWNoZS5fX2RhdGFfXy5sZW5ndGggPT0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgIGNhY2hlID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShjYWNoZS5fX2RhdGFfXyk7XG4gIH1cbiAgY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBpc0tleShwYXRoLCBvYmplY3QpID8gW3BhdGhdIDogY2FzdFBhdGgocGF0aCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgLy8gQXZvaWQgYSBidWcgaW4gSUUgMTAtMTEgd2hlcmUgb2JqZWN0cyB3aXRoIGEgW1tQcm90b3R5cGVdXSBvZiBgbnVsbGAsXG4gIC8vIHRoYXQgYXJlIGNvbXBvc2VkIGVudGlyZWx5IG9mIGluZGV4IHByb3BlcnRpZXMsIHJldHVybiBgZmFsc2VgIGZvclxuICAvLyBgaGFzT3duUHJvcGVydHlgIGNoZWNrcyBvZiB0aGVtLlxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgfHxcbiAgICAodHlwZW9mIG9iamVjdCA9PSAnb2JqZWN0JyAmJiBrZXkgaW4gb2JqZWN0ICYmIGdldFByb3RvdHlwZShvYmplY3QpID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4ga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtiaXRtYXNrXSBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLlxuICogIFRoZSBiaXRtYXNrIG1heSBiZSBjb21wb3NlZCBvZiB0aGUgZm9sbG93aW5nIGZsYWdzOlxuICogICAgIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogICAgIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0KHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYmFzZUlzRXF1YWwsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYml0bWFza10gVGhlIGJpdG1hc2sgb2YgY29tcGFyaXNvbiBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGBcbiAqICBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBhcnJheVRhZyxcbiAgICAgIG90aFRhZyA9IGFycmF5VGFnO1xuXG4gIGlmICghb2JqSXNBcnIpIHtcbiAgICBvYmpUYWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgfVxuICBpZiAoIW90aElzQXJyKSB7XG4gICAgb3RoVGFnID0gZ2V0VGFnKG90aGVyKTtcbiAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcbiAgfVxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnICYmICFpc0hvc3RPYmplY3Qob2JqZWN0KSxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyAmJiAhaXNIb3N0T2JqZWN0KG90aGVyKSxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgY3VzdG9taXplciwgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyB8IFBBUlRJQUxfQ09NUEFSRV9GTEFHLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3Qgc2tpcCB0aGUgY29uc3RydWN0b3JcbiAqIHByb3BlcnR5IG9mIHByb3RvdHlwZXMgb3IgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIHJldHVybiBuYXRpdmVLZXlzKE9iamVjdChvYmplY3QpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIHVuZGVmaW5lZCwgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyB8IFBBUlRJQUxfQ09NUEFSRV9GTEFHKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogc3RyaW5nVG9QYXRoKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBjb21wYXJpc29uIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYFxuICogIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBQQVJUSUFMX0NPTVBBUkVfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFzZWVuLmhhcyhvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4uYWRkKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgb2YgY29tcGFyaXNvbiBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGBcbiAqICBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtYmVycywgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzIGFuZFxuICAgICAgLy8gYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCB0cmVhdGluZyBpbnZhbGlkIGRhdGVzIGNvZXJjZWQgdG8gYE5hTmAgYXNcbiAgICAgIC8vIG5vdCBlcXVhbC5cbiAgICAgIHJldHVybiArb2JqZWN0ID09ICtvdGhlcjtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBUcmVhdCBgTmFOYCB2cy4gYE5hTmAgYXMgZXF1YWwuXG4gICAgICByZXR1cm4gKG9iamVjdCAhPSArb2JqZWN0KSA/IG90aGVyICE9ICtvdGhlciA6IG9iamVjdCA9PSArb3RoZXI7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBQQVJUSUFMX0NPTVBBUkVfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IFVOT1JERVJFRF9DT01QQVJFX0ZMQUc7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgcmV0dXJuIGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGVxdWFsRnVuYywgY3VzdG9taXplciwgYml0bWFzaywgc3RhY2spO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgb2YgY29tcGFyaXNvbiBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGBcbiAqICBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIFBBUlRJQUxfQ09NUEFSRV9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogYmFzZUhhcyhvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICBpZiAoc3RhY2tlZCkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IHZhbHVlIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gYXZvaWQgYVxuICogW0pJVCBidWddKGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDI3OTIpIHRoYXQgYWZmZWN0c1xuICogU2FmYXJpIG9uIGF0IGxlYXN0IGlPUyA4LjEtOC4zIEFSTTY0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgXCJsZW5ndGhcIiB2YWx1ZS5cbiAqL1xudmFyIGdldExlbmd0aCA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSB0b1BhaXJzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHJlc3VsdFtsZW5ndGhdWzJdID0gaXNTdHJpY3RDb21wYXJhYmxlKHJlc3VsdFtsZW5ndGhdWzFdKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG4gIHJldHVybiBpc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBgW1tQcm90b3R5cGVdXWAgb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7bnVsbHxPYmplY3R9IFJldHVybnMgdGhlIGBbW1Byb3RvdHlwZV1dYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvdG90eXBlKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGUoT2JqZWN0KHZhbHVlKSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFRhZyh2YWx1ZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExLFxuLy8gZm9yIGRhdGEgdmlld3MgaW4gRWRnZSwgYW5kIHByb21pc2VzIGluIE5vZGUuanMuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGlzS2V5KHBhdGgsIG9iamVjdCkgPyBbcGF0aF0gOiBjYXN0UGF0aChwYXRoKTtcblxuICB2YXIgcmVzdWx0LFxuICAgICAgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB2YXIgbGVuZ3RoID0gb2JqZWN0ID8gb2JqZWN0Lmxlbmd0aCA6IDA7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc1N0cmluZyhvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgaW5kZXgga2V5cyBmb3IgYG9iamVjdGAgdmFsdWVzIG9mIGFycmF5cyxcbiAqIGBhcmd1bWVudHNgIG9iamVjdHMsIGFuZCBzdHJpbmdzLCBvdGhlcndpc2UgYG51bGxgIGlzIHJldHVybmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl8bnVsbH0gUmV0dXJucyBpbmRleCBrZXlzLCBlbHNlIGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gaW5kZXhLZXlzKG9iamVjdCkge1xuICB2YXIgbGVuZ3RoID0gb2JqZWN0ID8gb2JqZWN0Lmxlbmd0aCA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzTGVuZ3RoKGxlbmd0aCkgJiZcbiAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNTdHJpbmcob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKSkge1xuICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBTdHJpbmcpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKiB2YXIgb3RoZXIgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAvLyBTYWZhcmkgOC4xIGluY29ycmVjdGx5IG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICghcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpIHx8IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFyZ3NUYWcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQHR5cGUge0Z1bmN0aW9ufVxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aChnZXRMZW5ndGgodmFsdWUpKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA4IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCB3ZWFrIG1hcCBjb25zdHJ1Y3RvcnMsXG4gIC8vIGFuZCBQaGFudG9tSlMgMS45IHdoaWNoIHJldHVybnMgJ2Z1bmN0aW9uJyBmb3IgYE5vZGVMaXN0YCBpbnN0YW5jZXMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmF0aXZlKF8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3RyaW5nKDEpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKV07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgdXNlZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpO1xuICBpZiAoIShpc1Byb3RvIHx8IGlzQXJyYXlMaWtlKG9iamVjdCkpKSB7XG4gICAgcmV0dXJuIGJhc2VLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIGluZGV4ZXMgPSBpbmRleEtleXMob2JqZWN0KSxcbiAgICAgIHNraXBJbmRleGVzID0gISFpbmRleGVzLFxuICAgICAgcmVzdWx0ID0gaW5kZXhlcyB8fCBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChiYXNlSGFzKG9iamVjdCwga2V5KSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChrZXkgPT0gJ2xlbmd0aCcgfHwgaXNJbmRleChrZXksIGxlbmd0aCkpKSAmJlxuICAgICAgICAhKGlzUHJvdG8gJiYga2V5ID09ICdjb25zdHJ1Y3RvcicpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAYWxpYXMgZW50cmllc1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbnZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBnaXZlbiB0byBpdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICpcbiAqIF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0O1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cbnZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCdsb2Rhc2guX2Jhc2V0b3N0cmluZycpO1xuXG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXS9nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVybWluZSBpZiB2YWx1ZXMgYXJlIG9mIHRoZSBsYW5ndWFnZSB0eXBlIGBPYmplY3RgLiAqL1xudmFyIG9iamVjdFR5cGVzID0ge1xuICAnZnVuY3Rpb24nOiB0cnVlLFxuICAnb2JqZWN0JzogdHJ1ZVxufTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IChvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSlcbiAgPyBleHBvcnRzXG4gIDogdW5kZWZpbmVkO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IChvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSlcbiAgPyBtb2R1bGVcbiAgOiB1bmRlZmluZWQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IGNoZWNrR2xvYmFsKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUgJiYgdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHdpbmRvd2AuICovXG52YXIgZnJlZVdpbmRvdyA9IGNoZWNrR2xvYmFsKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyk7XG5cbi8qKiBEZXRlY3QgYHRoaXNgIGFzIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHRoaXNHbG9iYWwgPSBjaGVja0dsb2JhbChvYmplY3RUeXBlc1t0eXBlb2YgdGhpc10gJiYgdGhpcyk7XG5cbi8qKlxuICogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAqXG4gKiBUaGUgYHRoaXNgIHZhbHVlIGlzIHVzZWQgaWYgaXQncyB0aGUgZ2xvYmFsIG9iamVjdCB0byBhdm9pZCBHcmVhc2Vtb25rZXknc1xuICogcmVzdHJpY3RlZCBgd2luZG93YCBvYmplY3QsIG90aGVyd2lzZSB0aGUgYHdpbmRvd2Agb2JqZWN0IGlzIHVzZWQuXG4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fFxuICAoKGZyZWVXaW5kb3cgIT09ICh0aGlzR2xvYmFsICYmIHRoaXNHbG9iYWwud2luZG93KSkgJiYgZnJlZVdpbmRvdykgfHxcbiAgICBmcmVlU2VsZiB8fCB0aGlzR2xvYmFsIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBnbG9iYWwgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtudWxsfE9iamVjdH0gUmV0dXJucyBgdmFsdWVgIGlmIGl0J3MgYSBnbG9iYWwgb2JqZWN0LCBlbHNlIGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gY2hlY2tHbG9iYWwodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5PYmplY3QgPT09IE9iamVjdCkgPyB2YWx1ZSA6IG51bGw7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCBpbiBJRSA8IDkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBob3N0IG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0hvc3RPYmplY3QodmFsdWUpIHtcbiAgLy8gTWFueSBob3N0IG9iamVjdHMgYXJlIGBPYmplY3RgIG9iamVjdHMgdGhhdCBjYW4gY29lcmNlIHRvIHN0cmluZ3NcbiAgLy8gZGVzcGl0ZSBoYXZpbmcgaW1wcm9wZXJseSBkZWZpbmVkIGB0b1N0cmluZ2AgbWV0aG9kcy5cbiAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSAhISh2YWx1ZSArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgcmV0dXJuIGlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemUoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBBc3NpZ24gY2FjaGUgdG8gYF8ubWVtb2l6ZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKiB2YXIgb3RoZXIgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA4IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCB3ZWFrIG1hcCBjb25zdHJ1Y3RvcnMsXG4gIC8vIGFuZCBQaGFudG9tSlMgMS45IHdoaWNoIHJldHVybnMgJ2Z1bmN0aW9uJyBmb3IgYE5vZGVMaXN0YCBpbnN0YW5jZXMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmF0aXZlKF8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIGRldGVybWluZSBpZiB2YWx1ZXMgYXJlIG9mIHRoZSBsYW5ndWFnZSB0eXBlIGBPYmplY3RgLiAqL1xudmFyIG9iamVjdFR5cGVzID0ge1xuICAnZnVuY3Rpb24nOiB0cnVlLFxuICAnb2JqZWN0JzogdHJ1ZVxufTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IChvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSlcbiAgPyBleHBvcnRzXG4gIDogdW5kZWZpbmVkO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IChvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSlcbiAgPyBtb2R1bGVcbiAgOiB1bmRlZmluZWQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IGNoZWNrR2xvYmFsKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUgJiYgdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHdpbmRvd2AuICovXG52YXIgZnJlZVdpbmRvdyA9IGNoZWNrR2xvYmFsKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyk7XG5cbi8qKiBEZXRlY3QgYHRoaXNgIGFzIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHRoaXNHbG9iYWwgPSBjaGVja0dsb2JhbChvYmplY3RUeXBlc1t0eXBlb2YgdGhpc10gJiYgdGhpcyk7XG5cbi8qKlxuICogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAqXG4gKiBUaGUgYHRoaXNgIHZhbHVlIGlzIHVzZWQgaWYgaXQncyB0aGUgZ2xvYmFsIG9iamVjdCB0byBhdm9pZCBHcmVhc2Vtb25rZXknc1xuICogcmVzdHJpY3RlZCBgd2luZG93YCBvYmplY3QsIG90aGVyd2lzZSB0aGUgYHdpbmRvd2Agb2JqZWN0IGlzIHVzZWQuXG4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fFxuICAoKGZyZWVXaW5kb3cgIT09ICh0aGlzR2xvYmFsICYmIHRoaXNHbG9iYWwud2luZG93KSkgJiYgZnJlZVdpbmRvdykgfHxcbiAgICBmcmVlU2VsZiB8fCB0aGlzR2xvYmFsIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBnbG9iYWwgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtudWxsfE9iamVjdH0gUmV0dXJucyBgdmFsdWVgIGlmIGl0J3MgYSBnbG9iYWwgb2JqZWN0LCBlbHNlIGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gY2hlY2tHbG9iYWwodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5PYmplY3QgPT09IE9iamVjdCkgPyB2YWx1ZSA6IG51bGw7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG52YXIgY3JlYXRlU2V0ID0gcmVxdWlyZSgnbG9kYXNoLl9jcmVhdGVzZXQnKSxcbiAgICByb290ID0gcmVxdWlyZSgnbG9kYXNoLl9yb290Jyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgcmV0dXJuICEhYXJyYXkubGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgaWYgKHZhbHVlICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBpbmRleE9mTmFOKGFycmF5LCBmcm9tSW5kZXgpO1xuICB9XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgTmFOYCBpcyBmb3VuZCBpbiBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIGBOYU5gLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGluZGV4T2ZOYU4oYXJyYXksIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAwIDogLTEpO1xuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgdmFyIG90aGVyID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChvdGhlciAhPT0gb3RoZXIpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksXG4gICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHJldHVybiB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gZGF0YVtrZXldICE9PSB1bmRlZmluZWQgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICBnZXRNYXBEYXRhKHRoaXMsIGtleSkuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID8gdmFsdWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICBpZiAoY29tcGFyYXRvcikge1xuICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgfVxuICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgIGlmIChzZXQpIHtcbiAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgfVxuICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICB9XG4gIGVsc2Uge1xuICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICB9XG4gIG91dGVyOlxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICByZXR1cm4gaXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICogdmFyIG90aGVyID0geyAndXNlcic6ICdmcmVkJyB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOCB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgd2VhayBtYXAgY29uc3RydWN0b3JzLFxuICAvLyBhbmQgUGhhbnRvbUpTIDEuOSB3aGljaCByZXR1cm5zICdmdW5jdGlvbicgZm9yIGBOb2RlTGlzdGAgaW5zdGFuY2VzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc05hdGl2ZShfKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gKGlzRnVuY3Rpb24odmFsdWUpIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmlxO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgdG8gZGV0ZXJtaW5lIGlmIHZhbHVlcyBhcmUgb2YgdGhlIGxhbmd1YWdlIHR5cGUgYE9iamVjdGAuICovXG52YXIgb2JqZWN0VHlwZXMgPSB7XG4gICdmdW5jdGlvbic6IHRydWUsXG4gICdvYmplY3QnOiB0cnVlXG59O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gKG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlKVxuICA/IGV4cG9ydHNcbiAgOiB1bmRlZmluZWQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gKG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlKVxuICA/IG1vZHVsZVxuICA6IHVuZGVmaW5lZDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gY2hlY2tHbG9iYWwoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSAmJiB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSBjaGVja0dsb2JhbChvYmplY3RUeXBlc1t0eXBlb2Ygc2VsZl0gJiYgc2VsZik7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgd2luZG93YC4gKi9cbnZhciBmcmVlV2luZG93ID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93KTtcblxuLyoqIERldGVjdCBgdGhpc2AgYXMgdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgdGhpc0dsb2JhbCA9IGNoZWNrR2xvYmFsKG9iamVjdFR5cGVzW3R5cGVvZiB0aGlzXSAmJiB0aGlzKTtcblxuLyoqXG4gKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICpcbiAqIFRoZSBgdGhpc2AgdmFsdWUgaXMgdXNlZCBpZiBpdCdzIHRoZSBnbG9iYWwgb2JqZWN0IHRvIGF2b2lkIEdyZWFzZW1vbmtleSdzXG4gKiByZXN0cmljdGVkIGB3aW5kb3dgIG9iamVjdCwgb3RoZXJ3aXNlIHRoZSBgd2luZG93YCBvYmplY3QgaXMgdXNlZC5cbiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8XG4gICgoZnJlZVdpbmRvdyAhPT0gKHRoaXNHbG9iYWwgJiYgdGhpc0dsb2JhbC53aW5kb3cpKSAmJiBmcmVlV2luZG93KSB8fFxuICAgIGZyZWVTZWxmIHx8IHRoaXNHbG9iYWwgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGdsb2JhbCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge251bGx8T2JqZWN0fSBSZXR1cm5zIGB2YWx1ZWAgaWYgaXQncyBhIGdsb2JhbCBvYmplY3QsIGVsc2UgYG51bGxgLlxuICovXG5mdW5jdGlvbiBjaGVja0dsb2JhbCh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLk9iamVjdCA9PT0gT2JqZWN0KSA/IHZhbHVlIDogbnVsbDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSG9zdE9iamVjdCh2YWx1ZSkge1xuICAvLyBNYW55IGhvc3Qgb2JqZWN0cyBhcmUgYE9iamVjdGAgb2JqZWN0cyB0aGF0IGNhbiBjb2VyY2UgdG8gc3RyaW5nc1xuICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLlxuICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzZXQgb2YgYHZhbHVlc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAqL1xudmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgcmV0dXJuIGlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOCB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgd2VhayBtYXAgY29uc3RydWN0b3JzLFxuICAvLyBhbmQgUGhhbnRvbUpTIDEuOSB3aGljaCByZXR1cm5zICdmdW5jdGlvbicgZm9yIGBOb2RlTGlzdGAgaW5zdGFuY2VzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc05hdGl2ZShfKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gKGlzRnVuY3Rpb24odmFsdWUpIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIEEgbm8tb3BlcmF0aW9uIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdW5kZWZpbmVkYCByZWdhcmRsZXNzIG9mIHRoZVxuICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4zLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKlxuICogXy5ub29wKG9iamVjdCkgPT09IHVuZGVmaW5lZDtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHtcbiAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTZXQ7XG4iLCIvKipcbiAqIGxvZGFzaCAzLjAuMSAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IDIwMTItMjAxNiBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE2IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG5cbi8qKiBVc2VkIHRvIGRldGVybWluZSBpZiB2YWx1ZXMgYXJlIG9mIHRoZSBsYW5ndWFnZSB0eXBlIGBPYmplY3RgLiAqL1xudmFyIG9iamVjdFR5cGVzID0ge1xuICAnZnVuY3Rpb24nOiB0cnVlLFxuICAnb2JqZWN0JzogdHJ1ZVxufTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IChvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSlcbiAgPyBleHBvcnRzXG4gIDogdW5kZWZpbmVkO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IChvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSlcbiAgPyBtb2R1bGVcbiAgOiB1bmRlZmluZWQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IGNoZWNrR2xvYmFsKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUgJiYgdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHdpbmRvd2AuICovXG52YXIgZnJlZVdpbmRvdyA9IGNoZWNrR2xvYmFsKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyk7XG5cbi8qKiBEZXRlY3QgYHRoaXNgIGFzIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHRoaXNHbG9iYWwgPSBjaGVja0dsb2JhbChvYmplY3RUeXBlc1t0eXBlb2YgdGhpc10gJiYgdGhpcyk7XG5cbi8qKlxuICogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAqXG4gKiBUaGUgYHRoaXNgIHZhbHVlIGlzIHVzZWQgaWYgaXQncyB0aGUgZ2xvYmFsIG9iamVjdCB0byBhdm9pZCBHcmVhc2Vtb25rZXknc1xuICogcmVzdHJpY3RlZCBgd2luZG93YCBvYmplY3QsIG90aGVyd2lzZSB0aGUgYHdpbmRvd2Agb2JqZWN0IGlzIHVzZWQuXG4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fFxuICAoKGZyZWVXaW5kb3cgIT09ICh0aGlzR2xvYmFsICYmIHRoaXNHbG9iYWwud2luZG93KSkgJiYgZnJlZVdpbmRvdykgfHxcbiAgICBmcmVlU2VsZiB8fCB0aGlzR2xvYmFsIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBnbG9iYWwgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtudWxsfE9iamVjdH0gUmV0dXJucyBgdmFsdWVgIGlmIGl0J3MgYSBnbG9iYWwgb2JqZWN0LCBlbHNlIGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gY2hlY2tHbG9iYWwodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5PYmplY3QgPT09IE9iamVjdCkgPyB2YWx1ZSA6IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG52YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW1lcmFibGUuY2FsbCh7IHRvU3RyaW5nOiBudWxsIH0sICd0b1N0cmluZycpO1xudmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG52YXIgZG9udEVudW1zID0gW1xuXHQndG9TdHJpbmcnLFxuXHQndG9Mb2NhbGVTdHJpbmcnLFxuXHQndmFsdWVPZicsXG5cdCdoYXNPd25Qcm9wZXJ0eScsXG5cdCdpc1Byb3RvdHlwZU9mJyxcblx0J3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcblx0J2NvbnN0cnVjdG9yJ1xuXTtcbnZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG5cdHZhciBjdG9yID0gby5jb25zdHJ1Y3Rvcjtcblx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG59O1xudmFyIGV4Y2x1ZGVkS2V5cyA9IHtcblx0JGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG5cdCRjb25zb2xlOiB0cnVlLFxuXHQkZXh0ZXJuYWw6IHRydWUsXG5cdCRmcmFtZTogdHJ1ZSxcblx0JGZyYW1lRWxlbWVudDogdHJ1ZSxcblx0JGZyYW1lczogdHJ1ZSxcblx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHQkaW5uZXJXaWR0aDogdHJ1ZSxcblx0JG91dGVySGVpZ2h0OiB0cnVlLFxuXHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0JHBhZ2VYT2Zmc2V0OiB0cnVlLFxuXHQkcGFnZVlPZmZzZXQ6IHRydWUsXG5cdCRwYXJlbnQ6IHRydWUsXG5cdCRzY3JvbGxMZWZ0OiB0cnVlLFxuXHQkc2Nyb2xsVG9wOiB0cnVlLFxuXHQkc2Nyb2xsWDogdHJ1ZSxcblx0JHNjcm9sbFk6IHRydWUsXG5cdCRzZWxmOiB0cnVlLFxuXHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHQkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG5cdCR3aW5kb3c6IHRydWVcbn07XG52YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcblx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGZvciAodmFyIGsgaW4gd2luZG93KSB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0ZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmYWxzZTtcbn0oKSk7XG52YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG8pIHtcblx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcblxudmFyIGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuXHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0dmFyIGlzQXJndW1lbnRzID0gaXNBcmdzKG9iamVjdCk7XG5cdHZhciBpc1N0cmluZyA9IGlzT2JqZWN0ICYmIHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdHZhciB0aGVLZXlzID0gW107XG5cblx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG5cdH1cblxuXHR2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cdGlmIChpc1N0cmluZyAmJiBvYmplY3QubGVuZ3RoID4gMCAmJiAhaGFzLmNhbGwob2JqZWN0LCAwKSkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGkpKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoaXNBcmd1bWVudHMgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG9iamVjdC5sZW5ndGg7ICsraikge1xuXHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhuYW1lKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0dmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuXG5cdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBkb250RW51bXMubGVuZ3RoOyArK2spIHtcblx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW1zW2tdKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHRoZUtleXM7XG59O1xuXG5rZXlzU2hpbS5zaGltID0gZnVuY3Rpb24gc2hpbU9iamVjdEtleXMoKSB7XG5cdGlmIChPYmplY3Qua2V5cykge1xuXHRcdHZhciBrZXlzV29ya3NXaXRoQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0XHRcdC8vIFNhZmFyaSA1LjAgYnVnXG5cdFx0XHRyZXR1cm4gKE9iamVjdC5rZXlzKGFyZ3VtZW50cykgfHwgJycpLmxlbmd0aCA9PT0gMjtcblx0XHR9KDEsIDIpKTtcblx0XHRpZiAoIWtleXNXb3Jrc1dpdGhBcmd1bWVudHMpIHtcblx0XHRcdHZhciBvcmlnaW5hbEtleXMgPSBPYmplY3Qua2V5cztcblx0XHRcdE9iamVjdC5rZXlzID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcblx0XHRcdFx0aWYgKGlzQXJncyhvYmplY3QpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhzbGljZS5jYWxsKG9iamVjdCkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMob2JqZWN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUzIwMTYgPSByZXF1aXJlKCcuL2VzMjAxNicpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vaGVscGVycy9hc3NpZ24nKTtcblxudmFyIEVTMjAxNyA9IGFzc2lnbihhc3NpZ24oe30sIEVTMjAxNiksIHtcblx0VG9JbmRleDogZnVuY3Rpb24gVG9JbmRleCh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0dmFyIGludGVnZXJJbmRleCA9IHRoaXMuVG9JbnRlZ2VyKHZhbHVlKTtcblx0XHRpZiAoaW50ZWdlckluZGV4IDwgMCkge1xuXHRcdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2luZGV4IG11c3QgYmUgPj0gMCcpO1xuXHRcdH1cblx0XHR2YXIgaW5kZXggPSB0aGlzLlRvTGVuZ3RoKGludGVnZXJJbmRleCk7XG5cdFx0aWYgKCF0aGlzLlNhbWVWYWx1ZVplcm8oaW50ZWdlckluZGV4LCBpbmRleCkpIHtcblx0XHRcdHRocm93IG5ldyBSYW5nZUVycm9yKCdpbmRleCBtdXN0IGJlID49IDAgYW5kIDwgMiAqKiA1MyAtIDEnKTtcblx0XHR9XG5cdFx0cmV0dXJuIGluZGV4O1xuXHR9XG59KTtcblxuZGVsZXRlIEVTMjAxNy5FbnVtZXJhYmxlT3duTmFtZXM7IC8vIHJlcGxhY2VkIHdpdGggRW51bWVyYWJsZU93blByb3BlcnRpZXNcblxubW9kdWxlLmV4cG9ydHMgPSBFUzIwMTc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUzIwMTUgPSByZXF1aXJlKCcuL2VzMjAxNScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vaGVscGVycy9hc3NpZ24nKTtcblxudmFyIEVTMjAxNiA9IGFzc2lnbihhc3NpZ24oe30sIEVTMjAxNSksIHtcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mi9wdWxsLzYwXG5cdFNhbWVWYWx1ZU5vbk51bWJlcjogZnVuY3Rpb24gU2FtZVZhbHVlTm9uTnVtYmVyKHgsIHkpIHtcblx0XHRpZiAodHlwZW9mIHggPT09ICdudW1iZXInIHx8IHR5cGVvZiB4ICE9PSB0eXBlb2YgeSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignU2FtZVZhbHVlTm9uTnVtYmVyIHJlcXVpcmVzIHR3byBub24tbnVtYmVyIHZhbHVlcyBvZiB0aGUgc2FtZSB0eXBlLicpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5TYW1lVmFsdWUoeCwgeSk7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVTMjAxNjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnZXMtdG8tcHJpbWl0aXZlL2VzNicpO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJFN5bnRheEVycm9yID0gR2V0SW50cmluc2ljKCclU3ludGF4RXJyb3IlJyk7XG52YXIgJEFycmF5ID0gR2V0SW50cmluc2ljKCclQXJyYXklJyk7XG52YXIgJFN0cmluZyA9IEdldEludHJpbnNpYygnJVN0cmluZyUnKTtcbnZhciAkT2JqZWN0ID0gR2V0SW50cmluc2ljKCclT2JqZWN0JScpO1xudmFyICROdW1iZXIgPSBHZXRJbnRyaW5zaWMoJyVOdW1iZXIlJyk7XG52YXIgJFN5bWJvbCA9IEdldEludHJpbnNpYygnJVN5bWJvbCUnLCB0cnVlKTtcbnZhciAkUmVnRXhwID0gR2V0SW50cmluc2ljKCclUmVnRXhwJScpO1xuXG52YXIgaGFzU3ltYm9scyA9ICEhJFN5bWJvbDtcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0Zpbml0ZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAkTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgTWF0aC5wb3coMiwgNTMpIC0gMTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vaGVscGVycy9hc3NpZ24nKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NpZ24nKTtcbnZhciBtb2QgPSByZXF1aXJlKCcuL2hlbHBlcnMvbW9kJyk7XG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcbnZhciBwYXJzZUludGVnZXIgPSBwYXJzZUludDtcbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIGFycmF5U2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgJEFycmF5LnByb3RvdHlwZS5zbGljZSk7XG52YXIgc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgJFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xudmFyIGlzQmluYXJ5ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsICRSZWdFeHAucHJvdG90eXBlLnRlc3QsIC9eMGJbMDFdKyQvaSk7XG52YXIgaXNPY3RhbCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCAkUmVnRXhwLnByb3RvdHlwZS50ZXN0LCAvXjBvWzAtN10rJC9pKTtcbnZhciByZWdleEV4ZWMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgJFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG52YXIgbm9uV1MgPSBbJ1xcdTAwODUnLCAnXFx1MjAwYicsICdcXHVmZmZlJ10uam9pbignJyk7XG52YXIgbm9uV1NyZWdleCA9IG5ldyAkUmVnRXhwKCdbJyArIG5vbldTICsgJ10nLCAnZycpO1xudmFyIGhhc05vbldTID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsICRSZWdFeHAucHJvdG90eXBlLnRlc3QsIG5vbldTcmVnZXgpO1xudmFyIGludmFsaWRIZXhMaXRlcmFsID0gL15bLStdMHhbMC05YS1mXSskL2k7XG52YXIgaXNJbnZhbGlkSGV4TGl0ZXJhbCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCAkUmVnRXhwLnByb3RvdHlwZS50ZXN0LCBpbnZhbGlkSGV4TGl0ZXJhbCk7XG52YXIgJGNoYXJDb2RlQXQgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgJFN0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdCk7XG5cbnZhciB0b1N0ciA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcblxudmFyICRmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgJGFicyA9IE1hdGguYWJzO1xuXG52YXIgJE9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgJGdPUEQgPSAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyICRpc0V4dGVuc2libGUgPSAkT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuLy8gd2hpdGVzcGFjZSBmcm9tOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjUuNC4yMFxuLy8gaW1wbGVtZW50YXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi92My40LjAvZXM1LXNoaW0uanMjTDEzMDQtTDEzMjRcbnZhciB3cyA9IFtcblx0J1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyxcblx0J1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4Jyxcblx0J1xcdTIwMjlcXHVGRUZGJ1xuXS5qb2luKCcnKTtcbnZhciB0cmltUmVnZXggPSBuZXcgUmVnRXhwKCcoXlsnICsgd3MgKyAnXSspfChbJyArIHdzICsgJ10rJCknLCAnZycpO1xudmFyIHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgJFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgdHJpbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgdHJpbVJlZ2V4LCAnJyk7XG59O1xuXG52YXIgRVM1ID0gcmVxdWlyZSgnLi9lczUnKTtcblxudmFyIGhhc1JlZ0V4cE1hdGNoZXIgPSByZXF1aXJlKCdpcy1yZWdleCcpO1xuXG4vLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtYWJzdHJhY3Qtb3BlcmF0aW9uc1xudmFyIEVTNiA9IGFzc2lnbihhc3NpZ24oe30sIEVTNSksIHtcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtY2FsbC1mLXYtYXJnc1xuXHRDYWxsOiBmdW5jdGlvbiBDYWxsKEYsIFYpIHtcblx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogW107XG5cdFx0aWYgKCF0aGlzLklzQ2FsbGFibGUoRikpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKEYgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdFx0fVxuXHRcdHJldHVybiBGLmFwcGx5KFYsIGFyZ3MpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b3ByaW1pdGl2ZVxuXHRUb1ByaW1pdGl2ZTogdG9QcmltaXRpdmUsXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvYm9vbGVhblxuXHQvLyBUb0Jvb2xlYW46IEVTNS5Ub0Jvb2xlYW4sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvbnVtYmVyXG5cdFRvTnVtYmVyOiBmdW5jdGlvbiBUb051bWJlcihhcmd1bWVudCkge1xuXHRcdHZhciB2YWx1ZSA9IGlzUHJpbWl0aXZlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdG9QcmltaXRpdmUoYXJndW1lbnQsICROdW1iZXIpO1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGlmIChpc0JpbmFyeSh2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuVG9OdW1iZXIocGFyc2VJbnRlZ2VyKHN0clNsaWNlKHZhbHVlLCAyKSwgMikpO1xuXHRcdFx0fSBlbHNlIGlmIChpc09jdGFsKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5Ub051bWJlcihwYXJzZUludGVnZXIoc3RyU2xpY2UodmFsdWUsIDIpLCA4KSk7XG5cdFx0XHR9IGVsc2UgaWYgKGhhc05vbldTKHZhbHVlKSB8fCBpc0ludmFsaWRIZXhMaXRlcmFsKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gTmFOO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIHRyaW1tZWQgPSB0cmltKHZhbHVlKTtcblx0XHRcdFx0aWYgKHRyaW1tZWQgIT09IHZhbHVlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuVG9OdW1iZXIodHJpbW1lZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuICROdW1iZXIodmFsdWUpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2ludGVnZXJcblx0Ly8gVG9JbnRlZ2VyOiBFUzUuVG9OdW1iZXIsXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvaW50MzJcblx0Ly8gVG9JbnQzMjogRVM1LlRvSW50MzIsXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvdWludDMyXG5cdC8vIFRvVWludDMyOiBFUzUuVG9VaW50MzIsXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvaW50MTZcblx0VG9JbnQxNjogZnVuY3Rpb24gVG9JbnQxNihhcmd1bWVudCkge1xuXHRcdHZhciBpbnQxNmJpdCA9IHRoaXMuVG9VaW50MTYoYXJndW1lbnQpO1xuXHRcdHJldHVybiBpbnQxNmJpdCA+PSAweDgwMDAgPyBpbnQxNmJpdCAtIDB4MTAwMDAgOiBpbnQxNmJpdDtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG91aW50MTZcblx0Ly8gVG9VaW50MTY6IEVTNS5Ub1VpbnQxNixcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9pbnQ4XG5cdFRvSW50ODogZnVuY3Rpb24gVG9JbnQ4KGFyZ3VtZW50KSB7XG5cdFx0dmFyIGludDhiaXQgPSB0aGlzLlRvVWludDgoYXJndW1lbnQpO1xuXHRcdHJldHVybiBpbnQ4Yml0ID49IDB4ODAgPyBpbnQ4Yml0IC0gMHgxMDAgOiBpbnQ4Yml0O1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b3VpbnQ4XG5cdFRvVWludDg6IGZ1bmN0aW9uIFRvVWludDgoYXJndW1lbnQpIHtcblx0XHR2YXIgbnVtYmVyID0gdGhpcy5Ub051bWJlcihhcmd1bWVudCk7XG5cdFx0aWYgKCRpc05hTihudW1iZXIpIHx8IG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cblx0XHR2YXIgcG9zSW50ID0gc2lnbihudW1iZXIpICogJGZsb29yKCRhYnMobnVtYmVyKSk7XG5cdFx0cmV0dXJuIG1vZChwb3NJbnQsIDB4MTAwKTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG91aW50OGNsYW1wXG5cdFRvVWludDhDbGFtcDogZnVuY3Rpb24gVG9VaW50OENsYW1wKGFyZ3VtZW50KSB7XG5cdFx0dmFyIG51bWJlciA9IHRoaXMuVG9OdW1iZXIoYXJndW1lbnQpO1xuXHRcdGlmICgkaXNOYU4obnVtYmVyKSB8fCBudW1iZXIgPD0gMCkgeyByZXR1cm4gMDsgfVxuXHRcdGlmIChudW1iZXIgPj0gMHhGRikgeyByZXR1cm4gMHhGRjsgfVxuXHRcdHZhciBmID0gJGZsb29yKGFyZ3VtZW50KTtcblx0XHRpZiAoZiArIDAuNSA8IG51bWJlcikgeyByZXR1cm4gZiArIDE7IH1cblx0XHRpZiAobnVtYmVyIDwgZiArIDAuNSkgeyByZXR1cm4gZjsgfVxuXHRcdGlmIChmICUgMiAhPT0gMCkgeyByZXR1cm4gZiArIDE7IH1cblx0XHRyZXR1cm4gZjtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9zdHJpbmdcblx0VG9TdHJpbmc6IGZ1bmN0aW9uIFRvU3RyaW5nKGFyZ3VtZW50KSB7XG5cdFx0aWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N5bWJvbCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuXHRcdH1cblx0XHRyZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvb2JqZWN0XG5cdFRvT2JqZWN0OiBmdW5jdGlvbiBUb09iamVjdCh2YWx1ZSkge1xuXHRcdHRoaXMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh2YWx1ZSk7XG5cdFx0cmV0dXJuICRPYmplY3QodmFsdWUpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b3Byb3BlcnR5a2V5XG5cdFRvUHJvcGVydHlLZXk6IGZ1bmN0aW9uIFRvUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcblx0XHR2YXIga2V5ID0gdGhpcy5Ub1ByaW1pdGl2ZShhcmd1bWVudCwgJFN0cmluZyk7XG5cdFx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzeW1ib2wnID8ga2V5IDogdGhpcy5Ub1N0cmluZyhrZXkpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2xlbmd0aFxuXHRUb0xlbmd0aDogZnVuY3Rpb24gVG9MZW5ndGgoYXJndW1lbnQpIHtcblx0XHR2YXIgbGVuID0gdGhpcy5Ub0ludGVnZXIoYXJndW1lbnQpO1xuXHRcdGlmIChsZW4gPD0gMCkgeyByZXR1cm4gMDsgfSAvLyBpbmNsdWRlcyBjb252ZXJ0aW5nIC0wIHRvICswXG5cdFx0aWYgKGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIE1BWF9TQUZFX0lOVEVHRVI7IH1cblx0XHRyZXR1cm4gbGVuO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jYW5vbmljYWxudW1lcmljaW5kZXhzdHJpbmdcblx0Q2Fub25pY2FsTnVtZXJpY0luZGV4U3RyaW5nOiBmdW5jdGlvbiBDYW5vbmljYWxOdW1lcmljSW5kZXhTdHJpbmcoYXJndW1lbnQpIHtcblx0XHRpZiAodG9TdHIoYXJndW1lbnQpICE9PSAnW29iamVjdCBTdHJpbmddJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ211c3QgYmUgYSBzdHJpbmcnKTtcblx0XHR9XG5cdFx0aWYgKGFyZ3VtZW50ID09PSAnLTAnKSB7IHJldHVybiAtMDsgfVxuXHRcdHZhciBuID0gdGhpcy5Ub051bWJlcihhcmd1bWVudCk7XG5cdFx0aWYgKHRoaXMuU2FtZVZhbHVlKHRoaXMuVG9TdHJpbmcobiksIGFyZ3VtZW50KSkgeyByZXR1cm4gbjsgfVxuXHRcdHJldHVybiB2b2lkIDA7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcblx0UmVxdWlyZU9iamVjdENvZXJjaWJsZTogRVM1LkNoZWNrT2JqZWN0Q29lcmNpYmxlLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc2FycmF5XG5cdElzQXJyYXk6ICRBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcblx0XHRyZXR1cm4gdG9TdHIoYXJndW1lbnQpID09PSAnW29iamVjdCBBcnJheV0nO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc2NhbGxhYmxlXG5cdC8vIElzQ2FsbGFibGU6IEVTNS5Jc0NhbGxhYmxlLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc2NvbnN0cnVjdG9yXG5cdElzQ29uc3RydWN0b3I6IGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcblx0XHRyZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSAnZnVuY3Rpb24nICYmICEhYXJndW1lbnQucHJvdG90eXBlOyAvLyB1bmZvcnR1bmF0ZWx5IHRoZXJlJ3Mgbm8gd2F5IHRvIHRydWx5IGNoZWNrIHRoaXMgd2l0aG91dCB0cnkvY2F0Y2ggYG5ldyBhcmd1bWVudGBcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtaXNleHRlbnNpYmxlLW9cblx0SXNFeHRlbnNpYmxlOiBPYmplY3QucHJldmVudEV4dGVuc2lvbnNcblx0XHQ/IGZ1bmN0aW9uIElzRXh0ZW5zaWJsZShvYmopIHtcblx0XHRcdGlmIChpc1ByaW1pdGl2ZShvYmopKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAkaXNFeHRlbnNpYmxlKG9iaik7XG5cdFx0fVxuXHRcdDogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKG9iaikgeyByZXR1cm4gdHJ1ZTsgfSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc2ludGVnZXJcblx0SXNJbnRlZ2VyOiBmdW5jdGlvbiBJc0ludGVnZXIoYXJndW1lbnQpIHtcblx0XHRpZiAodHlwZW9mIGFyZ3VtZW50ICE9PSAnbnVtYmVyJyB8fCAkaXNOYU4oYXJndW1lbnQpIHx8ICEkaXNGaW5pdGUoYXJndW1lbnQpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBhYnMgPSAkYWJzKGFyZ3VtZW50KTtcblx0XHRyZXR1cm4gJGZsb29yKGFicykgPT09IGFicztcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtaXNwcm9wZXJ0eWtleVxuXHRJc1Byb3BlcnR5S2V5OiBmdW5jdGlvbiBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG5cdFx0cmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnc3ltYm9sJztcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNyZWdleHBcblx0SXNSZWdFeHA6IGZ1bmN0aW9uIElzUmVnRXhwKGFyZ3VtZW50KSB7XG5cdFx0aWYgKCFhcmd1bWVudCB8fCB0eXBlb2YgYXJndW1lbnQgIT09ICdvYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0XHR2YXIgaXNSZWdFeHAgPSBhcmd1bWVudFskU3ltYm9sLm1hdGNoXTtcblx0XHRcdGlmICh0eXBlb2YgaXNSZWdFeHAgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdHJldHVybiBFUzUuVG9Cb29sZWFuKGlzUmVnRXhwKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGhhc1JlZ0V4cE1hdGNoZXIoYXJndW1lbnQpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1zYW1ldmFsdWVcblx0Ly8gU2FtZVZhbHVlOiBFUzUuU2FtZVZhbHVlLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1zYW1ldmFsdWV6ZXJvXG5cdFNhbWVWYWx1ZVplcm86IGZ1bmN0aW9uIFNhbWVWYWx1ZVplcm8oeCwgeSkge1xuXHRcdHJldHVybiAoeCA9PT0geSkgfHwgKCRpc05hTih4KSAmJiAkaXNOYU4oeSkpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiA3LjMuMiBHZXRWIChWLCBQKVxuXHQgKiAxLiBBc3NlcnQ6IElzUHJvcGVydHlLZXkoUCkgaXMgdHJ1ZS5cblx0ICogMi4gTGV0IE8gYmUgVG9PYmplY3QoVikuXG5cdCAqIDMuIFJldHVybklmQWJydXB0KE8pLlxuXHQgKiA0LiBSZXR1cm4gTy5bW0dldF1dKFAsIFYpLlxuXHQgKi9cblx0R2V0VjogZnVuY3Rpb24gR2V0VihWLCBQKSB7XG5cdFx0Ly8gNy4zLjIuMVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHRcdH1cblxuXHRcdC8vIDcuMy4yLjItM1xuXHRcdHZhciBPID0gdGhpcy5Ub09iamVjdChWKTtcblxuXHRcdC8vIDcuMy4yLjRcblx0XHRyZXR1cm4gT1tQXTtcblx0fSxcblxuXHQvKipcblx0ICogNy4zLjkgLSBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0bWV0aG9kXG5cdCAqIDEuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuXHQgKiAyLiBMZXQgZnVuYyBiZSBHZXRWKE8sIFApLlxuXHQgKiAzLiBSZXR1cm5JZkFicnVwdChmdW5jKS5cblx0ICogNC4gSWYgZnVuYyBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIG51bGwsIHJldHVybiB1bmRlZmluZWQuXG5cdCAqIDUuIElmIElzQ2FsbGFibGUoZnVuYykgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cblx0ICogNi4gUmV0dXJuIGZ1bmMuXG5cdCAqL1xuXHRHZXRNZXRob2Q6IGZ1bmN0aW9uIEdldE1ldGhvZChPLCBQKSB7XG5cdFx0Ly8gNy4zLjkuMVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHRcdH1cblxuXHRcdC8vIDcuMy45LjJcblx0XHR2YXIgZnVuYyA9IHRoaXMuR2V0VihPLCBQKTtcblxuXHRcdC8vIDcuMy45LjRcblx0XHRpZiAoZnVuYyA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xuXHRcdH1cblxuXHRcdC8vIDcuMy45LjVcblx0XHRpZiAoIXRoaXMuSXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoUCArICdpcyBub3QgYSBmdW5jdGlvbicpO1xuXHRcdH1cblxuXHRcdC8vIDcuMy45LjZcblx0XHRyZXR1cm4gZnVuYztcblx0fSxcblxuXHQvKipcblx0ICogNy4zLjEgR2V0IChPLCBQKSAtIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1nZXQtby1wXG5cdCAqIDEuIEFzc2VydDogVHlwZShPKSBpcyBPYmplY3QuXG5cdCAqIDIuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuXHQgKiAzLiBSZXR1cm4gTy5bW0dldF1dKFAsIE8pLlxuXHQgKi9cblx0R2V0OiBmdW5jdGlvbiBHZXQoTywgUCkge1xuXHRcdC8vIDcuMy4xLjFcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHQvLyA3LjMuMS4yXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdFx0fVxuXHRcdC8vIDcuMy4xLjNcblx0XHRyZXR1cm4gT1tQXTtcblx0fSxcblxuXHRUeXBlOiBmdW5jdGlvbiBUeXBlKHgpIHtcblx0XHRpZiAodHlwZW9mIHggPT09ICdzeW1ib2wnKSB7XG5cdFx0XHRyZXR1cm4gJ1N5bWJvbCc7XG5cdFx0fVxuXHRcdHJldHVybiBFUzUuVHlwZSh4KTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5cdFNwZWNpZXNDb25zdHJ1Y3RvcjogZnVuY3Rpb24gU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdHZhciBDID0gTy5jb25zdHJ1Y3Rvcjtcblx0XHRpZiAodHlwZW9mIEMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuXHRcdH1cblx0XHRpZiAodGhpcy5UeXBlKEMpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ08uY29uc3RydWN0b3IgaXMgbm90IGFuIE9iamVjdCcpO1xuXHRcdH1cblx0XHR2YXIgUyA9IGhhc1N5bWJvbHMgJiYgJFN5bWJvbC5zcGVjaWVzID8gQ1skU3ltYm9sLnNwZWNpZXNdIDogdm9pZCAwO1xuXHRcdGlmIChTID09IG51bGwpIHtcblx0XHRcdHJldHVybiBkZWZhdWx0Q29uc3RydWN0b3I7XG5cdFx0fVxuXHRcdGlmICh0aGlzLklzQ29uc3RydWN0b3IoUykpIHtcblx0XHRcdHJldHVybiBTO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignbm8gY29uc3RydWN0b3IgZm91bmQnKTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY29tcGxldGVwcm9wZXJ0eWRlc2NyaXB0b3Jcblx0Q29tcGxldGVQcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIENvbXBsZXRlUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpIHtcblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdEZXNjIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuSXNHZW5lcmljRGVzY3JpcHRvcihEZXNjKSB8fCB0aGlzLklzRGF0YURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdGlmICghaGFzKERlc2MsICdbW1ZhbHVlXV0nKSkge1xuXHRcdFx0XHREZXNjWydbW1ZhbHVlXV0nXSA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHRcdGlmICghaGFzKERlc2MsICdbW1dyaXRhYmxlXV0nKSkge1xuXHRcdFx0XHREZXNjWydbW1dyaXRhYmxlXV0nXSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIWhhcyhEZXNjLCAnW1tHZXRdXScpKSB7XG5cdFx0XHRcdERlc2NbJ1tbR2V0XV0nXSA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHRcdGlmICghaGFzKERlc2MsICdbW1NldF1dJykpIHtcblx0XHRcdFx0RGVzY1snW1tTZXRdXSddID0gdm9pZCAwO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIWhhcyhEZXNjLCAnW1tFbnVtZXJhYmxlXV0nKSkge1xuXHRcdFx0RGVzY1snW1tFbnVtZXJhYmxlXV0nXSA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIWhhcyhEZXNjLCAnW1tDb25maWd1cmFibGVdXScpKSB7XG5cdFx0XHREZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10gPSBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIERlc2M7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNldC1vLXAtdi10aHJvd1xuXHRTZXQ6IGZ1bmN0aW9uIFNldChPLCBQLCBWLCBUaHJvdykge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignTyBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1AgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5UeXBlKFRocm93KSAhPT0gJ0Jvb2xlYW4nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignVGhyb3cgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0XHR9XG5cdFx0aWYgKFRocm93KSB7XG5cdFx0XHRPW1BdID0gVjtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRPW1BdID0gVjtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaGFzb3ducHJvcGVydHlcblx0SGFzT3duUHJvcGVydHk6IGZ1bmN0aW9uIEhhc093blByb3BlcnR5KE8sIFApIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ08gbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0XHR9XG5cdFx0cmV0dXJuIGhhcyhPLCBQKTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaGFzcHJvcGVydHlcblx0SGFzUHJvcGVydHk6IGZ1bmN0aW9uIEhhc1Byb3BlcnR5KE8sIFApIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ08gbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0XHR9XG5cdFx0cmV0dXJuIFAgaW4gTztcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNjb25jYXRzcHJlYWRhYmxlXG5cdElzQ29uY2F0U3ByZWFkYWJsZTogZnVuY3Rpb24gSXNDb25jYXRTcHJlYWRhYmxlKE8pIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoaGFzU3ltYm9scyAmJiB0eXBlb2YgJFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgPT09ICdzeW1ib2wnKSB7XG5cdFx0XHR2YXIgc3ByZWFkYWJsZSA9IHRoaXMuR2V0KE8sIFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUpO1xuXHRcdFx0aWYgKHR5cGVvZiBzcHJlYWRhYmxlICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5Ub0Jvb2xlYW4oc3ByZWFkYWJsZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLklzQXJyYXkoTyk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWludm9rZVxuXHRJbnZva2U6IGZ1bmN0aW9uIEludm9rZShPLCBQKSB7XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0XHR9XG5cdFx0dmFyIGFyZ3VtZW50c0xpc3QgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMik7XG5cdFx0dmFyIGZ1bmMgPSB0aGlzLkdldFYoTywgUCk7XG5cdFx0cmV0dXJuIHRoaXMuQ2FsbChmdW5jLCBPLCBhcmd1bWVudHNMaXN0KTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0aXRlcmF0b3Jcblx0R2V0SXRlcmF0b3I6IGZ1bmN0aW9uIEdldEl0ZXJhdG9yKG9iaiwgbWV0aG9kKSB7XG5cdFx0aWYgKCFoYXNTeW1ib2xzKSB7XG5cdFx0XHR0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0VTLkdldEl0ZXJhdG9yIGRlcGVuZHMgb24gbmF0aXZlIGl0ZXJhdG9yIHN1cHBvcnQuJyk7XG5cdFx0fVxuXG5cdFx0dmFyIGFjdHVhbE1ldGhvZCA9IG1ldGhvZDtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0XHRcdGFjdHVhbE1ldGhvZCA9IHRoaXMuR2V0TWV0aG9kKG9iaiwgJFN5bWJvbC5pdGVyYXRvcik7XG5cdFx0fVxuXHRcdHZhciBpdGVyYXRvciA9IHRoaXMuQ2FsbChhY3R1YWxNZXRob2QsIG9iaik7XG5cdFx0aWYgKHRoaXMuVHlwZShpdGVyYXRvcikgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGl0ZXJhdG9yO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pdGVyYXRvcm5leHRcblx0SXRlcmF0b3JOZXh0OiBmdW5jdGlvbiBJdGVyYXRvck5leHQoaXRlcmF0b3IsIHZhbHVlKSB7XG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMuSW52b2tlKGl0ZXJhdG9yLCAnbmV4dCcsIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gW10gOiBbdmFsdWVdKTtcblx0XHRpZiAodGhpcy5UeXBlKHJlc3VsdCkgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbmV4dCBtdXN0IHJldHVybiBhbiBvYmplY3QnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3Jjb21wbGV0ZVxuXHRJdGVyYXRvckNvbXBsZXRlOiBmdW5jdGlvbiBJdGVyYXRvckNvbXBsZXRlKGl0ZXJSZXN1bHQpIHtcblx0XHRpZiAodGhpcy5UeXBlKGl0ZXJSZXN1bHQpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoaXRlclJlc3VsdCkgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5Ub0Jvb2xlYW4odGhpcy5HZXQoaXRlclJlc3VsdCwgJ2RvbmUnKSk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWl0ZXJhdG9ydmFsdWVcblx0SXRlcmF0b3JWYWx1ZTogZnVuY3Rpb24gSXRlcmF0b3JWYWx1ZShpdGVyUmVzdWx0KSB7XG5cdFx0aWYgKHRoaXMuVHlwZShpdGVyUmVzdWx0KSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGl0ZXJSZXN1bHQpIGlzIG5vdCBPYmplY3QnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuR2V0KGl0ZXJSZXN1bHQsICd2YWx1ZScpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pdGVyYXRvcnN0ZXBcblx0SXRlcmF0b3JTdGVwOiBmdW5jdGlvbiBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpIHtcblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5JdGVyYXRvck5leHQoaXRlcmF0b3IpO1xuXHRcdHZhciBkb25lID0gdGhpcy5JdGVyYXRvckNvbXBsZXRlKHJlc3VsdCk7XG5cdFx0cmV0dXJuIGRvbmUgPT09IHRydWUgPyBmYWxzZSA6IHJlc3VsdDtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JjbG9zZVxuXHRJdGVyYXRvckNsb3NlOiBmdW5jdGlvbiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShpdGVyYXRvcikgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShpdGVyYXRvcikgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuSXNDYWxsYWJsZShjb21wbGV0aW9uKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGNvbXBsZXRpb24gaXMgbm90IGEgdGh1bmsgZm9yIGEgQ29tcGxldGlvbiBSZWNvcmQnKTtcblx0XHR9XG5cdFx0dmFyIGNvbXBsZXRpb25UaHVuayA9IGNvbXBsZXRpb247XG5cblx0XHR2YXIgaXRlcmF0b3JSZXR1cm4gPSB0aGlzLkdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuXG5cdFx0aWYgKHR5cGVvZiBpdGVyYXRvclJldHVybiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBjb21wbGV0aW9uVGh1bmsoKTtcblx0XHR9XG5cblx0XHR2YXIgY29tcGxldGlvblJlY29yZDtcblx0XHR0cnkge1xuXHRcdFx0dmFyIGlubmVyUmVzdWx0ID0gdGhpcy5DYWxsKGl0ZXJhdG9yUmV0dXJuLCBpdGVyYXRvciwgW10pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdC8vIGlmIHdlIGhpdCBoZXJlLCB0aGVuIFwiZVwiIGlzIHRoZSBpbm5lclJlc3VsdCBjb21wbGV0aW9uIHRoYXQgbmVlZHMgcmUtdGhyb3dpbmdcblxuXHRcdFx0Ly8gaWYgdGhlIGNvbXBsZXRpb24gaXMgb2YgdHlwZSBcInRocm93XCIsIHRoaXMgd2lsbCB0aHJvdy5cblx0XHRcdGNvbXBsZXRpb25SZWNvcmQgPSBjb21wbGV0aW9uVGh1bmsoKTtcblx0XHRcdGNvbXBsZXRpb25UaHVuayA9IG51bGw7IC8vIGVuc3VyZSBpdCdzIG5vdCBjYWxsZWQgdHdpY2UuXG5cblx0XHRcdC8vIGlmIG5vdCwgdGhlbiByZXR1cm4gdGhlIGlubmVyUmVzdWx0IGNvbXBsZXRpb25cblx0XHRcdHRocm93IGU7XG5cdFx0fVxuXHRcdGNvbXBsZXRpb25SZWNvcmQgPSBjb21wbGV0aW9uVGh1bmsoKTsgLy8gaWYgaW5uZXJSZXN1bHQgd29ya2VkLCB0aGVuIHRocm93IGlmIHRoZSBjb21wbGV0aW9uIGRvZXNcblx0XHRjb21wbGV0aW9uVGh1bmsgPSBudWxsOyAvLyBlbnN1cmUgaXQncyBub3QgY2FsbGVkIHR3aWNlLlxuXG5cdFx0aWYgKHRoaXMuVHlwZShpbm5lclJlc3VsdCkgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgLnJldHVybiBtdXN0IHJldHVybiBhbiBvYmplY3QnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGxldGlvblJlY29yZDtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlaXRlcnJlc3VsdG9iamVjdFxuXHRDcmVhdGVJdGVyUmVzdWx0T2JqZWN0OiBmdW5jdGlvbiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHZhbHVlLCBkb25lKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShkb25lKSAhPT0gJ0Jvb2xlYW4nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShkb25lKSBpcyBub3QgQm9vbGVhbicpO1xuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0ZG9uZTogZG9uZVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXJlZ2V4cGV4ZWNcblx0UmVnRXhwRXhlYzogZnVuY3Rpb24gUmVnRXhwRXhlYyhSLCBTKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShSKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdSIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLlR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUyBtdXN0IGJlIGEgU3RyaW5nJyk7XG5cdFx0fVxuXHRcdHZhciBleGVjID0gdGhpcy5HZXQoUiwgJ2V4ZWMnKTtcblx0XHRpZiAodGhpcy5Jc0NhbGxhYmxlKGV4ZWMpKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gdGhpcy5DYWxsKGV4ZWMsIFIsIFtTXSk7XG5cdFx0XHRpZiAocmVzdWx0ID09PSBudWxsIHx8IHRoaXMuVHlwZShyZXN1bHQpID09PSAnT2JqZWN0Jykge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1wiZXhlY1wiIG1ldGhvZCBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdHJldHVybiByZWdleEV4ZWMoUiwgUyk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxuXHRBcnJheVNwZWNpZXNDcmVhdGU6IGZ1bmN0aW9uIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcblx0XHRpZiAoIXRoaXMuSXNJbnRlZ2VyKGxlbmd0aCkgfHwgbGVuZ3RoIDwgMCkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGxlbmd0aCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMCcpO1xuXHRcdH1cblx0XHR2YXIgbGVuID0gbGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aDtcblx0XHR2YXIgQztcblx0XHR2YXIgaXNBcnJheSA9IHRoaXMuSXNBcnJheShvcmlnaW5hbEFycmF5KTtcblx0XHRpZiAoaXNBcnJheSkge1xuXHRcdFx0QyA9IHRoaXMuR2V0KG9yaWdpbmFsQXJyYXksICdjb25zdHJ1Y3RvcicpO1xuXHRcdFx0Ly8gVE9ETzogZmlndXJlIG91dCBob3cgdG8gbWFrZSBhIGNyb3NzLXJlYWxtIG5vcm1hbCBBcnJheSwgYSBzYW1lLXJlYWxtIEFycmF5XG5cdFx0XHQvLyBpZiAodGhpcy5Jc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0XHQvLyBcdGlmIEMgaXMgYW5vdGhlciByZWFsbSdzIEFycmF5LCBDID0gdW5kZWZpbmVkXG5cdFx0XHQvLyBcdE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKEFycmF5KSkpID09PSBudWxsID9cblx0XHRcdC8vIH1cblx0XHRcdGlmICh0aGlzLlR5cGUoQykgPT09ICdPYmplY3QnICYmIGhhc1N5bWJvbHMgJiYgJFN5bWJvbC5zcGVjaWVzKSB7XG5cdFx0XHRcdEMgPSB0aGlzLkdldChDLCAkU3ltYm9sLnNwZWNpZXMpO1xuXHRcdFx0XHRpZiAoQyA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdEMgPSB2b2lkIDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuICRBcnJheShsZW4pO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuSXNDb25zdHJ1Y3RvcihDKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0MgbXVzdCBiZSBhIGNvbnN0cnVjdG9yJyk7XG5cdFx0fVxuXHRcdHJldHVybiBuZXcgQyhsZW4pOyAvLyB0aGlzLkNvbnN0cnVjdChDLCBsZW4pO1xuXHR9LFxuXG5cdENyZWF0ZURhdGFQcm9wZXJ0eTogZnVuY3Rpb24gQ3JlYXRlRGF0YVByb3BlcnR5KE8sIFAsIFYpIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cdFx0dmFyIG9sZERlc2MgPSAkZ09QRChPLCBQKTtcblx0XHR2YXIgZXh0ZW5zaWJsZSA9IG9sZERlc2MgfHwgKHR5cGVvZiAkaXNFeHRlbnNpYmxlICE9PSAnZnVuY3Rpb24nIHx8ICRpc0V4dGVuc2libGUoTykpO1xuXHRcdHZhciBpbW11dGFibGUgPSBvbGREZXNjICYmICghb2xkRGVzYy53cml0YWJsZSB8fCAhb2xkRGVzYy5jb25maWd1cmFibGUpO1xuXHRcdGlmIChpbW11dGFibGUgfHwgIWV4dGVuc2libGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dmFyIG5ld0Rlc2MgPSB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IFYsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH07XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIG5ld0Rlc2MpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jcmVhdGVkYXRhcHJvcGVydHlvcnRocm93XG5cdENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3c6IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3coTywgUCwgVikge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHRcdH1cblx0XHR2YXIgc3VjY2VzcyA9IHRoaXMuQ3JlYXRlRGF0YVByb3BlcnR5KE8sIFAsIFYpO1xuXHRcdGlmICghc3VjY2Vzcykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ3VuYWJsZSB0byBjcmVhdGUgZGF0YSBwcm9wZXJ0eScpO1xuXHRcdH1cblx0XHRyZXR1cm4gc3VjY2Vzcztcblx0fSxcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdGNyZWF0ZVxuXHRPYmplY3RDcmVhdGU6IGZ1bmN0aW9uIE9iamVjdENyZWF0ZShwcm90bywgaW50ZXJuYWxTbG90c0xpc3QpIHtcblx0XHRpZiAocHJvdG8gIT09IG51bGwgJiYgdGhpcy5UeXBlKHByb3RvKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBwcm90byBtdXN0IGJlIG51bGwgb3IgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdHZhciBzbG90cyA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gW10gOiBpbnRlcm5hbFNsb3RzTGlzdDtcblx0XHRpZiAoc2xvdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignZXMtYWJzdHJhY3QgZG9lcyBub3QgeWV0IHN1cHBvcnQgaW50ZXJuYWwgc2xvdHMnKTtcblx0XHR9XG5cblx0XHRpZiAocHJvdG8gPT09IG51bGwgJiYgISRPYmplY3RDcmVhdGUpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ25hdGl2ZSBPYmplY3QuY3JlYXRlIHN1cHBvcnQgaXMgcmVxdWlyZWQgdG8gY3JlYXRlIG51bGwgb2JqZWN0cycpO1xuXHRcdH1cblxuXHRcdHJldHVybiAkT2JqZWN0Q3JlYXRlKHByb3RvKTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5cdEFkdmFuY2VTdHJpbmdJbmRleDogZnVuY3Rpb24gQWR2YW5jZVN0cmluZ0luZGV4KFMsIGluZGV4LCB1bmljb2RlKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShTKSAhPT0gJ1N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTIG11c3QgYmUgYSBTdHJpbmcnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzSW50ZWdlcihpbmRleCkgfHwgaW5kZXggPCAwIHx8IGluZGV4ID4gTUFYX1NBRkVfSU5URUdFUikge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGxlbmd0aCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMCBhbmQgPD0gMioqNTMnKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuVHlwZSh1bmljb2RlKSAhPT0gJ0Jvb2xlYW4nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogdW5pY29kZSBtdXN0IGJlIGEgQm9vbGVhbicpO1xuXHRcdH1cblx0XHRpZiAoIXVuaWNvZGUpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXHRcdHZhciBsZW5ndGggPSBTLmxlbmd0aDtcblx0XHRpZiAoKGluZGV4ICsgMSkgPj0gbGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblxuXHRcdHZhciBmaXJzdCA9ICRjaGFyQ29kZUF0KFMsIGluZGV4KTtcblx0XHRpZiAoZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXG5cdFx0dmFyIHNlY29uZCA9ICRjaGFyQ29kZUF0KFMsIGluZGV4ICsgMSk7XG5cdFx0aWYgKHNlY29uZCA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluZGV4ICsgMjtcblx0fVxufSk7XG5cbmRlbGV0ZSBFUzYuQ2hlY2tPYmplY3RDb2VyY2libGU7IC8vIHJlbmFtZWQgaW4gRVM2IHRvIFJlcXVpcmVPYmplY3RDb2VyY2libGVcblxubW9kdWxlLmV4cG9ydHMgPSBFUzY7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9lczIwMTUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbnZhciBpc0RhdGUgPSByZXF1aXJlKCdpcy1kYXRlLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnaXMtc3ltYm9sJyk7XG5cbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG5cdGlmICh0eXBlb2YgTyA9PT0gJ3VuZGVmaW5lZCcgfHwgTyA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIG1ldGhvZCBvbiAnICsgTyk7XG5cdH1cblx0aWYgKHR5cGVvZiBoaW50ICE9PSAnc3RyaW5nJyB8fCAoaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaGludCBtdXN0IGJlIFwic3RyaW5nXCIgb3IgXCJudW1iZXJcIicpO1xuXHR9XG5cdHZhciBtZXRob2ROYW1lcyA9IGhpbnQgPT09ICdzdHJpbmcnID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0dmFyIG1ldGhvZCwgcmVzdWx0LCBpO1xuXHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRtZXRob2QgPSBPW21ldGhvZE5hbWVzW2ldXTtcblx0XHRpZiAoaXNDYWxsYWJsZShtZXRob2QpKSB7XG5cdFx0XHRyZXN1bHQgPSBtZXRob2QuY2FsbChPKTtcblx0XHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcbn07XG5cbnZhciBHZXRNZXRob2QgPSBmdW5jdGlvbiBHZXRNZXRob2QoTywgUCkge1xuXHR2YXIgZnVuYyA9IE9bUF07XG5cdGlmIChmdW5jICE9PSBudWxsICYmIHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmICghaXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihmdW5jICsgJyByZXR1cm5lZCBmb3IgcHJvcGVydHkgJyArIFAgKyAnIG9mIG9iamVjdCAnICsgTyArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH1cblx0cmV0dXJuIHZvaWQgMDtcbn07XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdHZhciBoaW50ID0gJ2RlZmF1bHQnO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRpZiAoYXJndW1lbnRzWzFdID09PSBTdHJpbmcpIHtcblx0XHRcdGhpbnQgPSAnc3RyaW5nJztcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50c1sxXSA9PT0gTnVtYmVyKSB7XG5cdFx0XHRoaW50ID0gJ251bWJlcic7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGV4b3RpY1RvUHJpbTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRpZiAoU3ltYm9sLnRvUHJpbWl0aXZlKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIFN5bWJvbC50b1ByaW1pdGl2ZSk7XG5cdFx0fSBlbHNlIGlmIChpc1N5bWJvbChpbnB1dCkpIHtcblx0XHRcdGV4b3RpY1RvUHJpbSA9IFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZjtcblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBleG90aWNUb1ByaW0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBoaW50KTtcblx0XHRpZiAoaXNQcmltaXRpdmUocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigndW5hYmxlIHRvIGNvbnZlcnQgZXhvdGljIG9iamVjdCB0byBwcmltaXRpdmUnKTtcblx0fVxuXHRpZiAoaGludCA9PT0gJ2RlZmF1bHQnICYmIChpc0RhdGUoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkpIHtcblx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdH1cblx0cmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09ICdkZWZhdWx0JyA/ICdudW1iZXInIDogaGludCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RGF5ID0gRGF0ZS5wcm90b3R5cGUuZ2V0RGF5O1xudmFyIHRyeURhdGVPYmplY3QgPSBmdW5jdGlvbiB0cnlEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0Z2V0RGF5LmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRhdGVDbGFzcyA9ICdbb2JqZWN0IERhdGVdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7IHJldHVybiBmYWxzZTsgfVxuXHRyZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlEYXRlT2JqZWN0KHZhbHVlKSA6IHRvU3RyLmNhbGwodmFsdWUpID09PSBkYXRlQ2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbmlmIChoYXNTeW1ib2xzKSB7XG5cdHZhciBzeW1Ub1N0ciA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBzeW1TdHJpbmdSZWdleCA9IC9eU3ltYm9sXFwoLipcXCkkLztcblx0dmFyIGlzU3ltYm9sT2JqZWN0ID0gZnVuY3Rpb24gaXNSZWFsU3ltYm9sT2JqZWN0KHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZS52YWx1ZU9mKCkgIT09ICdzeW1ib2wnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBzeW1TdHJpbmdSZWdleC50ZXN0KHN5bVRvU3RyLmNhbGwodmFsdWUpKTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAodG9TdHIuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gaXNTeW1ib2xPYmplY3QodmFsdWUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG59IGVsc2Uge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHQvLyB0aGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU3ltYm9scy5cblx0XHRyZXR1cm4gZmFsc2UgJiYgdmFsdWU7XG5cdH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE3XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkT2JqZWN0ID0gR2V0SW50cmluc2ljKCclT2JqZWN0JScpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJFN0cmluZyA9IEdldEludHJpbnNpYygnJVN0cmluZyUnKTtcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0Zpbml0ZScpO1xuXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vaGVscGVycy9zaWduJyk7XG52YXIgbW9kID0gcmVxdWlyZSgnLi9oZWxwZXJzL21vZCcpO1xuXG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCdlcy10by1wcmltaXRpdmUvZXM1Jyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxuLy8gaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4OVxudmFyIEVTNSA9IHtcblx0VG9QcmltaXRpdmU6IHRvUHJpbWl0aXZlLFxuXG5cdFRvQm9vbGVhbjogZnVuY3Rpb24gVG9Cb29sZWFuKHZhbHVlKSB7XG5cdFx0cmV0dXJuICEhdmFsdWU7XG5cdH0sXG5cdFRvTnVtYmVyOiBmdW5jdGlvbiBUb051bWJlcih2YWx1ZSkge1xuXHRcdHJldHVybiArdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW1wbGljaXQtY29lcmNpb25cblx0fSxcblx0VG9JbnRlZ2VyOiBmdW5jdGlvbiBUb0ludGVnZXIodmFsdWUpIHtcblx0XHR2YXIgbnVtYmVyID0gdGhpcy5Ub051bWJlcih2YWx1ZSk7XG5cdFx0aWYgKCRpc05hTihudW1iZXIpKSB7IHJldHVybiAwOyB9XG5cdFx0aWYgKG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIG51bWJlcjsgfVxuXHRcdHJldHVybiBzaWduKG51bWJlcikgKiBNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpO1xuXHR9LFxuXHRUb0ludDMyOiBmdW5jdGlvbiBUb0ludDMyKHgpIHtcblx0XHRyZXR1cm4gdGhpcy5Ub051bWJlcih4KSA+PiAwO1xuXHR9LFxuXHRUb1VpbnQzMjogZnVuY3Rpb24gVG9VaW50MzIoeCkge1xuXHRcdHJldHVybiB0aGlzLlRvTnVtYmVyKHgpID4+PiAwO1xuXHR9LFxuXHRUb1VpbnQxNjogZnVuY3Rpb24gVG9VaW50MTYodmFsdWUpIHtcblx0XHR2YXIgbnVtYmVyID0gdGhpcy5Ub051bWJlcih2YWx1ZSk7XG5cdFx0aWYgKCRpc05hTihudW1iZXIpIHx8IG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cblx0XHR2YXIgcG9zSW50ID0gc2lnbihudW1iZXIpICogTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpKTtcblx0XHRyZXR1cm4gbW9kKHBvc0ludCwgMHgxMDAwMCk7XG5cdH0sXG5cdFRvU3RyaW5nOiBmdW5jdGlvbiBUb1N0cmluZyh2YWx1ZSkge1xuXHRcdHJldHVybiAkU3RyaW5nKHZhbHVlKTtcblx0fSxcblx0VG9PYmplY3Q6IGZ1bmN0aW9uIFRvT2JqZWN0KHZhbHVlKSB7XG5cdFx0dGhpcy5DaGVja09iamVjdENvZXJjaWJsZSh2YWx1ZSk7XG5cdFx0cmV0dXJuICRPYmplY3QodmFsdWUpO1xuXHR9LFxuXHRDaGVja09iamVjdENvZXJjaWJsZTogZnVuY3Rpb24gQ2hlY2tPYmplY3RDb2VyY2libGUodmFsdWUsIG9wdE1lc3NhZ2UpIHtcblx0XHQvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cblx0XHRpZiAodmFsdWUgPT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3Iob3B0TWVzc2FnZSB8fCAnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0SXNDYWxsYWJsZTogSXNDYWxsYWJsZSxcblx0U2FtZVZhbHVlOiBmdW5jdGlvbiBTYW1lVmFsdWUoeCwgeSkge1xuXHRcdGlmICh4ID09PSB5KSB7IC8vIDAgPT09IC0wLCBidXQgdGhleSBhcmUgbm90IGlkZW50aWNhbC5cblx0XHRcdGlmICh4ID09PSAwKSB7IHJldHVybiAxIC8geCA9PT0gMSAvIHk7IH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gJGlzTmFOKHgpICYmICRpc05hTih5KTtcblx0fSxcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLThcblx0VHlwZTogZnVuY3Rpb24gVHlwZSh4KSB7XG5cdFx0aWYgKHggPT09IG51bGwpIHtcblx0XHRcdHJldHVybiAnTnVsbCc7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiAnVW5kZWZpbmVkJztcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuICdPYmplY3QnO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gJ051bWJlcic7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRyZXR1cm4gJ0Jvb2xlYW4nO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gJ1N0cmluZyc7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wcm9wZXJ0eS1kZXNjcmlwdG9yLXNwZWNpZmljYXRpb24tdHlwZVxuXHRJc1Byb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gSXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRcdGlmICh0aGlzLlR5cGUoRGVzYykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBhbGxvd2VkID0ge1xuXHRcdFx0J1tbQ29uZmlndXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbRW51bWVyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0dldF1dJzogdHJ1ZSxcblx0XHRcdCdbW1NldF1dJzogdHJ1ZSxcblx0XHRcdCdbW1ZhbHVlXV0nOiB0cnVlLFxuXHRcdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0XHR9O1xuXHRcdC8vIGpzY3M6ZGlzYWJsZVxuXHRcdGZvciAodmFyIGtleSBpbiBEZXNjKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0XHRcdGlmIChoYXMoRGVzYywga2V5KSAmJiAhYWxsb3dlZFtrZXldKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8ganNjczplbmFibGVcblx0XHR2YXIgaXNEYXRhID0gaGFzKERlc2MsICdbW1ZhbHVlXV0nKTtcblx0XHR2YXIgSXNBY2Nlc3NvciA9IGhhcyhEZXNjLCAnW1tHZXRdXScpIHx8IGhhcyhEZXNjLCAnW1tTZXRdXScpO1xuXHRcdGlmIChpc0RhdGEgJiYgSXNBY2Nlc3Nvcikge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1Byb3BlcnR5IERlc2NyaXB0b3JzIG1heSBub3QgYmUgYm90aCBhY2Nlc3NvciBhbmQgZGF0YSBkZXNjcmlwdG9ycycpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOC4xMC4xXG5cdElzQWNjZXNzb3JEZXNjcmlwdG9yOiBmdW5jdGlvbiBJc0FjY2Vzc29yRGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0aWYgKHR5cGVvZiBEZXNjID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Rlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0XHR9XG5cblx0XHRpZiAoIWhhcyhEZXNjLCAnW1tHZXRdXScpICYmICFoYXMoRGVzYywgJ1tbU2V0XV0nKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjJcblx0SXNEYXRhRGVzY3JpcHRvcjogZnVuY3Rpb24gSXNEYXRhRGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0aWYgKHR5cGVvZiBEZXNjID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Rlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0XHR9XG5cblx0XHRpZiAoIWhhcyhEZXNjLCAnW1tWYWx1ZV1dJykgJiYgIWhhcyhEZXNjLCAnW1tXcml0YWJsZV1dJykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOC4xMC4zXG5cdElzR2VuZXJpY0Rlc2NyaXB0b3I6IGZ1bmN0aW9uIElzR2VuZXJpY0Rlc2NyaXB0b3IoRGVzYykge1xuXHRcdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdEZXNjIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLklzQWNjZXNzb3JEZXNjcmlwdG9yKERlc2MpICYmICF0aGlzLklzRGF0YURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOC4xMC40XG5cdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRcdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBEZXNjO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Rlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5Jc0RhdGFEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR2YWx1ZTogRGVzY1snW1tWYWx1ZV1dJ10sXG5cdFx0XHRcdHdyaXRhYmxlOiAhIURlc2NbJ1tbV3JpdGFibGVdXSddLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiAhIURlc2NbJ1tbRW51bWVyYWJsZV1dJ10sXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogISFEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ11cblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmICh0aGlzLklzQWNjZXNzb3JEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRnZXQ6IERlc2NbJ1tbR2V0XV0nXSxcblx0XHRcdFx0c2V0OiBEZXNjWydbW1NldF1dJ10sXG5cdFx0XHRcdGVudW1lcmFibGU6ICEhRGVzY1snW1tFbnVtZXJhYmxlXV0nXSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiAhIURlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXVxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3IgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIGZ1bGx5IHBvcHVsYXRlZCBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjVcblx0VG9Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIFRvUHJvcGVydHlEZXNjcmlwdG9yKE9iaikge1xuXHRcdGlmICh0aGlzLlR5cGUoT2JqKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdUb1Byb3BlcnR5RGVzY3JpcHRvciByZXF1aXJlcyBhbiBvYmplY3QnKTtcblx0XHR9XG5cblx0XHR2YXIgZGVzYyA9IHt9O1xuXHRcdGlmIChoYXMoT2JqLCAnZW51bWVyYWJsZScpKSB7XG5cdFx0XHRkZXNjWydbW0VudW1lcmFibGVdXSddID0gdGhpcy5Ub0Jvb2xlYW4oT2JqLmVudW1lcmFibGUpO1xuXHRcdH1cblx0XHRpZiAoaGFzKE9iaiwgJ2NvbmZpZ3VyYWJsZScpKSB7XG5cdFx0XHRkZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10gPSB0aGlzLlRvQm9vbGVhbihPYmouY29uZmlndXJhYmxlKTtcblx0XHR9XG5cdFx0aWYgKGhhcyhPYmosICd2YWx1ZScpKSB7XG5cdFx0XHRkZXNjWydbW1ZhbHVlXV0nXSA9IE9iai52YWx1ZTtcblx0XHR9XG5cdFx0aWYgKGhhcyhPYmosICd3cml0YWJsZScpKSB7XG5cdFx0XHRkZXNjWydbW1dyaXRhYmxlXV0nXSA9IHRoaXMuVG9Cb29sZWFuKE9iai53cml0YWJsZSk7XG5cdFx0fVxuXHRcdGlmIChoYXMoT2JqLCAnZ2V0JykpIHtcblx0XHRcdHZhciBnZXR0ZXIgPSBPYmouZ2V0O1xuXHRcdFx0aWYgKHR5cGVvZiBnZXR0ZXIgIT09ICd1bmRlZmluZWQnICYmICF0aGlzLklzQ2FsbGFibGUoZ2V0dGVyKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXR0ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFx0XHR9XG5cdFx0XHRkZXNjWydbW0dldF1dJ10gPSBnZXR0ZXI7XG5cdFx0fVxuXHRcdGlmIChoYXMoT2JqLCAnc2V0JykpIHtcblx0XHRcdHZhciBzZXR0ZXIgPSBPYmouc2V0O1xuXHRcdFx0aWYgKHR5cGVvZiBzZXR0ZXIgIT09ICd1bmRlZmluZWQnICYmICF0aGlzLklzQ2FsbGFibGUoc2V0dGVyKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignc2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdFx0fVxuXHRcdFx0ZGVzY1snW1tTZXRdXSddID0gc2V0dGVyO1xuXHRcdH1cblxuXHRcdGlmICgoaGFzKGRlc2MsICdbW0dldF1dJykgfHwgaGFzKGRlc2MsICdbW1NldF1dJykpICYmIChoYXMoZGVzYywgJ1tbVmFsdWVdXScpIHx8IGhhcyhkZXNjLCAnW1tXcml0YWJsZV1dJykpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignSW52YWxpZCBwcm9wZXJ0eSBkZXNjcmlwdG9yLiBDYW5ub3QgYm90aCBzcGVjaWZ5IGFjY2Vzc29ycyBhbmQgYSB2YWx1ZSBvciB3cml0YWJsZSBhdHRyaWJ1dGUnKTtcblx0XHR9XG5cdFx0cmV0dXJuIGRlc2M7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRVM1O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xuXG4vLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEyLjhcbnZhciBFUzVpbnRlcm5hbFNsb3RzID0ge1xuXHQnW1tEZWZhdWx0VmFsdWVdXSc6IGZ1bmN0aW9uIChPKSB7XG5cdFx0dmFyIGFjdHVhbEhpbnQ7XG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhY3R1YWxIaW50ID0gYXJndW1lbnRzWzFdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhY3R1YWxIaW50ID0gdG9TdHIuY2FsbChPKSA9PT0gJ1tvYmplY3QgRGF0ZV0nID8gU3RyaW5nIDogTnVtYmVyO1xuXHRcdH1cblxuXHRcdGlmIChhY3R1YWxIaW50ID09PSBTdHJpbmcgfHwgYWN0dWFsSGludCA9PT0gTnVtYmVyKSB7XG5cdFx0XHR2YXIgbWV0aG9kcyA9IGFjdHVhbEhpbnQgPT09IFN0cmluZyA/IFsndG9TdHJpbmcnLCAndmFsdWVPZiddIDogWyd2YWx1ZU9mJywgJ3RvU3RyaW5nJ107XG5cdFx0XHR2YXIgdmFsdWUsIGk7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRpZiAoaXNDYWxsYWJsZShPW21ldGhvZHNbaV1dKSkge1xuXHRcdFx0XHRcdHZhbHVlID0gT1ttZXRob2RzW2ldXSgpO1xuXHRcdFx0XHRcdGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBbW0RlZmF1bHRWYWx1ZV1dIGhpbnQgc3VwcGxpZWQnKTtcblx0fVxufTtcblxuLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOS4xXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0KSB7XG5cdGlmIChpc1ByaW1pdGl2ZShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0cmV0dXJuIEVTNWludGVybmFsU2xvdHNbJ1tbRGVmYXVsdFZhbHVlXV0nXShpbnB1dCwgYXJndW1lbnRzWzFdKTtcblx0fVxuXHRyZXR1cm4gRVM1aW50ZXJuYWxTbG90c1snW1tEZWZhdWx0VmFsdWVdXSddKGlucHV0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciByZWdleEV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciB0cnlSZWdleEV4ZWNDYWxsID0gZnVuY3Rpb24gdHJ5UmVnZXhFeGVjKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGxhc3RJbmRleCA9IHZhbHVlLmxhc3RJbmRleDtcblx0XHR2YWx1ZS5sYXN0SW5kZXggPSAwO1xuXG5cdFx0cmVnZXhFeGVjLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdHZhbHVlLmxhc3RJbmRleCA9IGxhc3RJbmRleDtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgcmVnZXhDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1JlZ2V4KHZhbHVlKSB7XG5cdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0cmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSByZWdleENsYXNzO1xuXHR9XG5cblx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHZhbHVlLCAnbGFzdEluZGV4Jyk7XG5cdHZhciBoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKTtcblx0aWYgKCFoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ5UmVnZXhFeGVjQ2FsbCh2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRW50cmllcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBmcm9tRW50cmllczogcG9seWZpbGwgfSwge1xuXHRcdGZyb21FbnRyaWVzOiBmdW5jdGlvbiB0ZXN0RW50cmllcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbWFpbi5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbmh0bWwsIGJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuI2FwcCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuI2FwcCAqIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5hcHAge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCAjMzIzZTRhIDAlLCMxNjE2MTggMTAwJSk7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxufVxcblxcbi5oZWFkZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogMTtcXG59XFxuXFxuLnZpZXctY29udGFpbmVyIHtcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgYWxpZ24tc2VsZjogYXV0bztcXG5cXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRvcDogNTRweDtcXG59XFxuXFxuLnZpZXctY29udGFpbmVyIC52aWV3IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA1MHB4KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB0cmFuc2l0aW9uLXByb3BlcnR5OiBvcGFjaXR5LCBsZWZ0LCBmaWx0ZXI7XFxuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAuNXMsIC41cywgLjVzO1xcbn1cXG5cXG4udmlldy1jb250YWluZXIgLnZpZXdbZGF0YS1wYWdlPVxcXCJob21lXFxcIl0ge1xcbiAgbGVmdDogMTAlO1xcbiAgd2lkdGg6IDcwJTtcXG59XFxuXFxuLnZpZXctY29udGFpbmVyIC52aWV3W2RhdGEtcGFnZT1cXFwiaXRlbVxcXCJdIHtcXG4gIGxlZnQ6IDMwJTtcXG4gIHdpZHRoOiA3MCU7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IGNhbGMoNTRweCArIDIwcHgpO1xcbn1cXG5cXG4udmlldy1jb250YWluZXJbZGF0YS1hY3RpdmUtcGFnZT1cXFwiaG9tZVxcXCJdIC52aWV3W2RhdGEtcGFnZT1cXFwiaXRlbVxcXCJdIHtcXG4gIG9wYWNpdHk6IDA7XFxuICBsZWZ0OiA1MCU7XFxuICB6LWluZGV4OiAtMTtcXG59XFxuXFxuLnZpZXctY29udGFpbmVyW2RhdGEtYWN0aXZlLXBhZ2U9XFxcIml0ZW1cXFwiXSAudmlld1tkYXRhLXBhZ2U9XFxcImhvbWVcXFwiXSB7XFxuICBsZWZ0OiAyJTtcXG4gIC8qIC13ZWJraXQtbWFzay1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZ2JhKDAsIDAsIDAsIC4yNSksIHRyYW5zcGFyZW50IDQ1JSk7XFxuICBtYXNrLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoMCwgMCwgMCwgLjI1KSwgdHJhbnNwYXJlbnQgNDUlKTsgKi9cXG4gIG9wYWNpdHk6IC4xNTtcXG4gIGZpbHRlcjogYmx1cigxMHB4KTtcXG59XFxuXFxuLnZpZXctY29udGFpbmVyW2RhdGEtYWN0aXZlLXBhZ2U9XFxcIml0ZW1cXFwiXSAudmlld1tkYXRhLXBhZ2U9XFxcIml0ZW1cXFwiXSB7XFxuICBsZWZ0OiAyMCU7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vSG9tZVBhZ2UuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL0hvbWVQYWdlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vSG9tZVBhZ2UuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uc2VhcmNoLXBocmFzZSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC13aWR0aDogMTI0NXB4O1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9SZXN1bHRzQ29udGFpbmVyLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9SZXN1bHRzQ29udGFpbmVyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vUmVzdWx0c0NvbnRhaW5lci5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbi8qIEZpbmUgYWRqdXN0bWVudHMgb24gdWstdGh1bWJuYXYgKi9cXG4ucmVzdWx0cy1jb250YWluZXIgLnVrLXRodW1ibmF2ID4gKiA+IDo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjIpO1xcbn1cXG5cXG4ucmVzdWx0cy1jb250YWluZXIgLnJlc3VsdC1pdGVtLXRodW1ibmFpbC1ob2xkZXIsXFxuLnJlc3VsdHMtY29udGFpbmVyIC51ay10aHVtYm5hdiA+ICogPiA6OmFmdGVyIHtcXG4gIGhlaWdodDogMTY5cHg7XFxufVxcblxcbi5yZXN1bHRzLWNvbnRhaW5lciAudWstdGh1bWJuYXYgPiAqID4gOmZvY3VzOjphZnRlcixcXG4ucmVzdWx0cy1jb250YWluZXIgLnVrLXRodW1ibmF2ID4gKiA+IDpob3Zlcjo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5yZXN1bHRzLWNvbnRhaW5lciAucmVzdWx0LWl0ZW0tY2FwdGlvbiB7XFxuICB3aWR0aDogMzAwcHg7XFxufVxcblxcbi5yZXN1bHRzLWNvbnRhaW5lciAudWstdGh1bWJuYXYgPiAqID4gOmZvY3VzLFxcbi5yZXN1bHRzLWNvbnRhaW5lciAudWstdGh1bWJuYXYgPiAqID4gOmhvdmVyIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vTW92aWVEZXRhaWxzUGFnZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vTW92aWVEZXRhaWxzUGFnZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL01vdmllRGV0YWlsc1BhZ2UuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4ubW92aWUtZGV0YWlscyBkdCB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAuMyk7XFxufVxcblxcbi5tb3ZpZS1kZXRhaWxzLWltZy1jb250YWluZXIge1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBtaW4td2lkdGg6IDM0MnB4O1xcbiAgbWluLWhlaWdodDogNDk3cHg7XFxufVxcblxcbi5tb3ZpZS1kZXRhaWxzIGR0LFxcbi5tb3ZpZS1kZXRhaWxzIGRkIHtcXG4gIG1hcmdpbi1sZWZ0OiAzNjJweDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IHF1aWNrdGFzayBmcm9tICdxdWlja3Rhc2snO1xuaW1wb3J0IHsgYWRhcHQgfSBmcm9tICcuL2FkYXB0JztcbnZhciBzY2hlZHVsZU1pY3JvdGFzayA9IHF1aWNrdGFzaygpO1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VTaW5rUHJveGllcyhkcml2ZXJzKSB7XG4gICAgdmFyIHNpbmtQcm94aWVzID0ge307XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIGRyaXZlcnMpIHtcbiAgICAgICAgaWYgKGRyaXZlcnMuaGFzT3duUHJvcGVydHkobmFtZV8xKSkge1xuICAgICAgICAgICAgc2lua1Byb3hpZXNbbmFtZV8xXSA9IHhzLmNyZWF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaW5rUHJveGllcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYWxsRHJpdmVycyhkcml2ZXJzLCBzaW5rUHJveGllcykge1xuICAgIHZhciBzb3VyY2VzID0ge307XG4gICAgZm9yICh2YXIgbmFtZV8yIGluIGRyaXZlcnMpIHtcbiAgICAgICAgaWYgKGRyaXZlcnMuaGFzT3duUHJvcGVydHkobmFtZV8yKSkge1xuICAgICAgICAgICAgc291cmNlc1tuYW1lXzJdID0gZHJpdmVyc1tuYW1lXzJdKHNpbmtQcm94aWVzW25hbWVfMl0sIG5hbWVfMik7XG4gICAgICAgICAgICBpZiAoc291cmNlc1tuYW1lXzJdICYmIHR5cGVvZiBzb3VyY2VzW25hbWVfMl0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgc291cmNlc1tuYW1lXzJdLl9pc0N5Y2xlU291cmNlID0gbmFtZV8yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xufVxuLy8gTk9URTogdGhpcyB3aWxsIG11dGF0ZSBgc291cmNlc2AuXG5leHBvcnQgZnVuY3Rpb24gYWRhcHRTb3VyY2VzKHNvdXJjZXMpIHtcbiAgICBmb3IgKHZhciBuYW1lXzMgaW4gc291cmNlcykge1xuICAgICAgICBpZiAoc291cmNlcy5oYXNPd25Qcm9wZXJ0eShuYW1lXzMpICYmXG4gICAgICAgICAgICBzb3VyY2VzW25hbWVfM10gJiZcbiAgICAgICAgICAgIHR5cGVvZiBzb3VyY2VzW25hbWVfM10uc2hhbWVmdWxseVNlbmROZXh0ID09PVxuICAgICAgICAgICAgICAgICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNvdXJjZXNbbmFtZV8zXSA9IGFkYXB0KHNvdXJjZXNbbmFtZV8zXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVwbGljYXRlTWFueShzaW5rcywgc2lua1Byb3hpZXMpIHtcbiAgICB2YXIgc2lua05hbWVzID0gT2JqZWN0LmtleXMoc2lua3MpLmZpbHRlcihmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gISFzaW5rUHJveGllc1tuYW1lXTsgfSk7XG4gICAgdmFyIGJ1ZmZlcnMgPSB7fTtcbiAgICB2YXIgcmVwbGljYXRvcnMgPSB7fTtcbiAgICBzaW5rTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBidWZmZXJzW25hbWVdID0geyBfbjogW10sIF9lOiBbXSB9O1xuICAgICAgICByZXBsaWNhdG9yc1tuYW1lXSA9IHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh4KSB7IHJldHVybiBidWZmZXJzW25hbWVdLl9uLnB1c2goeCk7IH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikgeyByZXR1cm4gYnVmZmVyc1tuYW1lXS5fZS5wdXNoKGVycik7IH0sXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHZhciBzdWJzY3JpcHRpb25zID0gc2lua05hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4geHMuZnJvbU9ic2VydmFibGUoc2lua3NbbmFtZV0pLnN1YnNjcmliZShyZXBsaWNhdG9yc1tuYW1lXSk7XG4gICAgfSk7XG4gICAgc2lua05hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gc2lua1Byb3hpZXNbbmFtZV07XG4gICAgICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlTWljcm90YXNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpc3RlbmVyLl9uKHgpOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc2NoZWR1bGVNaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIChjb25zb2xlLmVycm9yIHx8IGNvbnNvbGUubG9nKShlcnIpO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLl9lKGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgYnVmZmVyc1tuYW1lXS5fbi5mb3JFYWNoKG5leHQpO1xuICAgICAgICBidWZmZXJzW25hbWVdLl9lLmZvckVhY2goZXJyb3IpO1xuICAgICAgICByZXBsaWNhdG9yc1tuYW1lXS5uZXh0ID0gbmV4dDtcbiAgICAgICAgcmVwbGljYXRvcnNbbmFtZV0uZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgLy8gYmVjYXVzZSBzaW5rLnN1YnNjcmliZShyZXBsaWNhdG9yKSBoYWQgbXV0YXRlZCByZXBsaWNhdG9yIHRvIGFkZFxuICAgICAgICAvLyBfbiwgX2UsIF9jLCB3ZSBtdXN0IGFsc28gdXBkYXRlIHRoZXNlOlxuICAgICAgICByZXBsaWNhdG9yc1tuYW1lXS5fbiA9IG5leHQ7XG4gICAgICAgIHJlcGxpY2F0b3JzW25hbWVdLl9lID0gZXJyb3I7XG4gICAgfSk7XG4gICAgYnVmZmVycyA9IG51bGw7IC8vIGZyZWUgdXAgZm9yIEdDXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRpc3Bvc2VSZXBsaWNhdGlvbigpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnVuc3Vic2NyaWJlKCk7IH0pO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZGlzcG9zZVNpbmtQcm94aWVzKHNpbmtQcm94aWVzKSB7XG4gICAgT2JqZWN0LmtleXMoc2lua1Byb3hpZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIHNpbmtQcm94aWVzW25hbWVdLl9jKCk7IH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3Bvc2VTb3VyY2VzKHNvdXJjZXMpIHtcbiAgICBmb3IgKHZhciBrIGluIHNvdXJjZXMpIHtcbiAgICAgICAgaWYgKHNvdXJjZXMuaGFzT3duUHJvcGVydHkoaykgJiZcbiAgICAgICAgICAgIHNvdXJjZXNba10gJiZcbiAgICAgICAgICAgIHNvdXJjZXNba10uZGlzcG9zZSkge1xuICAgICAgICAgICAgc291cmNlc1trXS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbHMuanMubWFwIiwiaW1wb3J0IHsgYWRhcHRTb3VyY2VzLCBjYWxsRHJpdmVycywgbWFrZVNpbmtQcm94aWVzLCBkaXNwb3NlU291cmNlcywgZGlzcG9zZVNpbmtQcm94aWVzLCBpc09iamVjdEVtcHR5LCByZXBsaWNhdGVNYW55LCB9IGZyb20gJy4vaW50ZXJuYWxzJztcbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHByZXBhcmVzIHRoZSBDeWNsZSBhcHBsaWNhdGlvbiB0byBiZSBleGVjdXRlZC4gVGFrZXMgYSBgbWFpbmBcbiAqIGZ1bmN0aW9uIGFuZCBwcmVwYXJlcyB0byBjaXJjdWxhcmx5IGNvbm5lY3RzIGl0IHRvIHRoZSBnaXZlbiBjb2xsZWN0aW9uIG9mXG4gKiBkcml2ZXIgZnVuY3Rpb25zLiBBcyBhbiBvdXRwdXQsIGBzZXR1cCgpYCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRocmVlXG4gKiBwcm9wZXJ0aWVzOiBgc291cmNlc2AsIGBzaW5rc2AgYW5kIGBydW5gLiBPbmx5IHdoZW4gYHJ1bigpYCBpcyBjYWxsZWQgd2lsbFxuICogdGhlIGFwcGxpY2F0aW9uIGFjdHVhbGx5IGV4ZWN1dGUuIFJlZmVyIHRvIHRoZSBkb2N1bWVudGF0aW9uIG9mIGBydW4oKWAgZm9yXG4gKiBtb3JlIGRldGFpbHMuXG4gKlxuICogKipFeGFtcGxlOioqXG4gKiBgYGBqc1xuICogaW1wb3J0IHtzZXR1cH0gZnJvbSAnQGN5Y2xlL3J1bic7XG4gKiBjb25zdCB7c291cmNlcywgc2lua3MsIHJ1bn0gPSBzZXR1cChtYWluLCBkcml2ZXJzKTtcbiAqIC8vIC4uLlxuICogY29uc3QgZGlzcG9zZSA9IHJ1bigpOyAvLyBFeGVjdXRlcyB0aGUgYXBwbGljYXRpb25cbiAqIC8vIC4uLlxuICogZGlzcG9zZSgpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWFpbiBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYHNvdXJjZXNgIGFzIGlucHV0IGFuZCBvdXRwdXRzXG4gKiBgc2lua3NgLlxuICogQHBhcmFtIHtPYmplY3R9IGRyaXZlcnMgYW4gb2JqZWN0IHdoZXJlIGtleXMgYXJlIGRyaXZlciBuYW1lcyBhbmQgdmFsdWVzXG4gKiBhcmUgZHJpdmVyIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm4ge09iamVjdH0gYW4gb2JqZWN0IHdpdGggdGhyZWUgcHJvcGVydGllczogYHNvdXJjZXNgLCBgc2lua3NgIGFuZFxuICogYHJ1bmAuIGBzb3VyY2VzYCBpcyB0aGUgY29sbGVjdGlvbiBvZiBkcml2ZXIgc291cmNlcywgYHNpbmtzYCBpcyB0aGVcbiAqIGNvbGxlY3Rpb24gb2YgZHJpdmVyIHNpbmtzLCB0aGVzZSBjYW4gYmUgdXNlZCBmb3IgZGVidWdnaW5nIG9yIHRlc3RpbmcuIGBydW5gXG4gKiBpcyB0aGUgZnVuY3Rpb24gdGhhdCBvbmNlIGNhbGxlZCB3aWxsIGV4ZWN1dGUgdGhlIGFwcGxpY2F0aW9uLlxuICogQGZ1bmN0aW9uIHNldHVwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cChtYWluLCBkcml2ZXJzKSB7XG4gICAgaWYgKHR5cGVvZiBtYWluICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgYXJndW1lbnQgZ2l2ZW4gdG8gQ3ljbGUgbXVzdCBiZSB0aGUgJ21haW4nIFwiICsgXCJmdW5jdGlvbi5cIik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZHJpdmVycyAhPT0gXCJvYmplY3RcIiB8fCBkcml2ZXJzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY29uZCBhcmd1bWVudCBnaXZlbiB0byBDeWNsZSBtdXN0IGJlIGFuIG9iamVjdCBcIiArXG4gICAgICAgICAgICBcIndpdGggZHJpdmVyIGZ1bmN0aW9ucyBhcyBwcm9wZXJ0aWVzLlwiKTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0RW1wdHkoZHJpdmVycykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vjb25kIGFyZ3VtZW50IGdpdmVuIHRvIEN5Y2xlIG11c3QgYmUgYW4gb2JqZWN0IFwiICtcbiAgICAgICAgICAgIFwid2l0aCBhdCBsZWFzdCBvbmUgZHJpdmVyIGZ1bmN0aW9uIGRlY2xhcmVkIGFzIGEgcHJvcGVydHkuXCIpO1xuICAgIH1cbiAgICB2YXIgZW5naW5lID0gc2V0dXBSZXVzYWJsZShkcml2ZXJzKTtcbiAgICB2YXIgc2lua3MgPSBtYWluKGVuZ2luZS5zb3VyY2VzKTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93LkN5Y2xlanMgPSB3aW5kb3cuQ3ljbGVqcyB8fCB7fTtcbiAgICAgICAgd2luZG93LkN5Y2xlanMuc2lua3MgPSBzaW5rcztcbiAgICB9XG4gICAgZnVuY3Rpb24gX3J1bigpIHtcbiAgICAgICAgdmFyIGRpc3Bvc2VSdW4gPSBlbmdpbmUucnVuKHNpbmtzKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgICBkaXNwb3NlUnVuKCk7XG4gICAgICAgICAgICBlbmdpbmUuZGlzcG9zZSgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4geyBzaW5rczogc2lua3MsIHNvdXJjZXM6IGVuZ2luZS5zb3VyY2VzLCBydW46IF9ydW4gfTtcbn1cbi8qKlxuICogQSBwYXJ0aWFsbHktYXBwbGllZCB2YXJpYW50IG9mIHNldHVwKCkgd2hpY2ggYWNjZXB0cyBvbmx5IHRoZSBkcml2ZXJzLCBhbmRcbiAqIGFsbG93cyBtYW55IGBtYWluYCBmdW5jdGlvbnMgdG8gZXhlY3V0ZSBhbmQgcmV1c2UgdGhpcyBzYW1lIHNldCBvZiBkcml2ZXJzLlxuICpcbiAqIFRha2VzIGFuIG9iamVjdCB3aXRoIGRyaXZlciBmdW5jdGlvbnMgYXMgaW5wdXQsIGFuZCBvdXRwdXRzIGFuIG9iamVjdCB3aGljaFxuICogY29udGFpbnMgdGhlIGdlbmVyYXRlZCBzb3VyY2VzIChmcm9tIHRob3NlIGRyaXZlcnMpIGFuZCBhIGBydW5gIGZ1bmN0aW9uXG4gKiAod2hpY2ggaW4gdHVybiBleHBlY3RzIHNpbmtzIGFzIGFyZ3VtZW50KS4gVGhpcyBgcnVuYCBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkXG4gKiBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBhcmd1bWVudHMsIGFuZCBpdCB3aWxsIHJldXNlIHRoZSBkcml2ZXJzIHRoYXRcbiAqIHdlcmUgcGFzc2VkIHRvIGBzZXR1cFJldXNhYmxlYC5cbiAqXG4gKiAqKkV4YW1wbGU6KipcbiAqIGBgYGpzXG4gKiBpbXBvcnQge3NldHVwUmV1c2FibGV9IGZyb20gJ0BjeWNsZS9ydW4nO1xuICogY29uc3Qge3NvdXJjZXMsIHJ1biwgZGlzcG9zZX0gPSBzZXR1cFJldXNhYmxlKGRyaXZlcnMpO1xuICogLy8gLi4uXG4gKiBjb25zdCBzaW5rcyA9IG1haW4oc291cmNlcyk7XG4gKiBjb25zdCBkaXNwb3NlUnVuID0gcnVuKHNpbmtzKTtcbiAqIC8vIC4uLlxuICogZGlzcG9zZVJ1bigpO1xuICogLy8gLi4uXG4gKiBkaXNwb3NlKCk7IC8vIGVuZHMgdGhlIHJldXNhYmlsaXR5IG9mIGRyaXZlcnNcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkcml2ZXJzIGFuIG9iamVjdCB3aGVyZSBrZXlzIGFyZSBkcml2ZXIgbmFtZXMgYW5kIHZhbHVlc1xuICogYXJlIGRyaXZlciBmdW5jdGlvbnMuXG4gKiBAcmV0dXJuIHtPYmplY3R9IGFuIG9iamVjdCB3aXRoIHRocmVlIHByb3BlcnRpZXM6IGBzb3VyY2VzYCwgYHJ1bmAgYW5kXG4gKiBgZGlzcG9zZWAuIGBzb3VyY2VzYCBpcyB0aGUgY29sbGVjdGlvbiBvZiBkcml2ZXIgc291cmNlcywgYHJ1bmAgaXMgdGhlXG4gKiBmdW5jdGlvbiB0aGF0IG9uY2UgY2FsbGVkIHdpdGggJ3NpbmtzJyBhcyBhcmd1bWVudCwgd2lsbCBleGVjdXRlIHRoZVxuICogYXBwbGljYXRpb24sIHR5aW5nIHRvZ2V0aGVyIHNvdXJjZXMgd2l0aCBzaW5rcy4gYGRpc3Bvc2VgIHRlcm1pbmF0ZXMgdGhlXG4gKiByZXVzYWJsZSByZXNvdXJjZXMgdXNlZCBieSB0aGUgZHJpdmVycy4gTm90ZSBhbHNvIHRoYXQgYHJ1bmAgcmV0dXJucyBhXG4gKiBkaXNwb3NlIGZ1bmN0aW9uIHdoaWNoIHRlcm1pbmF0ZXMgcmVzb3VyY2VzIHRoYXQgYXJlIHNwZWNpZmljIChub3QgcmV1c2FibGUpXG4gKiB0byB0aGF0IHJ1bi5cbiAqIEBmdW5jdGlvbiBzZXR1cFJldXNhYmxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFJldXNhYmxlKGRyaXZlcnMpIHtcbiAgICBpZiAodHlwZW9mIGRyaXZlcnMgIT09IFwib2JqZWN0XCIgfHwgZHJpdmVycyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCBnaXZlbiB0byBzZXR1cFJldXNhYmxlIG11c3QgYmUgYW4gb2JqZWN0IFwiICtcbiAgICAgICAgICAgIFwid2l0aCBkcml2ZXIgZnVuY3Rpb25zIGFzIHByb3BlcnRpZXMuXCIpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3RFbXB0eShkcml2ZXJzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCBnaXZlbiB0byBzZXR1cFJldXNhYmxlIG11c3QgYmUgYW4gb2JqZWN0IFwiICtcbiAgICAgICAgICAgIFwid2l0aCBhdCBsZWFzdCBvbmUgZHJpdmVyIGZ1bmN0aW9uIGRlY2xhcmVkIGFzIGEgcHJvcGVydHkuXCIpO1xuICAgIH1cbiAgICB2YXIgc2lua1Byb3hpZXMgPSBtYWtlU2lua1Byb3hpZXMoZHJpdmVycyk7XG4gICAgdmFyIHJhd1NvdXJjZXMgPSBjYWxsRHJpdmVycyhkcml2ZXJzLCBzaW5rUHJveGllcyk7XG4gICAgdmFyIHNvdXJjZXMgPSBhZGFwdFNvdXJjZXMocmF3U291cmNlcyk7XG4gICAgZnVuY3Rpb24gX3J1bihzaW5rcykge1xuICAgICAgICByZXR1cm4gcmVwbGljYXRlTWFueShzaW5rcywgc2lua1Byb3hpZXMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaXNwb3NlRW5naW5lKCkge1xuICAgICAgICBkaXNwb3NlU291cmNlcyhzb3VyY2VzKTtcbiAgICAgICAgZGlzcG9zZVNpbmtQcm94aWVzKHNpbmtQcm94aWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc291cmNlczogc291cmNlcywgcnVuOiBfcnVuLCBkaXNwb3NlOiBkaXNwb3NlRW5naW5lIH07XG59XG4vKipcbiAqIFRha2VzIGEgYG1haW5gIGZ1bmN0aW9uIGFuZCBjaXJjdWxhcmx5IGNvbm5lY3RzIGl0IHRvIHRoZSBnaXZlbiBjb2xsZWN0aW9uXG4gKiBvZiBkcml2ZXIgZnVuY3Rpb25zLlxuICpcbiAqICoqRXhhbXBsZToqKlxuICogYGBganNcbiAqIGltcG9ydCBydW4gZnJvbSAnQGN5Y2xlL3J1bic7XG4gKiBjb25zdCBkaXNwb3NlID0gcnVuKG1haW4sIGRyaXZlcnMpO1xuICogLy8gLi4uXG4gKiBkaXNwb3NlKCk7XG4gKiBgYGBcbiAqXG4gKiBUaGUgYG1haW5gIGZ1bmN0aW9uIGV4cGVjdHMgYSBjb2xsZWN0aW9uIG9mIFwic291cmNlXCIgc3RyZWFtcyAocmV0dXJuZWQgZnJvbVxuICogZHJpdmVycykgYXMgaW5wdXQsIGFuZCBzaG91bGQgcmV0dXJuIGEgY29sbGVjdGlvbiBvZiBcInNpbmtcIiBzdHJlYW1zICh0byBiZVxuICogZ2l2ZW4gdG8gZHJpdmVycykuIEEgXCJjb2xsZWN0aW9uIG9mIHN0cmVhbXNcIiBpcyBhIEphdmFTY3JpcHQgb2JqZWN0IHdoZXJlXG4gKiBrZXlzIG1hdGNoIHRoZSBkcml2ZXIgbmFtZXMgcmVnaXN0ZXJlZCBieSB0aGUgYGRyaXZlcnNgIG9iamVjdCwgYW5kIHZhbHVlc1xuICogYXJlIHRoZSBzdHJlYW1zLiBSZWZlciB0byB0aGUgZG9jdW1lbnRhdGlvbiBvZiBlYWNoIGRyaXZlciB0byBzZWUgbW9yZVxuICogZGV0YWlscyBvbiB3aGF0IHR5cGVzIG9mIHNvdXJjZXMgaXQgb3V0cHV0cyBhbmQgc2lua3MgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWFpbiBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYHNvdXJjZXNgIGFzIGlucHV0IGFuZCBvdXRwdXRzXG4gKiBgc2lua3NgLlxuICogQHBhcmFtIHtPYmplY3R9IGRyaXZlcnMgYW4gb2JqZWN0IHdoZXJlIGtleXMgYXJlIGRyaXZlciBuYW1lcyBhbmQgdmFsdWVzXG4gKiBhcmUgZHJpdmVyIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIGRpc3Bvc2UgZnVuY3Rpb24sIHVzZWQgdG8gdGVybWluYXRlIHRoZSBleGVjdXRpb24gb2YgdGhlXG4gKiBDeWNsZS5qcyBwcm9ncmFtLCBjbGVhbmluZyB1cCByZXNvdXJjZXMgdXNlZC5cbiAqIEBmdW5jdGlvbiBydW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bihtYWluLCBkcml2ZXJzKSB7XG4gICAgdmFyIHByb2dyYW0gPSBzZXR1cChtYWluLCBkcml2ZXJzKTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LkN5Y2xlanNEZXZUb29sX3N0YXJ0R3JhcGhTZXJpYWxpemVyKSB7XG4gICAgICAgIHdpbmRvdy5DeWNsZWpzRGV2VG9vbF9zdGFydEdyYXBoU2VyaWFsaXplcihwcm9ncmFtLnNpbmtzKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2dyYW0ucnVuKCk7XG59XG5leHBvcnQgZGVmYXVsdCBydW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBoIH0gZnJvbSAnc25hYmJkb20vaCc7XG5mdW5jdGlvbiBjb3B5VG9UaHVuayh2bm9kZSwgdGh1bmtWTm9kZSkge1xuICAgIHRodW5rVk5vZGUuZWxtID0gdm5vZGUuZWxtO1xuICAgIHZub2RlLmRhdGEuZm4gPSB0aHVua1ZOb2RlLmRhdGEuZm47XG4gICAgdm5vZGUuZGF0YS5hcmdzID0gdGh1bmtWTm9kZS5kYXRhLmFyZ3M7XG4gICAgdm5vZGUuZGF0YS5pc29sYXRlID0gdGh1bmtWTm9kZS5kYXRhLmlzb2xhdGU7XG4gICAgdGh1bmtWTm9kZS5kYXRhID0gdm5vZGUuZGF0YTtcbiAgICB0aHVua1ZOb2RlLmNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgdGh1bmtWTm9kZS50ZXh0ID0gdm5vZGUudGV4dDtcbiAgICB0aHVua1ZOb2RlLmVsbSA9IHZub2RlLmVsbTtcbn1cbmZ1bmN0aW9uIGluaXQodGh1bmtWTm9kZSkge1xuICAgIHZhciBjdXIgPSB0aHVua1ZOb2RlLmRhdGE7XG4gICAgdmFyIHZub2RlID0gY3VyLmZuLmFwcGx5KHVuZGVmaW5lZCwgY3VyLmFyZ3MpO1xuICAgIGNvcHlUb1RodW5rKHZub2RlLCB0aHVua1ZOb2RlKTtcbn1cbmZ1bmN0aW9uIHByZXBhdGNoKG9sZFZub2RlLCB0aHVua1ZOb2RlKSB7XG4gICAgdmFyIG9sZCA9IG9sZFZub2RlLmRhdGEsIGN1ciA9IHRodW5rVk5vZGUuZGF0YTtcbiAgICB2YXIgaTtcbiAgICB2YXIgb2xkQXJncyA9IG9sZC5hcmdzLCBhcmdzID0gY3VyLmFyZ3M7XG4gICAgaWYgKG9sZC5mbiAhPT0gY3VyLmZuIHx8IG9sZEFyZ3MubGVuZ3RoICE9PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICBjb3B5VG9UaHVuayhjdXIuZm4uYXBwbHkodW5kZWZpbmVkLCBhcmdzKSwgdGh1bmtWTm9kZSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChvbGRBcmdzW2ldICE9PSBhcmdzW2ldKSB7XG4gICAgICAgICAgICBjb3B5VG9UaHVuayhjdXIuZm4uYXBwbHkodW5kZWZpbmVkLCBhcmdzKSwgdGh1bmtWTm9kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29weVRvVGh1bmsob2xkVm5vZGUsIHRodW5rVk5vZGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRodW5rKHNlbCwga2V5LCBmbiwgYXJncykge1xuICAgIGlmIChhcmdzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXJncyA9IGZuO1xuICAgICAgICBmbiA9IGtleTtcbiAgICAgICAga2V5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gaChzZWwsIHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIGhvb2s6IHsgaW5pdDogaW5pdCwgcHJlcGF0Y2g6IHByZXBhdGNoIH0sXG4gICAgICAgIGZuOiBmbixcbiAgICAgICAgYXJnczogYXJncyxcbiAgICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IHRodW5rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGh1bmsuanMubWFwIiwiaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSAneHN0cmVhbSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSwgdXNlQ2FwdHVyZSwgcHJldmVudERlZmF1bHQsIHBhc3NpdmUpIHtcbiAgICBpZiAodXNlQ2FwdHVyZSA9PT0gdm9pZCAwKSB7IHVzZUNhcHR1cmUgPSBmYWxzZTsgfVxuICAgIGlmIChwcmV2ZW50RGVmYXVsdCA9PT0gdm9pZCAwKSB7IHByZXZlbnREZWZhdWx0ID0gZmFsc2U7IH1cbiAgICBpZiAocGFzc2l2ZSA9PT0gdm9pZCAwKSB7IHBhc3NpdmUgPSBmYWxzZTsgfVxuICAgIHZhciBuZXh0ID0gbnVsbDtcbiAgICByZXR1cm4gU3RyZWFtLmNyZWF0ZSh7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChsaXN0ZW5lcikge1xuICAgICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgbmV4dCA9IGZ1bmN0aW9uIF9uZXh0KGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0Q29uZGl0aW9uYWwoZXZlbnQsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubmV4dChldmVudCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHQgPSBmdW5jdGlvbiBfbmV4dChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5uZXh0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbmV4dCwge1xuICAgICAgICAgICAgICAgIGNhcHR1cmU6IHVzZUNhcHR1cmUsXG4gICAgICAgICAgICAgICAgcGFzc2l2ZTogcGFzc2l2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbmV4dCwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBtYXRjaE9iamVjdChtYXRjaGVyLCBvYmopIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1hdGNoZXIpO1xuICAgIHZhciBuID0ga2V5cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW2ldO1xuICAgICAgICBpZiAodHlwZW9mIG1hdGNoZXJba10gPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmpba10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoIW1hdGNoT2JqZWN0KG1hdGNoZXJba10sIG9ialtrXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWF0Y2hlcltrXSAhPT0gb2JqW2tdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJldmVudERlZmF1bHRDb25kaXRpb25hbChldmVudCwgcHJldmVudERlZmF1bHQpIHtcbiAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmV2ZW50RGVmYXVsdCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUHJlZGljYXRlKHByZXZlbnREZWZhdWx0KSkge1xuICAgICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHByZXZlbnREZWZhdWx0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKG1hdGNoT2JqZWN0KHByZXZlbnREZWZhdWx0LCBldmVudCkpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmV2ZW50RGVmYXVsdCBoYXMgdG8gYmUgZWl0aGVyIGEgYm9vbGVhbiwgcHJlZGljYXRlIGZ1bmN0aW9uIG9yIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNQcmVkaWNhdGUoZm4pIHtcbiAgICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcCIsImltcG9ydCB4cyBmcm9tICd4c3RyZWFtJztcbmltcG9ydCB7IGFkYXB0IH0gZnJvbSAnQGN5Y2xlL3J1bi9saWIvYWRhcHQnO1xuaW1wb3J0IHsgZnJvbUV2ZW50IH0gZnJvbSAnLi9mcm9tRXZlbnQnO1xudmFyIERvY3VtZW50RE9NU291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvY3VtZW50RE9NU291cmNlKF9uYW1lKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSBfbmFtZTtcbiAgICB9XG4gICAgRG9jdW1lbnRET01Tb3VyY2UucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uYWxpdHkgaXMgc3RpbGwgdW5kZWZpbmVkL3VuZGVjaWRlZC5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBEb2N1bWVudERPTVNvdXJjZS5wcm90b3R5cGUuZWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdCh4cy5vZihbZG9jdW1lbnRdKSk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICBEb2N1bWVudERPTVNvdXJjZS5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG91dCA9IGFkYXB0KHhzLm9mKGRvY3VtZW50KSk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICBEb2N1bWVudERPTVNvdXJjZS5wcm90b3R5cGUuZXZlbnRzID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgb3B0aW9ucywgYnViYmxlcykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgc3RyZWFtO1xuICAgICAgICBzdHJlYW0gPSBmcm9tRXZlbnQoZG9jdW1lbnQsIGV2ZW50VHlwZSwgb3B0aW9ucy51c2VDYXB0dXJlLCBvcHRpb25zLnByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgdmFyIG91dCA9IGFkYXB0KHN0cmVhbSk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICByZXR1cm4gRG9jdW1lbnRET01Tb3VyY2U7XG59KCkpO1xuZXhwb3J0IHsgRG9jdW1lbnRET01Tb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURvY3VtZW50RE9NU291cmNlLmpzLm1hcCIsImltcG9ydCB4cyBmcm9tICd4c3RyZWFtJztcbmltcG9ydCB7IGFkYXB0IH0gZnJvbSAnQGN5Y2xlL3J1bi9saWIvYWRhcHQnO1xuaW1wb3J0IHsgZnJvbUV2ZW50IH0gZnJvbSAnLi9mcm9tRXZlbnQnO1xudmFyIEJvZHlET01Tb3VyY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQm9keURPTVNvdXJjZShfbmFtZSkge1xuICAgICAgICB0aGlzLl9uYW1lID0gX25hbWU7XG4gICAgfVxuICAgIEJvZHlET01Tb3VyY2UucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uYWxpdHkgaXMgc3RpbGwgdW5kZWZpbmVkL3VuZGVjaWRlZC5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCb2R5RE9NU291cmNlLnByb3RvdHlwZS5lbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG91dCA9IGFkYXB0KHhzLm9mKFtkb2N1bWVudC5ib2R5XSkpO1xuICAgICAgICBvdXQuX2lzQ3ljbGVTb3VyY2UgPSB0aGlzLl9uYW1lO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgQm9keURPTVNvdXJjZS5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG91dCA9IGFkYXB0KHhzLm9mKGRvY3VtZW50LmJvZHkpKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIEJvZHlET01Tb3VyY2UucHJvdG90eXBlLmV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFR5cGUsIG9wdGlvbnMsIGJ1YmJsZXMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHN0cmVhbTtcbiAgICAgICAgc3RyZWFtID0gZnJvbUV2ZW50KGRvY3VtZW50LmJvZHksIGV2ZW50VHlwZSwgb3B0aW9ucy51c2VDYXB0dXJlLCBvcHRpb25zLnByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgdmFyIG91dCA9IGFkYXB0KHN0cmVhbSk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICByZXR1cm4gQm9keURPTVNvdXJjZTtcbn0oKSk7XG5leHBvcnQgeyBCb2R5RE9NU291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Cb2R5RE9NU291cmNlLmpzLm1hcCIsImZ1bmN0aW9uIGlzVmFsaWROb2RlKG9iaikge1xuICAgIHZhciBFTEVNX1RZUEUgPSAxO1xuICAgIHZhciBGUkFHX1RZUEUgPSAxMTtcbiAgICByZXR1cm4gdHlwZW9mIEhUTUxFbGVtZW50ID09PSAnb2JqZWN0J1xuICAgICAgICA/IG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IG9iaiBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnRcbiAgICAgICAgOiBvYmogJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBvYmogIT09IG51bGwgJiZcbiAgICAgICAgICAgIChvYmoubm9kZVR5cGUgPT09IEVMRU1fVFlQRSB8fCBvYmoubm9kZVR5cGUgPT09IEZSQUdfVFlQRSkgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmoubm9kZU5hbWUgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2xhc3NPcklkKHN0cikge1xuICAgIHJldHVybiBzdHIubGVuZ3RoID4gMSAmJiAoc3RyWzBdID09PSAnLicgfHwgc3RyWzBdID09PSAnIycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRG9jRnJhZyhlbCkge1xuICAgIHJldHVybiBlbC5ub2RlVHlwZSA9PT0gMTE7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tWYWxpZENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgICBpZiAodHlwZW9mIGNvbnRhaW5lciAhPT0gJ3N0cmluZycgJiYgIWlzVmFsaWROb2RlKGNvbnRhaW5lcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQgbmVpdGhlciBhIHNlbGVjdG9yIHN0cmluZy4nKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsaWROb2RlKHNlbGVjdG9ycykge1xuICAgIHZhciBkb21FbGVtZW50ID0gdHlwZW9mIHNlbGVjdG9ycyA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycylcbiAgICAgICAgOiBzZWxlY3RvcnM7XG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgPT09ICdzdHJpbmcnICYmIGRvbUVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlbmRlciBpbnRvIHVua25vd24gZWxlbWVudCBgXCIgKyBzZWxlY3RvcnMgKyBcImBcIik7XG4gICAgfVxuICAgIHJldHVybiBkb21FbGVtZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdG9ycyhuYW1lc3BhY2UpIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IG5hbWVzcGFjZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAobmFtZXNwYWNlW2ldLnR5cGUgIT09ICdzZWxlY3RvcicpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG5hbWVzcGFjZVtpXS5zY29wZSArICcgJyArIHJlcztcbiAgICB9XG4gICAgcmV0dXJuIHJlcy50cmltKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNFcXVhbE5hbWVzcGFjZShhLCBiKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGEpIHx8ICFBcnJheS5pc0FycmF5KGIpIHx8IGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXS50eXBlICE9PSBiW2ldLnR5cGUgfHwgYVtpXS5zY29wZSAhPT0gYltpXS5zY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VJbnNlcnQobWFwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlLCBlbG0sIHZhbHVlKSB7XG4gICAgICAgIGlmIChtYXAuaGFzKHR5cGUpKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJNYXAgPSBtYXAuZ2V0KHR5cGUpO1xuICAgICAgICAgICAgaW5uZXJNYXAuc2V0KGVsbSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGlubmVyTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgaW5uZXJNYXAuc2V0KGVsbSwgdmFsdWUpO1xuICAgICAgICAgICAgbWFwLnNldCh0eXBlLCBpbm5lck1hcCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIiwiaW1wb3J0IHsgaXNFcXVhbE5hbWVzcGFjZSB9IGZyb20gJy4vdXRpbHMnO1xudmFyIFNjb3BlQ2hlY2tlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY29wZUNoZWNrZXIobmFtZXNwYWNlLCBpc29sYXRlTW9kdWxlKSB7XG4gICAgICAgIHRoaXMubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICAgICAgICB0aGlzLmlzb2xhdGVNb2R1bGUgPSBpc29sYXRlTW9kdWxlO1xuICAgICAgICB0aGlzLl9uYW1lc3BhY2UgPSBuYW1lc3BhY2UuZmlsdGVyKGZ1bmN0aW9uIChuKSB7IHJldHVybiBuLnR5cGUgIT09ICdzZWxlY3Rvcic7IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBpcyAqZGlyZWN0bHkqIGluIHRoZSBzY29wZSBvZiB0aGlzXG4gICAgICogc2NvcGUgY2hlY2tlci4gQmVpbmcgY29udGFpbmVkICppbmRpcmVjdGx5KiB0aHJvdWdoIG90aGVyIHNjb3Blc1xuICAgICAqIGlzIG5vdCB2YWxpZC4gVGhpcyBpcyBjcnVjaWFsIGZvciBpbXBsZW1lbnRpbmcgcGFyZW50LWNoaWxkIGlzb2xhdGlvbixcbiAgICAgKiBzbyB0aGF0IHRoZSBwYXJlbnQgc2VsZWN0b3JzIGRvbid0IHNlYXJjaCBpbnNpZGUgYSBjaGlsZCBzY29wZS5cbiAgICAgKi9cbiAgICBTY29wZUNoZWNrZXIucHJvdG90eXBlLmlzRGlyZWN0bHlJblNjb3BlID0gZnVuY3Rpb24gKGxlYWYpIHtcbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMuaXNvbGF0ZU1vZHVsZS5nZXROYW1lc3BhY2UobGVhZik7XG4gICAgICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX25hbWVzcGFjZS5sZW5ndGggPiBuYW1lc3BhY2UubGVuZ3RoIHx8XG4gICAgICAgICAgICAhaXNFcXVhbE5hbWVzcGFjZSh0aGlzLl9uYW1lc3BhY2UsIG5hbWVzcGFjZS5zbGljZSgwLCB0aGlzLl9uYW1lc3BhY2UubGVuZ3RoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5fbmFtZXNwYWNlLmxlbmd0aDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG5hbWVzcGFjZVtpXS50eXBlID09PSAndG90YWwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIFNjb3BlQ2hlY2tlcjtcbn0oKSk7XG5leHBvcnQgeyBTY29wZUNoZWNrZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjb3BlQ2hlY2tlci5qcy5tYXAiLCJpbXBvcnQgeyBTY29wZUNoZWNrZXIgfSBmcm9tICcuL1Njb3BlQ2hlY2tlcic7XG5pbXBvcnQgeyBnZXRTZWxlY3RvcnMgfSBmcm9tICcuL3V0aWxzJztcbmZ1bmN0aW9uIHRvRWxBcnJheShpbnB1dCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpbnB1dCk7XG59XG52YXIgRWxlbWVudEZpbmRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbGVtZW50RmluZGVyKG5hbWVzcGFjZSwgaXNvbGF0ZU1vZHVsZSkge1xuICAgICAgICB0aGlzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgICAgICAgdGhpcy5pc29sYXRlTW9kdWxlID0gaXNvbGF0ZU1vZHVsZTtcbiAgICB9XG4gICAgRWxlbWVudEZpbmRlci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcnMobmFtZXNwYWNlKTtcbiAgICAgICAgdmFyIHNjb3BlQ2hlY2tlciA9IG5ldyBTY29wZUNoZWNrZXIobmFtZXNwYWNlLCB0aGlzLmlzb2xhdGVNb2R1bGUpO1xuICAgICAgICB2YXIgdG9wTm9kZSA9IHRoaXMuaXNvbGF0ZU1vZHVsZS5nZXRFbGVtZW50KG5hbWVzcGFjZS5maWx0ZXIoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIG4udHlwZSAhPT0gJ3NlbGVjdG9yJzsgfSkpO1xuICAgICAgICBpZiAodG9wTm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdG9yID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIFt0b3BOb2RlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9FbEFycmF5KHRvcE5vZGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXG4gICAgICAgICAgICAuZmlsdGVyKHNjb3BlQ2hlY2tlci5pc0RpcmVjdGx5SW5TY29wZSwgc2NvcGVDaGVja2VyKVxuICAgICAgICAgICAgLmNvbmNhdCh0b3BOb2RlLm1hdGNoZXMoc2VsZWN0b3IpID8gW3RvcE5vZGVdIDogW10pO1xuICAgIH07XG4gICAgcmV0dXJuIEVsZW1lbnRGaW5kZXI7XG59KCkpO1xuZXhwb3J0IHsgRWxlbWVudEZpbmRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RWxlbWVudEZpbmRlci5qcy5tYXAiLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsgaXNDbGFzc09ySWQgfSBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiBtYWtlSXNvbGF0ZVNpbmsobmFtZXNwYWNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzaW5rLCBzY29wZSkge1xuICAgICAgICBpZiAoc2NvcGUgPT09ICc6cm9vdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBzaW5rO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaW5rLm1hcChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2NvcGVPYmogPSBnZXRTY29wZU9iaihzY29wZSk7XG4gICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IF9fYXNzaWduKHt9LCBub2RlLCB7IGRhdGE6IF9fYXNzaWduKHt9LCBub2RlLmRhdGEsIHsgaXNvbGF0ZTogIW5vZGUuZGF0YSB8fCAhQXJyYXkuaXNBcnJheShub2RlLmRhdGEuaXNvbGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmFtZXNwYWNlLmNvbmNhdChbc2NvcGVPYmpdKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBub2RlLmRhdGEuaXNvbGF0ZSB9KSB9KTtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgbmV3Tm9kZSwgeyBrZXk6IG5ld05vZGUua2V5ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBuZXdOb2RlLmtleVxuICAgICAgICAgICAgICAgICAgICA6IEpTT04uc3RyaW5naWZ5KG5ld05vZGUuZGF0YS5pc29sYXRlKSB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY29wZU9iaihzY29wZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGlzQ2xhc3NPcklkKHNjb3BlKSA/ICdzaWJsaW5nJyA6ICd0b3RhbCcsXG4gICAgICAgIHNjb3BlOiBzY29wZSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNvbGF0ZS5qcy5tYXAiLCJpbXBvcnQgeyBhZGFwdCB9IGZyb20gJ0BjeWNsZS9ydW4vbGliL2FkYXB0JztcbmltcG9ydCB7IERvY3VtZW50RE9NU291cmNlIH0gZnJvbSAnLi9Eb2N1bWVudERPTVNvdXJjZSc7XG5pbXBvcnQgeyBCb2R5RE9NU291cmNlIH0gZnJvbSAnLi9Cb2R5RE9NU291cmNlJztcbmltcG9ydCB7IEVsZW1lbnRGaW5kZXIgfSBmcm9tICcuL0VsZW1lbnRGaW5kZXInO1xuaW1wb3J0IHsgbWFrZUlzb2xhdGVTaW5rLCBnZXRTY29wZU9iaiB9IGZyb20gJy4vaXNvbGF0ZSc7XG52YXIgTWFpbkRPTVNvdXJjZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYWluRE9NU291cmNlKF9yb290RWxlbWVudCQsIF9zYW5pdGF0aW9uJCwgX25hbWVzcGFjZSwgX2lzb2xhdGVNb2R1bGUsIF9ldmVudERlbGVnYXRvciwgX25hbWUpIHtcbiAgICAgICAgaWYgKF9uYW1lc3BhY2UgPT09IHZvaWQgMCkgeyBfbmFtZXNwYWNlID0gW107IH1cbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQkID0gX3Jvb3RFbGVtZW50JDtcbiAgICAgICAgdGhpcy5fc2FuaXRhdGlvbiQgPSBfc2FuaXRhdGlvbiQ7XG4gICAgICAgIHRoaXMuX25hbWVzcGFjZSA9IF9uYW1lc3BhY2U7XG4gICAgICAgIHRoaXMuX2lzb2xhdGVNb2R1bGUgPSBfaXNvbGF0ZU1vZHVsZTtcbiAgICAgICAgdGhpcy5fZXZlbnREZWxlZ2F0b3IgPSBfZXZlbnREZWxlZ2F0b3I7XG4gICAgICAgIHRoaXMuX25hbWUgPSBfbmFtZTtcbiAgICAgICAgdGhpcy5pc29sYXRlU291cmNlID0gZnVuY3Rpb24gKHNvdXJjZSwgc2NvcGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWFpbkRPTVNvdXJjZShzb3VyY2UuX3Jvb3RFbGVtZW50JCwgc291cmNlLl9zYW5pdGF0aW9uJCwgc291cmNlLl9uYW1lc3BhY2UuY29uY2F0KGdldFNjb3BlT2JqKHNjb3BlKSksIHNvdXJjZS5faXNvbGF0ZU1vZHVsZSwgc291cmNlLl9ldmVudERlbGVnYXRvciwgc291cmNlLl9uYW1lKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc29sYXRlU2luayA9IG1ha2VJc29sYXRlU2luayh0aGlzLl9uYW1lc3BhY2UpO1xuICAgIH1cbiAgICBNYWluRE9NU291cmNlLnByb3RvdHlwZS5fZWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9uYW1lc3BhY2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcm9vdEVsZW1lbnQkLm1hcChmdW5jdGlvbiAoeCkgeyByZXR1cm4gW3hdOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50RmluZGVyXzEgPSBuZXcgRWxlbWVudEZpbmRlcih0aGlzLl9uYW1lc3BhY2UsIHRoaXMuX2lzb2xhdGVNb2R1bGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3RFbGVtZW50JC5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZWxlbWVudEZpbmRlcl8xLmNhbGwoKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLmVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3V0ID0gYWRhcHQodGhpcy5fZWxlbWVudHMoKS5yZW1lbWJlcigpKTtcbiAgICAgICAgb3V0Ll9pc0N5Y2xlU291cmNlID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLmVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdCh0aGlzLl9lbGVtZW50cygpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyci5sZW5ndGggPiAwOyB9KVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYXJyKSB7IHJldHVybiBhcnJbMF07IH0pXG4gICAgICAgICAgICAucmVtZW1iZXIoKSk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFpbkRPTVNvdXJjZS5wcm90b3R5cGUsIFwibmFtZXNwYWNlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmFtZXNwYWNlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYWluRE9NU291cmNlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRPTSBkcml2ZXIncyBzZWxlY3QoKSBleHBlY3RzIHRoZSBhcmd1bWVudCB0byBiZSBhIFwiICtcbiAgICAgICAgICAgICAgICBcInN0cmluZyBhcyBhIENTUyBzZWxlY3RvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICdkb2N1bWVudCcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRET01Tb3VyY2UodGhpcy5fbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdG9yID09PSAnYm9keScpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQm9keURPTVNvdXJjZSh0aGlzLl9uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmFtZXNwYWNlID0gc2VsZWN0b3IgPT09ICc6cm9vdCdcbiAgICAgICAgICAgID8gW11cbiAgICAgICAgICAgIDogdGhpcy5fbmFtZXNwYWNlLmNvbmNhdCh7IHR5cGU6ICdzZWxlY3RvcicsIHNjb3BlOiBzZWxlY3Rvci50cmltKCkgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTWFpbkRPTVNvdXJjZSh0aGlzLl9yb290RWxlbWVudCQsIHRoaXMuX3Nhbml0YXRpb24kLCBuYW1lc3BhY2UsIHRoaXMuX2lzb2xhdGVNb2R1bGUsIHRoaXMuX2V2ZW50RGVsZWdhdG9yLCB0aGlzLl9uYW1lKTtcbiAgICB9O1xuICAgIE1haW5ET01Tb3VyY2UucHJvdG90eXBlLmV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFR5cGUsIG9wdGlvbnMsIGJ1YmJsZXMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgaWYgKHR5cGVvZiBldmVudFR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRPTSBkcml2ZXIncyBldmVudHMoKSBleHBlY3RzIGFyZ3VtZW50IHRvIGJlIGEgXCIgK1xuICAgICAgICAgICAgICAgIFwic3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZXZlbnQgdHlwZSB0byBsaXN0ZW4gZm9yLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnQkID0gdGhpcy5fZXZlbnREZWxlZ2F0b3IuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHRoaXMuX25hbWVzcGFjZSwgb3B0aW9ucywgYnViYmxlcyk7XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdChldmVudCQpO1xuICAgICAgICBvdXQuX2lzQ3ljbGVTb3VyY2UgPSB0aGlzLl9uYW1lO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgTWFpbkRPTVNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc2FuaXRhdGlvbiQuc2hhbWVmdWxseVNlbmROZXh0KG51bGwpO1xuICAgICAgICAvL3RoaXMuX2lzb2xhdGVNb2R1bGUucmVzZXQoKTtcbiAgICB9O1xuICAgIHJldHVybiBNYWluRE9NU291cmNlO1xufSgpKTtcbmV4cG9ydCB7IE1haW5ET01Tb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1haW5ET01Tb3VyY2UuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHZub2RlKHNlbCwgZGF0YSwgY2hpbGRyZW4sIHRleHQsIGVsbSkge1xuICAgIHZhciBrZXkgPSBkYXRhID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBkYXRhLmtleTtcbiAgICByZXR1cm4geyBzZWw6IHNlbCwgZGF0YTogZGF0YSwgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgICB0ZXh0OiB0ZXh0LCBlbG06IGVsbSwga2V5OiBrZXkgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHZub2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dm5vZGUuanMubWFwIiwiZXhwb3J0IHZhciBhcnJheSA9IEFycmF5LmlzQXJyYXk7XG5leHBvcnQgZnVuY3Rpb24gcHJpbWl0aXZlKHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHMgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzID09PSAnbnVtYmVyJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLmpzLm1hcCIsImZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCBxdWFsaWZpZWROYW1lKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlKHRleHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG59XG5mdW5jdGlvbiBjcmVhdGVDb21tZW50KHRleHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KTtcbn1cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5mdW5jdGlvbiByZW1vdmVDaGlsZChub2RlLCBjaGlsZCkge1xuICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQobm9kZSwgY2hpbGQpIHtcbiAgICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIHBhcmVudE5vZGUobm9kZSkge1xuICAgIHJldHVybiBub2RlLnBhcmVudE5vZGU7XG59XG5mdW5jdGlvbiBuZXh0U2libGluZyhub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG59XG5mdW5jdGlvbiB0YWdOYW1lKGVsbSkge1xuICAgIHJldHVybiBlbG0udGFnTmFtZTtcbn1cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50KG5vZGUsIHRleHQpIHtcbiAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50ZXh0Q29udGVudDtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDE7XG59XG5mdW5jdGlvbiBpc1RleHQobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAzO1xufVxuZnVuY3Rpb24gaXNDb21tZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gODtcbn1cbmV4cG9ydCB2YXIgaHRtbERvbUFwaSA9IHtcbiAgICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50LFxuICAgIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICAgIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICAgIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICAgIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gICAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gICAgZ2V0VGV4dENvbnRlbnQ6IGdldFRleHRDb250ZW50LFxuICAgIGlzRWxlbWVudDogaXNFbGVtZW50LFxuICAgIGlzVGV4dDogaXNUZXh0LFxuICAgIGlzQ29tbWVudDogaXNDb21tZW50LFxufTtcbmV4cG9ydCBkZWZhdWx0IGh0bWxEb21BcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odG1sZG9tYXBpLmpzLm1hcCIsImltcG9ydCB2bm9kZSBmcm9tICcuL3Zub2RlJztcbmltcG9ydCAqIGFzIGlzIGZyb20gJy4vaXMnO1xuaW1wb3J0IGh0bWxEb21BcGkgZnJvbSAnLi9odG1sZG9tYXBpJztcbmZ1bmN0aW9uIGlzVW5kZWYocykgeyByZXR1cm4gcyA9PT0gdW5kZWZpbmVkOyB9XG5mdW5jdGlvbiBpc0RlZihzKSB7IHJldHVybiBzICE9PSB1bmRlZmluZWQ7IH1cbnZhciBlbXB0eU5vZGUgPSB2bm9kZSgnJywge30sIFtdLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG5mdW5jdGlvbiBzYW1lVm5vZGUodm5vZGUxLCB2bm9kZTIpIHtcbiAgICByZXR1cm4gdm5vZGUxLmtleSA9PT0gdm5vZGUyLmtleSAmJiB2bm9kZTEuc2VsID09PSB2bm9kZTIuc2VsO1xufVxuZnVuY3Rpb24gaXNWbm9kZSh2bm9kZSkge1xuICAgIHJldHVybiB2bm9kZS5zZWwgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4KGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gICAgdmFyIGksIG1hcCA9IHt9LCBrZXksIGNoO1xuICAgIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAgICAgIGNoID0gY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChjaCAhPSBudWxsKSB7XG4gICAgICAgICAgICBrZXkgPSBjaC5rZXk7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgbWFwW2tleV0gPSBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG59XG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knLCAncHJlJywgJ3Bvc3QnXTtcbmV4cG9ydCB7IGggfSBmcm9tICcuL2gnO1xuZXhwb3J0IHsgdGh1bmsgfSBmcm9tICcuL3RodW5rJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0KG1vZHVsZXMsIGRvbUFwaSkge1xuICAgIHZhciBpLCBqLCBjYnMgPSB7fTtcbiAgICB2YXIgYXBpID0gZG9tQXBpICE9PSB1bmRlZmluZWQgPyBkb21BcGkgOiBodG1sRG9tQXBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtb2R1bGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIgaG9vayA9IG1vZHVsZXNbal1baG9va3NbaV1dO1xuICAgICAgICAgICAgaWYgKGhvb2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNic1tob29rc1tpXV0ucHVzaChob29rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBlbXB0eU5vZGVBdChlbG0pIHtcbiAgICAgICAgdmFyIGlkID0gZWxtLmlkID8gJyMnICsgZWxtLmlkIDogJyc7XG4gICAgICAgIHZhciBjID0gZWxtLmNsYXNzTmFtZSA/ICcuJyArIGVsbS5jbGFzc05hbWUuc3BsaXQoJyAnKS5qb2luKCcuJykgOiAnJztcbiAgICAgICAgcmV0dXJuIHZub2RlKGFwaS50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSArIGlkICsgYywge30sIFtdLCB1bmRlZmluZWQsIGVsbSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcm1DYigpIHtcbiAgICAgICAgICAgIGlmICgtLWxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IGFwaS5wYXJlbnROb2RlKGNoaWxkRWxtKTtcbiAgICAgICAgICAgICAgICBhcGkucmVtb3ZlQ2hpbGQocGFyZW50XzEsIGNoaWxkRWxtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICAgICAgdmFyIGksIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgICAgICAgICBpKHZub2RlKTtcbiAgICAgICAgICAgICAgICBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbiwgc2VsID0gdm5vZGUuc2VsO1xuICAgICAgICBpZiAoc2VsID09PSAnIScpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgdm5vZGUudGV4dCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdm5vZGUuZWxtID0gYXBpLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2VsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFBhcnNlIHNlbGVjdG9yXG4gICAgICAgICAgICB2YXIgaGFzaElkeCA9IHNlbC5pbmRleE9mKCcjJyk7XG4gICAgICAgICAgICB2YXIgZG90SWR4ID0gc2VsLmluZGV4T2YoJy4nLCBoYXNoSWR4KTtcbiAgICAgICAgICAgIHZhciBoYXNoID0gaGFzaElkeCA+IDAgPyBoYXNoSWR4IDogc2VsLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBkb3QgPSBkb3RJZHggPiAwID8gZG90SWR4IDogc2VsLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB0YWcgPSBoYXNoSWR4ICE9PSAtMSB8fCBkb3RJZHggIT09IC0xID8gc2VsLnNsaWNlKDAsIE1hdGgubWluKGhhc2gsIGRvdCkpIDogc2VsO1xuICAgICAgICAgICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLm5zKSA/IGFwaS5jcmVhdGVFbGVtZW50TlMoaSwgdGFnKVxuICAgICAgICAgICAgICAgIDogYXBpLmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICAgICAgICAgIGlmIChoYXNoIDwgZG90KVxuICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ2lkJywgc2VsLnNsaWNlKGhhc2ggKyAxLCBkb3QpKTtcbiAgICAgICAgICAgIGlmIChkb3RJZHggPiAwKVxuICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgc2VsLnNsaWNlKGRvdCArIDEpLnJlcGxhY2UoL1xcLi9nLCAnICcpKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgICAgICAgICBpZiAoaXMuYXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmFwcGVuZENoaWxkKGVsbSwgY3JlYXRlRWxtKGNoLCBpbnNlcnRlZFZub2RlUXVldWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzLnByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgICAgICAgICAgIGFwaS5hcHBlbmRDaGlsZChlbG0sIGFwaS5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgICAgICAgICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkuY3JlYXRlKVxuICAgICAgICAgICAgICAgICAgICBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoaS5pbnNlcnQpXG4gICAgICAgICAgICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZub2RlLmVsbSA9IGFwaS5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdm5vZGUuZWxtO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRWbm9kZXMocGFyZW50RWxtLCBiZWZvcmUsIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgICAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICAgICAgICBpZiAoY2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGFwaS5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBjcmVhdGVFbG0oY2gsIGluc2VydGVkVm5vZGVRdWV1ZSksIGJlZm9yZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sodm5vZGUpIHtcbiAgICAgICAgdmFyIGksIGosIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpXG4gICAgICAgICAgICAgICAgaSh2bm9kZSk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0odm5vZGUpO1xuICAgICAgICAgICAgaWYgKHZub2RlLmNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IHZub2RlLmNoaWxkcmVuW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPSBudWxsICYmIHR5cGVvZiBpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVWbm9kZXMocGFyZW50RWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICAgICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgICAgICAgdmFyIGlfMSA9IHZvaWQgMCwgbGlzdGVuZXJzID0gdm9pZCAwLCBybSA9IHZvaWQgMCwgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgICAgICAgaWYgKGNoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEZWYoY2guc2VsKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgcm0gPSBjcmVhdGVSbUNiKGNoLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpXzEgPSAwOyBpXzEgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpXzEpXG4gICAgICAgICAgICAgICAgICAgICAgICBjYnMucmVtb3ZlW2lfMV0oY2gsIHJtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGVmKGlfMSA9IGNoLmRhdGEpICYmIGlzRGVmKGlfMSA9IGlfMS5ob29rKSAmJiBpc0RlZihpXzEgPSBpXzEucmVtb3ZlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaV8xKGNoLCBybSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBybSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcGkucmVtb3ZlQ2hpbGQocGFyZW50RWxtLCBjaC5lbG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbihwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgICAgIHZhciBvbGRTdGFydElkeCA9IDAsIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICAgICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgICAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgICAgICB2YXIgb2xkS2V5VG9JZHg7XG4gICAgICAgIHZhciBpZHhJbk9sZDtcbiAgICAgICAgdmFyIGVsbVRvTW92ZTtcbiAgICAgICAgdmFyIGJlZm9yZTtcbiAgICAgICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgICAgICAgIGlmIChvbGRTdGFydFZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIG1pZ2h0IGhhdmUgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvbGRFbmRWbm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXdTdGFydFZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXdFbmRWbm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgICAgICBhcGkuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGFwaS5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgICAgICBhcGkuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZEtleVRvSWR4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlkeEluT2xkID0gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldO1xuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkge1xuICAgICAgICAgICAgICAgICAgICBhcGkuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSksIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWxtVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxtVG9Nb3ZlLnNlbCAhPT0gbmV3U3RhcnRWbm9kZS5zZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hWbm9kZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgZWxtVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCB8fCBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgICAgICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgICAgICAgICAgIGJlZm9yZSA9IG5ld0NoW25ld0VuZElkeCArIDFdID09IG51bGwgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgICAgICAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIGJlZm9yZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgICAgICB2YXIgaSwgaG9vaztcbiAgICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhKSAmJiBpc0RlZihob29rID0gaS5ob29rKSAmJiBpc0RlZihpID0gaG9vay5wcmVwYXRjaCkpIHtcbiAgICAgICAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh2bm9kZS5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTtcbiAgICAgICAgICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7XG4gICAgICAgICAgICBpZiAoaXNEZWYoaSkgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSlcbiAgICAgICAgICAgICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZENoICE9PSBjaClcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpXG4gICAgICAgICAgICAgICAgICAgIGFwaS5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgICAgICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZVZub2RlcyhlbG0sIG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgYXBpLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgICAgICAgIGFwaS5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihob29rKSAmJiBpc0RlZihpID0gaG9vay5wb3N0cGF0Y2gpKSB7XG4gICAgICAgICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoKG9sZFZub2RlLCB2bm9kZSkge1xuICAgICAgICB2YXIgaSwgZWxtLCBwYXJlbnQ7XG4gICAgICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5wcmUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBjYnMucHJlW2ldKCk7XG4gICAgICAgIGlmICghaXNWbm9kZShvbGRWbm9kZSkpIHtcbiAgICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgICAgICBwYXJlbnQgPSBhcGkucGFyZW50Tm9kZShlbG0pO1xuICAgICAgICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgaWYgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGFwaS5pbnNlcnRCZWZvcmUocGFyZW50LCB2bm9kZS5lbG0sIGFwaS5uZXh0U2libGluZyhlbG0pKTtcbiAgICAgICAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50LCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWVbaV0uZGF0YS5ob29rLmluc2VydChpbnNlcnRlZFZub2RlUXVldWVbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucG9zdC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGNicy5wb3N0W2ldKCk7XG4gICAgICAgIHJldHVybiB2bm9kZTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c25hYmJkb20uanMubWFwIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG52YXIgSURFTlQgPSAnW1xcXFx3LV0rJztcbnZhciBTUEFDRSA9ICdbIFxcdF0qJztcbnZhciBWQUxVRSA9IFwiW15cXFxcXV0rXCI7XG52YXIgQ0xBU1MgPSBcIig/OlxcXFwuXCIgKyBJREVOVCArIFwiKVwiO1xudmFyIElEID0gXCIoPzojXCIgKyBJREVOVCArIFwiKVwiO1xudmFyIE9QID0gXCIoPzo9fFxcXFwkPXxcXFxcXj18XFxcXCo9fH49fFxcXFx8PSlcIjtcbnZhciBBVFRSID0gXCIoPzpcXFxcW1wiICsgU1BBQ0UgKyBJREVOVCArIFNQQUNFICsgXCIoPzpcIiArIE9QICsgU1BBQ0UgKyBWQUxVRSArIFNQQUNFICsgXCIpP1xcXFxdKVwiO1xudmFyIFNVQlRSRUUgPSBcIig/OlsgXFx0XSspXCI7XG52YXIgQ0hJTEQgPSBcIig/OlwiICsgU1BBQ0UgKyBcIig+KVwiICsgU1BBQ0UgKyBcIilcIjtcbnZhciBORVhUX1NJQkxJTkcgPSBcIig/OlwiICsgU1BBQ0UgKyBcIihcXFxcKylcIiArIFNQQUNFICsgXCIpXCI7XG52YXIgU0lCTElORyA9IFwiKD86XCIgKyBTUEFDRSArIFwiKH4pXCIgKyBTUEFDRSArIFwiKVwiO1xudmFyIENPTUJJTkFUT1IgPSBcIig/OlwiICsgU1VCVFJFRSArIFwifFwiICsgQ0hJTEQgKyBcInxcIiArIE5FWFRfU0lCTElORyArIFwifFwiICsgU0lCTElORyArIFwiKVwiO1xudmFyIENPTlRBSU5TID0gXCJjb250YWluc1xcXFwoXFxcIlteXFxcIl0qXFxcIlxcXFwpXCI7XG52YXIgRk9STVVMQSA9IFwiKD86ZXZlbnxvZGR8XFxcXGQqKD86LT9uKD86XFxcXCtcXFxcZCspPyk/KVwiO1xudmFyIE5USF9DSElMRCA9IFwibnRoLWNoaWxkXFxcXChcIiArIEZPUk1VTEEgKyBcIlxcXFwpXCI7XG52YXIgUFNFVURPID0gXCI6KD86Zmlyc3QtY2hpbGR8bGFzdC1jaGlsZHxcIiArIE5USF9DSElMRCArIFwifGVtcHR5fHJvb3R8XCIgKyBDT05UQUlOUyArIFwiKVwiO1xudmFyIFRBRyA9IFwiKDo/XCIgKyBJREVOVCArIFwiKT9cIjtcbnZhciBUT0tFTlMgPSBDTEFTUyArIFwifFwiICsgSUQgKyBcInxcIiArIEFUVFIgKyBcInxcIiArIFBTRVVETyArIFwifFwiICsgQ09NQklOQVRPUjtcbnZhciBjb21iaW5hdG9yUmVnZXggPSBuZXcgUmVnRXhwKFwiXlwiICsgQ09NQklOQVRPUiArIFwiJFwiKTtcbi8qKlxuICogUGFyc2VzIGEgY3NzIHNlbGVjdG9yIGludG8gYSBub3JtYWxpemVkIG9iamVjdC5cbiAqIEV4cGVjdHMgYSBzZWxlY3RvciBmb3IgYSBzaW5nbGUgZWxlbWVudCBvbmx5LCBubyBgPmAgb3IgdGhlIGxpa2UhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgdmFyIHNlbCA9IHNlbGVjdG9yLnRyaW0oKTtcbiAgICB2YXIgdGFnUmVnZXggPSBuZXcgUmVnRXhwKFRBRywgJ3knKTtcbiAgICB2YXIgdGFnID0gdGFnUmVnZXguZXhlYyhzZWwpWzBdO1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoVE9LRU5TLCAneScpO1xuICAgIHJlZ2V4Lmxhc3RJbmRleCA9IHRhZ1JlZ2V4Lmxhc3RJbmRleDtcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xuICAgIHZhciBuZXh0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgdmFyIGxhc3RDb21iaW5hdG9yID0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IC0xO1xuICAgIHdoaWxlIChyZWdleC5sYXN0SW5kZXggPCBzZWwubGVuZ3RoKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJlZ2V4LmV4ZWMoc2VsKTtcbiAgICAgICAgaWYgKCFtYXRjaCAmJiBsYXN0Q29tYmluYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcnNlIGVycm9yLCBpbnZhbGlkIHNlbGVjdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWF0Y2ggJiYgY29tYmluYXRvclJlZ2V4LnRlc3QobWF0Y2hbMF0pKSB7XG4gICAgICAgICAgICB2YXIgY29tYiA9IGNvbWJpbmF0b3JSZWdleC5leGVjKG1hdGNoWzBdKVswXTtcbiAgICAgICAgICAgIGxhc3RDb21iaW5hdG9yID0gY29tYjtcbiAgICAgICAgICAgIGluZGV4ID0gcmVnZXgubGFzdEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGxhc3RDb21iaW5hdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBuZXh0U2VsZWN0b3IgPSBbXG4gICAgICAgICAgICAgICAgICAgIGdldENvbWJpbmF0b3IobGFzdENvbWJpbmF0b3IpLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZVNlbGVjdG9yKHNlbC5zdWJzdHJpbmcoaW5kZXgpKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXRjaGVzLnB1c2gobWF0Y2hbMF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBjbGFzc0xpc3QgPSBtYXRjaGVzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhcnRzV2l0aCgnLicpOyB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnN1YnN0cmluZygxKTsgfSk7XG4gICAgdmFyIGlkcyA9IG1hdGNoZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnN0YXJ0c1dpdGgoJyMnKTsgfSkubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnN1YnN0cmluZygxKTsgfSk7XG4gICAgaWYgKGlkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZWxlY3Rvciwgb25seSBvbmUgaWQgaXMgYWxsb3dlZCcpO1xuICAgIH1cbiAgICB2YXIgcG9zdHByb2Nlc3NSZWdleCA9IG5ldyBSZWdFeHAoXCIoXCIgKyBJREVOVCArIFwiKVwiICsgU1BBQ0UgKyBcIihcIiArIE9QICsgXCIpP1wiICsgU1BBQ0UgKyBcIihcIiArIFZBTFVFICsgXCIpP1wiKTtcbiAgICB2YXIgYXR0cnMgPSBtYXRjaGVzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhcnRzV2l0aCgnWycpOyB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBwb3N0cHJvY2Vzc1JlZ2V4LmV4ZWMocykuc2xpY2UoMSwgNCk7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBhdHRyID0gX2FbMF0sIG9wID0gX2FbMV0sIHZhbCA9IF9hWzJdO1xuICAgICAgICB2YXIgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSB7fSxcbiAgICAgICAgICAgIF9iW2F0dHJdID0gW2dldE9wKG9wKSwgdmFsID8gcGFyc2VBdHRyVmFsdWUodmFsKSA6IHZhbF0sXG4gICAgICAgICAgICBfYik7XG4gICAgfSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyKSB7IHJldHVybiAoX19hc3NpZ24oe30sIGFjYywgY3VycikpOyB9LCB7fSk7XG4gICAgdmFyIHBzZXVkb3MgPSBtYXRjaGVzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhcnRzV2l0aCgnOicpOyB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBwb3N0UHJvY2Vzc1BzZXVkb3Mocy5zdWJzdHJpbmcoMSkpOyB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWRzWzBdIHx8ICcnLFxuICAgICAgICB0YWc6IHRhZyxcbiAgICAgICAgY2xhc3NMaXN0OiBjbGFzc0xpc3QsXG4gICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJzLFxuICAgICAgICBuZXh0U2VsZWN0b3I6IG5leHRTZWxlY3RvcixcbiAgICAgICAgcHNldWRvczogcHNldWRvc1xuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZUF0dHJWYWx1ZSh2KSB7XG4gICAgaWYgKHYuc3RhcnRzV2l0aCgnXCInKSkge1xuICAgICAgICByZXR1cm4gdi5zbGljZSgxLCAtMSk7XG4gICAgfVxuICAgIGlmICh2ID09PSBcInRydWVcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHYgPT09IFwiZmFsc2VcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBmID0gcGFyc2VGbG9hdCh2KTtcbiAgICBpZiAoaXNOYU4oZikpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIHJldHVybiBmO1xufVxuZnVuY3Rpb24gcG9zdFByb2Nlc3NQc2V1ZG9zKHNlbCkge1xuICAgIGlmIChzZWwgPT09ICdmaXJzdC1jaGlsZCcgfHxcbiAgICAgICAgc2VsID09PSAnbGFzdC1jaGlsZCcgfHxcbiAgICAgICAgc2VsID09PSAncm9vdCcgfHxcbiAgICAgICAgc2VsID09PSAnZW1wdHknKSB7XG4gICAgICAgIHJldHVybiBbc2VsLCB1bmRlZmluZWRdO1xuICAgIH1cbiAgICBpZiAoc2VsLnN0YXJ0c1dpdGgoJ2NvbnRhaW5zJykpIHtcbiAgICAgICAgdmFyIHRleHQgPSBzZWwuc2xpY2UoMTAsIC0yKTtcbiAgICAgICAgcmV0dXJuIFsnY29udGFpbnMnLCB0ZXh0XTtcbiAgICB9XG4gICAgdmFyIGNvbnRlbnQgPSBzZWwuc2xpY2UoMTAsIC0xKTtcbiAgICBpZiAoY29udGVudCA9PT0gJ2V2ZW4nKSB7XG4gICAgICAgIGNvbnRlbnQgPSAnMm4nO1xuICAgIH1cbiAgICBpZiAoY29udGVudCA9PT0gJ29kZCcpIHtcbiAgICAgICAgY29udGVudCA9ICcybisxJztcbiAgICB9XG4gICAgcmV0dXJuIFsnbnRoLWNoaWxkJywgY29udGVudF07XG59XG5mdW5jdGlvbiBnZXRPcChvcCkge1xuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgY2FzZSAnPSc6XG4gICAgICAgICAgICByZXR1cm4gJ2V4YWN0JztcbiAgICAgICAgY2FzZSAnXj0nOlxuICAgICAgICAgICAgcmV0dXJuICdzdGFydHNXaXRoJztcbiAgICAgICAgY2FzZSAnJD0nOlxuICAgICAgICAgICAgcmV0dXJuICdlbmRzV2l0aCc7XG4gICAgICAgIGNhc2UgJyo9JzpcbiAgICAgICAgICAgIHJldHVybiAnY29udGFpbnMnO1xuICAgICAgICBjYXNlICd+PSc6XG4gICAgICAgICAgICByZXR1cm4gJ3doaXRlc3BhY2UnO1xuICAgICAgICBjYXNlICd8PSc6XG4gICAgICAgICAgICByZXR1cm4gJ2Rhc2gnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdoYXMnO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldENvbWJpbmF0b3IoY29tYikge1xuICAgIHN3aXRjaCAoY29tYi50cmltKCkpIHtcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICByZXR1cm4gJ2NoaWxkJztcbiAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICByZXR1cm4gJ25leHRTaWJsaW5nJztcbiAgICAgICAgY2FzZSAnfic6XG4gICAgICAgICAgICByZXR1cm4gJ3NpYmxpbmcnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdzdWJ0cmVlJztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RvclBhcnNlci5qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZVNlbGVjdG9yIH0gZnJvbSAnLi9zZWxlY3RvclBhcnNlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWF0Y2hlcyhvcHRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1hdGNoZXMoc2VsZWN0b3IsIG5vZGUpIHtcbiAgICAgICAgdmFyIF9hID0gdHlwZW9mIHNlbGVjdG9yID09PSAnb2JqZWN0JyA/IHNlbGVjdG9yIDogcGFyc2VTZWxlY3RvcihzZWxlY3RvciksIHRhZyA9IF9hLnRhZywgaWQgPSBfYS5pZCwgY2xhc3NMaXN0ID0gX2EuY2xhc3NMaXN0LCBhdHRyaWJ1dGVzID0gX2EuYXR0cmlidXRlcywgbmV4dFNlbGVjdG9yID0gX2EubmV4dFNlbGVjdG9yLCBwc2V1ZG9zID0gX2EucHNldWRvcztcbiAgICAgICAgaWYgKG5leHRTZWxlY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hdGNoZXMgY2FuIG9ubHkgcHJvY2VzcyBzZWxlY3RvcnMgdGhhdCB0YXJnZXQgYSBzaW5nbGUgZWxlbWVudCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgJiYgdGFnLnRvTG93ZXJDYXNlKCkgIT09IG9wdHMudGFnKG5vZGUpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWQgJiYgaWQgIT09IG9wdHMuaWQobm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xhc3NlcyA9IG9wdHMuY2xhc3NOYW1lKG5vZGUpLnNwbGl0KCcgJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3NMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY2xhc3Nlcy5pbmRleE9mKGNsYXNzTGlzdFtpXSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB2YXIgYXR0ciA9IG9wdHMuYXR0cihub2RlLCBrZXkpO1xuICAgICAgICAgICAgdmFyIHQgPSBhdHRyaWJ1dGVzW2tleV1bMF07XG4gICAgICAgICAgICB2YXIgdiA9IGF0dHJpYnV0ZXNba2V5XVsxXTtcbiAgICAgICAgICAgIGlmIChhdHRyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodCA9PT0gJ2hhcycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0ID09PSAnZXhhY3QnICYmIGF0dHIgIT09IHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0ICE9PSAnZXhhY3QnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FsbCBub24tc3RyaW5nIHZhbHVlcyBoYXZlIHRvIGJlIGFuIGV4YWN0IG1hdGNoJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0ID09PSAnc3RhcnRzV2l0aCcgJiYgIWF0dHIuc3RhcnRzV2l0aCh2KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0ID09PSAnZW5kc1dpdGgnICYmICFhdHRyLmVuZHNXaXRoKHYpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHQgPT09ICdjb250YWlucycgJiYgYXR0ci5pbmRleE9mKHYpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0ID09PSAnd2hpdGVzcGFjZScgJiYgYXR0ci5zcGxpdCgnICcpLmluZGV4T2YodikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHQgPT09ICdkYXNoJyAmJiBhdHRyLnNwbGl0KCctJykuaW5kZXhPZih2KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBzZXVkb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBfYiA9IHBzZXVkb3NbaV0sIHQgPSBfYlswXSwgZGF0YSA9IF9iWzFdO1xuICAgICAgICAgICAgaWYgKHQgPT09ICdjb250YWlucycgJiYgZGF0YSAhPT0gb3B0cy5jb250ZW50cyhub2RlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0ID09PSAnZW1wdHknICYmXG4gICAgICAgICAgICAgICAgKG9wdHMuY29udGVudHMobm9kZSkgfHwgb3B0cy5jaGlsZHJlbihub2RlKS5sZW5ndGggIT09IDApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHQgPT09ICdyb290JyAmJiBvcHRzLnBhcmVudChub2RlKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHQuaW5kZXhPZignY2hpbGQnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdHMucGFyZW50KG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNpYmxpbmdzID0gb3B0cy5jaGlsZHJlbihvcHRzLnBhcmVudChub2RlKSk7XG4gICAgICAgICAgICAgICAgaWYgKHQgPT09ICdmaXJzdC1jaGlsZCcgJiYgc2libGluZ3MuaW5kZXhPZihub2RlKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0ID09PSAnbGFzdC1jaGlsZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgc2libGluZ3MuaW5kZXhPZihub2RlKSAhPT0gc2libGluZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0ID09PSAnbnRoLWNoaWxkJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVnZXggPSAvKFtcXCstXT8pKFxcZCopKG4/KShcXCtcXGQrKT8vO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VSZXN1bHQgPSByZWdleC5leGVjKGRhdGEpLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzaWJsaW5ncy5pbmRleE9mKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcnNlUmVzdWx0WzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZVJlc3VsdFswXSA9ICcrJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgZmFjdG9yID0gcGFyc2VSZXN1bHRbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyc2VJbnQocGFyc2VSZXN1bHRbMF0gKyBwYXJzZVJlc3VsdFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWRkID0gcGFyc2VJbnQocGFyc2VSZXN1bHRbM10gfHwgJzAnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhY3RvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VSZXN1bHRbMl0gPT09ICduJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggJSBmYWN0b3IgIT09IGFkZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFmYWN0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlUmVzdWx0WzJdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKHBhcnNlUmVzdWx0WzBdID09PSAnKycgJiYgaW5kZXggLSBhZGQgPCAwKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJzZVJlc3VsdFswXSA9PT0gJy0nICYmIGluZGV4IC0gYWRkID49IDApKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFwYXJzZVJlc3VsdFsyXSAmJiBmYWN0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICE9PSBmYWN0b3IgLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGNoZXMuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdG9yUGFyc2VyKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuc2VsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0YWdOYW1lOiAnJyxcbiAgICAgICAgICAgIGlkOiAnJyxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJycsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBzZWwgPSBub2RlLnNlbDtcbiAgICB2YXIgaGFzaElkeCA9IHNlbC5pbmRleE9mKCcjJyk7XG4gICAgdmFyIGRvdElkeCA9IHNlbC5pbmRleE9mKCcuJywgaGFzaElkeCk7XG4gICAgdmFyIGhhc2ggPSBoYXNoSWR4ID4gMCA/IGhhc2hJZHggOiBzZWwubGVuZ3RoO1xuICAgIHZhciBkb3QgPSBkb3RJZHggPiAwID8gZG90SWR4IDogc2VsLmxlbmd0aDtcbiAgICB2YXIgdGFnTmFtZSA9IGhhc2hJZHggIT09IC0xIHx8IGRvdElkeCAhPT0gLTEgP1xuICAgICAgICBzZWwuc2xpY2UoMCwgTWF0aC5taW4oaGFzaCwgZG90KSkgOlxuICAgICAgICBzZWw7XG4gICAgdmFyIGlkID0gaGFzaCA8IGRvdCA/IHNlbC5zbGljZShoYXNoICsgMSwgZG90KSA6IHZvaWQgMDtcbiAgICB2YXIgY2xhc3NOYW1lID0gZG90SWR4ID4gMCA/IHNlbC5zbGljZShkb3QgKyAxKS5yZXBsYWNlKC9cXC4vZywgJyAnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RvclBhcnNlci5qcy5tYXAiLCJpbXBvcnQgeyBzZWxlY3RvclBhcnNlciB9IGZyb20gJy4vc2VsZWN0b3JQYXJzZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNsYXNzTmFtZUZyb21WTm9kZSh2Tm9kZSkge1xuICAgIHZhciBfYSA9IHNlbGVjdG9yUGFyc2VyKHZOb2RlKS5jbGFzc05hbWUsIGNuID0gX2EgPT09IHZvaWQgMCA/ICcnIDogX2E7XG4gICAgaWYgKCF2Tm9kZS5kYXRhKSB7XG4gICAgICAgIHJldHVybiBjbjtcbiAgICB9XG4gICAgdmFyIF9iID0gdk5vZGUuZGF0YSwgZGF0YUNsYXNzID0gX2IuY2xhc3MsIHByb3BzID0gX2IucHJvcHM7XG4gICAgaWYgKGRhdGFDbGFzcykge1xuICAgICAgICB2YXIgYyA9IE9iamVjdC5rZXlzKGRhdGFDbGFzcylcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGNsKSB7IHJldHVybiBkYXRhQ2xhc3NbY2xdOyB9KTtcbiAgICAgICAgY24gKz0gXCIgXCIgKyBjLmpvaW4oXCIgXCIpO1xuICAgIH1cbiAgICBpZiAocHJvcHMgJiYgcHJvcHMuY2xhc3NOYW1lKSB7XG4gICAgICAgIGNuICs9IFwiIFwiICsgcHJvcHMuY2xhc3NOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gY24gJiYgY24udHJpbSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xhc3NOYW1lRnJvbVZOb2RlLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVF1ZXJ5U2VsZWN0b3IsIGNyZWF0ZU1hdGNoZXMgfSBmcm9tICd0cmVlLXNlbGVjdG9yJztcbmltcG9ydCB7IHNlbGVjdG9yUGFyc2VyIH0gZnJvbSAnLi9zZWxlY3RvclBhcnNlcic7XG5pbXBvcnQgeyBjbGFzc05hbWVGcm9tVk5vZGUgfSBmcm9tICcuL2NsYXNzTmFtZUZyb21WTm9kZSc7XG5pbXBvcnQgcGFyZW50U3ltYm9sIGZyb20gJy4vcGFyZW50LXN5bWJvbCc7XG52YXIgb3B0aW9ucyA9IHtcbiAgICB0YWc6IGZ1bmN0aW9uICh2Tm9kZSkgeyByZXR1cm4gc2VsZWN0b3JQYXJzZXIodk5vZGUpLnRhZ05hbWU7IH0sXG4gICAgY2xhc3NOYW1lOiBmdW5jdGlvbiAodk5vZGUpIHsgcmV0dXJuIGNsYXNzTmFtZUZyb21WTm9kZSh2Tm9kZSk7IH0sXG4gICAgaWQ6IGZ1bmN0aW9uICh2Tm9kZSkgeyByZXR1cm4gc2VsZWN0b3JQYXJzZXIodk5vZGUpLmlkIHx8ICcnOyB9LFxuICAgIGNoaWxkcmVuOiBmdW5jdGlvbiAodk5vZGUpIHsgcmV0dXJuIHZOb2RlLmNoaWxkcmVuIHx8IFtdOyB9LFxuICAgIHBhcmVudDogZnVuY3Rpb24gKHZOb2RlKSB7IHJldHVybiB2Tm9kZS5kYXRhW3BhcmVudFN5bWJvbF0gfHwgdk5vZGU7IH0sXG4gICAgY29udGVudHM6IGZ1bmN0aW9uICh2Tm9kZSkgeyByZXR1cm4gdk5vZGUudGV4dCB8fCAnJzsgfSxcbiAgICBhdHRyOiBmdW5jdGlvbiAodk5vZGUsIGF0dHIpIHtcbiAgICAgICAgaWYgKHZOb2RlLmRhdGEpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHZOb2RlLmRhdGEsIF9iID0gX2EuYXR0cnMsIGF0dHJzID0gX2IgPT09IHZvaWQgMCA/IHt9IDogX2IsIF9jID0gX2EucHJvcHMsIHByb3BzID0gX2MgPT09IHZvaWQgMCA/IHt9IDogX2MsIF9kID0gX2EuZGF0YXNldCwgZGF0YXNldCA9IF9kID09PSB2b2lkIDAgPyB7fSA6IF9kO1xuICAgICAgICAgICAgaWYgKGF0dHJzW2F0dHJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJzW2F0dHJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3BzW2F0dHJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzW2F0dHJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF0dHIuaW5kZXhPZignZGF0YS0nKSA9PT0gMCAmJiBkYXRhc2V0W2F0dHIuc2xpY2UoNSldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXRbYXR0ci5zbGljZSg1KV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxufTtcbnZhciBtYXRjaGVzID0gY3JlYXRlTWF0Y2hlcyhvcHRpb25zKTtcbmZ1bmN0aW9uIGN1c3RvbU1hdGNoZXMoc2VsLCB2bm9kZSkge1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgc2VsZWN0b3IgPSBtYXRjaGVzLmJpbmQobnVsbCwgc2VsKTtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmZuKSB7XG4gICAgICAgIHZhciBuID0gdm9pZCAwO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhLmFyZ3MpKSB7XG4gICAgICAgICAgICBuID0gZGF0YS5mbi5hcHBseShudWxsLCBkYXRhLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEuYXJncykge1xuICAgICAgICAgICAgbiA9IGRhdGEuZm4uY2FsbChudWxsLCBkYXRhLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbiA9IGRhdGEuZm4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZWN0b3IobikgPyBuIDogZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzZWxlY3Rvcih2bm9kZSk7XG59XG5leHBvcnQgdmFyIHF1ZXJ5U2VsZWN0b3IgPSBjcmVhdGVRdWVyeVNlbGVjdG9yKG9wdGlvbnMsIGN1c3RvbU1hdGNoZXMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnkuanMubWFwIiwiaW1wb3J0IHsgcGFyc2VTZWxlY3RvciB9IGZyb20gJy4vc2VsZWN0b3JQYXJzZXInO1xuaW1wb3J0IHsgY3JlYXRlTWF0Y2hlcyB9IGZyb20gJy4vbWF0Y2hlcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUXVlcnlTZWxlY3RvcihvcHRpb25zLCBtYXRjaGVzKSB7XG4gICAgdmFyIF9tYXRjaGVzID0gbWF0Y2hlcyB8fCBjcmVhdGVNYXRjaGVzKG9wdGlvbnMpO1xuICAgIGZ1bmN0aW9uIGZpbmRTdWJ0cmVlKHNlbGVjdG9yLCBkZXB0aCwgbm9kZSkge1xuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IF9tYXRjaGVzKHNlbGVjdG9yLCBub2RlKTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBuID8gKHR5cGVvZiBuID09PSAnb2JqZWN0JyA/IFtuXSA6IFtub2RlXSkgOiBbXTtcbiAgICAgICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGRNYXRjaGVkID0gb3B0aW9uc1xuICAgICAgICAgICAgLmNoaWxkcmVuKG5vZGUpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiB0eXBlb2YgYyAhPT0gJ3N0cmluZyc7IH0pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBmaW5kU3VidHJlZShzZWxlY3RvciwgZGVwdGggLSAxLCBjKTsgfSlcbiAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VycikgeyByZXR1cm4gYWNjLmNvbmNhdChjdXJyKTsgfSwgW10pO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZC5jb25jYXQoY2hpbGRNYXRjaGVkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluZFNpYmxpbmcoc2VsZWN0b3IsIG5leHQsIG5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlIHx8IG9wdGlvbnMucGFyZW50KG5vZGUpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICB2YXIgc2libGluZ3MgPSBvcHRpb25zLmNoaWxkcmVuKG9wdGlvbnMucGFyZW50KG5vZGUpKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHNpYmxpbmdzLmluZGV4T2Yobm9kZSkgKyAxOyBpIDwgc2libGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2libGluZ3NbaV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbiA9IF9tYXRjaGVzKHNlbGVjdG9yLCBzaWJsaW5nc1tpXSk7XG4gICAgICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHNpYmxpbmdzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcXVlcnlTZWxlY3RvcihzZWxlY3Rvciwgbm9kZSkge1xuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsID0gdHlwZW9mIHNlbGVjdG9yID09PSAnb2JqZWN0JyA/IHNlbGVjdG9yIDogcGFyc2VTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIHZhciByZXN1bHRzID0gW25vZGVdO1xuICAgICAgICB2YXIgY3VycmVudFNlbGVjdG9yID0gc2VsO1xuICAgICAgICB2YXIgY3VycmVudENvbWJpbmF0b3IgPSAnc3VidHJlZSc7XG4gICAgICAgIHZhciB0YWlsID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhaWwgPSBjdXJyZW50U2VsZWN0b3IubmV4dFNlbGVjdG9yO1xuICAgICAgICAgICAgY3VycmVudFNlbGVjdG9yLm5leHRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChjdXJyZW50Q29tYmluYXRvciA9PT0gJ3N1YnRyZWUnIHx8XG4gICAgICAgICAgICAgICAgY3VycmVudENvbWJpbmF0b3IgPT09ICdjaGlsZCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVwdGhfMSA9IGN1cnJlbnRDb21iaW5hdG9yID09PSAnc3VidHJlZScgPyBJbmZpbml0eSA6IDE7XG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobikgeyByZXR1cm4gZmluZFN1YnRyZWUoY3VycmVudFNlbGVjdG9yLCBkZXB0aF8xLCBuKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyKSB7IHJldHVybiBhY2MuY29uY2F0KGN1cnIpOyB9LCBbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dF8xID0gY3VycmVudENvbWJpbmF0b3IgPT09ICduZXh0U2libGluZyc7XG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobikgeyByZXR1cm4gZmluZFNpYmxpbmcoY3VycmVudFNlbGVjdG9yLCBuZXh0XzEsIG4pOyB9KVxuICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHsgcmV0dXJuIGFjYy5jb25jYXQoY3Vycik7IH0sIFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YWlsKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFNlbGVjdG9yID0gdGFpbFsxXTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29tYmluYXRvciA9IHRhaWxbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIF9sb29wXzEoKTtcbiAgICAgICAgfSB3aGlsZSAodGFpbCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5U2VsZWN0b3IuanMubWFwIiwiaW1wb3J0IHsgcXVlcnlTZWxlY3RvciB9IGZyb20gJy4vcXVlcnknO1xuaW1wb3J0IHBhcmVudFN5bWJvbCBmcm9tICcuL3BhcmVudC1zeW1ib2wnO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRNYXRjaGVzKGNzc1NlbGVjdG9yLCB2Tm9kZSkge1xuICAgIHRyYXZlcnNlVk5vZGUodk5vZGUsIGFkZFBhcmVudCk7IC8vIGFkZCBtYXBwaW5nIHRvIHRoZSBwYXJlbnQgc2VsZWN0b3JQYXJzZXJcbiAgICByZXR1cm4gcXVlcnlTZWxlY3Rvcihjc3NTZWxlY3Rvciwgdk5vZGUpO1xufVxuZnVuY3Rpb24gdHJhdmVyc2VWTm9kZSh2Tm9kZSwgZikge1xuICAgIGZ1bmN0aW9uIHJlY3Vyc2UoY3VycmVudE5vZGUsIGlzUGFyZW50LCBwYXJlbnRWTm9kZSkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gY3VycmVudE5vZGUuY2hpbGRyZW4gJiYgY3VycmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoIHx8IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnROb2RlLmNoaWxkcmVuO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuW2ldICYmIHR5cGVvZiBjaGlsZHJlbltpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICByZWN1cnNlKGNoaWxkLCBmYWxzZSwgY3VycmVudE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGYoY3VycmVudE5vZGUsIGlzUGFyZW50LCBpc1BhcmVudCA/IHZvaWQgMCA6IHBhcmVudFZOb2RlKTtcbiAgICB9XG4gICAgcmVjdXJzZSh2Tm9kZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBhZGRQYXJlbnQodk5vZGUsIGlzUGFyZW50LCBwYXJlbnQpIHtcbiAgICBpZiAoaXNQYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKCF2Tm9kZS5kYXRhKSB7XG4gICAgICAgIHZOb2RlLmRhdGEgPSB7fTtcbiAgICB9XG4gICAgaWYgKCF2Tm9kZS5kYXRhW3BhcmVudFN5bWJvbF0pIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZOb2RlLmRhdGEsIHBhcmVudFN5bWJvbCwge1xuICAgICAgICAgICAgdmFsdWU6IHBhcmVudCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZE1hdGNoZXMuanMubWFwIiwiaW1wb3J0IHsgY3VycnkyIH0gZnJvbSAnLi9jdXJyeTInO1xuaW1wb3J0IHsgZmluZE1hdGNoZXMgfSBmcm9tICcuL2ZpbmRNYXRjaGVzJztcbmV4cG9ydCB2YXIgc2VsZWN0ID0gY3VycnkyKGZpbmRNYXRjaGVzKTtcbmV4cG9ydCB7IHNlbGVjdG9yUGFyc2VyIH0gZnJvbSAnLi9zZWxlY3RvclBhcnNlcic7XG5leHBvcnQgeyBjbGFzc05hbWVGcm9tVk5vZGUgfSBmcm9tICcuL2NsYXNzTmFtZUZyb21WTm9kZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyB2bm9kZSBhcyB2bm9kZUZuIH0gZnJvbSAnc25hYmJkb20vdm5vZGUnO1xuaW1wb3J0IHsgaCB9IGZyb20gJ3NuYWJiZG9tL2gnO1xuaW1wb3J0IHsgY2xhc3NOYW1lRnJvbVZOb2RlLCBzZWxlY3RvclBhcnNlciB9IGZyb20gJ3NuYWJiZG9tLXNlbGVjdG9yJztcbmltcG9ydCB7IGlzRG9jRnJhZyB9IGZyb20gJy4vdXRpbHMnO1xudmFyIFZOb2RlV3JhcHBlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWTm9kZVdyYXBwZXIocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IHJvb3RFbGVtZW50O1xuICAgIH1cbiAgICBWTm9kZVdyYXBwZXIucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAodm5vZGUpIHtcbiAgICAgICAgaWYgKGlzRG9jRnJhZyh0aGlzLnJvb3RFbGVtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JhcERvY0ZyYWcodm5vZGUgPT09IG51bGwgPyBbXSA6IFt2bm9kZV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2bm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JhcChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gc2VsZWN0b3JQYXJzZXIodm5vZGUpLCBzZWxUYWdOYW1lID0gX2EudGFnTmFtZSwgc2VsSWQgPSBfYS5pZDtcbiAgICAgICAgdmFyIHZOb2RlQ2xhc3NOYW1lID0gY2xhc3NOYW1lRnJvbVZOb2RlKHZub2RlKTtcbiAgICAgICAgdmFyIHZOb2RlRGF0YSA9IHZub2RlLmRhdGEgfHwge307XG4gICAgICAgIHZhciB2Tm9kZURhdGFQcm9wcyA9IHZOb2RlRGF0YS5wcm9wcyB8fCB7fTtcbiAgICAgICAgdmFyIF9iID0gdk5vZGVEYXRhUHJvcHMuaWQsIHZOb2RlSWQgPSBfYiA9PT0gdm9pZCAwID8gc2VsSWQgOiBfYjtcbiAgICAgICAgdmFyIGlzVk5vZGVBbmRSb290RWxlbWVudElkZW50aWNhbCA9IHR5cGVvZiB2Tm9kZUlkID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgdk5vZGVJZC50b1VwcGVyQ2FzZSgpID09PSB0aGlzLnJvb3RFbGVtZW50LmlkLnRvVXBwZXJDYXNlKCkgJiZcbiAgICAgICAgICAgIHNlbFRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gdGhpcy5yb290RWxlbWVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgJiZcbiAgICAgICAgICAgIHZOb2RlQ2xhc3NOYW1lLnRvVXBwZXJDYXNlKCkgPT09IHRoaXMucm9vdEVsZW1lbnQuY2xhc3NOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmIChpc1ZOb2RlQW5kUm9vdEVsZW1lbnRJZGVudGljYWwpIHtcbiAgICAgICAgICAgIHJldHVybiB2bm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy53cmFwKFt2bm9kZV0pO1xuICAgIH07XG4gICAgVk5vZGVXcmFwcGVyLnByb3RvdHlwZS53cmFwRG9jRnJhZyA9IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gdm5vZGVGbignJywgeyBpc29sYXRlOiBbXSB9LCBjaGlsZHJlbiwgdW5kZWZpbmVkLCB0aGlzXG4gICAgICAgICAgICAucm9vdEVsZW1lbnQpO1xuICAgIH07XG4gICAgVk5vZGVXcmFwcGVyLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucm9vdEVsZW1lbnQsIHRhZ05hbWUgPSBfYS50YWdOYW1lLCBpZCA9IF9hLmlkLCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWU7XG4gICAgICAgIHZhciBzZWxJZCA9IGlkID8gXCIjXCIgKyBpZCA6ICcnO1xuICAgICAgICB2YXIgc2VsQ2xhc3MgPSBjbGFzc05hbWUgPyBcIi5cIiArIGNsYXNzTmFtZS5zcGxpdChcIiBcIikuam9pbihcIi5cIikgOiAnJztcbiAgICAgICAgdmFyIHZub2RlID0gaChcIlwiICsgdGFnTmFtZS50b0xvd2VyQ2FzZSgpICsgc2VsSWQgKyBzZWxDbGFzcywge30sIGNoaWxkcmVuKTtcbiAgICAgICAgdm5vZGUuZGF0YSA9IHZub2RlLmRhdGEgfHwge307XG4gICAgICAgIHZub2RlLmRhdGEuaXNvbGF0ZSA9IHZub2RlLmRhdGEuaXNvbGF0ZSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH07XG4gICAgcmV0dXJuIFZOb2RlV3JhcHBlcjtcbn0oKSk7XG5leHBvcnQgeyBWTm9kZVdyYXBwZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZOb2RlV3JhcHBlci5qcy5tYXAiLCJpbXBvcnQgQ2xhc3NNb2R1bGUgZnJvbSAnc25hYmJkb20vbW9kdWxlcy9jbGFzcyc7XG5pbXBvcnQgUHJvcHNNb2R1bGUgZnJvbSAnc25hYmJkb20vbW9kdWxlcy9wcm9wcyc7XG5pbXBvcnQgQXR0cnNNb2R1bGUgZnJvbSAnc25hYmJkb20vbW9kdWxlcy9hdHRyaWJ1dGVzJztcbmltcG9ydCBTdHlsZU1vZHVsZSBmcm9tICdzbmFiYmRvbS9tb2R1bGVzL3N0eWxlJztcbmltcG9ydCBEYXRhc2V0TW9kdWxlIGZyb20gJ3NuYWJiZG9tL21vZHVsZXMvZGF0YXNldCc7XG52YXIgbW9kdWxlcyA9IFtcbiAgICBTdHlsZU1vZHVsZSxcbiAgICBDbGFzc01vZHVsZSxcbiAgICBQcm9wc01vZHVsZSxcbiAgICBBdHRyc01vZHVsZSxcbiAgICBEYXRhc2V0TW9kdWxlLFxuXTtcbmV4cG9ydCB7IFN0eWxlTW9kdWxlLCBDbGFzc01vZHVsZSwgUHJvcHNNb2R1bGUsIEF0dHJzTW9kdWxlLCBEYXRhc2V0TW9kdWxlIH07XG5leHBvcnQgZGVmYXVsdCBtb2R1bGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlcy5qcy5tYXAiLCJ2YXIgU3ltYm9sVHJlZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTeW1ib2xUcmVlKG1hcHBlcikge1xuICAgICAgICB0aGlzLm1hcHBlciA9IG1hcHBlcjtcbiAgICAgICAgdGhpcy50cmVlID0gW3VuZGVmaW5lZCwge31dO1xuICAgIH1cbiAgICBTeW1ib2xUcmVlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAocGF0aCwgZWxlbWVudCwgbWF4KSB7XG4gICAgICAgIHZhciBjdXJyID0gdGhpcy50cmVlO1xuICAgICAgICB2YXIgX21heCA9IG1heCAhPT0gdW5kZWZpbmVkID8gbWF4IDogcGF0aC5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX21heDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMubWFwcGVyKHBhdGhbaV0pO1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gY3VyclsxXVtuXTtcbiAgICAgICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBjaGlsZCA9IFt1bmRlZmluZWQsIHt9XTtcbiAgICAgICAgICAgICAgICBjdXJyWzFdW25dID0gY2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyID0gY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VyclswXSA9IGVsZW1lbnQ7XG4gICAgfTtcbiAgICBTeW1ib2xUcmVlLnByb3RvdHlwZS5nZXREZWZhdWx0ID0gZnVuY3Rpb24gKHBhdGgsIG1rRGVmYXVsdEVsZW1lbnQsIG1heCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQocGF0aCwgbWtEZWZhdWx0RWxlbWVudCwgbWF4KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBheWxvYWQgb2YgdGhlIHBhdGhcbiAgICAgKiBJZiBhIGRlZmF1bHQgZWxlbWVudCBjcmVhdG9yIGlzIGdpdmVuLCBpdCB3aWxsIGluc2VydCBpdCBhdCB0aGUgcGF0aFxuICAgICAqL1xuICAgIFN5bWJvbFRyZWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXRoLCBta0RlZmF1bHRFbGVtZW50LCBtYXgpIHtcbiAgICAgICAgdmFyIGN1cnIgPSB0aGlzLnRyZWU7XG4gICAgICAgIHZhciBfbWF4ID0gbWF4ICE9PSB1bmRlZmluZWQgPyBtYXggOiBwYXRoLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfbWF4OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5tYXBwZXIocGF0aFtpXSk7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBjdXJyWzFdW25dO1xuICAgICAgICAgICAgaWYgKCFjaGlsZCkge1xuICAgICAgICAgICAgICAgIGlmIChta0RlZmF1bHRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gW3VuZGVmaW5lZCwge31dO1xuICAgICAgICAgICAgICAgICAgICBjdXJyWzFdW25dID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnIgPSBjaGlsZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWtEZWZhdWx0RWxlbWVudCAmJiAhY3VyclswXSkge1xuICAgICAgICAgICAgY3VyclswXSA9IG1rRGVmYXVsdEVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VyclswXTtcbiAgICB9O1xuICAgIFN5bWJvbFRyZWUucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciBjdXJyID0gdGhpcy50cmVlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBjdXJyWzFdW3RoaXMubWFwcGVyKHBhdGhbaV0pXTtcbiAgICAgICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyID0gY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGN1cnJbMV1bdGhpcy5tYXBwZXIocGF0aFtwYXRoLmxlbmd0aCAtIDFdKV07XG4gICAgfTtcbiAgICByZXR1cm4gU3ltYm9sVHJlZTtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBTeW1ib2xUcmVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ltYm9sVHJlZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0VxdWFsTmFtZXNwYWNlIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgU3ltYm9sVHJlZSBmcm9tICcuL1N5bWJvbFRyZWUnO1xudmFyIElzb2xhdGVNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSXNvbGF0ZU1vZHVsZSgpIHtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2VUcmVlID0gbmV3IFN5bWJvbFRyZWUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguc2NvcGU7IH0pO1xuICAgICAgICB0aGlzLm5hbWVzcGFjZUJ5RWxlbWVudCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy52bm9kZXNCZWluZ1JlbW92ZWQgPSBbXTtcbiAgICB9XG4gICAgSXNvbGF0ZU1vZHVsZS5wcm90b3R5cGUuc2V0RXZlbnREZWxlZ2F0b3IgPSBmdW5jdGlvbiAoZGVsKSB7XG4gICAgICAgIHRoaXMuZXZlbnREZWxlZ2F0b3IgPSBkZWw7XG4gICAgfTtcbiAgICBJc29sYXRlTW9kdWxlLnByb3RvdHlwZS5pbnNlcnRFbGVtZW50ID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgZWwpIHtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2VCeUVsZW1lbnQuc2V0KGVsLCBuYW1lc3BhY2UpO1xuICAgICAgICB0aGlzLm5hbWVzcGFjZVRyZWUuc2V0KG5hbWVzcGFjZSwgZWwpO1xuICAgIH07XG4gICAgSXNvbGF0ZU1vZHVsZS5wcm90b3R5cGUucmVtb3ZlRWxlbWVudCA9IGZ1bmN0aW9uIChlbG0pIHtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2VCeUVsZW1lbnQuZGVsZXRlKGVsbSk7XG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLmdldE5hbWVzcGFjZShlbG0pO1xuICAgICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVzcGFjZVRyZWUuZGVsZXRlKG5hbWVzcGFjZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElzb2xhdGVNb2R1bGUucHJvdG90eXBlLmdldEVsZW1lbnQgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlVHJlZS5nZXQobmFtZXNwYWNlLCB1bmRlZmluZWQsIG1heCk7XG4gICAgfTtcbiAgICBJc29sYXRlTW9kdWxlLnByb3RvdHlwZS5nZXRSb290RWxlbWVudCA9IGZ1bmN0aW9uIChlbG0pIHtcbiAgICAgICAgaWYgKHRoaXMubmFtZXNwYWNlQnlFbGVtZW50LmhhcyhlbG0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxtO1xuICAgICAgICB9XG4gICAgICAgIC8vVE9ETzogQWRkIHF1aWNrLWxydSBvciBzaW1pbGFyIGFzIGFkZGl0aW9uYWwgTygxKSBjYWNoZVxuICAgICAgICB2YXIgY3VyciA9IGVsbTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLm5hbWVzcGFjZUJ5RWxlbWVudC5oYXMoY3VycikpIHtcbiAgICAgICAgICAgIGN1cnIgPSBjdXJyLnBhcmVudE5vZGU7XG4gICAgICAgICAgICBpZiAoIWN1cnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3Vyci50YWdOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHJvb3QgZWxlbWVudCBmb3VuZCwgdGhpcyBzaG91bGQgbm90IGhhcHBlbiBhdCBhbGwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycjtcbiAgICB9O1xuICAgIElzb2xhdGVNb2R1bGUucHJvdG90eXBlLmdldE5hbWVzcGFjZSA9IGZ1bmN0aW9uIChlbG0pIHtcbiAgICAgICAgdmFyIHJvb3RFbGVtZW50ID0gdGhpcy5nZXRSb290RWxlbWVudChlbG0pO1xuICAgICAgICBpZiAoIXJvb3RFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWVzcGFjZUJ5RWxlbWVudC5nZXQocm9vdEVsZW1lbnQpO1xuICAgIH07XG4gICAgSXNvbGF0ZU1vZHVsZS5wcm90b3R5cGUuY3JlYXRlTW9kdWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChlbXB0eVZOb2RlLCB2Tm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbG0gPSB2Tm9kZS5lbG0sIF9hID0gdk5vZGUuZGF0YSwgZGF0YSA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hO1xuICAgICAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBkYXRhLmlzb2xhdGU7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmluc2VydEVsZW1lbnQobmFtZXNwYWNlLCBlbG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChvbGRWTm9kZSwgdk5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkRWxtID0gb2xkVk5vZGUuZWxtLCBfYSA9IG9sZFZOb2RlLmRhdGEsIG9sZERhdGEgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYTtcbiAgICAgICAgICAgICAgICB2YXIgZWxtID0gdk5vZGUuZWxtLCBfYiA9IHZOb2RlLmRhdGEsIGRhdGEgPSBfYiA9PT0gdm9pZCAwID8ge30gOiBfYjtcbiAgICAgICAgICAgICAgICB2YXIgb2xkTmFtZXNwYWNlID0gb2xkRGF0YS5pc29sYXRlO1xuICAgICAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBkYXRhLmlzb2xhdGU7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0VxdWFsTmFtZXNwYWNlKG9sZE5hbWVzcGFjZSwgbmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvbGROYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZUVsZW1lbnQob2xkRWxtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5zZXJ0RWxlbWVudChuYW1lc3BhY2UsIGVsbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICh2Tm9kZSkge1xuICAgICAgICAgICAgICAgIHNlbGYudm5vZGVzQmVpbmdSZW1vdmVkLnB1c2godk5vZGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKHZOb2RlLCBjYikge1xuICAgICAgICAgICAgICAgIHNlbGYudm5vZGVzQmVpbmdSZW1vdmVkLnB1c2godk5vZGUpO1xuICAgICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcG9zdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB2bm9kZXNCZWluZ1JlbW92ZWQgPSBzZWxmLnZub2Rlc0JlaW5nUmVtb3ZlZDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gdm5vZGVzQmVpbmdSZW1vdmVkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2bm9kZSA9IHZub2Rlc0JlaW5nUmVtb3ZlZFtpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHZub2RlLmRhdGEgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB2bm9kZS5kYXRhLmlzb2xhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZW1vdmVFbGVtZW50KG5hbWVzcGFjZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5ldmVudERlbGVnYXRvci5yZW1vdmVFbGVtZW50KHZub2RlLmVsbSwgbmFtZXNwYWNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi52bm9kZXNCZWluZ1JlbW92ZWQgPSBbXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gSXNvbGF0ZU1vZHVsZTtcbn0oKSk7XG5leHBvcnQgeyBJc29sYXRlTW9kdWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Jc29sYXRlTW9kdWxlLmpzLm1hcCIsInZhciBSZW1vdmFsU2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlbW92YWxTZXQoKSB7XG4gICAgICAgIHRoaXMudG9EZWxldGUgPSBbXTtcbiAgICAgICAgdGhpcy50b0RlbGV0ZVNpemUgPSAwO1xuICAgICAgICB0aGlzLl9zZXQgPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIFJlbW92YWxTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHRoaXMuX3NldC5hZGQodCk7XG4gICAgfTtcbiAgICBSZW1vdmFsU2V0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgdGhpcy5fc2V0LmZvckVhY2goZik7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICB9O1xuICAgIFJlbW92YWxTZXQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGlmICh0aGlzLnRvRGVsZXRlLmxlbmd0aCA9PT0gdGhpcy50b0RlbGV0ZVNpemUpIHtcbiAgICAgICAgICAgIHRoaXMudG9EZWxldGUucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9EZWxldGVbdGhpcy50b0RlbGV0ZVNpemVdID0gdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRvRGVsZXRlU2l6ZSsrO1xuICAgIH07XG4gICAgUmVtb3ZhbFNldC5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50b0RlbGV0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCB0aGlzLnRvRGVsZXRlU2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldC5kZWxldGUodGhpcy50b0RlbGV0ZVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRvRGVsZXRlW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9EZWxldGVTaXplID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBSZW1vdmFsU2V0O1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFJlbW92YWxTZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZW1vdmFsU2V0LmpzLm1hcCIsInZhciBQcmlvcml0eVF1ZXVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByaW9yaXR5UXVldWUoKSB7XG4gICAgICAgIHRoaXMuYXJyID0gW107XG4gICAgICAgIHRoaXMucHJpb3MgPSBbXTtcbiAgICB9XG4gICAgUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHQsIHByaW8pIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpb3NbaV0gPCBwcmlvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcnIuc3BsaWNlKGksIDAsIHQpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpb3Muc3BsaWNlKGksIDAsIHByaW8pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFyci5wdXNoKHQpO1xuICAgICAgICB0aGlzLnByaW9zLnB1c2gocHJpbyk7XG4gICAgfTtcbiAgICBQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZih0aGlzLmFycltpXSwgaSwgdGhpcy5hcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcnJbaV0gPT09IHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFyci5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmlvcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUHJpb3JpdHlRdWV1ZTtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBQcmlvcml0eVF1ZXVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJpb3JpdHlRdWV1ZS5qcy5tYXAiLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IHsgU2NvcGVDaGVja2VyIH0gZnJvbSAnLi9TY29wZUNoZWNrZXInO1xuaW1wb3J0IHsgZ2V0U2VsZWN0b3JzLCBtYWtlSW5zZXJ0IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBFbGVtZW50RmluZGVyIH0gZnJvbSAnLi9FbGVtZW50RmluZGVyJztcbmltcG9ydCBTeW1ib2xUcmVlIGZyb20gJy4vU3ltYm9sVHJlZSc7XG5pbXBvcnQgUmVtb3ZhbFNldCBmcm9tICcuL1JlbW92YWxTZXQnO1xuaW1wb3J0IFByaW9yaXR5UXVldWUgZnJvbSAnLi9Qcmlvcml0eVF1ZXVlJztcbmltcG9ydCB7IGZyb21FdmVudCwgcHJldmVudERlZmF1bHRDb25kaXRpb25hbCwgfSBmcm9tICcuL2Zyb21FdmVudCc7XG5leHBvcnQgdmFyIGV2ZW50VHlwZXNUaGF0RG9udEJ1YmJsZSA9IFtcbiAgICBcImJsdXJcIixcbiAgICBcImNhbnBsYXlcIixcbiAgICBcImNhbnBsYXl0aHJvdWdoXCIsXG4gICAgXCJkdXJhdGlvbmNoYW5nZVwiLFxuICAgIFwiZW1wdGllZFwiLFxuICAgIFwiZW5kZWRcIixcbiAgICBcImZvY3VzXCIsXG4gICAgXCJsb2FkXCIsXG4gICAgXCJsb2FkZWRkYXRhXCIsXG4gICAgXCJsb2FkZWRtZXRhZGF0YVwiLFxuICAgIFwibW91c2VlbnRlclwiLFxuICAgIFwibW91c2VsZWF2ZVwiLFxuICAgIFwicGF1c2VcIixcbiAgICBcInBsYXlcIixcbiAgICBcInBsYXlpbmdcIixcbiAgICBcInJhdGVjaGFuZ2VcIixcbiAgICBcInJlc2V0XCIsXG4gICAgXCJzY3JvbGxcIixcbiAgICBcInNlZWtlZFwiLFxuICAgIFwic2Vla2luZ1wiLFxuICAgIFwic3RhbGxlZFwiLFxuICAgIFwic3VibWl0XCIsXG4gICAgXCJzdXNwZW5kXCIsXG4gICAgXCJ0aW1ldXBkYXRlXCIsXG4gICAgXCJ1bmxvYWRcIixcbiAgICBcInZvbHVtZWNoYW5nZVwiLFxuICAgIFwid2FpdGluZ1wiLFxuXTtcbi8qKlxuICogTWFuYWdlcyBcIkV2ZW50IGRlbGVnYXRpb25cIiwgYnkgY29ubmVjdGluZyBhbiBvcmlnaW4gd2l0aCBtdWx0aXBsZVxuICogZGVzdGluYXRpb25zLlxuICpcbiAqIEF0dGFjaGVzIGEgRE9NIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBET00gZWxlbWVudCBjYWxsZWQgdGhlIFwib3JpZ2luXCIsXG4gKiBhbmQgZGVsZWdhdGVzIGV2ZW50cyB0byBcImRlc3RpbmF0aW9uc1wiLCB3aGljaCBhcmUgc3ViamVjdHMgYXMgb3V0cHV0c1xuICogZm9yIHRoZSBET01Tb3VyY2UuIFNpbXVsYXRlcyBidWJibGluZyBvciBjYXB0dXJpbmcsIHdpdGggcmVnYXJkcyB0b1xuICogaXNvbGF0aW9uIGJvdW5kYXJpZXMgdG9vLlxuICovXG52YXIgRXZlbnREZWxlZ2F0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlbnREZWxlZ2F0b3Iocm9vdEVsZW1lbnQkLCBpc29sYXRlTW9kdWxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQkID0gcm9vdEVsZW1lbnQkO1xuICAgICAgICB0aGlzLmlzb2xhdGVNb2R1bGUgPSBpc29sYXRlTW9kdWxlO1xuICAgICAgICB0aGlzLnZpcnR1YWxMaXN0ZW5lcnMgPSBuZXcgU3ltYm9sVHJlZShmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5zY29wZTsgfSk7XG4gICAgICAgIHRoaXMubm9uQnViYmxpbmdMaXN0ZW5lcnNUb0FkZCA9IG5ldyBSZW1vdmFsU2V0KCk7XG4gICAgICAgIHRoaXMudmlydHVhbE5vbkJ1YmJsaW5nTGlzdGVuZXIgPSBbXTtcbiAgICAgICAgdGhpcy5pc29sYXRlTW9kdWxlLnNldEV2ZW50RGVsZWdhdG9yKHRoaXMpO1xuICAgICAgICB0aGlzLmRvbUxpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kb21MaXN0ZW5lcnNUb0FkZCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5ub25CdWJibGluZ0xpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgcm9vdEVsZW1lbnQkLmFkZExpc3RlbmVyKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcmlnaW4gIT09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9yaWdpbiA9IGVsO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRvbUxpc3RlbmVyc1RvQWRkLmZvckVhY2goZnVuY3Rpb24gKHBhc3NpdmUsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zZXR1cERPTUxpc3RlbmVyKHR5cGUsIHBhc3NpdmUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZG9tTGlzdGVuZXJzVG9BZGQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzZXROb25CdWJibGluZ0xpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIF90aGlzLm5vbkJ1YmJsaW5nTGlzdGVuZXJzVG9BZGQuZm9yRWFjaChmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldHVwTm9uQnViYmxpbmdMaXN0ZW5lcihhcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgbmFtZXNwYWNlLCBvcHRpb25zLCBidWJibGVzKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0geHMubmV2ZXIoKTtcbiAgICAgICAgdmFyIHNjb3BlQ2hlY2tlciA9IG5ldyBTY29wZUNoZWNrZXIobmFtZXNwYWNlLCB0aGlzLmlzb2xhdGVNb2R1bGUpO1xuICAgICAgICB2YXIgZGVzdCA9IHRoaXMuaW5zZXJ0TGlzdGVuZXIoc3ViamVjdCwgc2NvcGVDaGVja2VyLCBldmVudFR5cGUsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgc2hvdWxkQnViYmxlID0gYnViYmxlcyA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGV2ZW50VHlwZXNUaGF0RG9udEJ1YmJsZS5pbmRleE9mKGV2ZW50VHlwZSkgPT09IC0xXG4gICAgICAgICAgICA6IGJ1YmJsZXM7XG4gICAgICAgIGlmIChzaG91bGRCdWJibGUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kb21MaXN0ZW5lcnMuaGFzKGV2ZW50VHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHVwRE9NTGlzdGVuZXIoZXZlbnRUeXBlLCAhIW9wdGlvbnMucGFzc2l2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZmluZGVyID0gbmV3IEVsZW1lbnRGaW5kZXIobmFtZXNwYWNlLCB0aGlzLmlzb2xhdGVNb2R1bGUpO1xuICAgICAgICAgICAgdGhpcy5zZXR1cE5vbkJ1YmJsaW5nTGlzdGVuZXIoW2V2ZW50VHlwZSwgZmluZGVyLCBkZXN0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUucmVtb3ZlRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBuYW1lc3BhY2UpIHtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnZpcnR1YWxMaXN0ZW5lcnMuZGVsZXRlKG5hbWVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvUmVtb3ZlID0gW107XG4gICAgICAgIHRoaXMubm9uQnViYmxpbmdMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobWFwLCB0eXBlKSB7XG4gICAgICAgICAgICBpZiAobWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHRvUmVtb3ZlLnB1c2goW3R5cGUsIGVsZW1lbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9SZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLm5vbkJ1YmJsaW5nTGlzdGVuZXJzLmdldCh0b1JlbW92ZVtpXVswXSk7XG4gICAgICAgICAgICBpZiAoIW1hcCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFwLmRlbGV0ZSh0b1JlbW92ZVtpXVsxXSk7XG4gICAgICAgICAgICBpZiAobWFwLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vbkJ1YmJsaW5nTGlzdGVuZXJzLmRlbGV0ZSh0b1JlbW92ZVtpXVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vbkJ1YmJsaW5nTGlzdGVuZXJzLnNldCh0b1JlbW92ZVtpXVswXSwgbWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLmluc2VydExpc3RlbmVyID0gZnVuY3Rpb24gKHN1YmplY3QsIHNjb3BlQ2hlY2tlciwgZXZlbnRUeXBlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciByZWxldmFudFNldHMgPSBbXTtcbiAgICAgICAgdmFyIG4gPSBzY29wZUNoZWNrZXIuX25hbWVzcGFjZTtcbiAgICAgICAgdmFyIG1heCA9IG4ubGVuZ3RoO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICByZWxldmFudFNldHMucHVzaCh0aGlzLmdldFZpcnR1YWxMaXN0ZW5lcnMoZXZlbnRUeXBlLCBuLCB0cnVlLCBtYXgpKTtcbiAgICAgICAgICAgIG1heC0tO1xuICAgICAgICB9IHdoaWxlIChtYXggPj0gMCAmJiBuW21heF0udHlwZSAhPT0gJ3RvdGFsJyk7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IF9fYXNzaWduKHt9LCBvcHRpb25zLCB7IHNjb3BlQ2hlY2tlcjogc2NvcGVDaGVja2VyLFxuICAgICAgICAgICAgc3ViamVjdDogc3ViamVjdCwgYnViYmxlczogISFvcHRpb25zLmJ1YmJsZXMsIHVzZUNhcHR1cmU6ICEhb3B0aW9ucy51c2VDYXB0dXJlLCBwYXNzaXZlOiAhIW9wdGlvbnMucGFzc2l2ZSB9KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWxldmFudFNldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlbGV2YW50U2V0c1tpXS5hZGQoZGVzdGluYXRpb24sIG4ubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdGluYXRpb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc2V0IG9mIGFsbCB2aXJ0dWFsIGxpc3RlbmVycyBpbiB0aGUgc2NvcGUgb2YgdGhlIG5hbWVzcGFjZVxuICAgICAqIFNldCBgZXhhY3RgIHRvIHRydWUgdG8gdHJlYXQgc2liaWxpbmcgaXNvbGF0ZWQgc2NvcGVzIGFzIHRvdGFsIHNjb3Blc1xuICAgICAqL1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5nZXRWaXJ0dWFsTGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgbmFtZXNwYWNlLCBleGFjdCwgbWF4KSB7XG4gICAgICAgIGlmIChleGFjdCA9PT0gdm9pZCAwKSB7IGV4YWN0ID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIF9tYXggPSBtYXggIT09IHVuZGVmaW5lZCA/IG1heCA6IG5hbWVzcGFjZS5sZW5ndGg7XG4gICAgICAgIGlmICghZXhhY3QpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBfbWF4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZXNwYWNlW2ldLnR5cGUgPT09ICd0b3RhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgX21heCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX21heCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hcCA9IHRoaXMudmlydHVhbExpc3RlbmVycy5nZXREZWZhdWx0KG5hbWVzcGFjZSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcCgpOyB9LCBfbWF4KTtcbiAgICAgICAgaWYgKCFtYXAuaGFzKGV2ZW50VHlwZSkpIHtcbiAgICAgICAgICAgIG1hcC5zZXQoZXZlbnRUeXBlLCBuZXcgUHJpb3JpdHlRdWV1ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwLmdldChldmVudFR5cGUpO1xuICAgIH07XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLnNldHVwRE9NTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBwYXNzaXZlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLm9yaWdpbikge1xuICAgICAgICAgICAgdmFyIHN1YiA9IGZyb21FdmVudCh0aGlzLm9yaWdpbiwgZXZlbnRUeXBlLCBmYWxzZSwgZmFsc2UsIHBhc3NpdmUpLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5vbkV2ZW50KGV2ZW50VHlwZSwgZXZlbnQsIHBhc3NpdmUpOyB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5kb21MaXN0ZW5lcnMuc2V0KGV2ZW50VHlwZSwgeyBzdWI6IHN1YiwgcGFzc2l2ZTogcGFzc2l2ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZG9tTGlzdGVuZXJzVG9BZGQuc2V0KGV2ZW50VHlwZSwgcGFzc2l2ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5zZXR1cE5vbkJ1YmJsaW5nTGlzdGVuZXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IGlucHV0WzBdLCBlbGVtZW50RmluZGVyID0gaW5wdXRbMV0sIGRlc3RpbmF0aW9uID0gaW5wdXRbMl07XG4gICAgICAgIGlmICghdGhpcy5vcmlnaW4pIHtcbiAgICAgICAgICAgIHRoaXMubm9uQnViYmxpbmdMaXN0ZW5lcnNUb0FkZC5hZGQoaW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudEZpbmRlci5jYWxsKClbMF07XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLm5vbkJ1YmJsaW5nTGlzdGVuZXJzVG9BZGQuZGVsZXRlKGlucHV0KTtcbiAgICAgICAgICAgIHZhciBzdWIgPSBmcm9tRXZlbnQoZWxlbWVudCwgZXZlbnRUeXBlLCBmYWxzZSwgZmFsc2UsIGRlc3RpbmF0aW9uLnBhc3NpdmUpLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGV2KSB7IHJldHVybiBfdGhpcy5vbkV2ZW50KGV2ZW50VHlwZSwgZXYsICEhZGVzdGluYXRpb24ucGFzc2l2ZSwgZmFsc2UpOyB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm5vbkJ1YmJsaW5nTGlzdGVuZXJzLmhhcyhldmVudFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub25CdWJibGluZ0xpc3RlbmVycy5zZXQoZXZlbnRUeXBlLCBuZXcgTWFwKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hcCA9IHRoaXMubm9uQnViYmxpbmdMaXN0ZW5lcnMuZ2V0KGV2ZW50VHlwZSk7XG4gICAgICAgICAgICBpZiAoIW1hcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcC5zZXQoZWxlbWVudCwgeyBzdWI6IHN1YiwgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ub25CdWJibGluZ0xpc3RlbmVyc1RvQWRkLmFkZChpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5yZXNldEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXRlciA9IHRoaXMuZG9tTGlzdGVuZXJzLmVudHJpZXMoKTtcbiAgICAgICAgdmFyIGN1cnIgPSBpdGVyLm5leHQoKTtcbiAgICAgICAgd2hpbGUgKCFjdXJyLmRvbmUpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGN1cnIudmFsdWUsIHR5cGUgPSBfYVswXSwgX2IgPSBfYVsxXSwgc3ViID0gX2Iuc3ViLCBwYXNzaXZlID0gX2IucGFzc2l2ZTtcbiAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5zZXR1cERPTUxpc3RlbmVyKHR5cGUsIHBhc3NpdmUpO1xuICAgICAgICAgICAgY3VyciA9IGl0ZXIubmV4dCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUucmVzZXROb25CdWJibGluZ0xpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG5ld01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdmFyIGluc2VydCA9IG1ha2VJbnNlcnQobmV3TWFwKTtcbiAgICAgICAgdGhpcy5ub25CdWJibGluZ0xpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChtYXAsIHR5cGUpIHtcbiAgICAgICAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgZWxtKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YiA9IHZhbHVlLnN1YiwgZGVzdGluYXRpb25fMSA9IHZhbHVlLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudEZpbmRlciA9IG5ldyBFbGVtZW50RmluZGVyKGRlc3RpbmF0aW9uXzEuc2NvcGVDaGVja2VyLm5hbWVzcGFjZSwgX3RoaXMuaXNvbGF0ZU1vZHVsZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdFbG0gPSBlbGVtZW50RmluZGVyLmNhbGwoKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1N1YiA9IGZyb21FdmVudChuZXdFbG0sIHR5cGUsIGZhbHNlLCBmYWxzZSwgZGVzdGluYXRpb25fMS5wYXNzaXZlKS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uRXZlbnQodHlwZSwgZXZlbnQsICEhZGVzdGluYXRpb25fMS5wYXNzaXZlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnQodHlwZSwgbmV3RWxtLCB7IHN1YjogbmV3U3ViLCBkZXN0aW5hdGlvbjogZGVzdGluYXRpb25fMSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydCh0eXBlLCBlbG0sIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLm5vbkJ1YmJsaW5nTGlzdGVuZXJzID0gbmV3TWFwO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5wdXROb25CdWJibGluZ0xpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgZWxtLCB1c2VDYXB0dXJlLCBwYXNzaXZlKSB7XG4gICAgICAgIHZhciBtYXAgPSB0aGlzLm5vbkJ1YmJsaW5nTGlzdGVuZXJzLmdldChldmVudFR5cGUpO1xuICAgICAgICBpZiAoIW1hcCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IG1hcC5nZXQoZWxtKTtcbiAgICAgICAgaWYgKGxpc3RlbmVyICYmXG4gICAgICAgICAgICBsaXN0ZW5lci5kZXN0aW5hdGlvbi5wYXNzaXZlID09PSBwYXNzaXZlICYmXG4gICAgICAgICAgICBsaXN0ZW5lci5kZXN0aW5hdGlvbi51c2VDYXB0dXJlID09PSB1c2VDYXB0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLnZpcnR1YWxOb25CdWJibGluZ0xpc3RlbmVyWzBdID0gbGlzdGVuZXIuZGVzdGluYXRpb247XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RGVsZWdhdG9yLnByb3RvdHlwZS5vbkV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgZXZlbnQsIHBhc3NpdmUsIGJ1YmJsZXMpIHtcbiAgICAgICAgaWYgKGJ1YmJsZXMgPT09IHZvaWQgMCkgeyBidWJibGVzID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgY3ljbGVFdmVudCA9IHRoaXMucGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuaXNvbGF0ZU1vZHVsZS5nZXRSb290RWxlbWVudChldmVudC50YXJnZXQpO1xuICAgICAgICBpZiAoYnViYmxlcykge1xuICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMuaXNvbGF0ZU1vZHVsZS5nZXROYW1lc3BhY2UoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuZ2V0VmlydHVhbExpc3RlbmVycyhldmVudFR5cGUsIG5hbWVzcGFjZSk7XG4gICAgICAgICAgICB0aGlzLmJ1YmJsZShldmVudFR5cGUsIGV2ZW50LnRhcmdldCwgcm9vdEVsZW1lbnQsIGN5Y2xlRXZlbnQsIGxpc3RlbmVycywgbmFtZXNwYWNlLCBuYW1lc3BhY2UubGVuZ3RoIC0gMSwgdHJ1ZSwgcGFzc2l2ZSk7XG4gICAgICAgICAgICB0aGlzLmJ1YmJsZShldmVudFR5cGUsIGV2ZW50LnRhcmdldCwgcm9vdEVsZW1lbnQsIGN5Y2xlRXZlbnQsIGxpc3RlbmVycywgbmFtZXNwYWNlLCBuYW1lc3BhY2UubGVuZ3RoIC0gMSwgZmFsc2UsIHBhc3NpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wdXROb25CdWJibGluZ0xpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnQudGFyZ2V0LCB0cnVlLCBwYXNzaXZlKTtcbiAgICAgICAgICAgIHRoaXMuZG9CdWJibGVTdGVwKGV2ZW50VHlwZSwgZXZlbnQudGFyZ2V0LCByb290RWxlbWVudCwgY3ljbGVFdmVudCwgdGhpcy52aXJ0dWFsTm9uQnViYmxpbmdMaXN0ZW5lciwgdHJ1ZSwgcGFzc2l2ZSk7XG4gICAgICAgICAgICB0aGlzLnB1dE5vbkJ1YmJsaW5nTGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudC50YXJnZXQsIGZhbHNlLCBwYXNzaXZlKTtcbiAgICAgICAgICAgIHRoaXMuZG9CdWJibGVTdGVwKGV2ZW50VHlwZSwgZXZlbnQudGFyZ2V0LCByb290RWxlbWVudCwgY3ljbGVFdmVudCwgdGhpcy52aXJ0dWFsTm9uQnViYmxpbmdMaXN0ZW5lciwgZmFsc2UsIHBhc3NpdmUpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IC8vZml4IHJlc2V0IGV2ZW50IChzcGVjJ2VkIGFzIG5vbi1idWJibGluZywgYnV0IGJ1YmJsZXMgaW4gcmVhbGl0eVxuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUuYnViYmxlID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgZWxtLCByb290RWxlbWVudCwgZXZlbnQsIGxpc3RlbmVycywgbmFtZXNwYWNlLCBpbmRleCwgdXNlQ2FwdHVyZSwgcGFzc2l2ZSkge1xuICAgICAgICBpZiAoIXVzZUNhcHR1cmUgJiYgIWV2ZW50LnByb3BhZ2F0aW9uSGFzQmVlblN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZG9CdWJibGVTdGVwKGV2ZW50VHlwZSwgZWxtLCByb290RWxlbWVudCwgZXZlbnQsIGxpc3RlbmVycywgdXNlQ2FwdHVyZSwgcGFzc2l2ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5ld1Jvb3QgPSByb290RWxlbWVudDtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gaW5kZXg7XG4gICAgICAgIGlmIChlbG0gPT09IHJvb3RFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBuYW1lc3BhY2VbaW5kZXhdLnR5cGUgPT09ICdzaWJsaW5nJykge1xuICAgICAgICAgICAgICAgIG5ld1Jvb3QgPSB0aGlzLmlzb2xhdGVNb2R1bGUuZ2V0RWxlbWVudChuYW1lc3BhY2UsIGluZGV4KTtcbiAgICAgICAgICAgICAgICBuZXdJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbG0ucGFyZW50Tm9kZSAmJiBuZXdSb290KSB7XG4gICAgICAgICAgICB0aGlzLmJ1YmJsZShldmVudFR5cGUsIGVsbS5wYXJlbnROb2RlLCBuZXdSb290LCBldmVudCwgbGlzdGVuZXJzLCBuYW1lc3BhY2UsIG5ld0luZGV4LCB1c2VDYXB0dXJlLCBwYXNzaXZlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlQ2FwdHVyZSAmJiAhZXZlbnQucHJvcGFnYXRpb25IYXNCZWVuU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5kb0J1YmJsZVN0ZXAoZXZlbnRUeXBlLCBlbG0sIHJvb3RFbGVtZW50LCBldmVudCwgbGlzdGVuZXJzLCB1c2VDYXB0dXJlLCBwYXNzaXZlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLmRvQnViYmxlU3RlcCA9IGZ1bmN0aW9uIChldmVudFR5cGUsIGVsbSwgcm9vdEVsZW1lbnQsIGV2ZW50LCBsaXN0ZW5lcnMsIHVzZUNhcHR1cmUsIHBhc3NpdmUpIHtcbiAgICAgICAgaWYgKCFyb290RWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXV0YXRlRXZlbnRDdXJyZW50VGFyZ2V0KGV2ZW50LCBlbG0pO1xuICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZGVzdCkge1xuICAgICAgICAgICAgaWYgKGRlc3QucGFzc2l2ZSA9PT0gcGFzc2l2ZSAmJiBkZXN0LnVzZUNhcHR1cmUgPT09IHVzZUNhcHR1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsID0gZ2V0U2VsZWN0b3JzKGRlc3Quc2NvcGVDaGVja2VyLm5hbWVzcGFjZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFldmVudC5wcm9wYWdhdGlvbkhhc0JlZW5TdG9wcGVkICYmXG4gICAgICAgICAgICAgICAgICAgIGRlc3Quc2NvcGVDaGVja2VyLmlzRGlyZWN0bHlJblNjb3BlKGVsbSkgJiZcbiAgICAgICAgICAgICAgICAgICAgKChzZWwgIT09ICcnICYmIGVsbS5tYXRjaGVzKHNlbCkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VsID09PSAnJyAmJiBlbG0gPT09IHJvb3RFbGVtZW50KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHRDb25kaXRpb25hbChldmVudCwgZGVzdC5wcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgICAgIGRlc3Quc3ViamVjdC5zaGFtZWZ1bGx5U2VuZE5leHQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBFdmVudERlbGVnYXRvci5wcm90b3R5cGUucGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgcEV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHBFdmVudC5wcm9wYWdhdGlvbkhhc0JlZW5TdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBvbGRTdG9wUHJvcGFnYXRpb24gPSBwRXZlbnQuc3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICBwRXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgICAgICAgICAgb2xkU3RvcFByb3BhZ2F0aW9uLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnByb3BhZ2F0aW9uSGFzQmVlblN0b3BwZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcEV2ZW50O1xuICAgIH07XG4gICAgRXZlbnREZWxlZ2F0b3IucHJvdG90eXBlLm11dGF0ZUV2ZW50Q3VycmVudFRhcmdldCA9IGZ1bmN0aW9uIChldmVudCwgY3VycmVudFRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgXCJjdXJyZW50VGFyZ2V0XCIsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogY3VycmVudFRhcmdldEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwbGVhc2UgdXNlIGV2ZW50Lm93bmVyVGFyZ2V0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50Lm93bmVyVGFyZ2V0ID0gY3VycmVudFRhcmdldEVsZW1lbnQ7XG4gICAgfTtcbiAgICByZXR1cm4gRXZlbnREZWxlZ2F0b3I7XG59KCkpO1xuZXhwb3J0IHsgRXZlbnREZWxlZ2F0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50RGVsZWdhdG9yLmpzLm1hcCIsImltcG9ydCB7IGluaXQgfSBmcm9tICdzbmFiYmRvbSc7XG5pbXBvcnQgeHMgZnJvbSAneHN0cmVhbSc7XG5pbXBvcnQgY29uY2F0IGZyb20gJ3hzdHJlYW0vZXh0cmEvY29uY2F0JztcbmltcG9ydCBzYW1wbGVDb21iaW5lIGZyb20gJ3hzdHJlYW0vZXh0cmEvc2FtcGxlQ29tYmluZSc7XG5pbXBvcnQgeyBNYWluRE9NU291cmNlIH0gZnJvbSAnLi9NYWluRE9NU291cmNlJztcbmltcG9ydCB7IHRvVk5vZGUgfSBmcm9tICdzbmFiYmRvbS90b3Zub2RlJztcbmltcG9ydCB7IFZOb2RlV3JhcHBlciB9IGZyb20gJy4vVk5vZGVXcmFwcGVyJztcbmltcG9ydCB7IGdldFZhbGlkTm9kZSwgY2hlY2tWYWxpZENvbnRhaW5lciB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGRlZmF1bHRNb2R1bGVzIGZyb20gJy4vbW9kdWxlcyc7XG5pbXBvcnQgeyBJc29sYXRlTW9kdWxlIH0gZnJvbSAnLi9Jc29sYXRlTW9kdWxlJztcbmltcG9ydCB7IEV2ZW50RGVsZWdhdG9yIH0gZnJvbSAnLi9FdmVudERlbGVnYXRvcic7XG5mdW5jdGlvbiBtYWtlRE9NRHJpdmVySW5wdXRHdWFyZChtb2R1bGVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZHVsZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wdGlvbmFsIG1vZHVsZXMgb3B0aW9uIG11c3QgYmUgYW4gYXJyYXkgZm9yIHNuYWJiZG9tIG1vZHVsZXNcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZG9tRHJpdmVySW5wdXRHdWFyZCh2aWV3JCkge1xuICAgIGlmICghdmlldyQgfHxcbiAgICAgICAgdHlwZW9mIHZpZXckLmFkZExpc3RlbmVyICE9PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAgICAgdHlwZW9mIHZpZXckLmZvbGQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgRE9NIGRyaXZlciBmdW5jdGlvbiBleHBlY3RzIGFzIGlucHV0IGEgU3RyZWFtIG9mIFwiICtcbiAgICAgICAgICAgIFwidmlydHVhbCBET00gZWxlbWVudHNcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gZHJvcENvbXBsZXRpb24oaW5wdXQpIHtcbiAgICByZXR1cm4geHMubWVyZ2UoaW5wdXQsIHhzLm5ldmVyKCkpO1xufVxuZnVuY3Rpb24gdW53cmFwRWxlbWVudEZyb21WTm9kZSh2bm9kZSkge1xuICAgIHJldHVybiB2bm9kZS5lbG07XG59XG5mdW5jdGlvbiByZXBvcnRTbmFiYmRvbUVycm9yKGVycikge1xuICAgIChjb25zb2xlLmVycm9yIHx8IGNvbnNvbGUubG9nKShlcnIpO1xufVxuZnVuY3Rpb24gbWFrZURPTVJlYWR5JCgpIHtcbiAgICByZXR1cm4geHMuY3JlYXRlKHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChsaXMpIHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBkb2N1bWVudC5yZWFkeVN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09ICdpbnRlcmFjdGl2ZScgfHwgc3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpcy5uZXh0KG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpcy5uZXh0KG51bGwpO1xuICAgICAgICAgICAgICAgIGxpcy5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBhZGRSb290U2NvcGUodm5vZGUpIHtcbiAgICB2bm9kZS5kYXRhID0gdm5vZGUuZGF0YSB8fCB7fTtcbiAgICB2bm9kZS5kYXRhLmlzb2xhdGUgPSBbXTtcbiAgICByZXR1cm4gdm5vZGU7XG59XG5mdW5jdGlvbiBtYWtlRE9NRHJpdmVyKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGNoZWNrVmFsaWRDb250YWluZXIoY29udGFpbmVyKTtcbiAgICB2YXIgbW9kdWxlcyA9IG9wdGlvbnMubW9kdWxlcyB8fCBkZWZhdWx0TW9kdWxlcztcbiAgICBtYWtlRE9NRHJpdmVySW5wdXRHdWFyZChtb2R1bGVzKTtcbiAgICB2YXIgaXNvbGF0ZU1vZHVsZSA9IG5ldyBJc29sYXRlTW9kdWxlKCk7XG4gICAgdmFyIHBhdGNoID0gaW5pdChbaXNvbGF0ZU1vZHVsZS5jcmVhdGVNb2R1bGUoKV0uY29uY2F0KG1vZHVsZXMpKTtcbiAgICB2YXIgZG9tUmVhZHkkID0gbWFrZURPTVJlYWR5JCgpO1xuICAgIHZhciB2bm9kZVdyYXBwZXI7XG4gICAgdmFyIG11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgdmFyIG11dGF0aW9uQ29uZmlybWVkJCA9IHhzLmNyZWF0ZSh7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiBsaXN0ZW5lci5uZXh0KG51bGwpOyB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbXV0YXRpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gRE9NRHJpdmVyKHZub2RlJCwgbmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSAnRE9NJzsgfVxuICAgICAgICBkb21Ecml2ZXJJbnB1dEd1YXJkKHZub2RlJCk7XG4gICAgICAgIHZhciBzYW5pdGF0aW9uJCA9IHhzLmNyZWF0ZSgpO1xuICAgICAgICB2YXIgZmlyc3RSb290JCA9IGRvbVJlYWR5JC5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGZpcnN0Um9vdCA9IGdldFZhbGlkTm9kZShjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHk7XG4gICAgICAgICAgICB2bm9kZVdyYXBwZXIgPSBuZXcgVk5vZGVXcmFwcGVyKGZpcnN0Um9vdCk7XG4gICAgICAgICAgICByZXR1cm4gZmlyc3RSb290O1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBzdWJzY3JpYmUgdG8gdGhlIHNpbmsgKGkuZS4gdm5vZGUkKSBzeW5jaHJvbm91c2x5IGluc2lkZSB0aGlzXG4gICAgICAgIC8vIGRyaXZlciwgYW5kIG5vdCBsYXRlciBpbiB0aGUgbWFwKCkuZmxhdHRlbigpIGJlY2F1c2UgdGhpcyBzaW5rIGlzIGluXG4gICAgICAgIC8vIHJlYWxpdHkgYSBTaW5rUHJveHkgZnJvbSBAY3ljbGUvcnVuLCBhbmQgd2UgZG9uJ3Qgd2FudCB0byBtaXNzIHRoZSBmaXJzdFxuICAgICAgICAvLyBlbWlzc2lvbiB3aGVuIHRoZSBtYWluKCkgaXMgY29ubmVjdGVkIHRvIHRoZSBkcml2ZXJzLlxuICAgICAgICAvLyBSZWFkIG1vcmUgaW4gaXNzdWUgIzczOS5cbiAgICAgICAgdmFyIHJlbWVtYmVyZWRWTm9kZSQgPSB2bm9kZSQucmVtZW1iZXIoKTtcbiAgICAgICAgcmVtZW1iZXJlZFZOb2RlJC5hZGRMaXN0ZW5lcih7fSk7XG4gICAgICAgIC8vIFRoZSBtdXRhdGlvbiBvYnNlcnZlciBpbnRlcm5hbCB0byBtdXRhdGlvbkNvbmZpcm1lZCQgc2hvdWxkXG4gICAgICAgIC8vIGV4aXN0IGJlZm9yZSBlbGVtZW50QWZ0ZXJQYXRjaCQgY2FsbHMgbXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKClcbiAgICAgICAgbXV0YXRpb25Db25maXJtZWQkLmFkZExpc3RlbmVyKHt9KTtcbiAgICAgICAgdmFyIGVsZW1lbnRBZnRlclBhdGNoJCA9IGZpcnN0Um9vdCRcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGZpcnN0Um9vdCkge1xuICAgICAgICAgICAgcmV0dXJuIHhzXG4gICAgICAgICAgICAgICAgLm1lcmdlKHJlbWVtYmVyZWRWTm9kZSQuZW5kV2hlbihzYW5pdGF0aW9uJCksIHNhbml0YXRpb24kKVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHZub2RlKSB7IHJldHVybiB2bm9kZVdyYXBwZXIuY2FsbCh2bm9kZSk7IH0pXG4gICAgICAgICAgICAgICAgLnN0YXJ0V2l0aChhZGRSb290U2NvcGUodG9WTm9kZShmaXJzdFJvb3QpKSlcbiAgICAgICAgICAgICAgICAuZm9sZChwYXRjaCwgdG9WTm9kZShmaXJzdFJvb3QpKVxuICAgICAgICAgICAgICAgIC5kcm9wKDEpXG4gICAgICAgICAgICAgICAgLm1hcCh1bndyYXBFbGVtZW50RnJvbVZOb2RlKVxuICAgICAgICAgICAgICAgIC5zdGFydFdpdGgoZmlyc3RSb290KVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgbXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKGVsLCB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlckRhdGFPbGRWYWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jb21wb3NlKGRyb3BDb21wbGV0aW9uKTtcbiAgICAgICAgfSAvLyBkb24ndCBjb21wbGV0ZSB0aGlzIHN0cmVhbVxuICAgICAgICApXG4gICAgICAgICAgICAuZmxhdHRlbigpO1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnQkID0gY29uY2F0KGRvbVJlYWR5JCwgbXV0YXRpb25Db25maXJtZWQkKVxuICAgICAgICAgICAgLmVuZFdoZW4oc2FuaXRhdGlvbiQpXG4gICAgICAgICAgICAuY29tcG9zZShzYW1wbGVDb21iaW5lKGVsZW1lbnRBZnRlclBhdGNoJCkpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyclsxXTsgfSlcbiAgICAgICAgICAgIC5yZW1lbWJlcigpO1xuICAgICAgICAvLyBTdGFydCB0aGUgc25hYmJkb20gcGF0Y2hpbmcsIG92ZXIgdGltZVxuICAgICAgICByb290RWxlbWVudCQuYWRkTGlzdGVuZXIoeyBlcnJvcjogcmVwb3J0U25hYmJkb21FcnJvciB9KTtcbiAgICAgICAgdmFyIGRlbGVnYXRvciA9IG5ldyBFdmVudERlbGVnYXRvcihyb290RWxlbWVudCQsIGlzb2xhdGVNb2R1bGUpO1xuICAgICAgICByZXR1cm4gbmV3IE1haW5ET01Tb3VyY2Uocm9vdEVsZW1lbnQkLCBzYW5pdGF0aW9uJCwgW10sIGlzb2xhdGVNb2R1bGUsIGRlbGVnYXRvciwgbmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBET01Ecml2ZXI7XG59XG5leHBvcnQgeyBtYWtlRE9NRHJpdmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWtlRE9NRHJpdmVyLmpzLm1hcCIsImltcG9ydCB4cyBmcm9tICd4c3RyZWFtJztcbmltcG9ydCB7IGFkYXB0IH0gZnJvbSAnQGN5Y2xlL3J1bi9saWIvYWRhcHQnO1xudmFyIFNDT1BFX1BSRUZJWCA9ICdfX18nO1xudmFyIE1vY2tlZERPTVNvdXJjZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2NrZWRET01Tb3VyY2UoX21vY2tDb25maWcpIHtcbiAgICAgICAgdGhpcy5fbW9ja0NvbmZpZyA9IF9tb2NrQ29uZmlnO1xuICAgICAgICBpZiAoX21vY2tDb25maWcuZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRzID0gX21vY2tDb25maWcuZWxlbWVudHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50cyA9IGFkYXB0KHhzLmVtcHR5KCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuZWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSB0aGlzXG4gICAgICAgICAgICAuX2VsZW1lbnRzO1xuICAgICAgICBvdXQuX2lzQ3ljbGVTb3VyY2UgPSAnTW9ja2VkRE9NJztcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIE1vY2tlZERPTVNvdXJjZS5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG91dHB1dCQgPSB0aGlzLmVsZW1lbnRzKClcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFycikgeyByZXR1cm4gYXJyLmxlbmd0aCA+IDA7IH0pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyclswXTsgfSlcbiAgICAgICAgICAgIC5yZW1lbWJlcigpO1xuICAgICAgICB2YXIgb3V0ID0gYWRhcHQob3V0cHV0JCk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9ICdNb2NrZWRET00nO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgTW9ja2VkRE9NU291cmNlLnByb3RvdHlwZS5ldmVudHMgPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBvcHRpb25zLCBidWJibGVzKSB7XG4gICAgICAgIHZhciBzdHJlYW1Gb3JFdmVudFR5cGUgPSB0aGlzLl9tb2NrQ29uZmlnW2V2ZW50VHlwZV07XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdChzdHJlYW1Gb3JFdmVudFR5cGUgfHwgeHMuZW1wdHkoKSk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9ICdNb2NrZWRET00nO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgTW9ja2VkRE9NU291cmNlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIG1vY2tDb25maWdGb3JTZWxlY3RvciA9IHRoaXMuX21vY2tDb25maWdbc2VsZWN0b3JdIHx8IHt9O1xuICAgICAgICByZXR1cm4gbmV3IE1vY2tlZERPTVNvdXJjZShtb2NrQ29uZmlnRm9yU2VsZWN0b3IpO1xuICAgIH07XG4gICAgTW9ja2VkRE9NU291cmNlLnByb3RvdHlwZS5pc29sYXRlU291cmNlID0gZnVuY3Rpb24gKHNvdXJjZSwgc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zZWxlY3QoJy4nICsgU0NPUEVfUFJFRklYICsgc2NvcGUpO1xuICAgIH07XG4gICAgTW9ja2VkRE9NU291cmNlLnByb3RvdHlwZS5pc29sYXRlU2luayA9IGZ1bmN0aW9uIChzaW5rLCBzY29wZSkge1xuICAgICAgICByZXR1cm4gYWRhcHQoeHMuZnJvbU9ic2VydmFibGUoc2luaykubWFwKGZ1bmN0aW9uICh2bm9kZSkge1xuICAgICAgICAgICAgaWYgKHZub2RlLnNlbCAmJiB2bm9kZS5zZWwuaW5kZXhPZihTQ09QRV9QUkVGSVggKyBzY29wZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuc2VsICs9IFwiLlwiICsgU0NPUEVfUFJFRklYICsgc2NvcGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gTW9ja2VkRE9NU291cmNlO1xufSgpKTtcbmV4cG9ydCB7IE1vY2tlZERPTVNvdXJjZSB9O1xuZXhwb3J0IGZ1bmN0aW9uIG1vY2tET01Tb3VyY2UobW9ja0NvbmZpZykge1xuICAgIHJldHVybiBuZXcgTW9ja2VkRE9NU291cmNlKG1vY2tDb25maWcpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9ja0RPTVNvdXJjZS5qcy5tYXAiLCIvLyB0c2xpbnQ6ZGlzYWJsZTptYXgtZmlsZS1saW5lLWNvdW50XG5pbXBvcnQgeyBoIH0gZnJvbSAnc25hYmJkb20vaCc7XG5mdW5jdGlvbiBpc1ZhbGlkU3RyaW5nKHBhcmFtKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBwYXJhbSA9PT0gJ3N0cmluZycgJiYgcGFyYW0ubGVuZ3RoID4gMDtcbn1cbmZ1bmN0aW9uIGlzU2VsZWN0b3IocGFyYW0pIHtcbiAgICByZXR1cm4gaXNWYWxpZFN0cmluZyhwYXJhbSkgJiYgKHBhcmFtWzBdID09PSAnLicgfHwgcGFyYW1bMF0gPT09ICcjJyk7XG59XG5mdW5jdGlvbiBjcmVhdGVUYWdGdW5jdGlvbih0YWdOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh5cGVyc2NyaXB0KGEsIGIsIGMpIHtcbiAgICAgICAgdmFyIGhhc0EgPSB0eXBlb2YgYSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIHZhciBoYXNCID0gdHlwZW9mIGIgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICB2YXIgaGFzQyA9IHR5cGVvZiBjICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgaWYgKGlzU2VsZWN0b3IoYSkpIHtcbiAgICAgICAgICAgIGlmIChoYXNCICYmIGhhc0MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaCh0YWdOYW1lICsgYSwgYiwgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNCKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGgodGFnTmFtZSArIGEsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGgodGFnTmFtZSArIGEsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoYXNDKSB7XG4gICAgICAgICAgICByZXR1cm4gaCh0YWdOYW1lICsgYSwgYiwgYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzQikge1xuICAgICAgICAgICAgcmV0dXJuIGgodGFnTmFtZSwgYSwgYik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzQSkge1xuICAgICAgICAgICAgcmV0dXJuIGgodGFnTmFtZSwgYSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaCh0YWdOYW1lLCB7fSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxudmFyIFNWR19UQUdfTkFNRVMgPSBbXG4gICAgJ2EnLFxuICAgICdhbHRHbHlwaCcsXG4gICAgJ2FsdEdseXBoRGVmJyxcbiAgICAnYWx0R2x5cGhJdGVtJyxcbiAgICAnYW5pbWF0ZScsXG4gICAgJ2FuaW1hdGVDb2xvcicsXG4gICAgJ2FuaW1hdGVNb3Rpb24nLFxuICAgICdhbmltYXRlVHJhbnNmb3JtJyxcbiAgICAnY2lyY2xlJyxcbiAgICAnY2xpcFBhdGgnLFxuICAgICdjb2xvclByb2ZpbGUnLFxuICAgICdjdXJzb3InLFxuICAgICdkZWZzJyxcbiAgICAnZGVzYycsXG4gICAgJ2VsbGlwc2UnLFxuICAgICdmZUJsZW5kJyxcbiAgICAnZmVDb2xvck1hdHJpeCcsXG4gICAgJ2ZlQ29tcG9uZW50VHJhbnNmZXInLFxuICAgICdmZUNvbXBvc2l0ZScsXG4gICAgJ2ZlQ29udm9sdmVNYXRyaXgnLFxuICAgICdmZURpZmZ1c2VMaWdodGluZycsXG4gICAgJ2ZlRGlzcGxhY2VtZW50TWFwJyxcbiAgICAnZmVEaXN0YW50TGlnaHQnLFxuICAgICdmZUZsb29kJyxcbiAgICAnZmVGdW5jQScsXG4gICAgJ2ZlRnVuY0InLFxuICAgICdmZUZ1bmNHJyxcbiAgICAnZmVGdW5jUicsXG4gICAgJ2ZlR2F1c3NpYW5CbHVyJyxcbiAgICAnZmVJbWFnZScsXG4gICAgJ2ZlTWVyZ2UnLFxuICAgICdmZU1lcmdlTm9kZScsXG4gICAgJ2ZlTW9ycGhvbG9neScsXG4gICAgJ2ZlT2Zmc2V0JyxcbiAgICAnZmVQb2ludExpZ2h0JyxcbiAgICAnZmVTcGVjdWxhckxpZ2h0aW5nJyxcbiAgICAnZmVTcG90bGlnaHQnLFxuICAgICdmZVRpbGUnLFxuICAgICdmZVR1cmJ1bGVuY2UnLFxuICAgICdmaWx0ZXInLFxuICAgICdmb250JyxcbiAgICAnZm9udEZhY2UnLFxuICAgICdmb250RmFjZUZvcm1hdCcsXG4gICAgJ2ZvbnRGYWNlTmFtZScsXG4gICAgJ2ZvbnRGYWNlU3JjJyxcbiAgICAnZm9udEZhY2VVcmknLFxuICAgICdmb3JlaWduT2JqZWN0JyxcbiAgICAnZycsXG4gICAgJ2dseXBoJyxcbiAgICAnZ2x5cGhSZWYnLFxuICAgICdoa2VybicsXG4gICAgJ2ltYWdlJyxcbiAgICAnbGluZScsXG4gICAgJ2xpbmVhckdyYWRpZW50JyxcbiAgICAnbWFya2VyJyxcbiAgICAnbWFzaycsXG4gICAgJ21ldGFkYXRhJyxcbiAgICAnbWlzc2luZ0dseXBoJyxcbiAgICAnbXBhdGgnLFxuICAgICdwYXRoJyxcbiAgICAncGF0dGVybicsXG4gICAgJ3BvbHlnb24nLFxuICAgICdwb2x5bGluZScsXG4gICAgJ3JhZGlhbEdyYWRpZW50JyxcbiAgICAncmVjdCcsXG4gICAgJ3NjcmlwdCcsXG4gICAgJ3NldCcsXG4gICAgJ3N0b3AnLFxuICAgICdzdHlsZScsXG4gICAgJ3N3aXRjaCcsXG4gICAgJ3N5bWJvbCcsXG4gICAgJ3RleHQnLFxuICAgICd0ZXh0UGF0aCcsXG4gICAgJ3RpdGxlJyxcbiAgICAndHJlZicsXG4gICAgJ3RzcGFuJyxcbiAgICAndXNlJyxcbiAgICAndmlldycsXG4gICAgJ3ZrZXJuJyxcbl07XG52YXIgc3ZnID0gY3JlYXRlVGFnRnVuY3Rpb24oJ3N2ZycpO1xuU1ZHX1RBR19OQU1FUy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICBzdmdbdGFnXSA9IGNyZWF0ZVRhZ0Z1bmN0aW9uKHRhZyk7XG59KTtcbnZhciBUQUdfTkFNRVMgPSBbXG4gICAgJ2EnLFxuICAgICdhYmJyJyxcbiAgICAnYWRkcmVzcycsXG4gICAgJ2FyZWEnLFxuICAgICdhcnRpY2xlJyxcbiAgICAnYXNpZGUnLFxuICAgICdhdWRpbycsXG4gICAgJ2InLFxuICAgICdiYXNlJyxcbiAgICAnYmRpJyxcbiAgICAnYmRvJyxcbiAgICAnYmxvY2txdW90ZScsXG4gICAgJ2JvZHknLFxuICAgICdicicsXG4gICAgJ2J1dHRvbicsXG4gICAgJ2NhbnZhcycsXG4gICAgJ2NhcHRpb24nLFxuICAgICdjaXRlJyxcbiAgICAnY29kZScsXG4gICAgJ2NvbCcsXG4gICAgJ2NvbGdyb3VwJyxcbiAgICAnZGQnLFxuICAgICdkZWwnLFxuICAgICdkZXRhaWxzJyxcbiAgICAnZGZuJyxcbiAgICAnZGlyJyxcbiAgICAnZGl2JyxcbiAgICAnZGwnLFxuICAgICdkdCcsXG4gICAgJ2VtJyxcbiAgICAnZW1iZWQnLFxuICAgICdmaWVsZHNldCcsXG4gICAgJ2ZpZ2NhcHRpb24nLFxuICAgICdmaWd1cmUnLFxuICAgICdmb290ZXInLFxuICAgICdmb3JtJyxcbiAgICAnaDEnLFxuICAgICdoMicsXG4gICAgJ2gzJyxcbiAgICAnaDQnLFxuICAgICdoNScsXG4gICAgJ2g2JyxcbiAgICAnaGVhZCcsXG4gICAgJ2hlYWRlcicsXG4gICAgJ2hncm91cCcsXG4gICAgJ2hyJyxcbiAgICAnaHRtbCcsXG4gICAgJ2knLFxuICAgICdpZnJhbWUnLFxuICAgICdpbWcnLFxuICAgICdpbnB1dCcsXG4gICAgJ2lucycsXG4gICAgJ2tiZCcsXG4gICAgJ2tleWdlbicsXG4gICAgJ2xhYmVsJyxcbiAgICAnbGVnZW5kJyxcbiAgICAnbGknLFxuICAgICdsaW5rJyxcbiAgICAnbWFpbicsXG4gICAgJ21hcCcsXG4gICAgJ21hcmsnLFxuICAgICdtZW51JyxcbiAgICAnbWV0YScsXG4gICAgJ25hdicsXG4gICAgJ25vc2NyaXB0JyxcbiAgICAnb2JqZWN0JyxcbiAgICAnb2wnLFxuICAgICdvcHRncm91cCcsXG4gICAgJ29wdGlvbicsXG4gICAgJ3AnLFxuICAgICdwYXJhbScsXG4gICAgJ3ByZScsXG4gICAgJ3Byb2dyZXNzJyxcbiAgICAncScsXG4gICAgJ3JwJyxcbiAgICAncnQnLFxuICAgICdydWJ5JyxcbiAgICAncycsXG4gICAgJ3NhbXAnLFxuICAgICdzY3JpcHQnLFxuICAgICdzZWN0aW9uJyxcbiAgICAnc2VsZWN0JyxcbiAgICAnc21hbGwnLFxuICAgICdzb3VyY2UnLFxuICAgICdzcGFuJyxcbiAgICAnc3Ryb25nJyxcbiAgICAnc3R5bGUnLFxuICAgICdzdWInLFxuICAgICdzdW1tYXJ5JyxcbiAgICAnc3VwJyxcbiAgICAndGFibGUnLFxuICAgICd0Ym9keScsXG4gICAgJ3RkJyxcbiAgICAndGV4dGFyZWEnLFxuICAgICd0Zm9vdCcsXG4gICAgJ3RoJyxcbiAgICAndGhlYWQnLFxuICAgICd0aW1lJyxcbiAgICAndGl0bGUnLFxuICAgICd0cicsXG4gICAgJ3UnLFxuICAgICd1bCcsXG4gICAgJ3ZpZGVvJyxcbl07XG52YXIgZXhwb3J0ZWQgPSB7XG4gICAgU1ZHX1RBR19OQU1FUzogU1ZHX1RBR19OQU1FUyxcbiAgICBUQUdfTkFNRVM6IFRBR19OQU1FUyxcbiAgICBzdmc6IHN2ZyxcbiAgICBpc1NlbGVjdG9yOiBpc1NlbGVjdG9yLFxuICAgIGNyZWF0ZVRhZ0Z1bmN0aW9uOiBjcmVhdGVUYWdGdW5jdGlvbixcbn07XG5UQUdfTkFNRVMuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgIGV4cG9ydGVkW25dID0gY3JlYXRlVGFnRnVuY3Rpb24obik7XG59KTtcbmV4cG9ydCBkZWZhdWx0IGV4cG9ydGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHlwZXJzY3JpcHQtaGVscGVycy5qcy5tYXAiLCJleHBvcnQgeyB0aHVuayB9IGZyb20gJy4vdGh1bmsnO1xuZXhwb3J0IHsgTWFpbkRPTVNvdXJjZSB9IGZyb20gJy4vTWFpbkRPTVNvdXJjZSc7XG4vKipcbiAqIEEgZmFjdG9yeSBmb3IgdGhlIERPTSBkcml2ZXIgZnVuY3Rpb24uXG4gKlxuICogVGFrZXMgYSBgY29udGFpbmVyYCB0byBkZWZpbmUgdGhlIHRhcmdldCBvbiB0aGUgZXhpc3RpbmcgRE9NIHdoaWNoIHRoaXNcbiAqIGRyaXZlciB3aWxsIG9wZXJhdGUgb24sIGFuZCBhbiBgb3B0aW9uc2Agb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuIFRoZVxuICogaW5wdXQgdG8gdGhpcyBkcml2ZXIgaXMgYSBzdHJlYW0gb2YgdmlydHVhbCBET00gb2JqZWN0cywgb3IgaW4gb3RoZXIgd29yZHMsXG4gKiBTbmFiYmRvbSBcIlZOb2RlXCIgb2JqZWN0cy4gVGhlIG91dHB1dCBvZiB0aGlzIGRyaXZlciBpcyBhIFwiRE9NU291cmNlXCI6IGFcbiAqIGNvbGxlY3Rpb24gb2YgT2JzZXJ2YWJsZXMgcXVlcmllZCB3aXRoIHRoZSBtZXRob2RzIGBzZWxlY3QoKWAgYW5kIGBldmVudHMoKWAuXG4gKlxuICogKipgRE9NU291cmNlLnNlbGVjdChzZWxlY3RvcilgKiogcmV0dXJucyBhIG5ldyBET01Tb3VyY2Ugd2l0aCBzY29wZVxuICogcmVzdHJpY3RlZCB0byB0aGUgZWxlbWVudChzKSB0aGF0IG1hdGNoZXMgdGhlIENTUyBgc2VsZWN0b3JgIGdpdmVuLiBUbyBzZWxlY3RcbiAqIHRoZSBwYWdlJ3MgYGRvY3VtZW50YCwgdXNlIGAuc2VsZWN0KCdkb2N1bWVudCcpYC4gVG8gc2VsZWN0IHRoZSBjb250YWluZXJcbiAqIGVsZW1lbnQgZm9yIHRoaXMgYXBwLCB1c2UgYC5zZWxlY3QoJzpyb290JylgLlxuICpcbiAqICoqYERPTVNvdXJjZS5ldmVudHMoZXZlbnRUeXBlLCBvcHRpb25zKWAqKiByZXR1cm5zIGEgc3RyZWFtIG9mIGV2ZW50cyBvZlxuICogYGV2ZW50VHlwZWAgaGFwcGVuaW5nIG9uIHRoZSBlbGVtZW50cyB0aGF0IG1hdGNoIHRoZSBjdXJyZW50IERPTVNvdXJjZS4gVGhlXG4gKiBldmVudCBvYmplY3QgY29udGFpbnMgdGhlIGBvd25lclRhcmdldGAgcHJvcGVydHkgdGhhdCBiZWhhdmVzIGV4YWN0bHkgbGlrZVxuICogYGN1cnJlbnRUYXJnZXRgLiBUaGUgcmVhc29uIGZvciB0aGlzIGlzIHRoYXQgc29tZSBicm93c2VycyBkb2Vzbid0IGFsbG93XG4gKiBgY3VycmVudFRhcmdldGAgcHJvcGVydHkgdG8gYmUgbXV0YXRlZCwgaGVuY2UgYSBuZXcgcHJvcGVydHkgaXMgY3JlYXRlZC4gVGhlXG4gKiByZXR1cm5lZCBzdHJlYW0gaXMgYW4gKnhzdHJlYW0qIFN0cmVhbSBpZiB5b3UgdXNlIGBAY3ljbGUveHN0cmVhbS1ydW5gIHRvIHJ1blxuICogeW91ciBhcHAgd2l0aCB0aGlzIGRyaXZlciwgb3IgaXQgaXMgYW4gUnhKUyBPYnNlcnZhYmxlIGlmIHlvdSB1c2VcbiAqIGBAY3ljbGUvcnhqcy1ydW5gLCBhbmQgc28gZm9ydGguXG4gKlxuICogKipvcHRpb25zIGZvciBET01Tb3VyY2UuZXZlbnRzKipcbiAqXG4gKiBUaGUgYG9wdGlvbnNgIHBhcmFtZXRlciBvbiBgRE9NU291cmNlLmV2ZW50cyhldmVudFR5cGUsIG9wdGlvbnMpYCBpcyBhblxuICogKG9wdGlvbmFsKSBvYmplY3Qgd2l0aCB0d28gb3B0aW9uYWwgZmllbGRzOiBgdXNlQ2FwdHVyZWAgYW5kXG4gKiBgcHJldmVudERlZmF1bHRgLlxuICpcbiAqIGB1c2VDYXB0dXJlYCBpcyBieSBkZWZhdWx0IGBmYWxzZWAsIGV4Y2VwdCBpdCBpcyBgdHJ1ZWAgZm9yIGV2ZW50IHR5cGVzIHRoYXRcbiAqIGRvIG5vdCBidWJibGUuIFJlYWQgbW9yZSBoZXJlXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lclxuICogYWJvdXQgdGhlIGB1c2VDYXB0dXJlYCBhbmQgaXRzIHB1cnBvc2UuXG4gKlxuICogYHByZXZlbnREZWZhdWx0YCBpcyBieSBkZWZhdWx0IGBmYWxzZWAsIGFuZCBpbmRpY2F0ZXMgdG8gdGhlIGRyaXZlciB3aGV0aGVyXG4gKiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgc2hvdWxkIGJlIGludm9rZWQuIFRoaXMgb3B0aW9uIGNhbiBiZSBjb25maWd1cmVkIGluXG4gKiB0aHJlZSB3YXlzOlxuICpcbiAqIC0gYHtwcmV2ZW50RGVmYXVsdDogYm9vbGVhbn1gIHRvIGludm9rZSBwcmV2ZW50RGVmYXVsdCBpZiBgdHJ1ZWAsIGFuZCBub3RcbiAqIGludm9rZSBvdGhlcndpc2UuXG4gKiAtIGB7cHJldmVudERlZmF1bHQ6IChldjogRXZlbnQpID0+IGJvb2xlYW59YCBmb3IgY29uZGl0aW9uYWwgaW52b2NhdGlvbi5cbiAqIC0gYHtwcmV2ZW50RGVmYXVsdDogTmVzdGVkT2JqZWN0fWAgdXNlcyBhbiBvYmplY3QgdG8gYmUgcmVjdXJzaXZlbHkgY29tcGFyZWRcbiAqIHRvIHRoZSBgRXZlbnRgIG9iamVjdC4gYHByZXZlbnREZWZhdWx0YCBpcyBpbnZva2VkIHdoZW4gYWxsIHByb3BlcnRpZXMgb24gdGhlXG4gKiBuZXN0ZWQgb2JqZWN0IG1hdGNoIHdpdGggdGhlIHByb3BlcnRpZXMgb24gdGhlIGV2ZW50IG9iamVjdC5cbiAqXG4gKiBIZXJlIGFyZSBzb21lIGV4YW1wbGVzOlxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gYWx3YXlzIHByZXZlbnQgZGVmYXVsdFxuICogRE9NU291cmNlLnNlbGVjdCgnaW5wdXQnKS5ldmVudHMoJ2tleWRvd24nLCB7XG4gKiAgIHByZXZlbnREZWZhdWx0OiB0cnVlXG4gKiB9KVxuICpcbiAqIC8vIHByZXZlbnQgZGVmYXVsdCBvbmx5IHdoZW4gYEVOVEVSYCBpcyBwcmVzc2VkXG4gKiBET01Tb3VyY2Uuc2VsZWN0KCdpbnB1dCcpLmV2ZW50cygna2V5ZG93bicsIHtcbiAqICAgcHJldmVudERlZmF1bHQ6IGUgPT4gZS5rZXlDb2RlID09PSAxM1xuICogfSlcbiAqXG4gKiAvLyBwcmV2ZW50IGRlZnVhbHQgd2hlbiBgRU5URVJgIGlzIHByZXNzZWQgQU5EIHRhcmdldC52YWx1ZSBpcyAnSEVMTE8nXG4gKiBET01Tb3VyY2Uuc2VsZWN0KCdpbnB1dCcpLmV2ZW50cygna2V5ZG93bicsIHtcbiAqICAgcHJldmVudERlZmF1bHQ6IHsga2V5Q29kZTogMTMsIG93bmVyVGFyZ2V0OiB7IHZhbHVlOiAnSEVMTE8nIH0gfVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiAqKmBET01Tb3VyY2UuZWxlbWVudHMoKWAqKiByZXR1cm5zIGEgc3RyZWFtIG9mIGFycmF5cyBjb250YWluaW5nIHRoZSBET01cbiAqIGVsZW1lbnRzIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9ycyBpbiB0aGUgRE9NU291cmNlIChlLmcuIGZyb20gcHJldmlvdXNcbiAqIGBzZWxlY3QoeClgIGNhbGxzKS5cbiAqXG4gKiAqKmBET01Tb3VyY2UuZWxlbWVudCgpYCoqIHJldHVybnMgYSBzdHJlYW0gb2YgRE9NIGVsZW1lbnRzLiBOb3RpY2UgdGhhdCB0aGlzXG4gKiBpcyB0aGUgc2luZ3VsYXIgdmVyc2lvbiBvZiBgLmVsZW1lbnRzKClgLCBzbyB0aGUgc3RyZWFtIHdpbGwgZW1pdCBhbiBlbGVtZW50LFxuICogbm90IGFuIGFycmF5LiBJZiB0aGVyZSBpcyBubyBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgc2VsZWN0ZWQgRE9NU291cmNlLFxuICogdGhlbiB0aGUgcmV0dXJuZWQgc3RyZWFtIHdpbGwgbm90IGVtaXQgYW55dGhpbmcuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfEhUTUxFbGVtZW50KX0gY29udGFpbmVyIHRoZSBET00gc2VsZWN0b3IgZm9yIHRoZSBlbGVtZW50XG4gKiAob3IgdGhlIGVsZW1lbnQgaXRzZWxmKSB0byBjb250YWluIHRoZSByZW5kZXJpbmcgb2YgdGhlIFZUcmVlcy5cbiAqIEBwYXJhbSB7RE9NRHJpdmVyT3B0aW9uc30gb3B0aW9ucyBhbiBvYmplY3Qgd2l0aCB0d28gb3B0aW9uYWwgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gYG1vZHVsZXM6IGFycmF5YCBvdmVycmlkZXMgYEBjeWNsZS9kb21gJ3MgZGVmYXVsdCBTbmFiYmRvbSBtb2R1bGVzIGFzXG4gKiAgICAgYXMgZGVmaW5lZCBpbiBbYHNyYy9tb2R1bGVzLnRzYF0oLi9zcmMvbW9kdWxlcy50cykuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIERPTSBkcml2ZXIgZnVuY3Rpb24uIFRoZSBmdW5jdGlvbiBleHBlY3RzIGEgc3RyZWFtIG9mXG4gKiBWTm9kZSBhcyBpbnB1dCwgYW5kIG91dHB1dHMgdGhlIERPTVNvdXJjZSBvYmplY3QuXG4gKiBAZnVuY3Rpb24gbWFrZURPTURyaXZlclxuICovXG5leHBvcnQgeyBtYWtlRE9NRHJpdmVyIH0gZnJvbSAnLi9tYWtlRE9NRHJpdmVyJztcbi8qKlxuICogQSBmYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBtb2NrZWQgRE9NU291cmNlIG9iamVjdHMsIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICpcbiAqIFRha2VzIGEgYG1vY2tDb25maWdgIG9iamVjdCBhcyBhcmd1bWVudCwgYW5kIHJldHVybnNcbiAqIGEgRE9NU291cmNlIHRoYXQgY2FuIGJlIGdpdmVuIHRvIGFueSBDeWNsZS5qcyBhcHAgdGhhdCBleHBlY3RzIGEgRE9NU291cmNlIGluXG4gKiB0aGUgc291cmNlcywgZm9yIHRlc3RpbmcuXG4gKlxuICogVGhlIGBtb2NrQ29uZmlnYCBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHNwZWNpZnlpbmcgc2VsZWN0b3JzLCBldmVudFR5cGVzIGFuZFxuICogdGhlaXIgc3RyZWFtcy4gRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZG9tU291cmNlID0gbW9ja0RPTVNvdXJjZSh7XG4gKiAgICcuZm9vJzoge1xuICogICAgICdjbGljayc6IHhzLm9mKHt0YXJnZXQ6IHt9fSksXG4gKiAgICAgJ21vdXNlb3Zlcic6IHhzLm9mKHt0YXJnZXQ6IHt9fSksXG4gKiAgIH0sXG4gKiAgICcuYmFyJzoge1xuICogICAgICdzY3JvbGwnOiB4cy5vZih7dGFyZ2V0OiB7fX0pLFxuICogICAgIGVsZW1lbnRzOiB4cy5vZih7dGFnTmFtZTogJ2Rpdid9KSxcbiAqICAgfVxuICogfSk7XG4gKlxuICogLy8gVXNhZ2VcbiAqIGNvbnN0IGNsaWNrJCA9IGRvbVNvdXJjZS5zZWxlY3QoJy5mb28nKS5ldmVudHMoJ2NsaWNrJyk7XG4gKiBjb25zdCBlbGVtZW50JCA9IGRvbVNvdXJjZS5zZWxlY3QoJy5iYXInKS5lbGVtZW50cygpO1xuICogYGBgXG4gKlxuICogVGhlIG1vY2tlZCBET00gU291cmNlIHN1cHBvcnRzIGlzb2xhdGlvbi4gSXQgaGFzIHRoZSBmdW5jdGlvbnMgYGlzb2xhdGVTaW5rYFxuICogYW5kIGBpc29sYXRlU291cmNlYCBhdHRhY2hlZCB0byBpdCwgYW5kIHBlcmZvcm1zIHNpbXBsZSBpc29sYXRpb24gdXNpbmdcbiAqIGNsYXNzTmFtZXMuICppc29sYXRlU2luayogd2l0aCBzY29wZSBgZm9vYCB3aWxsIGFwcGVuZCB0aGUgY2xhc3MgYF9fX2Zvb2AgdG9cbiAqIHRoZSBzdHJlYW0gb2YgdmlydHVhbCBET00gbm9kZXMsIGFuZCAqaXNvbGF0ZVNvdXJjZSogd2l0aCBzY29wZSBgZm9vYCB3aWxsXG4gKiBwZXJmb3JtIGEgY29udmVudGlvbmFsIGBtb2NrZWRET01Tb3VyY2Uuc2VsZWN0KCcuX19mb28nKWAgY2FsbC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbW9ja0NvbmZpZyBhbiBvYmplY3Qgd2hlcmUga2V5cyBhcmUgc2VsZWN0b3Igc3RyaW5nc1xuICogYW5kIHZhbHVlcyBhcmUgb2JqZWN0cy4gVGhvc2UgbmVzdGVkIG9iamVjdHMgaGF2ZSBgZXZlbnRUeXBlYCBzdHJpbmdzIGFzIGtleXNcbiAqIGFuZCB2YWx1ZXMgYXJlIHN0cmVhbXMgeW91IGNyZWF0ZWQuXG4gKiBAcmV0dXJuIHtPYmplY3R9IGZha2UgRE9NIHNvdXJjZSBvYmplY3QsIHdpdGggYW4gQVBJIGNvbnRhaW5pbmcgYHNlbGVjdCgpYFxuICogYW5kIGBldmVudHMoKWAgYW5kIGBlbGVtZW50cygpYCB3aGljaCBjYW4gYmUgdXNlZCBqdXN0IGxpa2UgdGhlIERPTSBEcml2ZXInc1xuICogRE9NU291cmNlLlxuICpcbiAqIEBmdW5jdGlvbiBtb2NrRE9NU291cmNlXG4gKi9cbmV4cG9ydCB7IG1vY2tET01Tb3VyY2UsIE1vY2tlZERPTVNvdXJjZSB9IGZyb20gJy4vbW9ja0RPTVNvdXJjZSc7XG4vKipcbiAqIFRoZSBoeXBlcnNjcmlwdCBmdW5jdGlvbiBgaCgpYCBpcyBhIGZ1bmN0aW9uIHRvIGNyZWF0ZSB2aXJ0dWFsIERPTSBvYmplY3RzLFxuICogYWxzbyBrbm93biBhcyBWTm9kZXMuIENhbGxcbiAqXG4gKiBgYGBqc1xuICogaCgnZGl2Lm15Q2xhc3MnLCB7c3R5bGU6IHtjb2xvcjogJ3JlZCd9fSwgW10pXG4gKiBgYGBcbiAqXG4gKiB0byBjcmVhdGUgYSBWTm9kZSB0aGF0IHJlcHJlc2VudHMgYSBgRElWYCBlbGVtZW50IHdpdGggY2xhc3NOYW1lIGBteUNsYXNzYCxcbiAqIHN0eWxlZCB3aXRoIHJlZCBjb2xvciwgYW5kIG5vIGNoaWxkcmVuIGJlY2F1c2UgdGhlIGBbXWAgYXJyYXkgd2FzIHBhc3NlZC4gVGhlXG4gKiBBUEkgaXMgYGgodGFnT3JTZWxlY3Rvciwgb3B0aW9uYWxEYXRhLCBvcHRpb25hbENoaWxkcmVuT3JUZXh0KWAuXG4gKlxuICogSG93ZXZlciwgdXN1YWxseSB5b3Ugc2hvdWxkIHVzZSBcImh5cGVyc2NyaXB0IGhlbHBlcnNcIiwgd2hpY2ggYXJlIHNob3J0Y3V0XG4gKiBmdW5jdGlvbnMgYmFzZWQgb24gaHlwZXJzY3JpcHQuIFRoZXJlIGlzIG9uZSBoeXBlcnNjcmlwdCBoZWxwZXIgZnVuY3Rpb24gZm9yXG4gKiBlYWNoIERPTSB0YWdOYW1lLCBzdWNoIGFzIGBoMSgpYCwgYGgyKClgLCBgZGl2KClgLCBgc3BhbigpYCwgYGxhYmVsKClgLFxuICogYGlucHV0KClgLiBGb3IgaW5zdGFuY2UsIHRoZSBwcmV2aW91cyBleGFtcGxlIGNvdWxkIGhhdmUgYmVlbiB3cml0dGVuXG4gKiBhczpcbiAqXG4gKiBgYGBqc1xuICogZGl2KCcubXlDbGFzcycsIHtzdHlsZToge2NvbG9yOiAncmVkJ319LCBbXSlcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGFyZSBhbHNvIFNWRyBoZWxwZXIgZnVuY3Rpb25zLCB3aGljaCBhcHBseSB0aGUgYXBwcm9wcmlhdGUgU1ZHXG4gKiBuYW1lc3BhY2UgdG8gdGhlIHJlc3VsdGluZyBlbGVtZW50cy4gYHN2ZygpYCBmdW5jdGlvbiBjcmVhdGVzIHRoZSB0b3AtbW9zdFxuICogU1ZHIGVsZW1lbnQsIGFuZCBgc3ZnLmdgLCBgc3ZnLnBvbHlnb25gLCBgc3ZnLmNpcmNsZWAsIGBzdmcucGF0aGAgYXJlIGZvclxuICogU1ZHLXNwZWNpZmljIGNoaWxkIGVsZW1lbnRzLiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBzdmcoe2F0dHJzOiB7d2lkdGg6IDE1MCwgaGVpZ2h0OiAxNTB9fSwgW1xuICogICBzdmcucG9seWdvbih7XG4gKiAgICAgYXR0cnM6IHtcbiAqICAgICAgIGNsYXNzOiAndHJpYW5nbGUnLFxuICogICAgICAgcG9pbnRzOiAnMjAgMCAyMCAxNTAgMTUwIDIwJ1xuICogICAgIH1cbiAqICAgfSlcbiAqIF0pXG4gKiBgYGBcbiAqXG4gKiBAZnVuY3Rpb24gaFxuICovXG5leHBvcnQgeyBoIH0gZnJvbSAnc25hYmJkb20vaCc7XG5pbXBvcnQgaGggZnJvbSAnLi9oeXBlcnNjcmlwdC1oZWxwZXJzJztcbmV4cG9ydCB2YXIgc3ZnID0gaGguc3ZnO1xuZXhwb3J0IHZhciBhID0gaGguYTtcbmV4cG9ydCB2YXIgYWJiciA9IGhoLmFiYnI7XG5leHBvcnQgdmFyIGFkZHJlc3MgPSBoaC5hZGRyZXNzO1xuZXhwb3J0IHZhciBhcmVhID0gaGguYXJlYTtcbmV4cG9ydCB2YXIgYXJ0aWNsZSA9IGhoLmFydGljbGU7XG5leHBvcnQgdmFyIGFzaWRlID0gaGguYXNpZGU7XG5leHBvcnQgdmFyIGF1ZGlvID0gaGguYXVkaW87XG5leHBvcnQgdmFyIGIgPSBoaC5iO1xuZXhwb3J0IHZhciBiYXNlID0gaGguYmFzZTtcbmV4cG9ydCB2YXIgYmRpID0gaGguYmRpO1xuZXhwb3J0IHZhciBiZG8gPSBoaC5iZG87XG5leHBvcnQgdmFyIGJsb2NrcXVvdGUgPSBoaC5ibG9ja3F1b3RlO1xuZXhwb3J0IHZhciBib2R5ID0gaGguYm9keTtcbmV4cG9ydCB2YXIgYnIgPSBoaC5icjtcbmV4cG9ydCB2YXIgYnV0dG9uID0gaGguYnV0dG9uO1xuZXhwb3J0IHZhciBjYW52YXMgPSBoaC5jYW52YXM7XG5leHBvcnQgdmFyIGNhcHRpb24gPSBoaC5jYXB0aW9uO1xuZXhwb3J0IHZhciBjaXRlID0gaGguY2l0ZTtcbmV4cG9ydCB2YXIgY29kZSA9IGhoLmNvZGU7XG5leHBvcnQgdmFyIGNvbCA9IGhoLmNvbDtcbmV4cG9ydCB2YXIgY29sZ3JvdXAgPSBoaC5jb2xncm91cDtcbmV4cG9ydCB2YXIgZGQgPSBoaC5kZDtcbmV4cG9ydCB2YXIgZGVsID0gaGguZGVsO1xuZXhwb3J0IHZhciBkZm4gPSBoaC5kZm47XG5leHBvcnQgdmFyIGRpciA9IGhoLmRpcjtcbmV4cG9ydCB2YXIgZGl2ID0gaGguZGl2O1xuZXhwb3J0IHZhciBkbCA9IGhoLmRsO1xuZXhwb3J0IHZhciBkdCA9IGhoLmR0O1xuZXhwb3J0IHZhciBlbSA9IGhoLmVtO1xuZXhwb3J0IHZhciBlbWJlZCA9IGhoLmVtYmVkO1xuZXhwb3J0IHZhciBmaWVsZHNldCA9IGhoLmZpZWxkc2V0O1xuZXhwb3J0IHZhciBmaWdjYXB0aW9uID0gaGguZmlnY2FwdGlvbjtcbmV4cG9ydCB2YXIgZmlndXJlID0gaGguZmlndXJlO1xuZXhwb3J0IHZhciBmb290ZXIgPSBoaC5mb290ZXI7XG5leHBvcnQgdmFyIGZvcm0gPSBoaC5mb3JtO1xuZXhwb3J0IHZhciBoMSA9IGhoLmgxO1xuZXhwb3J0IHZhciBoMiA9IGhoLmgyO1xuZXhwb3J0IHZhciBoMyA9IGhoLmgzO1xuZXhwb3J0IHZhciBoNCA9IGhoLmg0O1xuZXhwb3J0IHZhciBoNSA9IGhoLmg1O1xuZXhwb3J0IHZhciBoNiA9IGhoLmg2O1xuZXhwb3J0IHZhciBoZWFkID0gaGguaGVhZDtcbmV4cG9ydCB2YXIgaGVhZGVyID0gaGguaGVhZGVyO1xuZXhwb3J0IHZhciBoZ3JvdXAgPSBoaC5oZ3JvdXA7XG5leHBvcnQgdmFyIGhyID0gaGguaHI7XG5leHBvcnQgdmFyIGh0bWwgPSBoaC5odG1sO1xuZXhwb3J0IHZhciBpID0gaGguaTtcbmV4cG9ydCB2YXIgaWZyYW1lID0gaGguaWZyYW1lO1xuZXhwb3J0IHZhciBpbWcgPSBoaC5pbWc7XG5leHBvcnQgdmFyIGlucHV0ID0gaGguaW5wdXQ7XG5leHBvcnQgdmFyIGlucyA9IGhoLmlucztcbmV4cG9ydCB2YXIga2JkID0gaGgua2JkO1xuZXhwb3J0IHZhciBrZXlnZW4gPSBoaC5rZXlnZW47XG5leHBvcnQgdmFyIGxhYmVsID0gaGgubGFiZWw7XG5leHBvcnQgdmFyIGxlZ2VuZCA9IGhoLmxlZ2VuZDtcbmV4cG9ydCB2YXIgbGkgPSBoaC5saTtcbmV4cG9ydCB2YXIgbGluayA9IGhoLmxpbms7XG5leHBvcnQgdmFyIG1haW4gPSBoaC5tYWluO1xuZXhwb3J0IHZhciBtYXAgPSBoaC5tYXA7XG5leHBvcnQgdmFyIG1hcmsgPSBoaC5tYXJrO1xuZXhwb3J0IHZhciBtZW51ID0gaGgubWVudTtcbmV4cG9ydCB2YXIgbWV0YSA9IGhoLm1ldGE7XG5leHBvcnQgdmFyIG5hdiA9IGhoLm5hdjtcbmV4cG9ydCB2YXIgbm9zY3JpcHQgPSBoaC5ub3NjcmlwdDtcbmV4cG9ydCB2YXIgb2JqZWN0ID0gaGgub2JqZWN0O1xuZXhwb3J0IHZhciBvbCA9IGhoLm9sO1xuZXhwb3J0IHZhciBvcHRncm91cCA9IGhoLm9wdGdyb3VwO1xuZXhwb3J0IHZhciBvcHRpb24gPSBoaC5vcHRpb247XG5leHBvcnQgdmFyIHAgPSBoaC5wO1xuZXhwb3J0IHZhciBwYXJhbSA9IGhoLnBhcmFtO1xuZXhwb3J0IHZhciBwcmUgPSBoaC5wcmU7XG5leHBvcnQgdmFyIHByb2dyZXNzID0gaGgucHJvZ3Jlc3M7XG5leHBvcnQgdmFyIHEgPSBoaC5xO1xuZXhwb3J0IHZhciBycCA9IGhoLnJwO1xuZXhwb3J0IHZhciBydCA9IGhoLnJ0O1xuZXhwb3J0IHZhciBydWJ5ID0gaGgucnVieTtcbmV4cG9ydCB2YXIgcyA9IGhoLnM7XG5leHBvcnQgdmFyIHNhbXAgPSBoaC5zYW1wO1xuZXhwb3J0IHZhciBzY3JpcHQgPSBoaC5zY3JpcHQ7XG5leHBvcnQgdmFyIHNlY3Rpb24gPSBoaC5zZWN0aW9uO1xuZXhwb3J0IHZhciBzZWxlY3QgPSBoaC5zZWxlY3Q7XG5leHBvcnQgdmFyIHNtYWxsID0gaGguc21hbGw7XG5leHBvcnQgdmFyIHNvdXJjZSA9IGhoLnNvdXJjZTtcbmV4cG9ydCB2YXIgc3BhbiA9IGhoLnNwYW47XG5leHBvcnQgdmFyIHN0cm9uZyA9IGhoLnN0cm9uZztcbmV4cG9ydCB2YXIgc3R5bGUgPSBoaC5zdHlsZTtcbmV4cG9ydCB2YXIgc3ViID0gaGguc3ViO1xuZXhwb3J0IHZhciBzdXAgPSBoaC5zdXA7XG5leHBvcnQgdmFyIHRhYmxlID0gaGgudGFibGU7XG5leHBvcnQgdmFyIHRib2R5ID0gaGgudGJvZHk7XG5leHBvcnQgdmFyIHRkID0gaGgudGQ7XG5leHBvcnQgdmFyIHRleHRhcmVhID0gaGgudGV4dGFyZWE7XG5leHBvcnQgdmFyIHRmb290ID0gaGgudGZvb3Q7XG5leHBvcnQgdmFyIHRoID0gaGgudGg7XG5leHBvcnQgdmFyIHRoZWFkID0gaGgudGhlYWQ7XG5leHBvcnQgdmFyIHRpdGxlID0gaGgudGl0bGU7XG5leHBvcnQgdmFyIHRyID0gaGgudHI7XG5leHBvcnQgdmFyIHUgPSBoaC51O1xuZXhwb3J0IHZhciB1bCA9IGhoLnVsO1xuZXhwb3J0IHZhciB2aWRlbyA9IGhoLnZpZGVvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IHsgYWRhcHQgfSBmcm9tICdAY3ljbGUvcnVuL2xpYi9hZGFwdCc7XG5mdW5jdGlvbiBhcnJheUVxdWFsKHJlcXVlc3ROYW1lc3BhY2UsIHNvdXJjZU5hbWVzcGFjZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlTmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChyZXF1ZXN0TmFtZXNwYWNlW2ldICE9PSBzb3VyY2VOYW1lc3BhY2VbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc29sYXRlU291cmNlKGh0dHBTb3VyY2UsIHNjb3BlKSB7XG4gICAgaWYgKHNjb3BlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBodHRwU291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gaHR0cFNvdXJjZS5maWx0ZXIoZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmVxdWVzdC5fbmFtZXNwYWNlKSAmJlxuICAgICAgICAgICAgYXJyYXlFcXVhbChyZXF1ZXN0Ll9uYW1lc3BhY2UsIGh0dHBTb3VyY2UuX25hbWVzcGFjZS5jb25jYXQoc2NvcGUpKTtcbiAgICB9LCBzY29wZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNvbGF0ZVNpbmsocmVxdWVzdCQsIHNjb3BlKSB7XG4gICAgaWYgKHNjb3BlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0JDtcbiAgICB9XG4gICAgcmV0dXJuIGFkYXB0KHhzLmZyb21PYnNlcnZhYmxlKHJlcXVlc3QkKS5tYXAoZnVuY3Rpb24gKHJlcSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVybDogcmVxLCBfbmFtZXNwYWNlOiBbc2NvcGVdIH07XG4gICAgICAgIH1cbiAgICAgICAgcmVxLl9uYW1lc3BhY2UgPSByZXEuX25hbWVzcGFjZSB8fCBbXTtcbiAgICAgICAgcmVxLl9uYW1lc3BhY2UudW5zaGlmdChzY29wZSk7XG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNvbGF0ZS5qcy5tYXAiLCJpbXBvcnQgeyBpc29sYXRlU291cmNlLCBpc29sYXRlU2luayB9IGZyb20gJy4vaXNvbGF0ZSc7XG5pbXBvcnQgeyBhZGFwdCB9IGZyb20gJ0BjeWNsZS9ydW4vbGliL2FkYXB0JztcbnZhciBNYWluSFRUUFNvdXJjZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYWluSFRUUFNvdXJjZShfcmVzJCQsIF9uYW1lLCBfbmFtZXNwYWNlKSB7XG4gICAgICAgIGlmIChfbmFtZXNwYWNlID09PSB2b2lkIDApIHsgX25hbWVzcGFjZSA9IFtdOyB9XG4gICAgICAgIHRoaXMuX3JlcyQkID0gX3JlcyQkO1xuICAgICAgICB0aGlzLl9uYW1lID0gX25hbWU7XG4gICAgICAgIHRoaXMuX25hbWVzcGFjZSA9IF9uYW1lc3BhY2U7XG4gICAgICAgIHRoaXMuaXNvbGF0ZVNvdXJjZSA9IGlzb2xhdGVTb3VyY2U7XG4gICAgICAgIHRoaXMuaXNvbGF0ZVNpbmsgPSBpc29sYXRlU2luaztcbiAgICB9XG4gICAgTWFpbkhUVFBTb3VyY2UucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIHNjb3BlKSB7XG4gICAgICAgIHZhciBmaWx0ZXJlZFJlc3BvbnNlJCQgPSB0aGlzLl9yZXMkJC5maWx0ZXIoZnVuY3Rpb24gKHIkKSB7IHJldHVybiBwcmVkaWNhdGUociQucmVxdWVzdCk7IH0pO1xuICAgICAgICByZXR1cm4gbmV3IE1haW5IVFRQU291cmNlKGZpbHRlcmVkUmVzcG9uc2UkJCwgdGhpcy5fbmFtZSwgc2NvcGUgPT09IHVuZGVmaW5lZCA/IHRoaXMuX25hbWVzcGFjZSA6IHRoaXMuX25hbWVzcGFjZS5jb25jYXQoc2NvcGUpKTtcbiAgICB9O1xuICAgIE1haW5IVFRQU291cmNlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgdmFyIHJlcyQkID0gY2F0ZWdvcnlcbiAgICAgICAgICAgID8gdGhpcy5fcmVzJCQuZmlsdGVyKGZ1bmN0aW9uIChyZXMkKSB7IHJldHVybiByZXMkLnJlcXVlc3QgJiYgcmVzJC5yZXF1ZXN0LmNhdGVnb3J5ID09PSBjYXRlZ29yeTsgfSlcbiAgICAgICAgICAgIDogdGhpcy5fcmVzJCQ7XG4gICAgICAgIHZhciBvdXQgPSBhZGFwdChyZXMkJCk7XG4gICAgICAgIG91dC5faXNDeWNsZVNvdXJjZSA9IHRoaXMuX25hbWU7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICByZXR1cm4gTWFpbkhUVFBTb3VyY2U7XG59KCkpO1xuZXhwb3J0IHsgTWFpbkhUVFBTb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1haW5IVFRQU291cmNlLmpzLm1hcCIsImltcG9ydCB4cyBmcm9tICd4c3RyZWFtJztcbmltcG9ydCB7IGFkYXB0IH0gZnJvbSAnQGN5Y2xlL3J1bi9saWIvYWRhcHQnO1xuaW1wb3J0IHsgTWFpbkhUVFBTb3VyY2UgfSBmcm9tICcuL01haW5IVFRQU291cmNlJztcbmltcG9ydCAqIGFzIHN1cGVyYWdlbnQgZnJvbSAnc3VwZXJhZ2VudCc7XG5mdW5jdGlvbiBwcmVwcm9jZXNzUmVxT3B0aW9ucyhyZXFPcHRpb25zKSB7XG4gICAgcmVxT3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPSByZXFPcHRpb25zLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcbiAgICByZXFPcHRpb25zLnJlZGlyZWN0cyA9XG4gICAgICAgIHR5cGVvZiByZXFPcHRpb25zLnJlZGlyZWN0cyA9PT0gJ251bWJlcicgPyByZXFPcHRpb25zLnJlZGlyZWN0cyA6IDU7XG4gICAgcmVxT3B0aW9ucy5tZXRob2QgPSByZXFPcHRpb25zLm1ldGhvZCB8fCBcImdldFwiO1xuICAgIHJldHVybiByZXFPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wdGlvbnNUb1N1cGVyYWdlbnQocmF3UmVxT3B0aW9ucykge1xuICAgIHZhciByZXFPcHRpb25zID0gcHJlcHJvY2Vzc1JlcU9wdGlvbnMocmF3UmVxT3B0aW9ucyk7XG4gICAgaWYgKHR5cGVvZiByZXFPcHRpb25zLnVybCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhIGB1cmxgIHByb3BlcnR5IGluIHRoZSByZXF1ZXN0IG9wdGlvbnMuXCIpO1xuICAgIH1cbiAgICB2YXIgbG93ZXJDYXNlTWV0aG9kID0gKHJlcU9wdGlvbnMubWV0aG9kIHx8ICdHRVQnKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBzYW5pdGl6ZWRNZXRob2QgPSBsb3dlckNhc2VNZXRob2QgPT09IFwiZGVsZXRlXCIgPyBcImRlbFwiIDogbG93ZXJDYXNlTWV0aG9kO1xuICAgIHZhciByZXF1ZXN0ID0gc3VwZXJhZ2VudFtzYW5pdGl6ZWRNZXRob2RdKHJlcU9wdGlvbnMudXJsKTtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3QucmVkaXJlY3RzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3QucmVkaXJlY3RzKHJlcU9wdGlvbnMucmVkaXJlY3RzKTtcbiAgICB9XG4gICAgaWYgKHJlcU9wdGlvbnMudHlwZSkge1xuICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC50eXBlKHJlcU9wdGlvbnMudHlwZSk7XG4gICAgfVxuICAgIGlmIChyZXFPcHRpb25zLnNlbmQpIHtcbiAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3Quc2VuZChyZXFPcHRpb25zLnNlbmQpO1xuICAgIH1cbiAgICBpZiAocmVxT3B0aW9ucy5hY2NlcHQpIHtcbiAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3QuYWNjZXB0KHJlcU9wdGlvbnMuYWNjZXB0KTtcbiAgICB9XG4gICAgaWYgKHJlcU9wdGlvbnMucXVlcnkpIHtcbiAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3QucXVlcnkocmVxT3B0aW9ucy5xdWVyeSk7XG4gICAgfVxuICAgIGlmIChyZXFPcHRpb25zLndpdGhDcmVkZW50aWFscykge1xuICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMoKTtcbiAgICB9XG4gICAgaWYgKHJlcU9wdGlvbnMuYWdlbnQpIHtcbiAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3Qua2V5KHJlcU9wdGlvbnMuYWdlbnQua2V5KTtcbiAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3QuY2VydChyZXFPcHRpb25zLmFnZW50LmNlcnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcU9wdGlvbnMudXNlciA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgdHlwZW9mIHJlcU9wdGlvbnMucGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LmF1dGgocmVxT3B0aW9ucy51c2VyLCByZXFPcHRpb25zLnBhc3N3b3JkKTtcbiAgICB9XG4gICAgaWYgKHJlcU9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmVxT3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAocmVxT3B0aW9ucy5oZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5zZXQoa2V5LCByZXFPcHRpb25zLmhlYWRlcnNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlcU9wdGlvbnMuZmllbGQpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHJlcU9wdGlvbnMuZmllbGQpIHtcbiAgICAgICAgICAgIGlmIChyZXFPcHRpb25zLmZpZWxkLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5maWVsZChrZXksIHJlcU9wdGlvbnMuZmllbGRba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlcU9wdGlvbnMuYXR0YWNoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSByZXFPcHRpb25zLmF0dGFjaC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGEgPSByZXFPcHRpb25zLmF0dGFjaFtpXTtcbiAgICAgICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LmF0dGFjaChhLm5hbWUsIGEucGF0aCwgYS5maWxlbmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlcU9wdGlvbnMucmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LnJlc3BvbnNlVHlwZShyZXFPcHRpb25zLnJlc3BvbnNlVHlwZSk7XG4gICAgfVxuICAgIGlmIChyZXFPcHRpb25zLm9rKSB7XG4gICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0Lm9rKHJlcU9wdGlvbnMub2spO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXNwb25zZSQocmVxSW5wdXQpIHtcbiAgICByZXR1cm4geHMuY3JlYXRlKHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0UmVzcG9uc2VTdHJlYW0obGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcU9wdGlvbnNfMSA9IG5vcm1hbGl6ZVJlcXVlc3RJbnB1dChyZXFJbnB1dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gb3B0aW9uc1RvU3VwZXJhZ2VudChyZXFPcHRpb25zXzEpO1xuICAgICAgICAgICAgICAgIGlmIChyZXFPcHRpb25zXzEucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0Lm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5yZXF1ZXN0ID0gcmVxT3B0aW9uc18xO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubmV4dChyZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyci5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyci5yZXNwb25zZS5yZXF1ZXN0ID0gcmVxT3B0aW9uc18xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5yZXF1ZXN0ID0gcmVxT3B0aW9uc18xO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubmV4dChyZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3BSZXNwb25zZVN0cmVhbSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlcXVlc3QgJiYgdGhpcy5yZXF1ZXN0LmFib3J0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBzb2Z0Tm9ybWFsaXplUmVxdWVzdElucHV0KHJlcUlucHV0KSB7XG4gICAgdmFyIHJlcU9wdGlvbnM7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVxT3B0aW9ucyA9IG5vcm1hbGl6ZVJlcXVlc3RJbnB1dChyZXFJbnB1dCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVxT3B0aW9ucyA9IHsgdXJsOiAnRXJyb3InLCBfZXJyb3I6IGVyciB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVxT3B0aW9ucztcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlcXVlc3RJbnB1dChyZXFJbnB1dCkge1xuICAgIGlmICh0eXBlb2YgcmVxSW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB7IHVybDogcmVxSW5wdXQgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlcUlucHV0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gcmVxSW5wdXQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYnNlcnZhYmxlIG9mIHJlcXVlc3RzIGdpdmVuIHRvIEhUVFAgRHJpdmVyIG11c3QgZW1pdCBcIiArXG4gICAgICAgICAgICBcImVpdGhlciBVUkwgc3RyaW5ncyBvciBvYmplY3RzIHdpdGggcGFyYW1ldGVycy5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVxdWVzdElucHV0VG9SZXNwb25zZSQocmVxSW5wdXQpIHtcbiAgICB2YXIgcmVzcG9uc2UkID0gY3JlYXRlUmVzcG9uc2UkKHJlcUlucHV0KS5yZW1lbWJlcigpO1xuICAgIHZhciByZXFPcHRpb25zID0gc29mdE5vcm1hbGl6ZVJlcXVlc3RJbnB1dChyZXFJbnB1dCk7XG4gICAgaWYgKCFyZXFPcHRpb25zLmxhenkpIHtcbiAgICAgICAgcmVzcG9uc2UkLmFkZExpc3RlbmVyKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVzcG9uc2UkID0gYWRhcHQocmVzcG9uc2UkKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcG9uc2UkLCAncmVxdWVzdCcsIHtcbiAgICAgICAgdmFsdWU6IHJlcU9wdGlvbnMsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2UkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VIVFRQRHJpdmVyKCkge1xuICAgIGZ1bmN0aW9uIGh0dHBEcml2ZXIocmVxdWVzdCQsIG5hbWUpIHtcbiAgICAgICAgdmFyIHJlc3BvbnNlJCQgPSByZXF1ZXN0JC5tYXAocmVxdWVzdElucHV0VG9SZXNwb25zZSQpO1xuICAgICAgICB2YXIgaHR0cFNvdXJjZSA9IG5ldyBNYWluSFRUUFNvdXJjZShyZXNwb25zZSQkLCBuYW1lLCBbXSk7XG4gICAgICAgIHJlc3BvbnNlJCQuYWRkTGlzdGVuZXIoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaHR0cFNvdXJjZTtcbiAgICB9XG4gICAgcmV0dXJuIGh0dHBEcml2ZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLWRyaXZlci5qcy5tYXAiLCJpbXBvcnQgbWFrZUFjY3VtdWxhdG9yIGZyb20gJ3NvcnRlZC1pbW11dGFibGUtbGlzdCc7XG52YXIgY29tcGFyYXRvciA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgIGlmIChhLnRpbWUgPCBiLnRpbWUpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoYS50aW1lID09PSBiLnRpbWUpIHtcbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugd2hlcmUgYSBjb21wbGV0ZSBhbmQgbmV4dCBldmVudCBvY2N1ciBpbiB0aGUgc2FtZSBmcmFtZSxcbiAgICAgICAgLy8gdGhlIG5leHQgYWx3YXlzIGNvbWVzIGJlZm9yZSB0aGUgY29tcGxldGVcbiAgICAgICAgaWYgKGEuc3RyZWFtID09PSBiLnN0cmVhbSkge1xuICAgICAgICAgICAgaWYgKGEudHlwZSA9PT0gJ2NvbXBsZXRlJyAmJiBiLnR5cGUgPT09ICduZXh0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGIudHlwZSA9PT0gJ2NvbXBsZXRlJyAmJiBhLnR5cGUgPT09ICduZXh0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMTtcbn07IH07XG5mdW5jdGlvbiBtYWtlU2NoZWR1bGVyKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IFtdO1xuICAgIGZ1bmN0aW9uIGdldFNjaGVkdWxlKCkge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGU7XG4gICAgfVxuICAgIHZhciBhZGRTY2hlZHVsZUVudHJ5ID0gbWFrZUFjY3VtdWxhdG9yKHtcbiAgICAgICAgY29tcGFyYXRvcjogY29tcGFyYXRvcixcbiAgICAgICAgdW5pcXVlOiBmYWxzZSxcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBzY2hlZHVsZUVudHJ5KG5ld0VudHJ5KSB7XG4gICAgICAgIHNjaGVkdWxlID0gYWRkU2NoZWR1bGVFbnRyeShzY2hlZHVsZSwgbmV3RW50cnkpO1xuICAgICAgICByZXR1cm4gbmV3RW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vb3AoKSB7IH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzaGlmdE5leHRFbnRyeTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlLnNoaWZ0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzRW1wdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZS5sZW5ndGggPT09IDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVswXTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkOiB7XG4gICAgICAgICAgICBfc2NoZWR1bGU6IGdldFNjaGVkdWxlLFxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHN0cmVhbSwgdGltZSwgdmFsdWUsIGYpIHtcbiAgICAgICAgICAgICAgICBpZiAoZiA9PT0gdm9pZCAwKSB7IGYgPSBub29wOyB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlRW50cnkoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbmV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbTogc3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGY6IGYsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChzdHJlYW0sIHRpbWUsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlRW50cnkoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBzdHJlYW06IHN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdGltZTogdGltZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoc3RyZWFtLCB0aW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlRW50cnkoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY29tcGxldGUnLFxuICAgICAgICAgICAgICAgICAgICBzdHJlYW06IHN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdGltZTogdGltZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCB7IG1ha2VTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeHMgZnJvbSAneHN0cmVhbSc7XG5pbXBvcnQgeyBhZGFwdCB9IGZyb20gJ0BjeWNsZS9ydW4vbGliL2FkYXB0JztcbmZ1bmN0aW9uIG1ha2VEZWxheUxpc3RlbmVyKHNjaGVkdWxlLCBjdXJyZW50VGltZSwgZGVsYXlUaW1lLCBsaXN0ZW5lcikge1xuICAgIHZhciBkZWxheWVkVGltZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGN1cnJlbnRUaW1lKCkgKyBkZWxheVRpbWU7IH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzY2hlZHVsZS5uZXh0KGxpc3RlbmVyLCBkZWxheWVkVGltZSgpLCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHNjaGVkdWxlLmVycm9yKGxpc3RlbmVyLCBkZWxheWVkVGltZSgpLCBlcnJvcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzY2hlZHVsZS5jb21wbGV0ZShsaXN0ZW5lciwgZGVsYXllZFRpbWUoKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1ha2VEZWxheShjcmVhdGVPcGVyYXRvcikge1xuICAgIHZhciBfYSA9IGNyZWF0ZU9wZXJhdG9yKCksIHNjaGVkdWxlID0gX2Euc2NoZWR1bGUsIGN1cnJlbnRUaW1lID0gX2EuY3VycmVudFRpbWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5KGRlbGF5VGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVsYXlPcGVyYXRvcihzdHJlYW0pIHtcbiAgICAgICAgICAgIHZhciBwcm9kdWNlciA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWxheUxpc3RlbmVyID0gbWFrZURlbGF5TGlzdGVuZXIoc2NoZWR1bGUsIGN1cnJlbnRUaW1lLCBkZWxheVRpbWUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgeHMuZnJvbU9ic2VydmFibGUoc3RyZWFtKS5hZGRMaXN0ZW5lcihkZWxheUxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gYWRhcHQoeHMuY3JlYXRlKHByb2R1Y2VyKSk7XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmV4cG9ydCB7IG1ha2VEZWxheSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXkuanMubWFwIiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IHsgYWRhcHQgfSBmcm9tICdAY3ljbGUvcnVuL2xpYi9hZGFwdCc7XG5mdW5jdGlvbiBtYWtlRGVib3VuY2VMaXN0ZW5lcihzY2hlZHVsZSwgY3VycmVudFRpbWUsIGRlYm91bmNlSW50ZXJ2YWwsIGxpc3RlbmVyLCBzdGF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHNjaGVkdWxlZEVudHJ5ID0gc3RhdGUuc2NoZWR1bGVkRW50cnk7XG4gICAgICAgICAgICB2YXIgdGltZVRvU2NoZWR1bGUgPSBjdXJyZW50VGltZSgpICsgZGVib3VuY2VJbnRlcnZhbDtcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZWRFbnRyeSkge1xuICAgICAgICAgICAgICAgIHZhciB0aW1lQWZ0ZXJQcmV2aW91cyA9IHRpbWVUb1NjaGVkdWxlIC0gc2NoZWR1bGVkRW50cnkudGltZTtcbiAgICAgICAgICAgICAgICBpZiAodGltZUFmdGVyUHJldmlvdXMgPD0gZGVib3VuY2VJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZWRFbnRyeS5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlLnNjaGVkdWxlZEVudHJ5ID0gc2NoZWR1bGUubmV4dChsaXN0ZW5lciwgdGltZVRvU2NoZWR1bGUsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lcnJvcihlKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1ha2VEZWJvdW5jZShjcmVhdGVPcGVyYXRvcikge1xuICAgIHZhciBfYSA9IGNyZWF0ZU9wZXJhdG9yKCksIHNjaGVkdWxlID0gX2Euc2NoZWR1bGUsIGN1cnJlbnRUaW1lID0gX2EuY3VycmVudFRpbWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlKGRlYm91bmNlSW50ZXJ2YWwpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlT3BlcmF0b3Ioc3RyZWFtKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB7IHNjaGVkdWxlZEVudHJ5OiBudWxsIH07XG4gICAgICAgICAgICB2YXIgZGVib3VuY2VkU3RyZWFtID0geHMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWJvdW5jZUxpc3RlbmVyID0gbWFrZURlYm91bmNlTGlzdGVuZXIoc2NoZWR1bGUsIGN1cnJlbnRUaW1lLCBkZWJvdW5jZUludGVydmFsLCBsaXN0ZW5lciwgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB4cy5mcm9tT2JzZXJ2YWJsZShzdHJlYW0pLmFkZExpc3RlbmVyKGRlYm91bmNlTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gVE9ETyAtIG1heWJlIGNhbmNlbCB0aGUgc2NoZWR1bGVkIGV2ZW50P1xuICAgICAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFkYXB0KGRlYm91bmNlZFN0cmVhbSk7XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmV4cG9ydCB7IG1ha2VEZWJvdW5jZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVib3VuY2UuanMubWFwIiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IHsgYWRhcHQgfSBmcm9tICdAY3ljbGUvcnVuL2xpYi9hZGFwdCc7XG5mdW5jdGlvbiBtYWtlUGVyaW9kaWMoY3JlYXRlT3BlcmF0b3IpIHtcbiAgICB2YXIgX2EgPSBjcmVhdGVPcGVyYXRvcigpLCBzY2hlZHVsZSA9IF9hLnNjaGVkdWxlLCBjdXJyZW50VGltZSA9IF9hLmN1cnJlbnRUaW1lO1xuICAgIHJldHVybiBmdW5jdGlvbiBwZXJpb2RpYyhwZXJpb2QpIHtcbiAgICAgICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhc3RFbWl0VGltZSA9IDA7XG4gICAgICAgIGZ1bmN0aW9uIHNjaGVkdWxlTmV4dEV2ZW50KGVudHJ5LCB0aW1lLCBfc2NoZWR1bGUsIF9jdXJyZW50VGltZSkge1xuICAgICAgICAgICAgaWYgKHN0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBlbnRyeS52YWx1ZSArIDE7XG4gICAgICAgICAgICBfc2NoZWR1bGUubmV4dChlbnRyeS5zdHJlYW0sIGxhc3RFbWl0VGltZSArIHBlcmlvZCwgdmFsdWUsIHNjaGVkdWxlTmV4dEV2ZW50KTtcbiAgICAgICAgICAgIGxhc3RFbWl0VGltZSArPSBwZXJpb2Q7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb2R1Y2VyID0ge1xuICAgICAgICAgICAgbGlzdGVuZXI6IG51bGwsXG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgcHJvZHVjZXIubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgICAgICAgICAgICB2YXIgdGltZVRvRW1pdCA9IGN1cnJlbnRUaW1lKCkgKyBwZXJpb2Q7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGUubmV4dChsaXN0ZW5lciwgdGltZVRvRW1pdCwgMCwgc2NoZWR1bGVOZXh0RXZlbnQpO1xuICAgICAgICAgICAgICAgIGxhc3RFbWl0VGltZSA9IHRpbWVUb0VtaXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHByb2R1Y2VyLmxpc3RlbmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYWRhcHQoeHMuY3JlYXRlKHByb2R1Y2VyKSk7XG4gICAgfTtcbn1cbmV4cG9ydCB7IG1ha2VQZXJpb2RpYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVyaW9kaWMuanMubWFwIiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IHsgYWRhcHQgfSBmcm9tICdAY3ljbGUvcnVuL2xpYi9hZGFwdCc7XG5mdW5jdGlvbiBtYWtlVGhyb3R0bGVMaXN0ZW5lcihzY2hlZHVsZSwgY3VycmVudFRpbWUsIHBlcmlvZCwgbGlzdGVuZXIsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbGFzdEV2ZW50VGltZSA9IHN0YXRlLmxhc3RFdmVudFRpbWU7XG4gICAgICAgICAgICB2YXIgdGltZSA9IGN1cnJlbnRUaW1lKCk7XG4gICAgICAgICAgICB2YXIgdGltZVNpbmNlTGFzdEV2ZW50ID0gdGltZSAtIGxhc3RFdmVudFRpbWU7XG4gICAgICAgICAgICB2YXIgdGhyb3R0bGVFdmVudCA9IHRpbWVTaW5jZUxhc3RFdmVudCA8PSBwZXJpb2Q7XG4gICAgICAgICAgICBpZiAodGhyb3R0bGVFdmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjaGVkdWxlLm5leHQobGlzdGVuZXIsIHRpbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHN0YXRlLmxhc3RFdmVudFRpbWUgPSB0aW1lO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5lcnJvcihlcnJvcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzY2hlZHVsZS5jb21wbGV0ZShsaXN0ZW5lciwgY3VycmVudFRpbWUoKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1ha2VUaHJvdHRsZShjcmVhdGVPcGVyYXRvcikge1xuICAgIHZhciBfYSA9IGNyZWF0ZU9wZXJhdG9yKCksIHNjaGVkdWxlID0gX2Euc2NoZWR1bGUsIGN1cnJlbnRUaW1lID0gX2EuY3VycmVudFRpbWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRocm90dGxlKHBlcmlvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGhyb3R0bGVPcGVyYXRvcihzdHJlYW0pIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHsgbGFzdEV2ZW50VGltZTogLUluZmluaXR5IH07IC8vIHNvIHRoYXQgdGhlIGZpcnN0IGV2ZW50IGlzIGFsd2F5cyBzY2hlZHVsZWRcbiAgICAgICAgICAgIHZhciB0aHJvdHRsZWRTdHJlYW0gPSB4cy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRocm90dGxlTGlzdGVuZXIgPSBtYWtlVGhyb3R0bGVMaXN0ZW5lcihzY2hlZHVsZSwgY3VycmVudFRpbWUsIHBlcmlvZCwgbGlzdGVuZXIsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgeHMuZnJvbU9ic2VydmFibGUoc3RyZWFtKS5hZGRMaXN0ZW5lcih0aHJvdHRsZUxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFkYXB0KHRocm90dGxlZFN0cmVhbSk7XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmV4cG9ydCB7IG1ha2VUaHJvdHRsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGUuanMubWFwIiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IHsgYWRhcHQgfSBmcm9tICdAY3ljbGUvcnVuL2xpYi9hZGFwdCc7XG52YXIgRVhQRUNURURfREVMVEEgPSAxMDAwIC8gNjA7XG5mdW5jdGlvbiBtYWtlQW5pbWF0aW9uRnJhbWVzKGFkZEZyYW1lQ2FsbGJhY2ssIGN1cnJlbnRUaW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGFuaW1hdGlvbkZyYW1lcygpIHtcbiAgICAgICAgdmFyIGZyYW1lID0ge1xuICAgICAgICAgICAgdGltZTogMCxcbiAgICAgICAgICAgIGRlbHRhOiAxNixcbiAgICAgICAgICAgIG5vcm1hbGl6ZWREZWx0YTogMSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGZyYW1lU3RyZWFtID0geHMuY3JlYXRlKHtcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBmcmFtZS50aW1lID0gY3VycmVudFRpbWUoKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBuZXh0RnJhbWUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFRpbWUgPSBmcmFtZS50aW1lO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZS50aW1lID0gY3VycmVudFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWUuZGVsdGEgPSBmcmFtZS50aW1lIC0gb2xkVGltZTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWUubm9ybWFsaXplZERlbHRhID0gZnJhbWUuZGVsdGEgLyBFWFBFQ1RFRF9ERUxUQTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubmV4dChmcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGFkZEZyYW1lQ2FsbGJhY2sobmV4dEZyYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkRnJhbWVDYWxsYmFjayhuZXh0RnJhbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWRhcHQoZnJhbWVTdHJlYW0pO1xuICAgIH07XG59XG5leHBvcnQgeyBtYWtlQW5pbWF0aW9uRnJhbWVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmltYXRpb24tZnJhbWVzLmpzLm1hcCIsImltcG9ydCB4cyBmcm9tICd4c3RyZWFtJztcbmltcG9ydCB7IGFkYXB0IH0gZnJvbSAnQGN5Y2xlL3J1bi9saWIvYWRhcHQnO1xuZnVuY3Rpb24gbWFrZVRocm90dGxlQW5pbWF0aW9uKHRpbWVTb3VyY2UsIHNjaGVkdWxlLCBjdXJyZW50VGltZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiB0aHJvdHRsZUFuaW1hdGlvbihzdHJlYW0pIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRpbWVTb3VyY2UoKTtcbiAgICAgICAgdmFyIHRocm90dGxlZFN0cmVhbSA9IHhzLmNyZWF0ZSh7XG4gICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGVtaXR0ZWRMYXN0VmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZSQgPSB4cy5mcm9tT2JzZXJ2YWJsZShzb3VyY2UuYW5pbWF0aW9uRnJhbWVzKCkpO1xuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25MaXN0ZW5lciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVtaXR0ZWRMYXN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5uZXh0KGxhc3RWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlZExhc3RWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4cy5mcm9tT2JzZXJ2YWJsZShzdHJlYW0pLmFkZExpc3RlbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBldmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXR0ZWRMYXN0VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZSQucmVtb3ZlTGlzdGVuZXIoYW5pbWF0aW9uTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBmcmFtZSQuYWRkTGlzdGVuZXIoYW5pbWF0aW9uTGlzdGVuZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhZGFwdCh0aHJvdHRsZWRTdHJlYW0pO1xuICAgIH07XG59XG5leHBvcnQgeyBtYWtlVGhyb3R0bGVBbmltYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlLWFuaW1hdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBtYWtlU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgbWFrZURlbGF5IH0gZnJvbSAnLi9kZWxheSc7XG5pbXBvcnQgeyBtYWtlRGVib3VuY2UgfSBmcm9tICcuL2RlYm91bmNlJztcbmltcG9ydCB7IG1ha2VQZXJpb2RpYyB9IGZyb20gJy4vcGVyaW9kaWMnO1xuaW1wb3J0IHsgbWFrZVRocm90dGxlIH0gZnJvbSAnLi90aHJvdHRsZSc7XG5pbXBvcnQgeyBtYWtlQW5pbWF0aW9uRnJhbWVzIH0gZnJvbSAnLi9hbmltYXRpb24tZnJhbWVzJztcbmltcG9ydCB7IG1ha2VUaHJvdHRsZUFuaW1hdGlvbiB9IGZyb20gJy4vdGhyb3R0bGUtYW5pbWF0aW9uJztcbmltcG9ydCB7IHJ1blZpcnR1YWxseSB9IGZyb20gJy4vcnVuLXZpcnR1YWxseSc7XG5pbXBvcnQgKiBhcyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZnJvbSAncmFmJztcbmltcG9ydCAqIGFzIG5vdyBmcm9tICdwZXJmb3JtYW5jZS1ub3cnO1xuZnVuY3Rpb24gcG9wQWxsKGFycmF5KSB7XG4gICAgdmFyIHBvcHBlZEl0ZW1zID0gW107XG4gICAgd2hpbGUgKGFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcG9wcGVkSXRlbXMucHVzaChhcnJheS5wb3AoKSk7XG4gICAgfVxuICAgIHJldHVybiBwb3BwZWRJdGVtcztcbn1cbmZ1bmN0aW9uIHJ1blJlYWx0aW1lKHNjaGVkdWxlciwgZnJhbWVDYWxsYmFja3MsIGN1cnJlbnRUaW1lLCBzZXRUaW1lKSB7XG4gICAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuICAgIHZhciBwYXVzZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIChwYXVzZWQgPSB0cnVlKTsgfTtcbiAgICB2YXIgcmVzdW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgc2V0VGltZSh0aW1lKTtcbiAgICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBwcm9jZXNzRnJhbWVDYWxsYmFja3ModGltZSkge1xuICAgICAgICBpZiAocGF1c2VkKSB7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocHJvY2Vzc0ZyYW1lQ2FsbGJhY2tzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgY3VycmVudENhbGxiYWNrcyA9IHBvcEFsbChmcmFtZUNhbGxiYWNrcyk7XG4gICAgICAgIGN1cnJlbnRDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIGNhbGxiYWNrKHRpbWUpOyB9KTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHByb2Nlc3NGcmFtZUNhbGxiYWNrcyk7XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShwcm9jZXNzRnJhbWVDYWxsYmFja3MpO1xuICAgIGZ1bmN0aW9uIHByb2Nlc3NFdmVudCgpIHtcbiAgICAgICAgaWYgKHBhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIHNldFRpbWUodGltZSk7XG4gICAgICAgIGlmIChzY2hlZHVsZXIuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHRFdmVudFRpbWUgPSBzY2hlZHVsZXIucGVlaygpLnRpbWU7XG4gICAgICAgIHdoaWxlIChuZXh0RXZlbnRUaW1lIDwgdGltZSkge1xuICAgICAgICAgICAgdmFyIGV2ZW50VG9Qcm9jZXNzID0gc2NoZWR1bGVyLnNoaWZ0TmV4dEVudHJ5KCk7XG4gICAgICAgICAgICBpZiAoIWV2ZW50VG9Qcm9jZXNzLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudFRvUHJvY2Vzcy5mKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VG9Qcm9jZXNzLmYoZXZlbnRUb1Byb2Nlc3MsIHRpbWUsIHNjaGVkdWxlci5hZGQsIGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50VG9Qcm9jZXNzLnR5cGUgPT09ICduZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBldmVudFRvUHJvY2Vzcy5zdHJlYW0uc2hhbWVmdWxseVNlbmROZXh0KGV2ZW50VG9Qcm9jZXNzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRUb1Byb2Nlc3MudHlwZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgICAgICBldmVudFRvUHJvY2Vzcy5zdHJlYW0uc2hhbWVmdWxseVNlbmRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudFRvUHJvY2Vzcy50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VG9Qcm9jZXNzLnN0cmVhbS5zaGFtZWZ1bGx5U2VuZEVycm9yKGV2ZW50VG9Qcm9jZXNzLmVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5oYW5kbGVkIGV2ZW50IHR5cGU6ICcgKyBldmVudFRvUHJvY2Vzcy50eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0RXZlbnRUaW1lID0gKHNjaGVkdWxlci5wZWVrKCkgJiYgc2NoZWR1bGVyLnBlZWsoKS50aW1lKSB8fCBJbmZpbml0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRJbnRlcnZhbChwcm9jZXNzRXZlbnQsIDEwKTtcbiAgICByZXR1cm4geyBwYXVzZTogcGF1c2UsIHJlc3VtZTogcmVzdW1lIH07XG59XG5mdW5jdGlvbiB0aW1lRHJpdmVyKHNpbmspIHtcbiAgICB2YXIgdGltZSA9IDA7XG4gICAgdmFyIGZyYW1lQ2FsbGJhY2tzID0gW107XG4gICAgdmFyIHNjaGVkdWxlciA9IG1ha2VTY2hlZHVsZXIoKTtcbiAgICBmdW5jdGlvbiBjdXJyZW50VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFRpbWUobmV3VGltZSkge1xuICAgICAgICB0aW1lID0gbmV3VGltZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkRnJhbWVDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgICBmcmFtZUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLy8gVE9ETyAtIGNhbmNlbCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgb24gZGlzcG9zZVxuICAgIHZhciBfYSA9IHJ1blJlYWx0aW1lKHNjaGVkdWxlciwgZnJhbWVDYWxsYmFja3MsIGN1cnJlbnRUaW1lLCBzZXRUaW1lKSwgcGF1c2UgPSBfYS5wYXVzZSwgcmVzdW1lID0gX2EucmVzdW1lO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4geyBzY2hlZHVsZTogc2NoZWR1bGVyLmFkZCwgY3VycmVudFRpbWU6IGN1cnJlbnRUaW1lIH07XG4gICAgfVxuICAgIHZhciB0aW1lU291cmNlID0ge1xuICAgICAgICBhbmltYXRpb25GcmFtZXM6IG1ha2VBbmltYXRpb25GcmFtZXMoYWRkRnJhbWVDYWxsYmFjaywgY3VycmVudFRpbWUpLFxuICAgICAgICBkZWxheTogbWFrZURlbGF5KGNyZWF0ZU9wZXJhdG9yKSxcbiAgICAgICAgZGVib3VuY2U6IG1ha2VEZWJvdW5jZShjcmVhdGVPcGVyYXRvciksXG4gICAgICAgIHBlcmlvZGljOiBtYWtlUGVyaW9kaWMoY3JlYXRlT3BlcmF0b3IpLFxuICAgICAgICB0aHJvdHRsZTogbWFrZVRocm90dGxlKGNyZWF0ZU9wZXJhdG9yKSxcbiAgICAgICAgdGhyb3R0bGVBbmltYXRpb246IG1ha2VUaHJvdHRsZUFuaW1hdGlvbihmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lU291cmNlOyB9LCBzY2hlZHVsZXIuYWRkLCBjdXJyZW50VGltZSksXG4gICAgICAgIF90aW1lOiBjdXJyZW50VGltZSxcbiAgICAgICAgX3NjaGVkdWxlcjogc2NoZWR1bGVyLmFkZCxcbiAgICAgICAgX3BhdXNlOiBwYXVzZSxcbiAgICAgICAgX3Jlc3VtZTogcmVzdW1lLFxuICAgICAgICBfcnVuVmlydHVhbGx5OiBmdW5jdGlvbiAoZG9uZSwgdGltZVRvUnVuVG8pIHtcbiAgICAgICAgICAgIC8vIFRPRE8gLSBmcmFtZUNhbGxiYWNrcz9cbiAgICAgICAgICAgIHJ1blZpcnR1YWxseShzY2hlZHVsZXIsIGRvbmUsIGN1cnJlbnRUaW1lLCBzZXRUaW1lLCB0aW1lVG9SdW5Ubyk7XG4gICAgICAgIH0sXG4gICAgICAgIGRpc3Bvc2U6IHBhdXNlLFxuICAgICAgICBjcmVhdGVPcGVyYXRvcjogY3JlYXRlT3BlcmF0b3IsXG4gICAgfTtcbiAgICByZXR1cm4gdGltZVNvdXJjZTtcbn1cbmV4cG9ydCB7IHRpbWVEcml2ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWUtZHJpdmVyLmpzLm1hcCIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJpbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSwgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhpc3RvcnkkKGhpc3RvcnksIHNpbmskKSB7XG4gICAgdmFyIGhpc3RvcnkkID0geHMuY3JlYXRlV2l0aE1lbW9yeSgpLnN0YXJ0V2l0aChoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB2YXIgY2FsbCA9IG1ha2VDYWxsT25IaXN0b3J5KGhpc3RvcnkpO1xuICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2MpIHtcbiAgICAgICAgaGlzdG9yeSQuX24obG9jKTtcbiAgICB9KTtcbiAgICB2YXIgc3ViID0gc2luayQuc3Vic2NyaWJlKGNyZWF0ZU9ic2VydmVyKGNhbGwsIHVubGlzdGVuKSk7XG4gICAgaGlzdG9yeSQuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgICByZXR1cm4gaGlzdG9yeSQ7XG59XG5mdW5jdGlvbiBtYWtlQ2FsbE9uSGlzdG9yeShoaXN0b3J5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNhbGwoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdwdXNoJykge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKGlucHV0LnBhdGhuYW1lLCBpbnB1dC5zdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdyZXBsYWNlJykge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKGlucHV0LnBhdGhuYW1lLCBpbnB1dC5zdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdnbycpIHtcbiAgICAgICAgICAgIGhpc3RvcnkuZ28oaW5wdXQuYW1vdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2dvQmFjaycpIHtcbiAgICAgICAgICAgIGhpc3RvcnkuZ29CYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdnb0ZvcndhcmQnKSB7XG4gICAgICAgICAgICBoaXN0b3J5LmdvRm9yd2FyZCgpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmVyKGNhbGwsIHVubGlzdGVuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNhbGwoeyB0eXBlOiAncHVzaCcsIHBhdGhuYW1lOiBpbnB1dCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGwoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQodW5saXN0ZW4pO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVIaXN0b3J5JC5qcy5tYXAiLCJpbXBvcnQgeHMgZnJvbSAneHN0cmVhbSc7XG52YXIgQ0xJQ0tfRVZFTlQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50Lm9udG91Y2hzdGFydFxuICAgID8gJ3RvdWNoc3RhcnQnXG4gICAgOiAnY2xpY2snO1xuZnVuY3Rpb24gd2hpY2goZXYpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZSA9IGV2IHx8IHdpbmRvdy5ldmVudDtcbiAgICByZXR1cm4gZS53aGljaCA9PT0gbnVsbCA/IGUuYnV0dG9uIDogZS53aGljaDtcbn1cbmZ1bmN0aW9uIHNhbWVPcmlnaW4oaHJlZikge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBocmVmICYmIGhyZWYuaW5kZXhPZih3aW5kb3cubG9jYXRpb24ub3JpZ2luKSA9PT0gMDtcbn1cbmZ1bmN0aW9uIG1ha2VDbGlja0xpc3RlbmVyKHB1c2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2xpY2tMaXN0ZW5lcihldmVudCkge1xuICAgICAgICBpZiAod2hpY2goZXZlbnQpICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUgIT09ICdBJykge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlTmFtZSAhPT0gJ0EnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkb3dubG9hZCcpIHx8XG4gICAgICAgICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZSgncmVsJykgPT09ICdleHRlcm5hbCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC50YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGluayA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIGlmICgobGluayAmJiBsaW5rLmluZGV4T2YoJ21haWx0bzonKSA+IC0xKSB8fCBsaW5rLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzYW1lT3JpZ2luKGVsZW1lbnQuaHJlZikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgcGF0aG5hbWUgPSBlbGVtZW50LnBhdGhuYW1lLCBzZWFyY2ggPSBlbGVtZW50LnNlYXJjaCwgX2EgPSBlbGVtZW50Lmhhc2gsIGhhc2ggPSBfYSA9PT0gdm9pZCAwID8gJycgOiBfYTtcbiAgICAgICAgcHVzaChwYXRobmFtZSArIHNlYXJjaCArIGhhc2gpO1xuICAgIH07XG59XG5mdW5jdGlvbiBjYXB0dXJlQW5jaG9yQ2xpY2tzKHB1c2gpIHtcbiAgICB2YXIgbGlzdGVuZXIgPSBtYWtlQ2xpY2tMaXN0ZW5lcihwdXNoKTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihDTElDS19FVkVOVCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0tfRVZFTlQsIGxpc3RlbmVyKTsgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlQ2xpY2tzKGhpc3RvcnlEcml2ZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaGlzdG9yeURyaXZlcldpdGhDbGlja0NhcHR1cmUoc2luayQpIHtcbiAgICAgICAgdmFyIGNsZWFudXA7XG4gICAgICAgIHZhciBpbnRlcm5hbFNpbmskID0geHMuY3JlYXRlKHtcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlb2YgY2xlYW51cCA9PT0gJ2Z1bmN0aW9uJyAmJiBjbGVhbnVwKCk7IH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhbnVwID0gY2FwdHVyZUFuY2hvckNsaWNrcyhmdW5jdGlvbiAocGF0aG5hbWUpIHtcbiAgICAgICAgICAgIGludGVybmFsU2luayQuX24oeyB0eXBlOiAncHVzaCcsIHBhdGhuYW1lOiBwYXRobmFtZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNpbmskLl9hZGQoaW50ZXJuYWxTaW5rJCk7XG4gICAgICAgIHJldHVybiBoaXN0b3J5RHJpdmVyKGludGVybmFsU2luayQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXB0dXJlQ2xpY2tzLmpzLm1hcCIsImltcG9ydCBfZXh0ZW5kIGZyb20gJ2V4dGVuZCc7XG5cbnZhciB1bmRlZmluZWR2ID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYgPT09IHVuZGVmaW5lZDsgfTtcblxudmFyIG51bWJlciA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiB0eXBlb2YgdiA9PT0gJ251bWJlcic7IH07XG5cbnZhciBzdHJpbmcgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnOyB9O1xuXG52YXIgdGV4dCA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdHJpbmcodikgfHwgbnVtYmVyKHYpOyB9O1xuXG52YXIgYXJyYXkgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTsgfTtcblxudmFyIG9iamVjdCA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiB0eXBlb2YgdiA9PT0gJ29iamVjdCcgJiYgdiAhPT0gbnVsbDsgfTtcblxudmFyIGZ1biA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJzsgfTtcblxudmFyIHZub2RlID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG9iamVjdCh2KSAmJiAnc2VsJyBpbiB2ICYmICdkYXRhJyBpbiB2ICYmICdjaGlsZHJlbicgaW4gdiAmJiAndGV4dCcgaW4gdjsgfTtcblxudmFyIHN2Z1Byb3BzTWFwID0geyBzdmc6IDEsIGNpcmNsZTogMSwgZWxsaXBzZTogMSwgbGluZTogMSwgcG9seWdvbjogMSxcbiAgcG9seWxpbmU6IDEsIHJlY3Q6IDEsIGc6IDEsIHBhdGg6IDEsIHRleHQ6IDEgfTtcblxudmFyIHN2ZyA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnNlbCBpbiBzdmdQcm9wc01hcDsgfTtcblxuLy8gVE9ETzogc3RvcCB1c2luZyBleHRlbmQgaGVyZVxudmFyIGV4dGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9ianMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIG9ianNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gX2V4dGVuZC5hcHBseSh2b2lkIDAsIFsgdHJ1ZSBdLmNvbmNhdCggb2JqcyApKTtcbn07XG5cbnZhciBhc3NpZ24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvYmpzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHdoaWxlICggbGVuLS0gKSBvYmpzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgcmV0dXJuIF9leHRlbmQuYXBwbHkodm9pZCAwLCBbIGZhbHNlIF0uY29uY2F0KCBvYmpzICkpO1xufTtcblxudmFyIHJlZHVjZURlZXAgPSBmdW5jdGlvbiAoYXJyLCBmbiwgaW5pdGlhbCkge1xuICB2YXIgcmVzdWx0ID0gaW5pdGlhbDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJbaV07XG4gICAgaWYgKGFycmF5KHZhbHVlKSkge1xuICAgICAgcmVzdWx0ID0gcmVkdWNlRGVlcCh2YWx1ZSwgZm4sIHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGZuKHJlc3VsdCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59O1xuXG52YXIgbWFwT2JqZWN0ID0gZnVuY3Rpb24gKG9iaiwgZm4pIHsgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKFxuICBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihrZXksIG9ialtrZXldKTsgfVxuKS5yZWR1Y2UoXG4gIGZ1bmN0aW9uIChhY2MsIGN1cnIpIHsgcmV0dXJuIGV4dGVuZChhY2MsIGN1cnIpOyB9LFxuICB7fVxuKTsgfTtcblxudmFyIGRlZXBpZnlLZXlzID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gbWFwT2JqZWN0KG9iaixcbiAgZnVuY3Rpb24gKGtleSwgdmFsKSB7XG4gICAgdmFyIGRhc2hJbmRleCA9IGtleS5pbmRleE9mKCctJyk7XG4gICAgaWYgKGRhc2hJbmRleCA+IC0xKSB7XG4gICAgICB2YXIgbW9kdWxlRGF0YSA9IHt9O1xuICAgICAgbW9kdWxlRGF0YVtrZXkuc2xpY2UoZGFzaEluZGV4ICsgMSldID0gdmFsO1xuICAgICAgcmV0dXJuICggb2JqID0ge30sIG9ialtrZXkuc2xpY2UoMCwgZGFzaEluZGV4KV0gPSBtb2R1bGVEYXRhLCBvYmogKVxuICAgICAgdmFyIG9iajtcbiAgICB9XG4gICAgcmV0dXJuICggb2JqJDEgPSB7fSwgb2JqJDFba2V5XSA9IHZhbCwgb2JqJDEgKVxuICAgIHZhciBvYmokMTtcbiAgfVxuKTsgfTtcblxudmFyIGZsYXRpZnlLZXlzID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gbWFwT2JqZWN0KG9iaixcbiAgZnVuY3Rpb24gKG1vZCwgZGF0YSkgeyByZXR1cm4gIW9iamVjdChkYXRhKSA/ICgoIG9iaiA9IHt9LCBvYmpbbW9kXSA9IGRhdGEsIG9iaiApKSA6IG1hcE9iamVjdChcbiAgICBmbGF0aWZ5S2V5cyhkYXRhKSxcbiAgICBmdW5jdGlvbiAoa2V5LCB2YWwpIHsgcmV0dXJuICgoIG9iaiA9IHt9LCBvYmpbKG1vZCArIFwiLVwiICsga2V5KV0gPSB2YWwsIG9iaiApKVxuICAgICAgdmFyIG9iajsgfVxuICApXG4gICAgdmFyIG9iajsgfVxuKTsgfTtcblxudmFyIG9taXQgPSBmdW5jdGlvbiAoa2V5LCBvYmopIHsgcmV0dXJuIG1hcE9iamVjdChvYmosXG4gIGZ1bmN0aW9uIChtb2QsIGRhdGEpIHsgcmV0dXJuIG1vZCAhPT0ga2V5ID8gKCggb2JqID0ge30sIG9ialttb2RdID0gZGF0YSwgb2JqICkpIDoge31cbiAgICB2YXIgb2JqOyB9XG4pOyB9O1xuXG4vLyBDb25zdCBmbk5hbWUgPSAoLi4ucGFyYW1zKSA9PiBndWFyZCA/IGRlZmF1bHQgOiAuLi5cblxudmFyIGNyZWF0ZVRleHRFbGVtZW50ID0gZnVuY3Rpb24gKHRleHQkJDEpIHsgcmV0dXJuICF0ZXh0KHRleHQkJDEpID8gdW5kZWZpbmVkIDoge1xuICB0ZXh0OiB0ZXh0JCQxLFxuICBzZWw6IHVuZGVmaW5lZCxcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBlbG06IHVuZGVmaW5lZCxcbiAga2V5OiB1bmRlZmluZWRcbn07IH07XG5cbnZhciBjb25zaWRlclN2ZyA9IGZ1bmN0aW9uICh2bm9kZSQkMSkgeyByZXR1cm4gIXN2Zyh2bm9kZSQkMSkgPyB2bm9kZSQkMSA6XG4gIGFzc2lnbih2bm9kZSQkMSxcbiAgICB7IGRhdGE6IG9taXQoJ3Byb3BzJywgZXh0ZW5kKHZub2RlJCQxLmRhdGEsXG4gICAgICB7IG5zOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBhdHRyczogb21pdCgnY2xhc3NOYW1lJywgZXh0ZW5kKHZub2RlJCQxLmRhdGEucHJvcHMsXG4gICAgICAgIHsgY2xhc3M6IHZub2RlJCQxLmRhdGEucHJvcHMgPyB2bm9kZSQkMS5kYXRhLnByb3BzLmNsYXNzTmFtZSA6IHVuZGVmaW5lZCB9XG4gICAgICApKSB9XG4gICAgKSkgfSxcbiAgICB7IGNoaWxkcmVuOiB1bmRlZmluZWR2KHZub2RlJCQxLmNoaWxkcmVuKSA/IHVuZGVmaW5lZCA6XG4gICAgICB2bm9kZSQkMS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBjb25zaWRlclN2ZyhjaGlsZCk7IH0pXG4gICAgfVxuICApOyB9O1xuXG52YXIgY29uc2lkZXJEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuICFkYXRhLmRhdGEgPyBkYXRhIDogbWFwT2JqZWN0KGRhdGEsIGZ1bmN0aW9uIChtb2QsIGRhdGEpIHtcbiAgICB2YXIga2V5ID0gbW9kID09PSAnZGF0YScgPyAnZGF0YXNldCcgOiBtb2Q7XG4gICAgcmV0dXJuICgoIG9iaiA9IHt9LCBvYmpba2V5XSA9IGRhdGEsIG9iaiApKVxuICAgIHZhciBvYmo7XG4gIH0pXG59O1xuXG52YXIgY29uc2lkZXJBcmlhID0gZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEuYXR0cnMgfHwgZGF0YS5hcmlhID8gb21pdCgnYXJpYScsXG4gIGFzc2lnbihkYXRhLCB7XG4gICAgYXR0cnM6IGV4dGVuZChkYXRhLmF0dHJzLCBkYXRhLmFyaWEgPyBmbGF0aWZ5S2V5cyh7IGFyaWE6IGRhdGEuYXJpYSB9KSA6IHt9KVxuICB9KVxuKSA6IGRhdGE7IH07XG5cbnZhciBjb25zaWRlclByb3BzID0gZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIG1hcE9iamVjdChkYXRhLFxuICBmdW5jdGlvbiAoa2V5LCB2YWwpIHsgcmV0dXJuIG9iamVjdCh2YWwpID8gKCBvYmogPSB7fSwgb2JqW2tleV0gPSB2YWwsIG9iaiApIDpcbiAgICB7IHByb3BzOiAoIG9iaiQxID0ge30sIG9iaiQxW2tleV0gPSB2YWwsIG9iaiQxICkgfVxuICAgIHZhciBvYmo7XG4gICAgdmFyIG9iaiQxOyB9XG4pOyB9O1xuXG52YXIgcmV3cml0ZXNNYXAgPSB7IGZvcjogMSwgcm9sZTogMSwgdGFiaW5kZXg6IDEgfTtcblxudmFyIGNvbnNpZGVyQXR0cnMgPSBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gbWFwT2JqZWN0KGRhdGEsXG4gICAgZnVuY3Rpb24gKGtleSwgZGF0YSkgeyByZXR1cm4gIShrZXkgaW4gcmV3cml0ZXNNYXApID8gKCBvYmogPSB7fSwgb2JqW2tleV0gPSBkYXRhLCBvYmogKSA6IHtcbiAgICAgIGF0dHJzOiBleHRlbmQoZGF0YS5hdHRycywgKCBvYmokMSA9IHt9LCBvYmokMVtrZXldID0gZGF0YSwgb2JqJDEgKSlcbiAgICB9XG4gICAgICB2YXIgb2JqO1xuICAgICAgdmFyIG9iaiQxOyB9XG4pOyB9O1xuXG52YXIgY29uc2lkZXJLZXkgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gJ2tleScgaW4gZGF0YSA/IG9taXQoJ2tleScsIGRhdGEpIDogZGF0YVxufTtcblxudmFyIHNhbml0aXplRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBjb25zaWRlclByb3BzKGNvbnNpZGVyQXJpYShjb25zaWRlckRhdGEoY29uc2lkZXJBdHRycyhjb25zaWRlcktleShkZWVwaWZ5S2V5cyhkYXRhKSkpKSkpOyB9O1xuXG52YXIgc2FuaXRpemVUZXh0ID0gZnVuY3Rpb24gKGNoaWxkcmVuKSB7IHJldHVybiBjaGlsZHJlbi5sZW5ndGggPiAxIHx8ICF0ZXh0KGNoaWxkcmVuWzBdKSA/IHVuZGVmaW5lZCA6IGNoaWxkcmVuWzBdOyB9O1xuXG52YXIgc2FuaXRpemVDaGlsZHJlbiA9IGZ1bmN0aW9uIChjaGlsZHJlbikgeyByZXR1cm4gcmVkdWNlRGVlcChjaGlsZHJlbiwgZnVuY3Rpb24gKGFjYywgY2hpbGQpIHtcbiAgdmFyIHZub2RlJCQxID0gdm5vZGUoY2hpbGQpID8gY2hpbGQgOiBjcmVhdGVUZXh0RWxlbWVudChjaGlsZCk7XG4gIGFjYy5wdXNoKHZub2RlJCQxKTtcbiAgcmV0dXJuIGFjY1xufVxuLCBbXSk7IH07XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHNlbCwgZGF0YSkge1xuICB2YXIgY2hpbGRyZW4gPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIHdoaWxlICggbGVuLS0gPiAwICkgY2hpbGRyZW5bIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAyIF07XG5cbiAgaWYgKGZ1bihzZWwpKSB7XG4gICAgcmV0dXJuIHNlbChkYXRhIHx8IHt9LCBjaGlsZHJlbilcbiAgfVxuICB2YXIgdGV4dCQkMSA9IHNhbml0aXplVGV4dChjaGlsZHJlbik7XG4gIHJldHVybiBjb25zaWRlclN2Zyh7XG4gICAgc2VsOiBzZWwsXG4gICAgZGF0YTogZGF0YSA/IHNhbml0aXplRGF0YShkYXRhKSA6IHt9LFxuICAgIGNoaWxkcmVuOiB0ZXh0JCQxID8gdW5kZWZpbmVkIDogc2FuaXRpemVDaGlsZHJlbihjaGlsZHJlbiksXG4gICAgdGV4dDogdGV4dCQkMSxcbiAgICBlbG06IHVuZGVmaW5lZCxcbiAgICBrZXk6IGRhdGEgPyBkYXRhLmtleSA6IHVuZGVmaW5lZFxuICB9KVxufTtcblxudmFyIGluZGV4ID0ge1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50XG59O1xuXG5leHBvcnQgeyBjcmVhdGVFbGVtZW50IH07ZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgfVxuICAgIHJldHVybiB0O1xufTtcbmZ1bmN0aW9uIHNwbGl0UGF0aChwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAubGVuZ3RoID4gMDsgfSk7XG59XG5mdW5jdGlvbiBmaWx0ZXJQYXRoKHBhdGhQYXJ0cywgbmFtZXNwYWNlKSB7XG4gICAgcmV0dXJuIHBhdGhQYXJ0cy5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHsgcmV0dXJuIG5hbWVzcGFjZS5pbmRleE9mKHBhcnQpIDwgMDsgfSkuam9pbignLycpO1xufVxudmFyIHN0YXJ0c1dpdGggPSBmdW5jdGlvbiAocGFyYW0sIHZhbHVlKSB7IHJldHVybiBwYXJhbVswXSA9PT0gdmFsdWU7IH07XG52YXIgc3RhcnRzV2l0aDIgPSBmdW5jdGlvbiAocGFyYW0sIHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgcmV0dXJuIHBhcmFtWzBdID09PSB2YWx1ZTEgJiYgcGFyYW1bMV0gPT09IHZhbHVlMjtcbn07XG5mdW5jdGlvbiBtYWtlQ3JlYXRlSHJlZihuYW1lc3BhY2UsIF9jcmVhdGVIcmVmKSB7XG4gICAgLyoqXG4gICAqIEZ1bmN0aW9uIHVzZWQgdG8gY3JlYXRlIEhSRUZzIHRoYXQgYXJlIHByb3Blcmx5IG5hbWVzcGFjZWRcbiAgICogQHR5cGVkZWYge2NyZWF0ZUhyZWZ9XG4gICAqIEBuYW1lIGNyZWF0ZUhyZWZcbiAgICogQG1ldGhvZCBjcmVhdGVIcmVmXG4gICAqIEBwYXJhbSAge3N0cmluZ30gcGF0aCAtIHRoZSBIUkVGIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgY3VycmVudFxuICAgKiBuYW1lc3BhY2VcbiAgICogQHJldHVybiB7c3RyaW5nfSBhIGZ1bGx5IHF1YWxpZmllZCBIUkVGIGNvbXBvc2VkIGZyb20gdGhlIGN1cnJlbnRcbiAgICogbmFtZXNwYWNlIGFuZCB0aGUgcGF0aCBwcm92aWRlZFxuICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnb2JqZWN0JyAmJiBsb2NhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZ1bGxQYXRoID0gXCJcIiArIG5hbWVzcGFjZS5qb2luKCcvJykgKyBsb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgICAgIHJldHVybiBzdGFydHNXaXRoKGZ1bGxQYXRoLCAnLycpIHx8IHN0YXJ0c1dpdGgyKGZ1bGxQYXRoLCAnIycsICcvJylcbiAgICAgICAgICAgICAgICA/IF9jcmVhdGVIcmVmKF9fYXNzaWduKHt9LCBsb2NhdGlvbiwgeyBwYXRobmFtZTogZnVsbFBhdGggfSkpXG4gICAgICAgICAgICAgICAgOiBfY3JlYXRlSHJlZihfX2Fzc2lnbih7fSwgbG9jYXRpb24sIHsgcGF0aG5hbWU6ICcvJyArIGZ1bGxQYXRoIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgZnVsbFBhdGggPSBcIlwiICsgbmFtZXNwYWNlLmpvaW4oJy8nKSArIGxvY2F0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0c1dpdGgoZnVsbFBhdGgsICcvJykgfHwgc3RhcnRzV2l0aDIoZnVsbFBhdGgsICcjJywgJy8nKVxuICAgICAgICAgICAgICAgID8gX2NyZWF0ZUhyZWYoe1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogZnVsbFBhdGhcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDogX2NyZWF0ZUhyZWYoe1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogJy8nICsgZnVsbFBhdGhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnQgeyBzcGxpdFBhdGgsIGZpbHRlclBhdGgsIG1ha2VDcmVhdGVIcmVmIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsImltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IGFkYXB0IH0gZnJvbSAnQGN5Y2xlL3J1bi9saWIvYWRhcHQnO1xuZnVuY3Rpb24gaXNTdHJpY3RseUluU2NvcGUobmFtZXNwYWNlLCBwYXRoKSB7XG4gICAgdmFyIHBhdGhQYXJ0cyA9IHV0aWwuc3BsaXRQYXRoKHBhdGgpO1xuICAgIHJldHVybiBuYW1lc3BhY2UuZXZlcnkoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgcmV0dXJuIHBhdGhQYXJ0c1tpXSA9PT0gdjtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldEZpbHRlcmVkUGF0aChuYW1lc3BhY2UsIHBhdGgpIHtcbiAgICB2YXIgcGF0aFBhcnRzID0gdXRpbC5zcGxpdFBhdGgocGF0aCk7XG4gICAgcmV0dXJuICcvJyArIHV0aWwuZmlsdGVyUGF0aChwYXRoUGFydHMsIG5hbWVzcGFjZSk7XG59XG52YXIgUm91dGVyU291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJvdXRlclNvdXJjZShfaGlzdG9yeSQsIF9uYW1lc3BhY2UsIF9jcmVhdGVIcmVmLCBfcm91dGVNYXRjaGVyKSB7XG4gICAgICAgIHRoaXMuX2hpc3RvcnkkID0gX2hpc3RvcnkkO1xuICAgICAgICB0aGlzLl9uYW1lc3BhY2UgPSBfbmFtZXNwYWNlO1xuICAgICAgICB0aGlzLl9jcmVhdGVIcmVmID0gX2NyZWF0ZUhyZWY7XG4gICAgICAgIHRoaXMuX3JvdXRlTWF0Y2hlciA9IF9yb3V0ZU1hdGNoZXI7XG4gICAgICAgIHRoaXMuaGlzdG9yeSQgPSBhZGFwdCh0aGlzLl9oaXN0b3J5JCk7XG4gICAgfVxuICAgIFJvdXRlclNvdXJjZS5wcm90b3R5cGUucGF0aCA9IGZ1bmN0aW9uIChwYXRobmFtZSkge1xuICAgICAgICB2YXIgc2NvcGVkTmFtZXNwYWNlID0gdGhpcy5fbmFtZXNwYWNlLmNvbmNhdCh1dGlsLnNwbGl0UGF0aChwYXRobmFtZSkpO1xuICAgICAgICB2YXIgc2NvcGVkSGlzdG9yeSQgPSB0aGlzLl9oaXN0b3J5JFxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBfcGF0aCA9IF9hLnBhdGhuYW1lO1xuICAgICAgICAgICAgcmV0dXJuIGlzU3RyaWN0bHlJblNjb3BlKHNjb3BlZE5hbWVzcGFjZSwgX3BhdGgpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlbWVtYmVyKCk7XG4gICAgICAgIHZhciBjcmVhdGVIcmVmID0gdGhpcy5fY3JlYXRlSHJlZjtcbiAgICAgICAgcmV0dXJuIG5ldyBSb3V0ZXJTb3VyY2Uoc2NvcGVkSGlzdG9yeSQsIHNjb3BlZE5hbWVzcGFjZSwgY3JlYXRlSHJlZiwgdGhpcy5fcm91dGVNYXRjaGVyKTtcbiAgICB9O1xuICAgIFJvdXRlclNvdXJjZS5wcm90b3R5cGUuZGVmaW5lID0gZnVuY3Rpb24gKHJvdXRlcywgcm91dGVNYXRjaGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLl9uYW1lc3BhY2U7XG4gICAgICAgIHZhciBfY3JlYXRlSHJlZiA9IHRoaXMuX2NyZWF0ZUhyZWY7XG4gICAgICAgIHZhciBjcmVhdGVIcmVmID0gdXRpbC5tYWtlQ3JlYXRlSHJlZihuYW1lc3BhY2UsIF9jcmVhdGVIcmVmKTtcbiAgICAgICAgdmFyIG1hdGNoJCA9IHRoaXMuX2hpc3RvcnkkXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSByb3V0ZU1hdGNoZXIgfHwgX3RoaXMuX3JvdXRlTWF0Y2hlcjtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJlZFBhdGggPSBnZXRGaWx0ZXJlZFBhdGgobmFtZXNwYWNlLCBsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICAgICAgICB2YXIgX2EgPSBtYXRjaGVyKGZpbHRlcmVkUGF0aCwgcm91dGVzKSwgcGF0aCA9IF9hLnBhdGgsIHZhbHVlID0gX2EudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4geyBwYXRoOiBwYXRoLCB2YWx1ZTogdmFsdWUsIGxvY2F0aW9uOiBsb2NhdGlvbiwgY3JlYXRlSHJlZjogY3JlYXRlSHJlZiB9O1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnJlbWVtYmVyKCk7XG4gICAgICAgIHZhciBvdXQkID0gYWRhcHQobWF0Y2gkKTtcbiAgICAgICAgb3V0JC5jcmVhdGVIcmVmID0gY3JlYXRlSHJlZjtcbiAgICAgICAgcmV0dXJuIG91dCQ7XG4gICAgfTtcbiAgICBSb3V0ZXJTb3VyY2UucHJvdG90eXBlLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICByZXR1cm4gdXRpbC5tYWtlQ3JlYXRlSHJlZih0aGlzLl9uYW1lc3BhY2UsIHRoaXMuX2NyZWF0ZUhyZWYpKHBhdGgpO1xuICAgIH07XG4gICAgcmV0dXJuIFJvdXRlclNvdXJjZTtcbn0oKSk7XG5leHBvcnQgeyBSb3V0ZXJTb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJvdXRlclNvdXJjZS5qcy5tYXAiLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB4cyBmcm9tICd4c3RyZWFtJztcbmltcG9ydCB7IGFkYXB0IH0gZnJvbSAnQGN5Y2xlL3J1bi9saWIvYWRhcHQnO1xuaW1wb3J0IHsgUm91dGVyU291cmNlIH0gZnJvbSAnLi9Sb3V0ZXJTb3VyY2UnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuLyoqXG4gKiBXcmFwcyBtYWluIHRvIHByb3ZpZGUgYW4gYWR2YW5jZWQgaW50ZXJmYWNlIG92ZXIgQGN5Y2xlL2hpc3RvcnlcbiAqIEBwdWJsaWNcbiAqIEBtZXRob2Qgcm91dGVyaWZ5XG4gKiBAcmV0dXJuIHttYWlufSBUaGUgYXVnbWVudGVkIG1haW4gZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gcm91dGVyaWZ5KG1haW4sIHJvdXRlTWF0Y2hlciwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgbWFpbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IHRvIHJvdXRlcmlmeSBtdXN0IGJlIGEgdmFsaWQgY3ljbGUgYXBwJyk7XG4gICAgfVxuICAgIHZhciBvcHRzID0gX19hc3NpZ24oeyBiYXNlbmFtZTogJy8nLCBoaXN0b3J5TmFtZTogJ2hpc3RvcnknLCByb3V0ZXJOYW1lOiAncm91dGVyJywgb21pdEhpc3Rvcnk6IHRydWUgfSwgb3B0aW9ucyk7XG4gICAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG9wdHMuYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlcykge1xuICAgICAgICB2YXIgcm91dGVyU291cmNlID0gbmV3IFJvdXRlclNvdXJjZSh4cy5mcm9tT2JzZXJ2YWJsZShzb3VyY2VzW29wdHMuaGlzdG9yeU5hbWVdKS5yZW1lbWJlcigpLCBbXSwgY3JlYXRlSHJlZiwgcm91dGVNYXRjaGVyKTtcbiAgICAgICAgdmFyIHNyY3MgPSBzb3VyY2VzO1xuICAgICAgICBpZiAob3B0cy5vbWl0SGlzdG9yeSkge1xuICAgICAgICAgICAgZGVsZXRlIHNyY3Nbb3B0cy5oaXN0b3J5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNpbmtzID0gbWFpbihfX2Fzc2lnbih7fSwgc3JjcywgKF9hID0ge30sIF9hW29wdHMucm91dGVyTmFtZV0gPSByb3V0ZXJTb3VyY2UsIF9hKSkpO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIHNpbmtzLCAoX2IgPSB7fSwgX2Jbb3B0cy5oaXN0b3J5TmFtZV0gPSBhZGFwdCh4cy5tZXJnZShzaW5rc1tvcHRzLmhpc3RvcnlOYW1lXSAmJiAhb3B0cy5vbWl0SGlzdG9yeVxuICAgICAgICAgICAgPyB4cy5mcm9tT2JzZXJ2YWJsZShzaW5rc1tvcHRzLmhpc3RvcnlOYW1lXSlcbiAgICAgICAgICAgIDogeHMubmV2ZXIoKSwgc2lua3Nbb3B0cy5yb3V0ZXJOYW1lXVxuICAgICAgICAgICAgPyB4cy5mcm9tT2JzZXJ2YWJsZShzaW5rc1tvcHRzLnJvdXRlck5hbWVdKVxuICAgICAgICAgICAgOiB4cy5uZXZlcigpKSksIF9iKSk7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgfTtcbn1cbmV4cG9ydCB7IHJvdXRlcmlmeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyaWZ5LmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc1BhdHRlcm4oY2FuZGlkYXRlKSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZS5jaGFyQXQoMCkgPT09IFwiL1wiIHx8IGNhbmRpZGF0ZSA9PT0gXCIqXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSb3V0ZURlZmluaXRpb24oY2FuZGlkYXRlKSB7XG4gICAgcmV0dXJuICFjYW5kaWRhdGUgfHwgdHlwZW9mIGNhbmRpZGF0ZSAhPT0gXCJvYmplY3RcIiA/XG4gICAgICAgIGZhbHNlIDogaXNQYXR0ZXJuKE9iamVjdC5rZXlzKGNhbmRpZGF0ZSlbMF0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlUm91dGVzKHJvdXRlcywgY2FsbGJhY2spIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJvdXRlcyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKHBhdHRlcm4gPT09IFwiKlwiKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhbGxiYWNrKHBhdHRlcm4pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc05vdE51bGwoY2FuZGlkYXRlKSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFBhdGgocGF0aCkge1xuICAgIHJldHVybiBwYXRoLnNwbGl0KFwiL1wiKS5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuICEhczsgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQYXJhbShjYW5kaWRhdGUpIHtcbiAgICByZXR1cm4gY2FuZGlkYXRlLm1hdGNoKC86XFx3Ky8pICE9PSBudWxsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RQYXJ0aWFsKHNvdXJjZVBhdGgsIHBhdHRlcm4pIHtcbiAgICB2YXIgcGF0dGVyblBhcnRzID0gc3BsaXRQYXRoKHBhdHRlcm4pO1xuICAgIHZhciBzb3VyY2VQYXJ0cyA9IHNwbGl0UGF0aChzb3VyY2VQYXRoKTtcbiAgICB2YXIgbWF0Y2hlZFBhcnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXR0ZXJuUGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbWF0Y2hlZFBhcnRzLnB1c2goc291cmNlUGFydHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlZFBhcnRzLmZpbHRlcihpc05vdE51bGwpLmpvaW4oXCIvXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVucHJlZml4ZWQoZnVsbFN0cmluZywgcHJlZml4KSB7XG4gICAgcmV0dXJuIGZ1bGxTdHJpbmcuc3BsaXQocHJlZml4KVsxXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIiwiaW1wb3J0IHsgaXNQYXR0ZXJuLCBpc1JvdXRlRGVmaW5pdGlvbiwgdHJhdmVyc2VSb3V0ZXMsIGlzTm90TnVsbCwgc3BsaXRQYXRoLCBpc1BhcmFtLCBleHRyYWN0UGFydGlhbCwgdW5wcmVmaXhlZCwgfSBmcm9tICcuL3V0aWwnO1xuZnVuY3Rpb24gc3dpdGNoUGF0aElucHV0R3VhcmQocGF0aCwgcm91dGVzKSB7XG4gICAgaWYgKCFpc1BhdHRlcm4ocGF0aCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgcGFyYW1ldGVyIHRvIHN3aXRjaFBhdGggbXVzdCBiZSBhIHJvdXRlIHBhdGguXCIpO1xuICAgIH1cbiAgICBpZiAoIWlzUm91dGVEZWZpbml0aW9uKHJvdXRlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vjb25kIHBhcmFtZXRlciB0byBzd2l0Y2hQYXRoIG11c3QgYmUgYW4gb2JqZWN0IFwiICtcbiAgICAgICAgICAgIFwiY29udGFpbmluZyByb3V0ZSBwYXR0ZXJucy5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVQYXRoKHNvdXJjZVBhdGgsIG1hdGNoZWRQYXRoKSB7XG4gICAgdmFyIHNvdXJjZVBhcnRzID0gc3BsaXRQYXRoKHNvdXJjZVBhdGgpO1xuICAgIHZhciBtYXRjaGVkUGFydHMgPSBzcGxpdFBhdGgobWF0Y2hlZFBhdGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2hlZFBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChtYXRjaGVkUGFydHNbaV0gIT09IHNvdXJjZVBhcnRzW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCIvXCIgKyBleHRyYWN0UGFydGlhbChzb3VyY2VQYXRoLCBtYXRjaGVkUGF0aCk7XG59XG5mdW5jdGlvbiBiZXR0ZXJNYXRjaChjYW5kaWRhdGUsIHJlZmVyZW5jZSkge1xuICAgIGlmICghaXNOb3ROdWxsKGNhbmRpZGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzTm90TnVsbChyZWZlcmVuY2UpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXZhbGlkYXRlUGF0aChjYW5kaWRhdGUsIHJlZmVyZW5jZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gY2FuZGlkYXRlLmxlbmd0aCA+PSByZWZlcmVuY2UubGVuZ3RoO1xufVxuZnVuY3Rpb24gbWF0Y2hlc1dpdGhQYXJhbXMoc291cmNlUGF0aCwgcGF0dGVybikge1xuICAgIHZhciBzb3VyY2VQYXJ0cyA9IHNwbGl0UGF0aChzb3VyY2VQYXRoKTtcbiAgICB2YXIgcGF0dGVyblBhcnRzID0gc3BsaXRQYXRoKHBhdHRlcm4pO1xuICAgIHZhciBwYXJhbXMgPSBwYXR0ZXJuUGFydHNcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocGFydCwgaSkgeyByZXR1cm4gaXNQYXJhbShwYXJ0KSA/IHNvdXJjZVBhcnRzW2ldIDogbnVsbDsgfSlcbiAgICAgICAgLmZpbHRlcihpc05vdE51bGwpO1xuICAgIHZhciBtYXRjaGVkID0gcGF0dGVyblBhcnRzXG4gICAgICAgIC5ldmVyeShmdW5jdGlvbiAocGFydCwgaSkgeyByZXR1cm4gaXNQYXJhbShwYXJ0KSB8fCBwYXJ0ID09PSBzb3VyY2VQYXJ0c1tpXTsgfSk7XG4gICAgcmV0dXJuIG1hdGNoZWQgPyBwYXJhbXMgOiBbXTtcbn1cbmZ1bmN0aW9uIGdldFBhcmFtRm5WYWx1ZShwYXJhbUZuLCBwYXJhbXMpIHtcbiAgICB2YXIgX3BhcmFtRm4gPSBpc1JvdXRlRGVmaW5pdGlvbihwYXJhbUZuKSA/IHBhcmFtRm5bXCIvXCJdIDogcGFyYW1GbjtcbiAgICByZXR1cm4gdHlwZW9mIF9wYXJhbUZuID09PSBcImZ1bmN0aW9uXCIgPyBfcGFyYW1Gbi5hcHBseSh2b2lkIDAsIHBhcmFtcykgOiBfcGFyYW1Gbjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlKF9hKSB7XG4gICAgdmFyIHNvdXJjZVBhdGggPSBfYS5zb3VyY2VQYXRoLCBtYXRjaGVkUGF0aCA9IF9hLm1hdGNoZWRQYXRoLCBtYXRjaGVkVmFsdWUgPSBfYS5tYXRjaGVkVmFsdWUsIHJvdXRlcyA9IF9hLnJvdXRlcztcbiAgICB2YXIgcGF0aCA9IG1hdGNoZWRQYXRoID8gdmFsaWRhdGVQYXRoKHNvdXJjZVBhdGgsIG1hdGNoZWRQYXRoKSA6IG51bGw7XG4gICAgdmFyIHZhbHVlID0gbWF0Y2hlZFZhbHVlO1xuICAgIGlmICghcGF0aCkge1xuICAgICAgICBwYXRoID0gcm91dGVzW1wiKlwiXSA/IHNvdXJjZVBhdGggOiBudWxsO1xuICAgICAgICB2YWx1ZSA9IHBhdGggPyByb3V0ZXNbXCIqXCJdIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHsgcGF0aDogcGF0aCwgdmFsdWU6IHZhbHVlIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzd2l0Y2hQYXRoKHNvdXJjZVBhdGgsIHJvdXRlcykge1xuICAgIHN3aXRjaFBhdGhJbnB1dEd1YXJkKHNvdXJjZVBhdGgsIHJvdXRlcyk7XG4gICAgdmFyIG1hdGNoZWRQYXRoID0gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFZhbHVlID0gbnVsbDtcbiAgICB0cmF2ZXJzZVJvdXRlcyhyb3V0ZXMsIGZ1bmN0aW9uIG1hdGNoUGF0dGVybihwYXR0ZXJuKSB7XG4gICAgICAgIGlmIChzb3VyY2VQYXRoLnNlYXJjaChwYXR0ZXJuKSA9PT0gMCAmJiBiZXR0ZXJNYXRjaChwYXR0ZXJuLCBtYXRjaGVkUGF0aCkpIHtcbiAgICAgICAgICAgIG1hdGNoZWRQYXRoID0gcGF0dGVybjtcbiAgICAgICAgICAgIG1hdGNoZWRWYWx1ZSA9IHJvdXRlc1twYXR0ZXJuXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyYW1zID0gbWF0Y2hlc1dpdGhQYXJhbXMoc291cmNlUGF0aCwgcGF0dGVybikuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDAgJiYgYmV0dGVyTWF0Y2goc291cmNlUGF0aCwgbWF0Y2hlZFBhdGgpKSB7XG4gICAgICAgICAgICBtYXRjaGVkUGF0aCA9IGV4dHJhY3RQYXJ0aWFsKHNvdXJjZVBhdGgsIHBhdHRlcm4pO1xuICAgICAgICAgICAgbWF0Y2hlZFZhbHVlID0gZ2V0UGFyYW1GblZhbHVlKHJvdXRlc1twYXR0ZXJuXSwgcGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSb3V0ZURlZmluaXRpb24ocm91dGVzW3BhdHRlcm5dKSAmJiBwYXJhbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlUGF0aCAhPT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBzd2l0Y2hQYXRoKHVucHJlZml4ZWQoc291cmNlUGF0aCwgcGF0dGVybikgfHwgXCIvXCIsIHJvdXRlc1twYXR0ZXJuXSk7XG4gICAgICAgICAgICAgICAgdmFyIG5lc3RlZFBhdGggPSBwYXR0ZXJuICsgY2hpbGQucGF0aDtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQucGF0aCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICBiZXR0ZXJNYXRjaChuZXN0ZWRQYXRoLCBtYXRjaGVkUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFBhdGggPSBuZXN0ZWRQYXRoO1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkVmFsdWUgPSBjaGlsZC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsaWRhdGUoeyBzb3VyY2VQYXRoOiBzb3VyY2VQYXRoLCBtYXRjaGVkUGF0aDogbWF0Y2hlZFBhdGgsIG1hdGNoZWRWYWx1ZTogbWF0Y2hlZFZhbHVlLCByb3V0ZXM6IHJvdXRlcyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB4cyBmcm9tICd4c3RyZWFtJztcbmltcG9ydCBTbmFiYmRvbSBmcm9tICdzbmFiYmRvbS1wcmFnbWEnO1xuXG5pbXBvcnQgY3NzIGZyb20gJy4vSG9tZVBhZ2UuY3NzJ1xuaW1wb3J0IHsgUmVzdWx0c0NvbnRhaW5lciB9IGZyb20gJy4vUmVzdWx0c0NvbnRhaW5lci5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIb21lUGFnZShzb3VyY2VzKSB7XG4gIGNvbnN0IHNlYXJjaFJlc3VsdEl0ZW1DbGljayQgPVxuICAgIHNvdXJjZXMuRE9NXG4gICAgICAuc2VsZWN0KCcucmVzdWx0LWl0ZW0nKVxuICAgICAgLmV2ZW50cygnY2xpY2snKTtcblxuICBjb25zdCBjbGVhclNlYXJjaENsaWNrJCA9XG4gICAgc291cmNlcy5ET01cbiAgICAgIC5zZWxlY3QoJy5zZWFyY2gtcGhyYXNlIC51ay1pY29uJylcbiAgICAgIC5ldmVudHMoJ2NsaWNrJylcblxuICBjb25zdCBzZWFyY2hQaHJhc2VJbnB1dCQgPVxuICAgIHNvdXJjZXMuRE9NXG4gICAgICAuc2VsZWN0KCcuc2VhcmNoLXBocmFzZS1pbnB1dCcpXG4gICAgICAuZXZlbnRzKCdpbnB1dCcpXG5cbiAgY29uc3Qgc2VhcmNoUGhyYXNlJCA9XG4gICAgeHMubWVyZ2Uoc2VhcmNoUGhyYXNlSW5wdXQkLCBjbGVhclNlYXJjaENsaWNrJClcbiAgICAgIC5tYXAoZXYgPT5cbiAgICAgICAgZXYgaW5zdGFuY2VvZiBJbnB1dEV2ZW50XG4gICAgICAgICAgPyBldi50YXJnZXQudmFsdWVcbiAgICAgICAgICA6ICcnXG4gICAgICApXG4gICAgICAuY29tcG9zZShzb3VyY2VzLlRpbWUuZGVib3VuY2UoMzAwKSlcbiAgICAgIC5zdGFydFdpdGgoJycpO1xuXG4gIGNvbnN0IGRpc2NvdmVyeU1vZGVQcmVkaWNhdGUgPVxuICAgIHBocmFzZSA9PiBwaHJhc2UubGVuZ3RoID09PSAwO1xuXG4gIGNvbnN0IGRpc2NvdmVyeVJlcXVlc3QkID1cbiAgICB4cy5vZih7XG4gICAgICB1cmw6IHNvdXJjZXMuU3ZjVXJsKGAvbW92aWUvcG9wdWxhcj9sYW5ndWFnZT1lbi1VUyZwYWdlPTFgKSxcbiAgICAgIGNhdGVnb3J5OiAnZGlzY292ZXJ5JyxcbiAgICAgIGlzUmVxdWVzdDogdHJ1ZSAvLyBkdWNrIHR5cGluZyA6KFxuICAgIH0pXG5cbiAgY29uc3QgZGlzY292ZXJ5UmVzcG9uc2UkID1cbiAgICBzb3VyY2VzLkhUVFBcbiAgICAgIC5zZWxlY3QoJ2Rpc2NvdmVyeScpXG4gICAgICAubWFwKHJlc3AkID0+XG4gICAgICAgIHJlc3AkLnJlcGxhY2VFcnJvcihlcnIgPT4geHMub2YoZXJyKSlcbiAgICAgIClcbiAgICAgIC5mbGF0dGVuKClcbiAgICAgIC5tYXAocmVzcCA9PiByZXNwIGluc3RhbmNlb2YgRXJyb3IgPyByZXNwIDogSlNPTi5wYXJzZShyZXNwLnRleHQpKVxuICAgICAgLnN0YXJ0V2l0aCgnJylcblxuICBjb25zdCBzZWFyY2hSZXF1ZXN0JCA9XG4gICAgc2VhcmNoUGhyYXNlJFxuICAgICAgLmZpbHRlcihzZWFyY2hQaHJhc2UgPT4gIWRpc2NvdmVyeU1vZGVQcmVkaWNhdGUoc2VhcmNoUGhyYXNlKSlcbiAgICAgIC5tYXAoc2VhcmNoUGhyYXNlID0+ICh7XG4gICAgICAgIHVybDogc291cmNlcy5TdmNVcmwoYC9zZWFyY2gvbW92aWU/cXVlcnk9JHtzZWFyY2hQaHJhc2V9YCksXG4gICAgICAgIGNhdGVnb3J5OiAnc2VhcmNoJyxcbiAgICAgICAgaXNSZXF1ZXN0OiB0cnVlIC8vIGR1Y2sgdHlwaW5nIDooXG4gICAgICB9KSlcblxuICBjb25zdCBzZWFyY2hSZXNwb25zZSQgPVxuICAgIHNvdXJjZXMuSFRUUFxuICAgICAgLnNlbGVjdCgnc2VhcmNoJylcbiAgICAgIC5tYXAocmVzcCQgPT5cbiAgICAgICAgcmVzcCQucmVwbGFjZUVycm9yKGVyciA9PiB4cy5vZihlcnIpKVxuICAgICAgKVxuICAgICAgLmZsYXR0ZW4oKVxuICAgICAgLm1hcChyZXNwID0+XG4gICAgICAgIHJlc3AgaW5zdGFuY2VvZiBFcnJvclxuICAgICAgICAgID8gcmVzcFxuICAgICAgICAgIDogSlNPTi5wYXJzZShyZXNwLnRleHQpXG4gICAgICApXG4gICAgICAuc3RhcnRXaXRoKCcnKVxuXG4gIGNvbnN0IGNvbnRlbnQkID1cbiAgICB4cy5jb21iaW5lKHNlYXJjaFBocmFzZSQsIHNlYXJjaFJlc3BvbnNlJCwgZGlzY292ZXJ5UmVzcG9uc2UkKVxuICAgICAgLm1hcCgoW3NlYXJjaFBocmFzZSwgc2VhcmNoUmVzcG9uc2UsIGRpc2NvdmVyeVJlc3BvbnNlXSkgPT5cbiAgICAgICAgZGlzY292ZXJ5TW9kZVByZWRpY2F0ZShzZWFyY2hQaHJhc2UpXG4gICAgICAgICAgPyBkaXNjb3ZlcnlSZXNwb25zZVxuICAgICAgICAgIDogc2VhcmNoUmVzcG9uc2VcbiAgICAgIClcbiAgICAgIC5zdGFydFdpdGgoJycpO1xuXG4gIGNvbnN0IG1vdmllVGl0bGUkID1cbiAgICB4cy5jb21iaW5lKGNvbnRlbnQkLCBzZWFyY2hSZXN1bHRJdGVtQ2xpY2skKVxuICAgICAgLm1hcCgoW2NvbnRlbnQsIHNlYXJjaFJlc3VsdEl0ZW1DbGlja10pID0+IHtcbiAgICAgICAgY29uc3QgY2xpY2tlZEl0ZW0gPSBjb250ZW50LnJlc3VsdHMgJiYgY29udGVudC5yZXN1bHRzLmZpbmQoXG4gICAgICAgICAgaXRlbSA9PiBpdGVtLmlkID09IHNlYXJjaFJlc3VsdEl0ZW1DbGljay50YXJnZXQuZGF0YXNldC5pZFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBjbGlja2VkSXRlbSA/IGNsaWNrZWRJdGVtLnRpdGxlIDogJyc7XG4gICAgICB9KVxuXG4gIGNvbnN0IGlzTG9hZGluZyQgPVxuICAgIHhzLm1lcmdlKHNlYXJjaFJlcXVlc3QkLCBzZWFyY2hSZXNwb25zZSQpXG4gICAgICAubWFwKHIgPT4gciAmJiByLmlzUmVxdWVzdClcbiAgICAgIC5zdGFydFdpdGgoZmFsc2UpO1xuXG4gIGNvbnN0IGlzRXJyb3IkID1cbiAgICB4cy5tZXJnZShzZWFyY2hSZXF1ZXN0JCwgc2VhcmNoUmVzcG9uc2UkKVxuICAgICAgLm1hcChyID0+IHIgaW5zdGFuY2VvZiBFcnJvcilcbiAgICAgIC5zdGFydFdpdGgoZmFsc2UpO1xuXG4gIGNvbnN0IHZkb20kID1cbiAgICB4cy5jb21iaW5lKHNlYXJjaFBocmFzZSQsIGNvbnRlbnQkLCBpc0xvYWRpbmckLCBpc0Vycm9yJClcbiAgICAgIC5tYXAoKFtzZWFyY2hQaHJhc2UsIGNvbnRlbnQsIGlzTG9hZGluZywgaXNFcnJvcl0pID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgxPlRNRGIgVUkg4oCTIEhvbWU8L2gxPlxuICAgICAgICAgICAgPGxlZ2VuZCBjbGFzc05hbWU9XCJ1ay1sZWdlbmRcIj5TZWFyY2ggZm9yIGEgVGl0bGU6PC9sZWdlbmQ+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoLXBocmFzZSB1ay1pbmxpbmUgdWstbWFyZ2luLWJvdHRvbVwiPlxuICAgICAgICAgICAgICB7c2VhcmNoUGhyYXNlICYmXG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInVrLWZvcm0taWNvbiB1ay1mb3JtLWljb24tZmxpcFwiIGF0dHJzPXt7ICd1ay1pY29uJzogJ2ljb246IGNsb3NlJyB9fT48L2E+fVxuICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPXsnc2VhcmNoLXBocmFzZS1pbnB1dCB1ay1pbnB1dCd9IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3NlYXJjaFBocmFzZX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidWstaGVhZGluZy1idWxsZXQgdWstbWFyZ2luLXJlbW92ZS10b3BcIj5cbiAgICAgICAgICAgICAge2Rpc2NvdmVyeU1vZGVQcmVkaWNhdGUoc2VhcmNoUGhyYXNlKSA/ICdQb3B1bGFyIE5vdycgOiAnU2VhcmNoIFJlc3VsdHMnfVxuICAgICAgICAgICAgPC9oMz5cblxuICAgICAgICAgICAge1Jlc3VsdHNDb250YWluZXIoaXNMb2FkaW5nLCBpc0Vycm9yLCBjb250ZW50LnJlc3VsdHMpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfSk7XG5cblxuICByZXR1cm4ge1xuICAgIERPTTpcbiAgICAgIHZkb20kLFxuXG4gICAgSFRUUDpcbiAgICAgIHhzLm1lcmdlKHNlYXJjaFJlcXVlc3QkLCBkaXNjb3ZlcnlSZXF1ZXN0JCksXG5cbiAgICByb3V0ZXI6XG4gICAgICBzZWFyY2hSZXN1bHRJdGVtQ2xpY2skXG4gICAgICAgIC5tYXAoZXZlbnQgPT4gYC9tb3ZpZS8ke2V2ZW50LnRhcmdldC5jbG9zZXN0KCdbZGF0YS1pZF0nKS5kYXRhc2V0LmlkfWApLFxuXG4gICAgLy8gU2VlIHRoZSBjb21tZW50IGluIG1haW4uanNcbiAgICBtb3ZpZVRpdGxlJFxuICB9O1xufVxuIiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IFNuYWJiZG9tIGZyb20gJ3NuYWJiZG9tLXByYWdtYSc7XG5cbmltcG9ydCBjc3MgZnJvbSAnLi9SZXN1bHRzQ29udGFpbmVyLmNzcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXN1bHRzQ29udGFpbmVyKGlzTG9hZGluZywgaXNFcnJvciwgcmVzdWx0cykge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicmVzdWx0cy1jb250YWluZXJcIj5cbiAgICAgIDxkaXY+e2lzTG9hZGluZyA/ICdMb2FkaW5nLi4uJyA6ICcnfTwvZGl2PlxuICAgICAgPGRpdj57aXNFcnJvciA/ICdOZXR3b3JrIGVycm9yJyA6ICcnfTwvZGl2PlxuXG4gICAgICA8dWwgY2xhc3NOYW1lPVwidWstdGh1bWJuYXZcIj5cbiAgICAgIHt0eXBlb2YgcmVzdWx0cyA9PT0gJ29iamVjdCcgJiYgIWlzTG9hZGluZyAmJiAhaXNFcnJvciAmJiByZXN1bHRzLm1hcChyZXN1bHQgPT4ge1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcmVzdWx0LmJhY2tkcm9wX3BhdGggJiZcbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwidWstbWFyZ2luLWJvdHRvbVwiPlxuICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwicmVzdWx0LWl0ZW1cIiBocmVmPVwiI1wiIGF0dHJzPXt7b25jbGljazogJ3JldHVybiBmYWxzZScgfX0gZGF0YS1pZD17cmVzdWx0LmlkfT5cblxuICAgICAgICAgICAgICB7LyogSSBzaG91bGQgYXNzZW1ibGUgdGhlIFVSTCBhY2NvcmRpbmcgdG9cbiAgICAgICAgICAgICAgICBodHRwczovL2RldmVsb3BlcnMudGhlbW92aWVkYi5vcmcvMy9jb25maWd1cmF0aW9uL2dldC1hcGktY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICAqL31cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXN1bHQtaXRlbS10aHVtYm5haWwtaG9sZGVyXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e2BodHRwOi8vaW1hZ2UudG1kYi5vcmcvdC9wL3czMDAke3Jlc3VsdC5iYWNrZHJvcF9wYXRofWB9IGFsdD1cIlwiIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlc3VsdC1pdGVtLWNhcHRpb24gdWstdGV4dC1zbWFsbCB1ay10ZXh0LW11dGVkXCI+e3Jlc3VsdC50aXRsZX08L2Rpdj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IHhzIGZyb20gJ3hzdHJlYW0nO1xuaW1wb3J0IFNuYWJiZG9tIGZyb20gJ3NuYWJiZG9tLXByYWdtYSc7XG5cbmltcG9ydCBjc3MgZnJvbSAnLi9Nb3ZpZURldGFpbHNQYWdlLmNzcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBNb3ZpZURldGFpbHNQYWdlKHNvdXJjZXMpIHtcbiAgY29uc3QgbW92aWVJZCQgPSBzb3VyY2VzLnByb3BzJFxuICAgIC5tYXAocHJvcHMgPT4gcHJvcHMubW92aWVJZCQpXG4gICAgLmZsYXR0ZW4oKTtcblxuICBjb25zdCBtb3ZpZVRpdGxlJCA9IHNvdXJjZXMucHJvcHMkXG4gICAgLm1hcChwcm9wcyA9PiBwcm9wcy5tb3ZpZVRpdGxlJClcbiAgICAuZmxhdHRlbigpXG4gICAgLnN0YXJ0V2l0aCgnJylcblxuICBjb25zdCBkZXRhaWxzUmVxdWVzdCQgPVxuICAgIG1vdmllSWQkLm1hcChpZCA9PiAoe1xuICAgICAgdXJsOiBzb3VyY2VzLlN2Y1VybChgL21vdmllLyR7aWR9YCksXG4gICAgICBjYXRlZ29yeTogJ2RldGFpbHMnLFxuICAgICAgaXNSZXF1ZXN0OiB0cnVlIC8vIGR1Y2sgdHlwaW5nIDooXG4gICAgfSkpXG4gICAgLy8gU2FkbHkgd2UgbmVlZCB0aGlzIHdvcmthcm91bmQgdG8gbWFrZSBsb2FkaW5nIHdvcmsgd2hlbiBsYW5kaW5nIG9uIHRoZSBtb3ZpZSBwYWdlLlxuICAgIC5jb21wb3NlKHNvdXJjZXMuVGltZS5kZWxheSgxMDApKTtcblxuICBjb25zdCBkZXRhaWxzUmVzcG9uc2UkID1cbiAgICBzb3VyY2VzLkhUVFBcbiAgICAgIC5zZWxlY3QoJ2RldGFpbHMnKVxuICAgICAgLm1hcChyZXNwJCA9PlxuICAgICAgICByZXNwJC5yZXBsYWNlRXJyb3IoZXJyID0+IHhzLm9mKGVycikpXG4gICAgICApXG4gICAgICAuZmxhdHRlbigpXG4gICAgICAubWFwKHJlc3AgPT5cbiAgICAgICAgcmVzcCBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgICAgPyByZXNwXG4gICAgICAgICAgOiBKU09OLnBhcnNlKHJlc3AudGV4dClcbiAgICAgICk7XG5cbiAgY29uc3QgY3JlZGl0c1JlcXVlc3QkID1cbiAgICAvLyBXZSBzaG91bGQgZGVyaXZlIGl0IGZyb20gbW92aWVJZCQsIGJ1dCB0aGVuIHRoZSByZXF1ZXN0IGRvbid0IGdvIG91dC4uLlxuICAgIC8vIEl0IG1pZ2h0IGJlIGEgYnVnIGluIHhzdHJlYW0uXG4gICAgZGV0YWlsc1JlcXVlc3QkXG4gICAgICAubWFwKGRldGFpbHNSZXF1ZXN0ID0+ICh7XG4gICAgICAgIC8vIDooXG4gICAgICAgIC8vIHVybDogc291cmNlcy5TdmNVcmwoYC9tb3ZpZS8ke2lkfS9jcmVkaXRzYCksXG4gICAgICAgIHVybDogZGV0YWlsc1JlcXVlc3QudXJsLnJlcGxhY2UoJz8nLCAnL2NyZWRpdHM/JyksXG4gICAgICAgIGNhdGVnb3J5OiAnY3JlZGl0cycsXG4gICAgICAgIGlzUmVxdWVzdDogdHJ1ZSAvLyBkdWNrIHR5cGluZyA6KFxuICAgICAgfSkpXG5cbiAgY29uc3QgY3JlZGl0c1Jlc3BvbnNlJCA9XG4gICAgc291cmNlcy5IVFRQXG4gICAgICAuc2VsZWN0KCdjcmVkaXRzJylcbiAgICAgIC5tYXAocmVzcCQgPT5cbiAgICAgICAgcmVzcCQucmVwbGFjZUVycm9yKGVyciA9PiB4cy5vZihlcnIpKVxuICAgICAgKVxuICAgICAgLmZsYXR0ZW4oKVxuICAgICAgLm1hcChyZXNwID0+XG4gICAgICAgIHJlc3AgaW5zdGFuY2VvZiBFcnJvclxuICAgICAgICAgID8gcmVzcFxuICAgICAgICAgIDogSlNPTi5wYXJzZShyZXNwLnRleHQpXG4gICAgICApO1xuXG4gIGNvbnN0IGNvbnRlbnQkID1cbiAgICB4cy5jb21iaW5lKGRldGFpbHNSZXNwb25zZSQsIGNyZWRpdHNSZXNwb25zZSQpXG4gICAgICAuc3RhcnRXaXRoKCcnKTtcblxuICBjb25zdCBpc0xvYWRpbmckID1cbiAgICB4cy5tZXJnZShkZXRhaWxzUmVxdWVzdCQsIGRldGFpbHNSZXNwb25zZSQpXG4gICAgICAubWFwKHIgPT4gQm9vbGVhbihyICYmIHIuaXNSZXF1ZXN0KSlcbiAgICAgIC5zdGFydFdpdGgoZmFsc2UpO1xuXG4gIGNvbnN0IGlzRXJyb3IkID1cbiAgICB4cy5tZXJnZShkZXRhaWxzUmVxdWVzdCQsIGRldGFpbHNSZXNwb25zZSQpXG4gICAgICAubWFwKHIgPT4gciBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgLnN0YXJ0V2l0aChmYWxzZSk7XG5cbiAgY29uc3QgTW92aWVEZXRhaWxzID0gKGRldGFpbHMsIGNhc3QpID0+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJtb3ZpZS1kZXRhaWxzXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vdmllLWRldGFpbHMtaW1nLWNvbnRhaW5lciB1ay1tYXJnaW4tcmlnaHRcIiBzdHlsZT1cImZsb2F0OiBsZWZ0XCI+XG4gICAgICAgIDxpbWcgc3JjPXtgaHR0cDovL2ltYWdlLnRtZGIub3JnL3QvcC93MzQyJHtkZXRhaWxzLnBvc3Rlcl9wYXRofWB9IGFsdD1cIlwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkbCBjbGFzc05hbWU9XCJ1ay1kZXNjcmlwdGlvbi1saXN0XCI+XG4gICAgICAgIDxkdD5Qb3B1bGFyaXR5PC9kdD5cbiAgICAgICAgPGRkPntkZXRhaWxzLnZvdGVfYXZlcmFnZX08L2RkPlxuICAgICAgICA8ZHQ+T3ZlcnZpZXc8L2R0PlxuICAgICAgICA8ZGQ+e2RldGFpbHMub3ZlcnZpZXd9PC9kZD5cbiAgICAgICAgPGR0PkdlbnJlczwvZHQ+XG4gICAgICAgIDxkZD57ZGV0YWlscy5nZW5yZXMubWFwKGcgPT4gZy5uYW1lKS5qb2luKCcsICcpfTwvZGQ+XG4gICAgICAgIDxkdD5TdGFycmluZzwvZHQ+XG4gICAgICAgIDxkZD57Y2FzdC5jYXN0LnNsaWNlKDAsIDMpLm1hcChjYXN0ID0+IGNhc3QubmFtZSkuam9pbignLCAnKX08L2RkPlxuICAgICAgICA8ZHQ+TGFuZ3VhZ2VzPC9kdD5cbiAgICAgICAgPGRkPntkZXRhaWxzLnNwb2tlbl9sYW5ndWFnZXMubWFwKGcgPT4gZy5uYW1lKS5qb2luKCcsICcpfTwvZGQ+XG4gICAgICAgIDxkdD5PcmlnaW5hbCBUaXRsZTwvZHQ+XG4gICAgICAgIDxkZD57ZGV0YWlscy5vcmlnaW5hbF90aXRsZX08L2RkPlxuICAgICAgICA8ZHQ+UmVsZWFzZSBEYXRlPC9kdD5cbiAgICAgICAgPGRkPntkZXRhaWxzLnJlbGVhc2VfZGF0ZX08L2RkPlxuICAgICAgICB7ZGV0YWlscy5pbWRiX2lkICYmIDxkdD5JTURiIFVSTDwvZHQ+fVxuICAgICAgICB7ZGV0YWlscy5pbWRiX2lkICYmIDxkZD48YSBocmVmPXtgaHR0cHM6Ly93d3cuaW1kYi5jb20vdGl0bGUvJHtkZXRhaWxzLmltZGJfaWR9L2B9PlxuICAgICAgICAgICAge2BodHRwczovL3d3dy5pbWRiLmNvbS90aXRsZS8ke2RldGFpbHMuaW1kYl9pZH0vYH08L2E+PC9kZD59XG4gICAgICA8L2RsPlxuICAgIDwvZGl2PjtcblxuICBjb25zdCB2ZG9tJCA9XG4gICAgeHMuY29tYmluZShtb3ZpZVRpdGxlJCwgY29udGVudCQsIGlzTG9hZGluZyQsIGlzRXJyb3IkKVxuICAgICAgLm1hcCgoW21vdmllVGl0bGUsIFtkZXRhaWxzLCBjYXN0XSwgaXNMb2FkaW5nLCBpc0Vycm9yXSkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8aDE+e21vdmllVGl0bGUgfHwgZGV0YWlscyAmJiBkZXRhaWxzLnRpdGxlfTwvaDE+XG4gICAgICAgICAgICA8ZGl2Pntpc0xvYWRpbmcgPyAnTG9hZGluZy4uLicgOiAnJ308L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+e2lzRXJyb3IgPyAnTmV0d29yayBlcnJvcicgOiAnJ308L2Rpdj5cbiAgICAgICAgICAgIHsgZGV0YWlscyAmJiAhaXNMb2FkaW5nICYmICFpc0Vycm9yICYmIE1vdmllRGV0YWlscyhkZXRhaWxzLCBjYXN0KSB9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICByZXR1cm4ge1xuICAgIERPTTpcbiAgICAgIHZkb20kLFxuXG4gICAgSFRUUDpcbiAgICAgIHhzLm1lcmdlKFxuICAgICAgICBkZXRhaWxzUmVxdWVzdCQsXG4gICAgICAgIGNyZWRpdHNSZXF1ZXN0JFxuICAgICAgKVxuICB9O1xufVxuIiwiLy8gQ29yZSBjeWNsZS5qcyBsaWJzXG5pbXBvcnQgeHMgZnJvbSAneHN0cmVhbSc7XG5pbXBvcnQgeyBydW4gfSBmcm9tICdAY3ljbGUvcnVuJztcblxuLy8gU2lkZS1lZmZlY3QgZHJpdmVyc1xuaW1wb3J0IHsgbWFrZURPTURyaXZlciB9IGZyb20gJ0BjeWNsZS9kb20nO1xuaW1wb3J0IHsgbWFrZUhUVFBEcml2ZXIgfSBmcm9tICdAY3ljbGUvaHR0cCc7XG5pbXBvcnQgeyB0aW1lRHJpdmVyIH0gZnJvbSAnQGN5Y2xlL3RpbWUnO1xuaW1wb3J0IHsgbWFrZUhpc3RvcnlEcml2ZXIgfSBmcm9tICdAY3ljbGUvaGlzdG9yeSc7XG5cbi8vIEpTWFxuaW1wb3J0IFNuYWJiZG9tIGZyb20gJ3NuYWJiZG9tLXByYWdtYSc7XG5cbi8vIFJvdXRlclxuaW1wb3J0IHsgcm91dGVyaWZ5IH0gZnJvbSAnY3ljbGljLXJvdXRlcic7XG5pbXBvcnQgc3dpdGNoUGF0aCBmcm9tICdzd2l0Y2gtcGF0aCc7XG5cbi8vIFBvbHlmaWxsXG5pbXBvcnQgZnJvbUVudHJpZXMgZnJvbSAnb2JqZWN0LmZyb21lbnRyaWVzJztcblxuLy8gQ3VzdG9tIENTU1xuaW1wb3J0IGNzcyBmcm9tICcuL21haW4uY3NzJztcblxuLy8gTWFpbiB2aWV3c1xuaW1wb3J0IHsgSG9tZVBhZ2UgfSBmcm9tICcuL3ZpZXcvaG9tZS9Ib21lUGFnZS5qcyc7XG5pbXBvcnQgeyBNb3ZpZURldGFpbHNQYWdlIH0gZnJvbSAnLi92aWV3L2RldGFpbHMvTW92aWVEZXRhaWxzUGFnZS5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWluKHNvdXJjZXMpIHtcbiAgY29uc3QgaG9tZVBhZ2VDbGljayQgPSBzb3VyY2VzLkRPTVxuICAgIC5zZWxlY3QoJy5ob21lLCAudmlldy1jb250YWluZXJbZGF0YS1hY3RpdmUtcGFnZT1cIml0ZW1cIl0gPiAudmlld1tkYXRhLXBhZ2U9XCJob21lXCJdJylcbiAgICAuZXZlbnRzKCdjbGljaycpO1xuXG4gIGNvbnN0IHZpZXdFbnRyaWVzID0gW3tcbiAgICBwYXRoOiAnLycsXG4gICAga2V5OiAnaG9tZSdcbiAgfSwge1xuICAgIHBhdGg6ICcvbW92aWUvOmlkJyxcbiAgICBrZXk6ICdpdGVtJ1xuICB9XTtcblxuICBjb25zdCByb3V0ZXJEZWZFbnRyaWVzID0gdmlld0VudHJpZXNcbiAgICAubWFwKCh7IHBhdGgsIGtleSB9KSA9PiBbXG4gICAgICBwYXRoLFxuICAgICAgLy8gc3dpdGNoUGF0aCBnZW5lcmF0ZXMgZGlmZmVyZW50IG91dHB1dHMgZm9yIHBhcmFtZXRyaXplZCByb3V0ZXMsIHNvXG4gICAgICAvLyB3ZSBlcXVhbGl6ZSBoZXJlIC0gYSBiaXQgaGFja3lcbiAgICAgIC9cXC86XFx3Ky8udGVzdChwYXRoKVxuICAgICAgICA/ICguLi5hcmdzKSA9PiAoeyBrZXksIGFyZ3MgfSlcbiAgICAgICAgOiB7IGtleSwgYXJnczogW10gfVxuICAgIF0pO1xuXG4gIGNvbnN0IHJvdXRlck1hdGNoJCA9XG4gICAgc291cmNlcy5yb3V0ZXIuZGVmaW5lKGZyb21FbnRyaWVzKHJvdXRlckRlZkVudHJpZXMpKTtcblxuICBjb25zdCBwYWdlS2V5JCA9IHJvdXRlck1hdGNoJFxuICAgIC5tYXAobWF0Y2ggPT4gbWF0Y2gudmFsdWUua2V5KTtcblxuICBjb25zdCBtb3ZpZUlkJCA9IHJvdXRlck1hdGNoJFxuICAgIC5tYXAoYWN0aXZlUGFnZSA9PiBhY3RpdmVQYWdlLnZhbHVlLmFyZ3NbMF0pXG4gICAgLmZpbHRlcihpZCA9PiBpZCk7XG5cbiAgY29uc3QgaG9tZVBhZ2VTaW5rcyA9IEhvbWVQYWdlKHNvdXJjZXMpO1xuICBjb25zdCBtb3ZpZVBhZ2VTaW5rcyA9IE1vdmllRGV0YWlsc1BhZ2Uoe1xuICAgICAuLi5zb3VyY2VzLFxuICAgICBwcm9wcyQ6IHhzLm9mKHtcbiAgICAgICBtb3ZpZUlkJCxcbiAgICAgICAvLyBJdCBpcyB1c2VkIG9ubHkgdG8gYXZvaWQgbG9hZCBmbGlja2VyaW5nIG9uIHRoZSBNb3ZpZSBwYWdlLlxuICAgICAgIC8vIG1vdmllVGl0bGUkIGlzIGRlZmluZWQgYXMgYSBzaW5rIGZvciB0aGUgc2FrZSBvZiBzaW1wbGljaXR5LFxuICAgICAgIC8vIGFuZCBjb21wbHlpbmcgd2l0aCB0aGUgcmVxdWlyZW1lbnQgdG8gbm90IHVzZSBhbnkgc3RhdGUgbGliLlxuICAgICAgIG1vdmllVGl0bGUkOiBob21lUGFnZVNpbmtzLm1vdmllVGl0bGUkXG4gICAgIH0pXG4gIH0pO1xuXG4gIGNvbnN0IG1haW5UZW1wbGF0ZSA9ICh2aWV3c1ZEb21zLCBhY3RpdmVQYWdlTmFtZSkgPT5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFwcCB1ay1saWdodCB1ay1iYWNrZ3JvdW5kLXNlY29uZGFyeVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cInVrLWJyZWFkY3J1bWIgdWstcGFkZGluZy1zbWFsbFwiPlxuICAgICAgICAgIHthY3RpdmVQYWdlTmFtZSAhPT0gJ2hvbWUnXG4gICAgICAgICAgICA/IDxsaT48YSBjbGFzc05hbWU9XCJob21lXCI+QmFjazwvYT48L2xpPlxuICAgICAgICAgICAgOiA8bGk+Jm5ic3A7PC9saT5cbiAgICAgICAgICB9XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlldy1jb250YWluZXJcIiBkYXRhLWFjdGl2ZVBhZ2U9e2FjdGl2ZVBhZ2VOYW1lfT5cbiAgICAgICAge3ZpZXdzVkRvbXMubWFwKHZkb20gPT4gdmRvbSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj47XG5cbiAgY29uc3Qgdmlld1RlbXBsYXRlID0gKG5hbWUsIHZkb20sIGlzQWN0aXZlKSA9PlxuICAgIDxkaXYgY2xhc3NOYW1lPVwidmlldyB1ay1tYXJnaW4tdG9wLXNtYWxsIHVrLW1hcmdpbi1sZWZ0IHVrLW1hcmdpbi1yaWdodFwiXG4gICAgICBkYXRhLXBhZ2U9e25hbWV9IGRhdGEtYWN0aXZlPXtpc0FjdGl2ZX1cbiAgICA+XG4gICAgICB7dmRvbX1cbiAgICA8L2Rpdj47XG5cbiAgLy8gQ29tYmluZSBhbGwgdGhlIHZpZXdzIHRvIGFsbG93IHRyYW5zaXRpb25cbiAgY29uc3QgY29tYmluZWRWZG9tJCA9XG4gICAgeHMuY29tYmluZShob21lUGFnZVNpbmtzLkRPTSwgbW92aWVQYWdlU2lua3MuRE9NLCBwYWdlS2V5JClcbiAgICAgIC5tYXAoKFtob21lUGFnZVZkb20sIG1vdmllUGFnZVZkb20sIHBhZ2VLZXldKSA9PlxuICAgICAgICBtYWluVGVtcGxhdGUoXG4gICAgICAgICAgW1xuICAgICAgICAgICAgdmlld1RlbXBsYXRlKCdob21lJywgaG9tZVBhZ2VWZG9tLCBwYWdlS2V5ID09PSAnaG9tZScpLFxuICAgICAgICAgICAgdmlld1RlbXBsYXRlKCdpdGVtJywgbW92aWVQYWdlVmRvbSwgcGFnZUtleSA9PT0gJ2l0ZW0nKVxuICAgICAgICAgIF0sXG4gICAgICAgICAgcGFnZUtleVxuICAgICAgICApXG4gICAgICApXG5cbiAgY29uc3QgaHR0cFNpbmskID1cbiAgICB4cy5tZXJnZShcbiAgICAgIGhvbWVQYWdlU2lua3MuSFRUUCxcbiAgICAgIG1vdmllUGFnZVNpbmtzLkhUVFBcbiAgICApO1xuXG4gIGNvbnN0IHJvdXRlclNpbmskID1cbiAgICB4cy5tZXJnZShcbiAgICAgIGhvbWVQYWdlQ2xpY2skXG4gICAgICAgIC5tYXBUbygnLycpLFxuICAgICAgaG9tZVBhZ2VTaW5rcy5yb3V0ZXJcbiAgICApO1xuXG4gIHJldHVybiB7XG4gICAgRE9NOlxuICAgICAgY29tYmluZWRWZG9tJCxcblxuICAgIEhUVFA6XG4gICAgICBodHRwU2luayQsXG5cbiAgICByb3V0ZXI6XG4gICAgICByb3V0ZXJTaW5rJFxuICB9O1xufVxuXG5jb25zdCBtYWluV2l0aFJvdXRpbmcgPVxuICByb3V0ZXJpZnkobWFpbiwgc3dpdGNoUGF0aCk7XG5cbmNvbnN0IGRyaXZlcnMgPSB7XG4gIERPTTogbWFrZURPTURyaXZlcignI2FwcCcpLFxuICBoaXN0b3J5OiBtYWtlSGlzdG9yeURyaXZlcigpLFxuICBIVFRQOiBtYWtlSFRUUERyaXZlcigpLFxuICBUaW1lOiB0aW1lRHJpdmVyLFxuICBTdmNVcmw6ICgpID0+IChyZWxhdGl2ZVVybCkgPT5cbiAgICByZWxhdGl2ZVVybFxuICAgICAgLnJlcGxhY2UoL14vLCAnaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMycpXG4gICAgICAucmVwbGFjZSgvKFxcP3wkKS8sICc/YXBpX2tleT1iZjZiODYwYWIwNWFjMmQ5NDA1NGJhOWNhOTZjZjFmYSYnKSxcbn07XG5cbnJ1bihtYWluV2l0aFJvdXRpbmcsIGRyaXZlcnMpO1xuIiwiaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHsgY3JlYXRlSGlzdG9yeSQgfSBmcm9tICcuL2NyZWF0ZUhpc3RvcnkkJztcbmZ1bmN0aW9uIGlzSGlzdG9yeSh4KSB7XG4gICAgcmV0dXJuICEheC5jcmVhdGVIcmVmO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VIaXN0b3J5RHJpdmVyKG9wdGlvbnMpIHtcbiAgICB2YXIgaGlzdG9yeTtcbiAgICBpZiAob3B0aW9ucyAmJiBpc0hpc3Rvcnkob3B0aW9ucykpIHtcbiAgICAgICAgaGlzdG9yeSA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBoaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBoaXN0b3J5RHJpdmVyKHNpbmskKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVIaXN0b3J5JChoaXN0b3J5LCBzaW5rJCk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlU2VydmVySGlzdG9yeURyaXZlcihvcHRpb25zKSB7XG4gICAgdmFyIGhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiBzZXJ2ZXJIaXN0b3J5RHJpdmVyKHNpbmskKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVIaXN0b3J5JChoaXN0b3J5LCBzaW5rJCk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSGFzaEhpc3RvcnlEcml2ZXIob3B0aW9ucykge1xuICAgIHZhciBoaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhhc2hIaXN0b3J5RHJpdmVyKHNpbmskKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVIaXN0b3J5JChoaXN0b3J5LCBzaW5rJCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRyaXZlcnMuanMubWFwIiwiaW1wb3J0IHsgdGltZURyaXZlciBhcyB0aW1lRHJpdmVyVW50eXBlZCB9IGZyb20gJy4vc3JjL3RpbWUtZHJpdmVyJztcbmltcG9ydCB7IG1vY2tUaW1lU291cmNlIGFzIG1vY2tUaW1lU291cmNlVW50eXBlZCB9IGZyb20gJy4vc3JjL21vY2stdGltZS1zb3VyY2UnO1xuZnVuY3Rpb24gbW9ja1RpbWVTb3VyY2UoYXJncykge1xuICAgIHJldHVybiBtb2NrVGltZVNvdXJjZVVudHlwZWQoYXJncyk7XG59XG5mdW5jdGlvbiB0aW1lRHJpdmVyKHNpbmspIHtcbiAgICByZXR1cm4gdGltZURyaXZlclVudHlwZWQoc2luayk7XG59XG5leHBvcnQgeyB0aW1lRHJpdmVyLCBtb2NrVGltZVNvdXJjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==